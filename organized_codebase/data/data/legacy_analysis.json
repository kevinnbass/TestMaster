{
  "archive\\legacy_scripts\\accelerated_converter.py": {
    "file_path": "archive\\legacy_scripts\\accelerated_converter.py",
    "file_hash": "aa939a6b8325bed8e2ed8ca1bdf4ac84",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules() -> List[Path]",
        "docstring": "Get all modules without intelligent tests.",
        "line_number": 36,
        "is_public": true,
        "parameters": [],
        "return_type": "List[Path]",
        "calls": [
          "set",
          "replace",
          "exists",
          "str",
          "Path",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 9
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path: Path) -> Tuple[str, str]",
        "docstring": "Generate test for a module.",
        "line_number": 60,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": "Tuple[str, str]",
        "calls": [
          "open",
          "write",
          "split",
          "parse",
          "replace",
          "exists",
          "GenerativeModel",
          "Path",
          "generate_content",
          "len",
          "str",
          "relative_to",
          "mkdir",
          "GenerationConfig",
          "rsplit",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "convert_module_with_delay",
        "signature": "def convert_module_with_delay(module_path: Path, delay: int = 2) -> dict",
        "docstring": "Convert a single module with rate limiting.",
        "line_number": 149,
        "is_public": true,
        "parameters": [
          "module_path",
          "delay"
        ],
        "return_type": "dict",
        "calls": [
          "generate_test",
          "sleep",
          "str"
        ],
        "complexity": 2
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main accelerated conversion.",
        "line_number": 166,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "convert_module_with_delay",
          "open",
          "print",
          "now",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "append",
          "Path",
          "enumerate",
          "list",
          "isoformat"
        ],
        "complexity": 8
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os', 'typing'}",
    "dependencies": "{'os', 'google', 'datetime', 'pathlib', 'sys', 'json', 'ast', 'time', 'concurrent', 'typing'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 256,
    "complexity": 31
  },
  "archive\\legacy_scripts\\achieve_100_percent.py": {
    "file_path": "archive\\legacy_scripts\\achieve_100_percent.py",
    "file_hash": "c4357a30f1a802187d7345be4c3e73ee",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main entry point.",
        "line_number": 235,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "CoverageMaximizer",
          "print",
          "measure_coverage",
          "fix_all_tests",
          "achieve_100_percent"
        ],
        "complexity": 3
      }
    ],
    "classes": [
      {
        "name": "CoverageMaximizer",
        "line_number": 21,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 24,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "ValueError",
              "Client",
              "getenv",
              "Path",
              "mkdir"
            ],
            "complexity": 2
          },
          {
            "name": "get_uncovered_lines",
            "signature": "def get_uncovered_lines(self) -> Dict[str, List[int]]",
            "docstring": "Get uncovered lines from coverage report.",
            "line_number": 33,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, List[int]]",
            "calls": [
              "items",
              "open",
              "print",
              "exists",
              "Path",
              "run",
              "get",
              "load"
            ],
            "complexity": 5
          },
          {
            "name": "generate_targeted_test",
            "signature": "def generate_targeted_test(self, module_path: str, missing_lines: List[int]) -> str",
            "docstring": "Generate test specifically for uncovered lines.",
            "line_number": 63,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "missing_lines"
            ],
            "return_type": "str",
            "calls": [
              "max",
              "min",
              "chr",
              "split",
              "print",
              "exists",
              "generate_content",
              "Path",
              "len",
              "GenerateContentConfig",
              "strip",
              "str",
              "append",
              "join",
              "splitlines",
              "range",
              "read_text"
            ],
            "complexity": 8
          },
          {
            "name": "measure_coverage",
            "signature": "def measure_coverage(self) -> float",
            "docstring": "Measure current coverage percentage.",
            "line_number": 127,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "float",
            "calls": [
              "open",
              "exists",
              "Path",
              "run",
              "get",
              "load"
            ],
            "complexity": 2
          },
          {
            "name": "achieve_100_percent",
            "signature": "def achieve_100_percent(self, max_iterations: int = 10)",
            "docstring": "Keep generating tests until 100% coverage is achieved.",
            "line_number": 146,
            "is_public": true,
            "parameters": [
              "self",
              "max_iterations"
            ],
            "return_type": null,
            "calls": [
              "items",
              "generate_targeted_test",
              "print",
              "get_uncovered_lines",
              "Path",
              "len",
              "sorted",
              "measure_coverage",
              "range",
              "write_text",
              "count"
            ],
            "complexity": 7
          },
          {
            "name": "fix_all_tests",
            "signature": "def fix_all_tests(self)",
            "docstring": "Fix any failing tests to ensure they all pass.",
            "line_number": 207,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "split",
              "print",
              "len",
              "run",
              "append"
            ],
            "complexity": 4
          }
        ],
        "bases": [],
        "docstring": "Maximize test coverage to 100%."
      }
    ],
    "imports": "{'dotenv', 'google', 'pathlib', 'sys', 'json', 'google.genai', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'dotenv', 'google', 'pathlib', 'sys', 'json', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 262,
    "complexity": 3
  },
  "archive\\legacy_scripts\\achieve_100_percent_coverage.py": {
    "file_path": "archive\\legacy_scripts\\achieve_100_percent_coverage.py",
    "file_hash": "7d06a127268997caaf8cdc2dcaa3b6c9",
    "functions": [
      {
        "name": "load_env",
        "signature": "def load_env()",
        "docstring": "Load environment variables from .env file.",
        "line_number": 22,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "split",
          "exists",
          "Path",
          "startswith",
          "strip"
        ],
        "complexity": 6
      }
    ],
    "classes": [
      {
        "name": "ModuleCoverage",
        "line_number": 45,
        "methods": [],
        "bases": [],
        "docstring": "Coverage data for a module."
      },
      {
        "name": "TestPlan",
        "line_number": 54,
        "methods": [],
        "bases": [],
        "docstring": "Test plan for achieving 100% coverage."
      },
      {
        "name": "Gemini25ProTestGenerator",
        "line_number": 61,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, api_key: Optional[str] = None)",
            "docstring": "Initialize with Gemini 2.5 Pro ONLY.",
            "line_number": 64,
            "is_public": false,
            "parameters": [
              "self",
              "api_key"
            ],
            "return_type": null,
            "calls": [
              "Client",
              "getenv",
              "Path",
              "print"
            ],
            "complexity": 4
          },
          {
            "name": "get_current_coverage",
            "signature": "def get_current_coverage(self) -> Dict[str, ModuleCoverage]",
            "docstring": "Get detailed coverage for all modules.",
            "line_number": 78,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, ModuleCoverage]",
            "calls": [
              "items",
              "open",
              "set",
              "print",
              "exists",
              "Path",
              "len",
              "run",
              "get",
              "load",
              "ModuleCoverage"
            ],
            "complexity": 4
          },
          {
            "name": "create_test_plans",
            "signature": "def create_test_plans(self, coverage_data: Dict[str, ModuleCoverage]) -> List[TestPlan]",
            "docstring": "Create prioritized test plans for all uncovered code.",
            "line_number": 116,
            "is_public": true,
            "parameters": [
              "self",
              "coverage_data"
            ],
            "return_type": "List[TestPlan]",
            "calls": [
              "items",
              "sort",
              "len",
              "append",
              "TestPlan"
            ],
            "complexity": 7
          },
          {
            "name": "extract_code",
            "signature": "def extract_code(self, response: str) -> str",
            "docstring": "Extract Python code from Gemini response.",
            "line_number": 211,
            "is_public": true,
            "parameters": [
              "self",
              "response"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "split",
              "any",
              "append",
              "join"
            ],
            "complexity": 7
          },
          {
            "name": "generate_fallback_test",
            "signature": "def generate_fallback_test(self, plan: TestPlan) -> str",
            "docstring": "Generate test without Gemini API.",
            "line_number": 235,
            "is_public": true,
            "parameters": [
              "self",
              "plan"
            ],
            "return_type": "str",
            "calls": [
              "list",
              "sorted",
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "measure_final_coverage",
            "signature": "def measure_final_coverage(self)",
            "docstring": "Measure coverage after test generation.",
            "line_number": 358,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "split",
              "print",
              "rstrip",
              "float",
              "len",
              "run"
            ],
            "complexity": 6
          }
        ],
        "bases": [],
        "docstring": "ONLY uses Gemini 2.5 Pro for test generation."
      }
    ],
    "imports": "{'pathlib', 'sys', 'json', 'ast', 'time', 'asyncio', 'dataclasses', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'pathlib', 'sys', 'json', 'ast', 'time', 'asyncio', 'dataclasses', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 439,
    "complexity": 6
  },
  "archive\\legacy_scripts\\ai_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\ai_test_generator.py",
    "file_hash": "b5050fb58e28fb3fed138673198cf4ca",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Generate AI-powered tests for 100% coverage.",
        "line_number": 473,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "measure_coverage_improvement",
          "print",
          "Path",
          "len",
          "AITestGenerator",
          "get",
          "write_tests",
          "generate_tests_for_uncovered_files"
        ],
        "complexity": 3
      }
    ],
    "classes": [
      {
        "name": "AITestGenerator",
        "line_number": 23,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, api_key: Optional[str] = None)",
            "docstring": "Initialize with Anthropic Claude API.",
            "line_number": 26,
            "is_public": false,
            "parameters": [
              "self",
              "api_key"
            ],
            "return_type": null,
            "calls": [
              "Anthropic",
              "getenv",
              "print"
            ],
            "complexity": 3
          },
          {
            "name": "analyze_module",
            "signature": "def analyze_module(self, module_path: Path) -> Dict[str, Any]",
            "docstring": "Analyze a module to understand its complete functionality.",
            "line_number": 37,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "isinstance",
              "exists",
              "FileNotFoundError",
              "str",
              "len",
              "any",
              "append",
              "parse",
              "walk",
              "_get_ai_analysis",
              "read_text",
              "unparse"
            ],
            "complexity": 17
          },
          {
            "name": "_get_ai_analysis",
            "signature": "def _get_ai_analysis(self, content: str, module_name: str) -> str",
            "docstring": "Get AI analysis of module purpose.",
            "line_number": 128,
            "is_public": false,
            "parameters": [
              "self",
              "content",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "create"
            ],
            "complexity": 3
          },
          {
            "name": "generate_comprehensive_test",
            "signature": "def generate_comprehensive_test(self, module_path: Path, analysis: Dict[str, Any]) -> str",
            "docstring": "Generate comprehensive test achieving 100% coverage.",
            "line_number": 147,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "_generate_error_handler_tests",
              "_generate_branch_tests",
              "_generate_edge_case_tests",
              "replace",
              "title",
              "with_suffix",
              "str",
              "Path",
              "relative_to",
              "get",
              "_generate_function_test",
              "_generate_class_tests"
            ],
            "complexity": 7
          },
          {
            "name": "_generate_class_tests",
            "signature": "def _generate_class_tests(self, cls_info: Dict, module_name: str) -> str",
            "docstring": "Generate tests for a class.",
            "line_number": 217,
            "is_public": false,
            "parameters": [
              "self",
              "cls_info",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "get",
              "len",
              "startswith"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_function_test",
            "signature": "def _generate_function_test(self, func_info: Dict, is_async: bool) -> str",
            "docstring": "Generate test for a function.",
            "line_number": 281,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "is_async"
            ],
            "return_type": "str",
            "calls": [
              "get",
              "join",
              "len",
              "startswith"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_error_handler_tests",
            "signature": "def _generate_error_handler_tests(self, handlers: List[Dict]) -> str",
            "docstring": "Generate tests for error handlers.",
            "line_number": 326,
            "is_public": false,
            "parameters": [
              "self",
              "handlers"
            ],
            "return_type": "str",
            "calls": [
              "enumerate"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_branch_tests",
            "signature": "def _generate_branch_tests(self, branches: List[Dict]) -> str",
            "docstring": "Generate tests for branch coverage.",
            "line_number": 345,
            "is_public": false,
            "parameters": [
              "self",
              "branches"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_generate_edge_case_tests",
            "signature": "def _generate_edge_case_tests(self, analysis: Dict) -> str",
            "docstring": "Generate edge case tests.",
            "line_number": 373,
            "is_public": false,
            "parameters": [
              "self",
              "analysis"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "generate_tests_for_uncovered_files",
            "signature": "def generate_tests_for_uncovered_files(self, source_dir: Path) -> Dict[Path, str]",
            "docstring": "Generate tests for all files with low coverage.",
            "line_number": 408,
            "is_public": true,
            "parameters": [
              "self",
              "source_dir"
            ],
            "return_type": "Dict[Path, str]",
            "calls": [
              "print",
              "str",
              "analyze_module",
              "Path",
              "generate_comprehensive_test",
              "rglob",
              "count"
            ],
            "complexity": 5
          },
          {
            "name": "write_tests",
            "signature": "def write_tests(self, tests: Dict[Path, str]) -> int",
            "docstring": "Write generated tests to files.",
            "line_number": 437,
            "is_public": true,
            "parameters": [
              "self",
              "tests"
            ],
            "return_type": "int",
            "calls": [
              "items",
              "mkdir",
              "write_text",
              "print"
            ],
            "complexity": 2
          },
          {
            "name": "measure_coverage_improvement",
            "signature": "def measure_coverage_improvement(self, test_dir: Path) -> Dict[str, Any]",
            "docstring": "Measure coverage after adding new tests.",
            "line_number": 449,
            "is_public": true,
            "parameters": [
              "self",
              "test_dir"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "open",
              "print",
              "exists",
              "str",
              "Path",
              "len",
              "run",
              "get",
              "load"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Generate comprehensive tests using AI to achieve 100% coverage."
      }
    ],
    "imports": "{'anthropic', 'pathlib', 'sys', 'json', 'ast', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'anthropic', 'pathlib', 'sys', 'json', 'ast', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 511,
    "complexity": 3
  },
  "archive\\legacy_scripts\\automated_test_generation.py": {
    "file_path": "archive\\legacy_scripts\\automated_test_generation.py",
    "file_hash": "fbecdfd57d813395c757f5d0a228b70e",
    "functions": [],
    "classes": [
      {
        "name": "TestCase",
        "line_number": 20,
        "methods": [],
        "bases": [],
        "docstring": "Represents a generated test case."
      },
      {
        "name": "TestSuite",
        "line_number": 32,
        "methods": [],
        "bases": [],
        "docstring": "Collection of test cases for a module."
      },
      {
        "name": "AutomatedTestGenerator",
        "line_number": 41,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, src_dir: Path = Path('src'))",
            "docstring": null,
            "line_number": 46,
            "is_public": false,
            "parameters": [
              "self",
              "src_dir"
            ],
            "return_type": null,
            "calls": [
              "_create_type_generators",
              "_load_test_templates",
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "_load_test_templates",
            "signature": "def _load_test_templates(self) -> Dict[str, str]",
            "docstring": "Load test templates for different scenarios.",
            "line_number": 52,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, str]",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_create_type_generators",
            "signature": "def _create_type_generators(self) -> Dict[str, Any]",
            "docstring": "Create generators for different data types.",
            "line_number": 126,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "generate_comprehensive_tests",
            "signature": "def generate_comprehensive_tests(self, module_path: Path) -> TestSuite",
            "docstring": "Generate comprehensive tests for a module.",
            "line_number": 142,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "TestSuite",
            "calls": [
              "extend",
              "_generate_function_tests",
              "_estimate_test_coverage",
              "print",
              "_generate_setup_code",
              "_generate_teardown_code",
              "get",
              "_analyze_module_structure",
              "TestSuite",
              "_path_to_module_name",
              "_generate_class_tests"
            ],
            "complexity": 3
          },
          {
            "name": "_analyze_module_structure",
            "signature": "def _analyze_module_structure(self, module_path: Path) -> Dict[str, Any]",
            "docstring": "Analyze module structure for test generation.",
            "line_number": 179,
            "is_public": false,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "extend",
              "open",
              "_analyze_function_detailed",
              "isinstance",
              "print",
              "append",
              "_analyze_class_detailed",
              "_extract_import_info",
              "_extract_constants",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 8
          },
          {
            "name": "_analyze_function_detailed",
            "signature": "def _analyze_function_detailed(self, node: ast.FunctionDef, source: str) -> Dict[str, Any]",
            "docstring": "Perform detailed analysis of a function for test generation.",
            "line_number": 220,
            "is_public": false,
            "parameters": [
              "self",
              "node",
              "source"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_infer_parameter_type",
              "_extract_exceptions",
              "_detects_external_calls",
              "_calculate_complexity",
              "isinstance",
              "_detects_io_operations",
              "unparse",
              "_generate_test_scenarios",
              "len",
              "append",
              "enumerate",
              "get_docstring",
              "_detects_state_modification",
              "getattr",
              "_detect_side_effects"
            ],
            "complexity": 7
          },
          {
            "name": "_analyze_class_detailed",
            "signature": "def _analyze_class_detailed(self, node: ast.ClassDef, source: str) -> Dict[str, Any]",
            "docstring": "Perform detailed analysis of a class for test generation.",
            "line_number": 271,
            "is_public": false,
            "parameters": [
              "self",
              "node",
              "source"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_analyze_function_detailed",
              "_is_abstract_class",
              "isinstance",
              "any",
              "append",
              "get_docstring",
              "getattr",
              "unparse"
            ],
            "complexity": 9
          },
          {
            "name": "_generate_function_tests",
            "signature": "def _generate_function_tests(self, func_info: Dict[str, Any], module_name: str) -> List[TestCase]",
            "docstring": "Generate comprehensive tests for a function.",
            "line_number": 316,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "List[TestCase]",
            "calls": [
              "_generate_mock_test",
              "_generate_property_test",
              "_generate_basic_test",
              "_generate_edge_case_test",
              "startswith",
              "_generate_error_test",
              "append",
              "_generate_async_test"
            ],
            "complexity": 14
          },
          {
            "name": "_generate_basic_test",
            "signature": "def _generate_basic_test(self, func_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate a basic functionality test.",
            "line_number": 361,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "_generate_setup_for_function",
              "TestCase",
              "_generate_test_value",
              "append",
              "join",
              "_generate_assertions"
            ],
            "complexity": 3
          },
          {
            "name": "_generate_edge_case_test",
            "signature": "def _generate_edge_case_test(self, func_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate edge case tests.",
            "line_number": 401,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "chr",
              "TestCase",
              "append",
              "get",
              "join"
            ],
            "complexity": 6
          },
          {
            "name": "_generate_error_test",
            "signature": "def _generate_error_test(self, func_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate error handling tests.",
            "line_number": 447,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "TestCase",
              "chr",
              "append",
              "join"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_mock_test",
            "signature": "def _generate_mock_test(self, func_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate tests with mocked dependencies.",
            "line_number": 471,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "TestCase",
              "chr",
              "append",
              "join"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_property_test",
            "signature": "def _generate_property_test(self, func_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate property-based tests.",
            "line_number": 518,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "TestCase",
              "extend",
              "get",
              "join"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_async_test",
            "signature": "def _generate_async_test(self, func_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate async function tests.",
            "line_number": 561,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "TestCase",
              "_generate_setup_for_function"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_class_tests",
            "signature": "def _generate_class_tests(self, class_info: Dict[str, Any], module_name: str) -> List[TestCase]",
            "docstring": "Generate comprehensive tests for a class.",
            "line_number": 589,
            "is_public": false,
            "parameters": [
              "self",
              "class_info",
              "module_name"
            ],
            "return_type": "List[TestCase]",
            "calls": [
              "extend",
              "_generate_property_method_test",
              "startswith",
              "_generate_class_init_test",
              "append",
              "_generate_method_tests"
            ],
            "complexity": 6
          },
          {
            "name": "_generate_class_init_test",
            "signature": "def _generate_class_init_test(self, class_info: Dict[str, Any], module_name: str) -> Optional[TestCase]",
            "docstring": "Generate constructor test for a class.",
            "line_number": 613,
            "is_public": false,
            "parameters": [
              "self",
              "class_info",
              "module_name"
            ],
            "return_type": "Optional[TestCase]",
            "calls": [
              "TestCase",
              "lower"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_method_tests",
            "signature": "def _generate_method_tests(self, method_info: Dict[str, Any], class_name: str, module_name: str) -> List[TestCase]",
            "docstring": "Generate tests for a class method.",
            "line_number": 637,
            "is_public": false,
            "parameters": [
              "self",
              "method_info",
              "class_name",
              "module_name"
            ],
            "return_type": "List[TestCase]",
            "calls": [
              "TestCase",
              "lower"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_test_value",
            "signature": "def _generate_test_value(self, param: Dict[str, Any]) -> str",
            "docstring": "Generate a test value for a parameter.",
            "line_number": 664,
            "is_public": false,
            "parameters": [
              "self",
              "param"
            ],
            "return_type": "str",
            "calls": [
              "items",
              "lower",
              "get"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_assertions",
            "signature": "def _generate_assertions(self, func_info: Dict[str, Any]) -> str",
            "docstring": "Generate appropriate assertions for a function.",
            "line_number": 679,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [
              "get"
            ],
            "complexity": 7
          },
          {
            "name": "_generate_setup_for_function",
            "signature": "def _generate_setup_for_function(self, func_info: Dict[str, Any]) -> str",
            "docstring": "Generate setup code for a function test.",
            "line_number": 697,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 3
          },
          {
            "name": "_calculate_complexity",
            "signature": "def _calculate_complexity(self, node: ast.FunctionDef) -> int",
            "docstring": "Calculate cyclomatic complexity.",
            "line_number": 707,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "int",
            "calls": [
              "walk",
              "isinstance"
            ],
            "complexity": 4
          },
          {
            "name": "_detect_side_effects",
            "signature": "def _detect_side_effects(self, node: ast.FunctionDef) -> bool",
            "docstring": "Detect if function has side effects.",
            "line_number": 717,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "bool",
            "calls": [
              "walk",
              "hasattr",
              "isinstance"
            ],
            "complexity": 5
          },
          {
            "name": "_extract_exceptions",
            "signature": "def _extract_exceptions(self, node: ast.FunctionDef) -> List[str]",
            "docstring": "Extract exceptions that might be raised.",
            "line_number": 725,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "List[str]",
            "calls": [
              "set",
              "hasattr",
              "isinstance",
              "append",
              "walk",
              "list"
            ],
            "complexity": 6
          },
          {
            "name": "_detects_external_calls",
            "signature": "def _detects_external_calls(self, node: ast.FunctionDef) -> bool",
            "docstring": "Detect external API calls.",
            "line_number": 734,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "bool",
            "calls": [
              "walk",
              "hasattr",
              "isinstance"
            ],
            "complexity": 5
          },
          {
            "name": "_detects_state_modification",
            "signature": "def _detects_state_modification(self, node: ast.FunctionDef) -> bool",
            "docstring": "Detect state modifications.",
            "line_number": 743,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "bool",
            "calls": [
              "walk",
              "isinstance"
            ],
            "complexity": 5
          },
          {
            "name": "_detects_io_operations",
            "signature": "def _detects_io_operations(self, node: ast.FunctionDef) -> bool",
            "docstring": "Detect I/O operations.",
            "line_number": 752,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "bool",
            "calls": [
              "walk",
              "hasattr",
              "isinstance"
            ],
            "complexity": 5
          },
          {
            "name": "_infer_parameter_type",
            "signature": "def _infer_parameter_type(self, arg: ast.arg, node: ast.FunctionDef) -> str",
            "docstring": "Infer parameter type from annotation or usage.",
            "line_number": 760,
            "is_public": false,
            "parameters": [
              "self",
              "arg",
              "node"
            ],
            "return_type": "str",
            "calls": [
              "unparse"
            ],
            "complexity": 2
          },
          {
            "name": "_is_abstract_class",
            "signature": "def _is_abstract_class(self, node: ast.ClassDef) -> bool",
            "docstring": "Check if class is abstract.",
            "line_number": 766,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "bool",
            "calls": [
              "isinstance"
            ],
            "complexity": 4
          },
          {
            "name": "_extract_import_info",
            "signature": "def _extract_import_info(self, node: Union[ast.Import, ast.ImportFrom]) -> List[str]",
            "docstring": "Extract import information.",
            "line_number": 773,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "List[str]",
            "calls": [
              "append",
              "isinstance"
            ],
            "complexity": 5
          },
          {
            "name": "_extract_constants",
            "signature": "def _extract_constants(self, node: ast.Assign) -> List[str]",
            "docstring": "Extract constant definitions.",
            "line_number": 783,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "List[str]",
            "calls": [
              "append",
              "isupper",
              "isinstance"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_test_scenarios",
            "signature": "def _generate_test_scenarios(self, func_info: Dict[str, Any]) -> List[str]",
            "docstring": "Generate test scenarios for a function.",
            "line_number": 791,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "List[str]",
            "calls": [
              "append"
            ],
            "complexity": 5
          },
          {
            "name": "_estimate_test_coverage",
            "signature": "def _estimate_test_coverage(self, test_cases: List[TestCase], module_analysis: Dict[str, Any]) -> float",
            "docstring": "Estimate coverage that will be achieved by generated tests.",
            "line_number": 806,
            "is_public": false,
            "parameters": [
              "self",
              "test_cases",
              "module_analysis"
            ],
            "return_type": "float",
            "calls": [
              "min",
              "max",
              "get",
              "sum"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_setup_code",
            "signature": "def _generate_setup_code(self, module_analysis: Dict[str, Any]) -> str",
            "docstring": "Generate setup code for the test module.",
            "line_number": 816,
            "is_public": false,
            "parameters": [
              "self",
              "module_analysis"
            ],
            "return_type": "str",
            "calls": [
              "any",
              "append",
              "get",
              "join"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_teardown_code",
            "signature": "def _generate_teardown_code(self, module_analysis: Dict[str, Any]) -> str",
            "docstring": "Generate teardown code for the test module.",
            "line_number": 834,
            "is_public": false,
            "parameters": [
              "self",
              "module_analysis"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_path_to_module_name",
            "signature": "def _path_to_module_name(self, file_path: Path) -> str",
            "docstring": "Convert file path to module name.",
            "line_number": 838,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "str",
            "calls": [
              "index",
              "join",
              "str",
              "endswith"
            ],
            "complexity": 3
          },
          {
            "name": "export_test_suite",
            "signature": "def export_test_suite(self, test_suite: TestSuite, output_path: Path) -> None",
            "docstring": "Export a test suite to a Python file.",
            "line_number": 850,
            "is_public": true,
            "parameters": [
              "self",
              "test_suite",
              "output_path"
            ],
            "return_type": "None",
            "calls": [
              "open",
              "write",
              "title",
              "print",
              "replace",
              "join"
            ],
            "complexity": 1
          },
          {
            "name": "generate_all_test_suites",
            "signature": "def generate_all_test_suites(self, output_dir: Path = Path('tests/generated')) -> Dict[str, TestSuite]",
            "docstring": "Generate test suites for all modules in src directory.",
            "line_number": 892,
            "is_public": true,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": "Dict[str, TestSuite]",
            "calls": [
              "print",
              "generate_comprehensive_tests",
              "Path",
              "len",
              "_should_generate_tests",
              "mkdir",
              "export_test_suite",
              "rglob"
            ],
            "complexity": 3
          },
          {
            "name": "_should_generate_tests",
            "signature": "def _should_generate_tests(self, file_path: Path) -> bool",
            "docstring": "Determine if tests should be generated for a file.",
            "line_number": 912,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "bool",
            "calls": [
              "any",
              "str"
            ],
            "complexity": 2
          },
          {
            "name": "generate_summary_report",
            "signature": "def generate_summary_report(self) -> Dict[str, Any]",
            "docstring": "Generate summary report of test generation.",
            "line_number": 923,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "values",
              "len",
              "get",
              "sum",
              "now",
              "isoformat"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Intelligently generates comprehensive tests to maximize coverage."
      }
    ],
    "imports": "{'datetime', 'pathlib', 'tempfile', 're', 'sys', 'json', 'inspect', 'ast', 'dataclasses', 'typing', 'subprocess'}",
    "dependencies": "{'datetime', 'pathlib', 'tempfile', 're', 'sys', 'json', 'inspect', 'ast', 'dataclasses', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": false,
    "total_lines": 949,
    "complexity": 0
  },
  "archive\\legacy_scripts\\batch_convert_broken_tests.py": {
    "file_path": "archive\\legacy_scripts\\batch_convert_broken_tests.py",
    "file_hash": "89ba48e21b2e7f8436e3a2503e20f96b",
    "functions": [
      {
        "name": "get_broken_test_files",
        "signature": "def get_broken_test_files() -> List[Path]",
        "docstring": "Get all test files categorized as 'broken' (no real imports).",
        "line_number": 20,
        "is_public": true,
        "parameters": [],
        "return_type": "List[Path]",
        "calls": [
          "glob",
          "append",
          "categorize_test",
          "print"
        ],
        "complexity": 3
      },
      {
        "name": "batch_convert",
        "signature": "def batch_convert(test_files: List[Path], max_count: int = None) -> Dict",
        "docstring": "Convert multiple test files in batch.",
        "line_number": 36,
        "is_public": true,
        "parameters": [
          "test_files",
          "max_count"
        ],
        "return_type": "Dict",
        "calls": [
          "print",
          "str",
          "len",
          "convert_broken_test",
          "BrokenTestConverter",
          "append",
          "enumerate"
        ],
        "complexity": 5
      },
      {
        "name": "print_summary",
        "signature": "def print_summary(results: Dict)",
        "docstring": "Print conversion summary.",
        "line_number": 80,
        "is_public": true,
        "parameters": [
          "results"
        ],
        "return_type": null,
        "calls": [
          "len",
          "print"
        ],
        "complexity": 10
      },
      {
        "name": "validate_conversions",
        "signature": "def validate_conversions(results: Dict)",
        "docstring": "Run pytest on converted files to validate they work.",
        "line_number": 114,
        "is_public": true,
        "parameters": [
          "results"
        ],
        "return_type": null,
        "calls": [
          "run",
          "split",
          "print"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main execution function.",
        "line_number": 155,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "min",
          "get_broken_test_files",
          "print",
          "print_summary",
          "len",
          "batch_convert",
          "validate_conversions",
          "int"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'pathlib', 'scripts.simple_mock_analyzer', 'sys', 'scripts.convert_broken_test', 'typing'}",
    "dependencies": "{'sys', 'scripts', 'pathlib', 'typing'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 191,
    "complexity": 28
  },
  "archive\\legacy_scripts\\batch_gemini_generator.py": {
    "file_path": "archive\\legacy_scripts\\batch_gemini_generator.py",
    "file_hash": "4d86eecd971460046a95b91d21ab6805",
    "functions": [
      {
        "name": "process_batch",
        "signature": "def process_batch(generator: GeminiTestGenerator, files: List[Path], batch_num: int) -> int",
        "docstring": "Process a batch of files.",
        "line_number": 27,
        "is_public": true,
        "parameters": [
          "generator",
          "files",
          "batch_num"
        ],
        "return_type": "int",
        "calls": [
          "print",
          "str",
          "Path",
          "analyze_module",
          "len",
          "generate_comprehensive_test",
          "mkdir",
          "enumerate",
          "write_text",
          "count"
        ],
        "complexity": 4
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Process all files in batches.",
        "line_number": 69,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "GeminiTestGenerator",
          "print",
          "str",
          "Path",
          "getenv",
          "len",
          "run",
          "measure_coverage",
          "enumerate",
          "range",
          "rglob",
          "list",
          "process_batch"
        ],
        "complexity": 10
      }
    ],
    "classes": [],
    "imports": "{'dotenv', 'pathlib', 'sys', 'time', 'scripts.test_coverage.gemini_test_generator', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'dotenv', 'pathlib', 'scripts', 'sys', 'time', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 148,
    "complexity": 14
  },
  "archive\\legacy_scripts\\branch_coverage_analyzer.py": {
    "file_path": "archive\\legacy_scripts\\branch_coverage_analyzer.py",
    "file_hash": "85703cd4d86f63b6995ee033101be231",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run branch coverage analysis and generation.",
        "line_number": 429,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "measure_branch_coverage",
          "BranchCoverageAnalyzer",
          "generate_branch_coverage_tests",
          "print"
        ],
        "complexity": 2
      }
    ],
    "classes": [
      {
        "name": "BranchInfo",
        "line_number": 20,
        "methods": [],
        "bases": [],
        "docstring": "Information about a code branch."
      },
      {
        "name": "UncoveredBranch",
        "line_number": 30,
        "methods": [],
        "bases": [],
        "docstring": "Represents an uncovered branch that needs testing."
      },
      {
        "name": "BranchCoverageAnalyzer",
        "line_number": 39,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 42,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "analyze_file_branches",
            "signature": "def analyze_file_branches(self, file_path: Path) -> List[BranchInfo]",
            "docstring": "Analyze all branches in a Python file.",
            "line_number": 47,
            "is_public": true,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "List[BranchInfo]",
            "calls": [
              "open",
              "BranchInfo",
              "visit",
              "calculate_complexity",
              "hasattr",
              "isinstance",
              "BranchVisitor",
              "generic_visit",
              "str",
              "len",
              "append",
              "parse",
              "walk",
              "read",
              "unparse"
            ],
            "complexity": 22
          },
          {
            "name": "get_coverage_data",
            "signature": "def get_coverage_data(self) -> Dict",
            "docstring": "Get current coverage data including branch coverage.",
            "line_number": 197,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict",
            "calls": [
              "open",
              "print",
              "exists",
              "Path",
              "run",
              "load"
            ],
            "complexity": 2
          },
          {
            "name": "identify_uncovered_branches",
            "signature": "def identify_uncovered_branches(self) -> List[UncoveredBranch]",
            "docstring": "Identify all uncovered branches in the codebase.",
            "line_number": 220,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "List[UncoveredBranch]",
            "calls": [
              "items",
              "suggest_test_for_branch",
              "get_coverage_data",
              "str",
              "analyze_file_branches",
              "append",
              "get",
              "UncoveredBranch",
              "rglob"
            ],
            "complexity": 9
          },
          {
            "name": "suggest_test_for_branch",
            "signature": "def suggest_test_for_branch(self, branch: BranchInfo) -> str",
            "docstring": "Generate test suggestion for a specific branch.",
            "line_number": 266,
            "is_public": true,
            "parameters": [
              "self",
              "branch"
            ],
            "return_type": "str",
            "calls": [
              "get"
            ],
            "complexity": 1
          },
          {
            "name": "generate_branch_test",
            "signature": "def generate_branch_test(self, uncovered_branch: UncoveredBranch) -> str",
            "docstring": "Generate test code for an uncovered branch.",
            "line_number": 282,
            "is_public": true,
            "parameters": [
              "self",
              "uncovered_branch"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 4
          },
          {
            "name": "generate_branch_coverage_tests",
            "signature": "def generate_branch_coverage_tests(self)",
            "docstring": "Generate tests for all uncovered branches.",
            "line_number": 340,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "print",
              "Path",
              "len",
              "identify_uncovered_branches",
              "defaultdict",
              "append",
              "sorted",
              "generate_branch_test",
              "write_text"
            ],
            "complexity": 8
          },
          {
            "name": "measure_branch_coverage",
            "signature": "def measure_branch_coverage(self) -> float",
            "docstring": "Measure current branch coverage percentage.",
            "line_number": 407,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "float",
            "calls": [
              "get_coverage_data",
              "get",
              "print"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Analyze and improve branch coverage."
      }
    ],
    "imports": "{'pathlib', 'sys', 'collections', 'json', 'ast', 'dataclasses', 'typing', 'subprocess'}",
    "dependencies": "{'pathlib', 'sys', 'collections', 'json', 'ast', 'dataclasses', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 462,
    "complexity": 2
  },
  "archive\\legacy_scripts\\check_what_needs_tests.py": {
    "file_path": "archive\\legacy_scripts\\check_what_needs_tests.py",
    "file_hash": "77d264db402cd5f2ca3e46dc4ad2b7ac",
    "functions": [
      {
        "name": "check_modules",
        "signature": "def check_modules()",
        "docstring": "Check which modules need tests.",
        "line_number": 8,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "set",
          "split",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "sorted",
          "enumerate",
          "add",
          "rglob"
        ],
        "complexity": 11
      }
    ],
    "classes": [],
    "imports": "{'pathlib'}",
    "dependencies": "{'pathlib'}",
    "globals": [],
    "main_block": true,
    "total_lines": 58,
    "complexity": 11
  },
  "archive\\legacy_scripts\\comprehensive_test_framework.py": {
    "file_path": "archive\\legacy_scripts\\comprehensive_test_framework.py",
    "file_hash": "4bf281f0e545e1017b2a1c8a347121bf",
    "functions": [],
    "classes": [
      {
        "name": "TestCaseInfo",
        "line_number": 24,
        "methods": [],
        "bases": [],
        "docstring": "Information about a test case."
      },
      {
        "name": "CoverageReport",
        "line_number": 36,
        "methods": [],
        "bases": [],
        "docstring": "Coverage analysis report."
      },
      {
        "name": "ComprehensiveTestFramework",
        "line_number": 50,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, src_dir: Path = Path('src'), target_coverage: float = 95.0)",
            "docstring": null,
            "line_number": 55,
            "is_public": false,
            "parameters": [
              "self",
              "src_dir",
              "target_coverage"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "analyze_codebase_for_testing",
            "signature": "def analyze_codebase_for_testing(self) -> Dict[str, Any]",
            "docstring": "Analyze the codebase to determine testing needs.",
            "line_number": 63,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_path_to_module_name",
              "rglob",
              "str",
              "_analyze_module_for_testing"
            ],
            "complexity": 5
          },
          {
            "name": "_analyze_module_for_testing",
            "signature": "def _analyze_module_for_testing(self, file_path: Path) -> Dict[str, Any]",
            "docstring": "Analyze a single module for testing requirements.",
            "line_number": 86,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "open",
              "_analyze_function",
              "isinstance",
              "print",
              "str",
              "_analyze_class",
              "startswith",
              "_needs_testing",
              "append",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 11
          },
          {
            "name": "_analyze_function",
            "signature": "def _analyze_function(self, node: ast.FunctionDef, source: str) -> Dict[str, Any]",
            "docstring": "Analyze a function for test generation.",
            "line_number": 134,
            "is_public": false,
            "parameters": [
              "self",
              "node",
              "source"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_calculate_complexity",
              "isinstance",
              "len",
              "_has_side_effects",
              "_raises_exceptions",
              "append",
              "enumerate",
              "get_docstring",
              "unparse"
            ],
            "complexity": 7
          },
          {
            "name": "_analyze_class",
            "signature": "def _analyze_class(self, node: ast.ClassDef) -> Dict[str, Any]",
            "docstring": "Analyze a class for testing.",
            "line_number": 176,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_analyze_function",
              "isinstance",
              "append",
              "get_docstring",
              "unparse"
            ],
            "complexity": 4
          },
          {
            "name": "_calculate_complexity",
            "signature": "def _calculate_complexity(self, node: ast.FunctionDef) -> int",
            "docstring": "Calculate cyclomatic complexity of a function.",
            "line_number": 199,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "int",
            "calls": [
              "walk",
              "len",
              "isinstance"
            ],
            "complexity": 6
          },
          {
            "name": "_has_side_effects",
            "signature": "def _has_side_effects(self, node: ast.FunctionDef) -> bool",
            "docstring": "Check if function has side effects.",
            "line_number": 215,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "bool",
            "calls": [
              "walk",
              "hasattr",
              "isupper",
              "isinstance"
            ],
            "complexity": 9
          },
          {
            "name": "_raises_exceptions",
            "signature": "def _raises_exceptions(self, node: ast.FunctionDef) -> List[str]",
            "docstring": "Find exceptions that the function might raise.",
            "line_number": 229,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "List[str]",
            "calls": [
              "walk",
              "append",
              "hasattr",
              "isinstance"
            ],
            "complexity": 6
          },
          {
            "name": "_needs_testing",
            "signature": "def _needs_testing(self, func_info: Dict[str, Any]) -> bool",
            "docstring": "Determine if a function needs testing.",
            "line_number": 239,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "bool",
            "calls": [
              "startswith"
            ],
            "complexity": 4
          },
          {
            "name": "generate_unit_tests",
            "signature": "def generate_unit_tests(self, module_path: Path) -> str",
            "docstring": "Generate comprehensive unit tests for a module.",
            "line_number": 251,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "str",
            "calls": [
              "_generate_function_tests",
              "_generate_test_file_header",
              "_analyze_module_for_testing",
              "_needs_testing",
              "_path_to_module_name",
              "_generate_class_tests"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_test_file_header",
            "signature": "def _generate_test_file_header(self, module_name: str) -> str",
            "docstring": "Generate the header for a test file.",
            "line_number": 272,
            "is_public": false,
            "parameters": [
              "self",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "replace",
              "split",
              "title"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_function_tests",
            "signature": "def _generate_function_tests(self, func_info: Dict[str, Any], module_name: str) -> str",
            "docstring": "Generate comprehensive tests for a function.",
            "line_number": 305,
            "is_public": false,
            "parameters": [
              "self",
              "func_info",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "_generate_edge_case_tests",
              "_generate_exception_tests",
              "_generate_mock_tests",
              "_generate_performance_tests",
              "_generate_test_inputs"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_test_inputs",
            "signature": "def _generate_test_inputs(self, parameters: List[Dict[str, Any]]) -> str",
            "docstring": "Generate test inputs based on parameter information.",
            "line_number": 340,
            "is_public": false,
            "parameters": [
              "self",
              "parameters"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "append",
              "get",
              "join"
            ],
            "complexity": 12
          },
          {
            "name": "_generate_edge_case_tests",
            "signature": "def _generate_edge_case_tests(self, func_info: Dict[str, Any]) -> str",
            "docstring": "Generate edge case tests.",
            "line_number": 372,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [
              "append",
              "join"
            ],
            "complexity": 5
          },
          {
            "name": "_generate_exception_tests",
            "signature": "def _generate_exception_tests(self, func_info: Dict[str, Any]) -> str",
            "docstring": "Generate exception handling tests.",
            "line_number": 404,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 2
          },
          {
            "name": "_generate_performance_tests",
            "signature": "def _generate_performance_tests(self, func_info: Dict[str, Any]) -> str",
            "docstring": "Generate performance tests for complex functions.",
            "line_number": 417,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_generate_mock_tests",
            "signature": "def _generate_mock_tests(self, func_info: Dict[str, Any]) -> str",
            "docstring": "Generate tests with mocks for functions with side effects.",
            "line_number": 437,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_generate_class_tests",
            "signature": "def _generate_class_tests(self, class_info: Dict[str, Any], module_name: str) -> str",
            "docstring": "Generate comprehensive tests for a class.",
            "line_number": 451,
            "is_public": false,
            "parameters": [
              "self",
              "class_info",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "_generate_method_tests"
            ],
            "complexity": 3
          },
          {
            "name": "_generate_method_tests",
            "signature": "def _generate_method_tests(self, method_info: Dict[str, Any], class_name: str) -> str",
            "docstring": "Generate tests for a class method.",
            "line_number": 476,
            "is_public": false,
            "parameters": [
              "self",
              "method_info",
              "class_name"
            ],
            "return_type": "str",
            "calls": [
              "_generate_test_inputs"
            ],
            "complexity": 3
          },
          {
            "name": "_path_to_module_name",
            "signature": "def _path_to_module_name(self, file_path: Path) -> str",
            "docstring": "Convert file path to module name.",
            "line_number": 498,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "str",
            "calls": [
              "index",
              "join",
              "str",
              "endswith"
            ],
            "complexity": 3
          },
          {
            "name": "run_coverage_analysis",
            "signature": "def run_coverage_analysis(self) -> Dict[str, CoverageReport]",
            "docstring": "Run comprehensive coverage analysis.",
            "line_number": 510,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, CoverageReport]",
            "calls": [
              "start",
              "print",
              "str",
              "Coverage",
              "_path_to_module_name",
              "save",
              "_generate_coverage_report",
              "import_module",
              "stop",
              "rglob"
            ],
            "complexity": 9
          },
          {
            "name": "_generate_coverage_report",
            "signature": "def _generate_coverage_report(self, cov: coverage.Coverage, file_path: Path, module_name: str) -> Optional[CoverageReport]",
            "docstring": "Generate coverage report for a specific module.",
            "line_number": 539,
            "is_public": false,
            "parameters": [
              "self",
              "cov",
              "file_path",
              "module_name"
            ],
            "return_type": "Optional[CoverageReport]",
            "calls": [
              "analysis2",
              "print",
              "str",
              "len",
              "list",
              "CoverageReport"
            ],
            "complexity": 2
          },
          {
            "name": "generate_all_tests",
            "signature": "def generate_all_tests(self) -> Dict[str, str]",
            "docstring": "Generate comprehensive tests for all modules.",
            "line_number": 567,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, str]",
            "calls": [
              "str",
              "_path_to_module_name",
              "rglob",
              "generate_unit_tests"
            ],
            "complexity": 5
          },
          {
            "name": "write_test_files",
            "signature": "def write_test_files(self, output_dir: Path = Path('tests/unit_generated')) -> None",
            "docstring": "Write generated test files to disk.",
            "line_number": 582,
            "is_public": true,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": "None",
            "calls": [
              "items",
              "open",
              "write",
              "print",
              "replace",
              "Path",
              "len",
              "mkdir"
            ],
            "complexity": 2
          },
          {
            "name": "measure_test_coverage",
            "signature": "def measure_test_coverage(self) -> float",
            "docstring": "Measure overall test coverage.",
            "line_number": 595,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "float",
            "calls": [
              "values",
              "run_coverage_analysis",
              "sum"
            ],
            "complexity": 3
          },
          {
            "name": "generate_coverage_report_html",
            "signature": "def generate_coverage_report_html(self, output_path: Path) -> None",
            "docstring": "Generate HTML coverage report.",
            "line_number": 608,
            "is_public": true,
            "parameters": [
              "self",
              "output_path"
            ],
            "return_type": "None",
            "calls": [
              "items",
              "open",
              "run_coverage_analysis",
              "print",
              "measure_test_coverage",
              "dump",
              "now",
              "isoformat"
            ],
            "complexity": 2
          },
          {
            "name": "identify_coverage_gaps",
            "signature": "def identify_coverage_gaps(self) -> List[Dict[str, Any]]",
            "docstring": "Identify areas that need more test coverage.",
            "line_number": 633,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "List[Dict[str, Any]]",
            "calls": [
              "items",
              "append",
              "sort"
            ],
            "complexity": 3
          },
          {
            "name": "generate_comprehensive_report",
            "signature": "def generate_comprehensive_report(self) -> Dict[str, Any]",
            "docstring": "Generate comprehensive testing and coverage report.",
            "line_number": 653,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "measure_test_coverage",
              "_generate_recommendations",
              "len",
              "isoformat",
              "now",
              "identify_coverage_gaps"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_recommendations",
            "signature": "def _generate_recommendations(self, overall_coverage: float, coverage_gaps: List[Dict[str, Any]]) -> List[str]",
            "docstring": "Generate recommendations for improving test coverage.",
            "line_number": 678,
            "is_public": false,
            "parameters": [
              "self",
              "overall_coverage",
              "coverage_gaps"
            ],
            "return_type": "List[str]",
            "calls": [
              "append",
              "len"
            ],
            "complexity": 5
          }
        ],
        "bases": [],
        "docstring": "Framework for achieving comprehensive test coverage across the codebase."
      }
    ],
    "imports": "{'unittest.mock', 'datetime', 'pathlib', 'tempfile', 'shutil', 'sys', 'coverage', 'json', 'inspect', 'ast', 'importlib', 'unittest', 'typing', 'dataclasses', 'pytest'}",
    "dependencies": "{'datetime', 'pathlib', 'tempfile', 'shutil', 'sys', 'coverage', 'json', 'inspect', 'ast', 'importlib', 'unittest', 'typing', 'dataclasses', 'pytest'}",
    "globals": [],
    "main_block": false,
    "total_lines": 697,
    "complexity": 0
  },
  "archive\\legacy_scripts\\convert_batch_small.py": {
    "file_path": "archive\\legacy_scripts\\convert_batch_small.py",
    "file_hash": "5ab92332b342533666d99310ab11a750",
    "functions": [
      {
        "name": "build_test_for_module",
        "signature": "def build_test_for_module(module_path: Path, client: genai.Client)",
        "docstring": "Build test for a single module.",
        "line_number": 18,
        "is_public": true,
        "parameters": [
          "module_path",
          "client"
        ],
        "return_type": null,
        "calls": [
          "print",
          "endswith",
          "exists",
          "generate_content",
          "Path",
          "len",
          "startswith",
          "strip",
          "GenerateContentConfig",
          "str",
          "mkdir",
          "parse",
          "read_text",
          "write_text",
          "count"
        ],
        "complexity": 9
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run small batch conversions.",
        "line_number": 96,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sleep",
          "print",
          "Client",
          "exists",
          "Path",
          "getenv",
          "len",
          "build_test_for_module",
          "append",
          "enumerate"
        ],
        "complexity": 7
      }
    ],
    "classes": [],
    "imports": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'ast', 'time', 'google.genai', 'os'}",
    "dependencies": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'ast', 'time', 'os'}",
    "globals": [],
    "main_block": true,
    "total_lines": 150,
    "complexity": 16
  },
  "archive\\legacy_scripts\\convert_with_genai_sdk.py": {
    "file_path": "archive\\legacy_scripts\\convert_with_genai_sdk.py",
    "file_hash": "6a92f4c1d524b2136a4cf366a2fd6ec8",
    "functions": [
      {
        "name": "build_test_for_module",
        "signature": "def build_test_for_module(module_path: Path, client: genai.Client)",
        "docstring": "Build test for a single module.",
        "line_number": 17,
        "is_public": true,
        "parameters": [
          "module_path",
          "client"
        ],
        "return_type": null,
        "calls": [
          "print",
          "endswith",
          "exists",
          "generate_content",
          "Path",
          "len",
          "startswith",
          "strip",
          "GenerateContentConfig",
          "str",
          "mkdir",
          "parse",
          "read_text",
          "write_text",
          "count"
        ],
        "complexity": 9
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run conversions for Weeks 3-8 modules.",
        "line_number": 95,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "split",
          "print",
          "Client",
          "strftime",
          "replace",
          "exists",
          "Path",
          "getenv",
          "len",
          "now",
          "build_test_for_module",
          "append",
          "enumerate",
          "read_text",
          "write_text"
        ],
        "complexity": 12
      }
    ],
    "classes": [],
    "imports": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'ast', 'google.genai', 'os'}",
    "dependencies": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'ast', 'os'}",
    "globals": [],
    "main_block": true,
    "total_lines": 182,
    "complexity": 21
  },
  "archive\\legacy_scripts\\convert_with_generativeai.py": {
    "file_path": "archive\\legacy_scripts\\convert_with_generativeai.py",
    "file_hash": "e579492624a6c8efa2785b027576138d",
    "functions": [
      {
        "name": "build_test_for_module",
        "signature": "def build_test_for_module(module_path: Path)",
        "docstring": "Build test for a single module.",
        "line_number": 16,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "parse",
          "print",
          "endswith",
          "exists",
          "GenerativeModel",
          "configure",
          "len",
          "generate_content",
          "getenv",
          "strip",
          "startswith",
          "Path",
          "mkdir",
          "str",
          "GenerationConfig",
          "read_text",
          "write_text",
          "count"
        ],
        "complexity": 9
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run conversions for Weeks 3-8 modules.",
        "line_number": 97,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "split",
          "print",
          "replace",
          "exists",
          "Path",
          "len",
          "build_test_for_module",
          "append",
          "enumerate",
          "read_text"
        ],
        "complexity": 11
      }
    ],
    "classes": [],
    "imports": "{'dotenv', 'datetime', 'pathlib', 'google.generativeai', 'sys', 'ast', 'os'}",
    "dependencies": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'ast', 'os'}",
    "globals": [],
    "main_block": true,
    "total_lines": 161,
    "complexity": 20
  },
  "archive\\legacy_scripts\\coverage_analysis.py": {
    "file_path": "archive\\legacy_scripts\\coverage_analysis.py",
    "file_hash": "536c84b799a33abcb63ace80911d3eb5",
    "functions": [],
    "classes": [
      {
        "name": "FunctionCoverage",
        "line_number": 21,
        "methods": [],
        "bases": [],
        "docstring": "Coverage information for a function."
      },
      {
        "name": "ModuleCoverage",
        "line_number": 35,
        "methods": [],
        "bases": [],
        "docstring": "Coverage information for a module."
      },
      {
        "name": "CoverageAnalysis",
        "line_number": 49,
        "methods": [],
        "bases": [],
        "docstring": "Complete coverage analysis results."
      },
      {
        "name": "CoverageAnalyzer",
        "line_number": 63,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, src_dir: Path = Path('src'), test_dir: Path = Path('tests'))",
            "docstring": null,
            "line_number": 68,
            "is_public": false,
            "parameters": [
              "self",
              "src_dir",
              "test_dir"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "run_comprehensive_coverage",
            "signature": "def run_comprehensive_coverage(self) -> CoverageAnalysis",
            "docstring": "Run comprehensive coverage analysis.",
            "line_number": 74,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "CoverageAnalysis",
            "calls": [
              "cwd",
              "start",
              "print",
              "str",
              "Coverage",
              "run",
              "save",
              "_analyze_coverage_data",
              "stop"
            ],
            "complexity": 1
          },
          {
            "name": "_analyze_coverage_data",
            "signature": "def _analyze_coverage_data(self, cov: coverage.Coverage) -> CoverageAnalysis",
            "docstring": "Analyze coverage data and generate detailed results.",
            "line_number": 105,
            "is_public": false,
            "parameters": [
              "self",
              "cov"
            ],
            "return_type": "CoverageAnalysis",
            "calls": [
              "_should_analyze_file",
              "_analyze_module_coverage",
              "len",
              "append",
              "branch_lines",
              "sum",
              "_calculate_branch_coverage",
              "get_data",
              "CoverageAnalysis",
              "rglob"
            ],
            "complexity": 5
          },
          {
            "name": "_should_analyze_file",
            "signature": "def _should_analyze_file(self, file_path: Path) -> bool",
            "docstring": "Determine if a file should be included in coverage analysis.",
            "line_number": 147,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "bool",
            "calls": [
              "any",
              "str"
            ],
            "complexity": 3
          },
          {
            "name": "_analyze_module_coverage",
            "signature": "def _analyze_module_coverage(self, cov: coverage.Coverage, file_path: Path) -> Optional[ModuleCoverage]",
            "docstring": "Analyze coverage for a specific module.",
            "line_number": 161,
            "is_public": false,
            "parameters": [
              "self",
              "cov",
              "file_path"
            ],
            "return_type": "Optional[ModuleCoverage]",
            "calls": [
              "set",
              "_calculate_module_branch_coverage",
              "analysis2",
              "print",
              "_analyze_function_coverage",
              "str",
              "len",
              "_module_has_tests",
              "_path_to_module_name",
              "ModuleCoverage"
            ],
            "complexity": 2
          },
          {
            "name": "_analyze_function_coverage",
            "signature": "def _analyze_function_coverage(self, file_path: Path, executed: Set[int], missing: Set[int]) -> List[FunctionCoverage]",
            "docstring": "Analyze coverage for functions in a module.",
            "line_number": 198,
            "is_public": false,
            "parameters": [
              "self",
              "file_path",
              "executed",
              "missing"
            ],
            "return_type": "List[FunctionCoverage]",
            "calls": [
              "_analyze_single_function_coverage",
              "open",
              "isinstance",
              "print",
              "append",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 4
          },
          {
            "name": "_analyze_single_function_coverage",
            "signature": "def _analyze_single_function_coverage(self, node: ast.FunctionDef, executed: Set[int], missing: Set[int], source: str) -> FunctionCoverage",
            "docstring": "Analyze coverage for a single function.",
            "line_number": 220,
            "is_public": false,
            "parameters": [
              "self",
              "node",
              "executed",
              "missing",
              "source"
            ],
            "return_type": "FunctionCoverage",
            "calls": [
              "FunctionCoverage",
              "set",
              "intersection",
              "len",
              "range",
              "_calculate_function_complexity"
            ],
            "complexity": 2
          },
          {
            "name": "_calculate_function_complexity",
            "signature": "def _calculate_function_complexity(self, node: ast.FunctionDef) -> int",
            "docstring": "Calculate cyclomatic complexity of a function.",
            "line_number": 253,
            "is_public": false,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "int",
            "calls": [
              "walk",
              "len",
              "isinstance"
            ],
            "complexity": 6
          },
          {
            "name": "_calculate_branch_coverage",
            "signature": "def _calculate_branch_coverage(self, cov: coverage.Coverage) -> float",
            "docstring": "Calculate overall branch coverage.",
            "line_number": 269,
            "is_public": false,
            "parameters": [
              "self",
              "cov"
            ],
            "return_type": "float",
            "calls": [
              "_analyze_branch_coverage",
              "get_data"
            ],
            "complexity": 2
          },
          {
            "name": "_calculate_module_branch_coverage",
            "signature": "def _calculate_module_branch_coverage(self, cov: coverage.Coverage, file_path: str) -> float",
            "docstring": "Calculate branch coverage for a specific module.",
            "line_number": 279,
            "is_public": false,
            "parameters": [
              "self",
              "cov",
              "file_path"
            ],
            "return_type": "float",
            "calls": [],
            "complexity": 2
          },
          {
            "name": "_module_has_tests",
            "signature": "def _module_has_tests(self, file_path: Path) -> bool",
            "docstring": "Check if a module has corresponding tests.",
            "line_number": 288,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "bool",
            "calls": [
              "rglob",
              "list"
            ],
            "complexity": 3
          },
          {
            "name": "_path_to_module_name",
            "signature": "def _path_to_module_name(self, file_path: Path) -> str",
            "docstring": "Convert file path to module name.",
            "line_number": 306,
            "is_public": false,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "str",
            "calls": [
              "index",
              "join",
              "str",
              "endswith"
            ],
            "complexity": 3
          },
          {
            "name": "generate_coverage_gaps_report",
            "signature": "def generate_coverage_gaps_report(self) -> List[Dict[str, Any]]",
            "docstring": "Generate detailed report of coverage gaps.",
            "line_number": 318,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "List[Dict[str, Any]]",
            "calls": [
              "sort",
              "ValueError",
              "len",
              "_generate_module_recommendations",
              "append",
              "_calculate_priority"
            ],
            "complexity": 5
          },
          {
            "name": "_calculate_priority",
            "signature": "def _calculate_priority(self, module: ModuleCoverage) -> str",
            "docstring": "Calculate priority level for improving module coverage.",
            "line_number": 363,
            "is_public": false,
            "parameters": [
              "self",
              "module"
            ],
            "return_type": "str",
            "calls": [
              "sum"
            ],
            "complexity": 6
          },
          {
            "name": "_generate_module_recommendations",
            "signature": "def _generate_module_recommendations(self, module: ModuleCoverage) -> List[str]",
            "docstring": "Generate specific recommendations for improving module coverage.",
            "line_number": 376,
            "is_public": false,
            "parameters": [
              "self",
              "module"
            ],
            "return_type": "List[str]",
            "calls": [
              "append",
              "len"
            ],
            "complexity": 7
          },
          {
            "name": "generate_coverage_dashboard_data",
            "signature": "def generate_coverage_dashboard_data(self) -> Dict[str, Any]",
            "docstring": "Generate data for coverage dashboard visualization.",
            "line_number": 400,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "ValueError",
              "round",
              "len",
              "_calculate_priority",
              "generate_coverage_gaps_report",
              "_analyze_complexity_coverage",
              "_calculate_coverage_distribution"
            ],
            "complexity": 2
          },
          {
            "name": "_calculate_coverage_distribution",
            "signature": "def _calculate_coverage_distribution(self) -> Dict[str, int]",
            "docstring": "Calculate distribution of coverage levels.",
            "line_number": 449,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, int]",
            "calls": [],
            "complexity": 6
          },
          {
            "name": "_analyze_complexity_coverage",
            "signature": "def _analyze_complexity_coverage(self) -> Dict[str, Any]",
            "docstring": "Analyze relationship between complexity and coverage.",
            "line_number": 475,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "round",
              "len",
              "append",
              "sum"
            ],
            "complexity": 8
          },
          {
            "name": "export_coverage_report",
            "signature": "def export_coverage_report(self, output_path: Path) -> None",
            "docstring": "Export comprehensive coverage report to JSON.",
            "line_number": 525,
            "is_public": true,
            "parameters": [
              "self",
              "output_path"
            ],
            "return_type": "None",
            "calls": [
              "open",
              "ValueError",
              "print",
              "now",
              "dump",
              "generate_coverage_dashboard_data",
              "generate_coverage_gaps_report",
              "list",
              "isoformat"
            ],
            "complexity": 2
          },
          {
            "name": "generate_visual_reports",
            "signature": "def generate_visual_reports(self, output_dir: Path) -> None",
            "docstring": "Generate visual coverage reports.",
            "line_number": 574,
            "is_public": true,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": "None",
            "calls": [
              "ValueError",
              "_create_coverage_distribution_chart",
              "_create_complexity_coverage_chart",
              "mkdir",
              "_create_module_coverage_chart"
            ],
            "complexity": 2
          },
          {
            "name": "_create_module_coverage_chart",
            "signature": "def _create_module_coverage_chart(self, output_dir: Path) -> None",
            "docstring": "Create module coverage bar chart.",
            "line_number": 590,
            "is_public": false,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": "None",
            "calls": [
              "xlabel",
              "range",
              "figure",
              "savefig",
              "title",
              "xticks",
              "tight_layout",
              "set_color",
              "len",
              "bar",
              "ylabel",
              "enumerate",
              "legend",
              "axhline",
              "close"
            ],
            "complexity": 4
          },
          {
            "name": "_create_coverage_distribution_chart",
            "signature": "def _create_coverage_distribution_chart(self, output_dir: Path) -> None",
            "docstring": "Create coverage distribution pie chart.",
            "line_number": 618,
            "is_public": false,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": "None",
            "calls": [
              "items",
              "figure",
              "savefig",
              "title",
              "pie",
              "axis",
              "append",
              "close",
              "_calculate_coverage_distribution"
            ],
            "complexity": 3
          },
          {
            "name": "_create_complexity_coverage_chart",
            "signature": "def _create_complexity_coverage_chart(self, output_dir: Path) -> None",
            "docstring": "Create complexity vs coverage scatter plot.",
            "line_number": 647,
            "is_public": false,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": "None",
            "calls": [
              "xlabel",
              "figure",
              "scatter",
              "title",
              "grid",
              "savefig",
              "append",
              "ylabel",
              "close",
              "legend",
              "axhline"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Advanced coverage analysis with detailed reporting and recommendations."
      }
    ],
    "imports": "{'xml.etree.ElementTree', 'datetime', 'pathlib', 'coverage', 'sys', 'json', 'ast', 'pandas', 'matplotlib.pyplot', 'dataclasses', 'typing', 'subprocess'}",
    "dependencies": "{'subprocess', 'datetime', 'pathlib', 'coverage', 'sys', 'json', 'ast', 'pandas', 'xml', 'matplotlib', 'typing', 'dataclasses'}",
    "globals": [],
    "main_block": false,
    "total_lines": 669,
    "complexity": 0
  },
  "archive\\legacy_scripts\\coverage_baseline.py": {
    "file_path": "archive\\legacy_scripts\\coverage_baseline.py",
    "file_hash": "1e6f034766ce837c901ff0885b174376",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run baseline assessment.",
        "line_number": 222,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "generate_report",
          "CoverageBaseline",
          "print"
        ],
        "complexity": 1
      }
    ],
    "classes": [
      {
        "name": "CoverageBaseline",
        "line_number": 16,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 19,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "now",
              "isoformat"
            ],
            "complexity": 1
          },
          {
            "name": "run_coverage",
            "signature": "def run_coverage(self) -> Dict",
            "docstring": "Run coverage and get detailed results.",
            "line_number": 23,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict",
            "calls": [
              "open",
              "print",
              "exists",
              "Path",
              "run",
              "load"
            ],
            "complexity": 2
          },
          {
            "name": "analyze_uncovered",
            "signature": "def analyze_uncovered(self, coverage_data: Dict) -> Dict[str, List[int]]",
            "docstring": "Analyze which lines are uncovered.",
            "line_number": 49,
            "is_public": true,
            "parameters": [
              "self",
              "coverage_data"
            ],
            "return_type": "Dict[str, List[int]]",
            "calls": [
              "items",
              "get"
            ],
            "complexity": 4
          },
          {
            "name": "categorize_failures",
            "signature": "def categorize_failures(self) -> Dict[str, List[str]]",
            "docstring": "Categorize test failures by type.",
            "line_number": 61,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, List[str]]",
            "calls": [
              "run",
              "split",
              "append",
              "print"
            ],
            "complexity": 12
          },
          {
            "name": "generate_report",
            "signature": "def generate_report(self)",
            "docstring": "Generate comprehensive baseline report.",
            "line_number": 99,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "open",
              "run_coverage",
              "analyze_uncovered",
              "print",
              "generate_priority_matrix",
              "Path",
              "len",
              "dump",
              "get",
              "sorted",
              "categorize_failures"
            ],
            "complexity": 5
          },
          {
            "name": "generate_priority_matrix",
            "signature": "def generate_priority_matrix(self, uncovered: Dict, failures: Dict)",
            "docstring": "Generate priority matrix for fixes.",
            "line_number": 171,
            "is_public": true,
            "parameters": [
              "self",
              "uncovered",
              "failures"
            ],
            "return_type": null,
            "calls": [
              "open",
              "print",
              "len",
              "dump",
              "append",
              "get",
              "sorted"
            ],
            "complexity": 7
          }
        ],
        "bases": [],
        "docstring": "Assess current test coverage and create baseline."
      }
    ],
    "imports": "{'datetime', 'pathlib', 'sys', 'json', 'typing', 'subprocess'}",
    "dependencies": "{'datetime', 'pathlib', 'sys', 'json', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 244,
    "complexity": 1
  },
  "archive\\legacy_scripts\\coverage_improver.py": {
    "file_path": "archive\\legacy_scripts\\coverage_improver.py",
    "file_hash": "066232065135f7b4aa373d351289bbf2",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main function to improve test coverage to 100%.",
        "line_number": 417,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "generate_edge_case_tests",
          "identify_missing_tests",
          "print",
          "isinstance",
          "generate_missing_tests",
          "len",
          "run_improved_coverage",
          "write_generated_tests",
          "get",
          "CoverageImprover",
          "analyze_current_coverage"
        ],
        "complexity": 5
      }
    ],
    "classes": [
      {
        "name": "CoverageImprover",
        "line_number": 19,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, source_dir: str, test_dir: str)",
            "docstring": "Initialize coverage improver.\n\nArgs:\n    source_dir: Directory containing source code\n    test_dir: Directory containing tests",
            "line_number": 22,
            "is_public": false,
            "parameters": [
              "self",
              "source_dir",
              "test_dir"
            ],
            "return_type": null,
            "calls": [
              "str",
              "Path",
              "Coverage"
            ],
            "complexity": 1
          },
          {
            "name": "analyze_current_coverage",
            "signature": "def analyze_current_coverage(self) -> Dict[str, Any]",
            "docstring": "Analyze current test coverage.",
            "line_number": 39,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "open",
              "values",
              "print",
              "exists",
              "str",
              "Path",
              "len",
              "run",
              "get",
              "load",
              "sum"
            ],
            "complexity": 5
          },
          {
            "name": "identify_missing_tests",
            "signature": "def identify_missing_tests(self) -> List[Dict[str, Any]]",
            "docstring": "Identify what tests are missing.",
            "line_number": 80,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "List[Dict[str, Any]]",
            "calls": [
              "items",
              "open",
              "isinstance",
              "exists",
              "str",
              "Path",
              "append",
              "parse",
              "walk",
              "read",
              "unparse"
            ],
            "complexity": 12
          },
          {
            "name": "generate_missing_tests",
            "signature": "def generate_missing_tests(self) -> Dict[str, str]",
            "docstring": "Generate tests for uncovered code.",
            "line_number": 135,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, str]",
            "calls": [
              "items",
              "str",
              "Path",
              "append",
              "_generate_test_file"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_test_file",
            "signature": "def _generate_test_file(self, source_file: str, missing_items: List[Dict]) -> str",
            "docstring": "Generate test file content for missing coverage.",
            "line_number": 160,
            "is_public": false,
            "parameters": [
              "self",
              "source_file",
              "missing_items"
            ],
            "return_type": "str",
            "calls": [
              "_generate_function_coverage_test",
              "_generate_error_handler_test",
              "title",
              "replace",
              "with_suffix",
              "str",
              "Path",
              "append",
              "relative_to",
              "join",
              "_generate_branch_test"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_function_coverage_test",
            "signature": "def _generate_function_coverage_test(self, func_info: Dict) -> str",
            "docstring": "Generate test for uncovered function.",
            "line_number": 217,
            "is_public": false,
            "parameters": [
              "self",
              "func_info"
            ],
            "return_type": "str",
            "calls": [
              "get"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_error_handler_test",
            "signature": "def _generate_error_handler_test(self, handler_info: Dict) -> str",
            "docstring": "Generate test for uncovered error handler.",
            "line_number": 242,
            "is_public": false,
            "parameters": [
              "self",
              "handler_info"
            ],
            "return_type": "str",
            "calls": [
              "get"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_branch_test",
            "signature": "def _generate_branch_test(self, branch_info: Dict) -> str",
            "docstring": "Generate test for uncovered branch.",
            "line_number": 258,
            "is_public": false,
            "parameters": [
              "self",
              "branch_info"
            ],
            "return_type": "str",
            "calls": [
              "get"
            ],
            "complexity": 1
          },
          {
            "name": "generate_edge_case_tests",
            "signature": "def generate_edge_case_tests(self) -> Dict[str, str]",
            "docstring": "Generate edge case tests for better coverage.",
            "line_number": 278,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, str]",
            "calls": [
              "_generate_edge_cases_for_file",
              "rglob",
              "str"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_edge_cases_for_file",
            "signature": "def _generate_edge_cases_for_file(self, source_file: Path) -> Optional[str]",
            "docstring": "Generate edge case tests for a file.",
            "line_number": 294,
            "is_public": false,
            "parameters": [
              "self",
              "source_file"
            ],
            "return_type": "Optional[str]",
            "calls": [
              "open",
              "isinstance",
              "replace",
              "title",
              "with_suffix",
              "str",
              "_generate_edge_case_test",
              "startswith",
              "append",
              "relative_to",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 9
          },
          {
            "name": "_generate_edge_case_test",
            "signature": "def _generate_edge_case_test(self, func_node: ast.FunctionDef) -> str",
            "docstring": "Generate edge case test for a function.",
            "line_number": 341,
            "is_public": false,
            "parameters": [
              "self",
              "func_node"
            ],
            "return_type": "str",
            "calls": [
              "str",
              "join"
            ],
            "complexity": 2
          },
          {
            "name": "write_generated_tests",
            "signature": "def write_generated_tests(self, tests: Dict[str, str]) -> int",
            "docstring": "Write generated tests to files.",
            "line_number": 373,
            "is_public": true,
            "parameters": [
              "self",
              "tests"
            ],
            "return_type": "int",
            "calls": [
              "items",
              "open",
              "write",
              "print",
              "Path",
              "mkdir"
            ],
            "complexity": 2
          },
          {
            "name": "run_improved_coverage",
            "signature": "def run_improved_coverage(self) -> Dict[str, Any]",
            "docstring": "Run tests with newly generated tests and measure improvement.",
            "line_number": 389,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "split",
              "print",
              "rstrip",
              "str",
              "float",
              "len",
              "run"
            ],
            "complexity": 5
          }
        ],
        "bases": [],
        "docstring": "Improves test coverage to 100%."
      }
    ],
    "imports": "{'pathlib', 'coverage', 'sys', 'json', 'ast', 'textwrap', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'pathlib', 'coverage', 'sys', 'json', 'ast', 'textwrap', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 484,
    "complexity": 5
  },
  "archive\\legacy_scripts\\data_flow_tests.py": {
    "file_path": "archive\\legacy_scripts\\data_flow_tests.py",
    "file_hash": "e91d54a8929514366ec2179ada32faa2",
    "functions": [],
    "classes": [
      {
        "name": "DataFlowResult",
        "line_number": 25,
        "methods": [],
        "bases": [],
        "docstring": "Result of a data flow test."
      },
      {
        "name": "DataFlowTester",
        "line_number": 37,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 43,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "register_implementation",
            "signature": "def register_implementation(self, interface: type, implementation: Any) -> None",
            "docstring": "Register an implementation for testing.",
            "line_number": 48,
            "is_public": true,
            "parameters": [
              "self",
              "interface",
              "implementation"
            ],
            "return_type": "None",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "test_complete_generation_flow",
            "signature": "def test_complete_generation_flow(self) -> DataFlowResult",
            "docstring": "Test complete generation flow from input to final patterns.",
            "line_number": 56,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "items",
              "deduplicate_patterns",
              "isinstance",
              "print",
              "str",
              "len",
              "time",
              "optimize_patterns",
              "evaluate_pattern",
              "_create_test_dataset",
              "get",
              "all",
              "OptimizationConfig",
              "enumerate",
              "generate_patterns",
              "GenerationRequest",
              "DataFlowResult"
            ],
            "complexity": 8
          },
          {
            "name": "test_concurrent_generation_flow",
            "signature": "def test_concurrent_generation_flow(self) -> DataFlowResult",
            "docstring": "Test concurrent processing of multiple generation requests.",
            "line_number": 186,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "items",
              "isinstance",
              "str",
              "len",
              "time",
              "_create_test_dataset",
              "get",
              "generate_patterns_batch",
              "zip",
              "enumerate",
              "append",
              "all",
              "range",
              "GenerationRequest",
              "DataFlowResult"
            ],
            "complexity": 7
          },
          {
            "name": "test_pipeline_data_flow",
            "signature": "def test_pipeline_data_flow(self) -> DataFlowResult",
            "docstring": "Test complete pipeline data flow.",
            "line_number": 255,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "items",
              "extend",
              "set",
              "isinstance",
              "str",
              "len",
              "time",
              "_create_test_dataset",
              "get",
              "run",
              "all",
              "validate_inputs",
              "generate_report",
              "keys",
              "DataFlowResult"
            ],
            "complexity": 7
          },
          {
            "name": "test_resource_cleanup_flow",
            "signature": "def test_resource_cleanup_flow(self) -> DataFlowResult",
            "docstring": "Test proper resource cleanup in data flows.",
            "line_number": 341,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "getrusage",
              "generate_patterns",
              "collect",
              "str",
              "time",
              "get",
              "range",
              "GenerationRequest",
              "DataFlowResult"
            ],
            "complexity": 5
          },
          {
            "name": "test_error_recovery_flow",
            "signature": "def test_error_recovery_flow(self) -> DataFlowResult",
            "docstring": "Test error recovery and graceful degradation.",
            "line_number": 414,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "isinstance",
              "str",
              "len",
              "time",
              "evaluate_pattern",
              "get",
              "all",
              "Pattern",
              "generate_patterns",
              "GenerationRequest",
              "DataFlowResult"
            ],
            "complexity": 14
          },
          {
            "name": "test_high_throughput_flow",
            "signature": "def test_high_throughput_flow(self) -> DataFlowResult",
            "docstring": "Test high throughput data processing.",
            "line_number": 505,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "isinstance",
              "str",
              "len",
              "time",
              "generate_patterns_batch",
              "get",
              "append",
              "range",
              "GenerationRequest",
              "DataFlowResult"
            ],
            "complexity": 8
          },
          {
            "name": "test_export_data_flow",
            "signature": "def test_export_data_flow(self) -> DataFlowResult",
            "docstring": "Test complete data export flow.",
            "line_number": 573,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "DataFlowResult",
            "calls": [
              "values",
              "NamedTemporaryFile",
              "export_patterns",
              "exists",
              "str",
              "Path",
              "len",
              "time",
              "export_to_csv",
              "stat",
              "get",
              "sum",
              "DataFrame",
              "generate_patterns",
              "export_to_excel",
              "GenerationRequest",
              "DataFlowResult"
            ],
            "complexity": 11
          },
          {
            "name": "_create_test_dataset",
            "signature": "def _create_test_dataset(self) -> Dict[str, Dict[str, List[str]]]",
            "docstring": "Create a comprehensive test dataset.",
            "line_number": 655,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Dict[str, List[str]]]",
            "calls": [],
            "complexity": 2
          },
          {
            "name": "run_all_data_flow_tests",
            "signature": "def run_all_data_flow_tests(self) -> Dict[str, DataFlowResult]",
            "docstring": "Run all data flow tests.",
            "line_number": 718,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, DataFlowResult]",
            "calls": [
              "print",
              "str",
              "test_method",
              "upper",
              "DataFlowResult"
            ],
            "complexity": 3
          },
          {
            "name": "generate_data_flow_report",
            "signature": "def generate_data_flow_report(self) -> Dict[str, Any]",
            "docstring": "Generate comprehensive data flow test report.",
            "line_number": 749,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "values",
              "min",
              "max",
              "len",
              "sum"
            ],
            "complexity": 1
          },
          {
            "name": "export_data_flow_report",
            "signature": "def export_data_flow_report(self, output_path: Path) -> None",
            "docstring": "Export data flow test report.",
            "line_number": 790,
            "is_public": true,
            "parameters": [
              "self",
              "output_path"
            ],
            "return_type": "None",
            "calls": [
              "open",
              "generate_data_flow_report",
              "dump",
              "print"
            ],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Tests complete data flows through the pipeline system.\nValidates data integrity, performance, and concurrent processing."
      }
    ],
    "imports": "{'datetime', 'pathlib', 'threading', 'concurrent.futures', 'queue', 'json', 'time', 'asyncio', 'src.interfaces', 'dataclasses', 'typing'}",
    "dependencies": "{'datetime', 'pathlib', 'threading', 'src', 'queue', 'json', 'time', 'asyncio', 'dataclasses', 'concurrent', 'typing'}",
    "globals": [],
    "main_block": false,
    "total_lines": 797,
    "complexity": 0
  },
  "archive\\legacy_scripts\\diagnose_final_five.py": {
    "file_path": "archive\\legacy_scripts\\diagnose_final_five.py",
    "file_hash": "4ef28811a36442e78d8c255415edf6c9",
    "functions": [
      {
        "name": "diagnose_module",
        "signature": "def diagnose_module(module_name, module_path)",
        "docstring": "Diagnose why a module is failing.",
        "line_number": 30,
        "is_public": true,
        "parameters": [
          "module_name",
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "GenerationConfig",
          "lower",
          "split",
          "print",
          "exists",
          "GenerativeModel",
          "generate_content",
          "len",
          "str",
          "append",
          "parse",
          "read"
        ],
        "complexity": 26
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Diagnose the final 5 modules.",
        "line_number": 172,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "diagnose_module",
          "Path",
          "print"
        ],
        "complexity": 2
      }
    ],
    "classes": [],
    "imports": "{'pathlib', 'google.generativeai', 'sys', 'ast', 'os'}",
    "dependencies": "{'google', 'pathlib', 'sys', 'ast', 'os'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 201,
    "complexity": 28
  },
  "archive\\legacy_scripts\\enhanced_context_aware_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\enhanced_context_aware_test_generator.py",
    "file_hash": "793088325cdbd74ee996045ea879ee57",
    "functions": [],
    "classes": [
      {
        "name": "BusinessContext",
        "line_number": 27,
        "methods": [],
        "bases": [],
        "docstring": "Extracted business context for a module."
      },
      {
        "name": "BusinessContextExtractor",
        "line_number": 37,
        "methods": [
          {
            "name": "extract_from_module",
            "signature": "def extract_from_module(self, module_path: Path) -> BusinessContext",
            "docstring": "Extract business context from module and related files.",
            "line_number": 40,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "BusinessContext",
            "calls": [
              "open",
              "BusinessContext",
              "isinstance",
              "_extract_invariants",
              "exists",
              "findall",
              "_identify_edge_cases",
              "append",
              "_find_existing_test_patterns",
              "get_docstring",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 6
          },
          {
            "name": "_find_existing_test_patterns",
            "signature": "def _find_existing_test_patterns(self, module_path: Path) -> List[str]",
            "docstring": "Find existing test patterns for similar modules.",
            "line_number": 80,
            "is_public": false,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "List[str]",
            "calls": [
              "extend",
              "open",
              "exists",
              "Path",
              "findall",
              "glob",
              "read"
            ],
            "complexity": 4
          },
          {
            "name": "_extract_invariants",
            "signature": "def _extract_invariants(self, code: str) -> List[str]",
            "docstring": "Extract invariants and constraints from code.",
            "line_number": 98,
            "is_public": false,
            "parameters": [
              "self",
              "code"
            ],
            "return_type": "List[str]",
            "calls": [
              "extend",
              "append",
              "findall"
            ],
            "complexity": 9
          },
          {
            "name": "_identify_edge_cases",
            "signature": "def _identify_edge_cases(self, code: str) -> List[str]",
            "docstring": "Identify potential edge cases from code structure.",
            "line_number": 121,
            "is_public": false,
            "parameters": [
              "self",
              "code"
            ],
            "return_type": "List[str]",
            "calls": [
              "items",
              "search",
              "append"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Extracts business context from various sources."
      },
      {
        "name": "PropertyBasedTestGenerator",
        "line_number": 147,
        "methods": [
          {
            "name": "generate_properties",
            "signature": "def generate_properties(self, module_path: Path, context: BusinessContext) -> str",
            "docstring": "Generate property-based test strategies.",
            "line_number": 150,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "context"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "open",
              "append",
              "join",
              "read"
            ],
            "complexity": 6
          }
        ],
        "bases": [],
        "docstring": "Generates property-based tests to avoid shallow coverage."
      },
      {
        "name": "ContractBasedTestGenerator",
        "line_number": 202,
        "methods": [
          {
            "name": "extract_contracts",
            "signature": "def extract_contracts(self, module_path: Path) -> Dict[str, List[str]]",
            "docstring": "Extract function contracts from signatures and docstrings.",
            "line_number": 205,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, List[str]]",
            "calls": [
              "extend",
              "open",
              "isinstance",
              "startswith",
              "findall",
              "append",
              "get_docstring",
              "parse",
              "walk",
              "read",
              "unparse"
            ],
            "complexity": 12
          },
          {
            "name": "generate_contract_tests",
            "signature": "def generate_contract_tests(self, contracts: Dict[str, List[str]]) -> str",
            "docstring": "Generate tests that verify contracts, not implementation.",
            "line_number": 253,
            "is_public": true,
            "parameters": [
              "self",
              "contracts"
            ],
            "return_type": "str",
            "calls": [
              "items",
              "startswith",
              "strip",
              "append",
              "join"
            ],
            "complexity": 7
          }
        ],
        "bases": [],
        "docstring": "Generates tests based on contracts/interfaces, not implementation."
      },
      {
        "name": "EnhancedTestGenerator",
        "line_number": 293,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 296,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "ContractBasedTestGenerator",
              "BusinessContextExtractor",
              "PropertyBasedTestGenerator"
            ],
            "complexity": 1
          },
          {
            "name": "generate_enhanced_test",
            "signature": "def generate_enhanced_test(self, module_path: Path) -> str",
            "docstring": "Generate enhanced test with business context, properties, and contracts.",
            "line_number": 301,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "str",
            "calls": [
              "generate_contract_tests",
              "extract_from_module",
              "title",
              "_generate_edge_case_tests",
              "_generate_with_llm",
              "_build_context_aware_prompt",
              "extract_contracts",
              "generate_properties"
            ],
            "complexity": 1
          },
          {
            "name": "_build_context_aware_prompt",
            "signature": "def _build_context_aware_prompt(self, module_path: Path, context: BusinessContext, contracts: Dict) -> str",
            "docstring": "Build LLM prompt with full context.",
            "line_number": 344,
            "is_public": false,
            "parameters": [
              "self",
              "module_path",
              "context",
              "contracts"
            ],
            "return_type": "str",
            "calls": [
              "dumps",
              "open",
              "join",
              "read"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_with_llm",
            "signature": "def _generate_with_llm(self, prompt: str) -> str",
            "docstring": "Generate test with LLM.",
            "line_number": 385,
            "is_public": false,
            "parameters": [
              "self",
              "prompt"
            ],
            "return_type": "str",
            "calls": [
              "GenerativeModel",
              "generate_content"
            ],
            "complexity": 3
          },
          {
            "name": "_generate_edge_case_tests",
            "signature": "def _generate_edge_case_tests(self, context: BusinessContext) -> str",
            "docstring": "Generate specific edge case tests.",
            "line_number": 397,
            "is_public": false,
            "parameters": [
              "self",
              "context"
            ],
            "return_type": "str",
            "calls": [
              "replace",
              "lower",
              "append",
              "join"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Main generator that combines all enhancements."
      }
    ],
    "imports": "{'pathlib', 're', 'google.generativeai', 'json', 'ast', 'dataclasses', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'google', 'pathlib', 're', 'json', 'ast', 'dataclasses', 'os', 'typing', 'subprocess'}",
    "globals": [
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 428,
    "complexity": 0
  },
  "archive\\legacy_scripts\\enhanced_self_healing_verifier.py": {
    "file_path": "archive\\legacy_scripts\\enhanced_self_healing_verifier.py",
    "file_hash": "e219e57ff01f1f0857babcead76bb08c",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without enhanced tests.",
        "line_number": 67,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 9
      },
      {
        "name": "make_llm_call",
        "signature": "def make_llm_call(prompt, purpose = 'generation')",
        "docstring": "Make rate-limited LLM call.",
        "line_number": 93,
        "is_public": true,
        "parameters": [
          "prompt",
          "purpose"
        ],
        "return_type": null,
        "calls": [
          "print",
          "wait_if_needed",
          "GenerativeModel",
          "generate_content",
          "GenerationConfig"
        ],
        "complexity": 2
      },
      {
        "name": "fix_syntax_error",
        "signature": "def fix_syntax_error(test_code, error_msg, iteration = 1)",
        "docstring": "Use LLM to fix syntax errors in generated code.",
        "line_number": 114,
        "is_public": true,
        "parameters": [
          "test_code",
          "error_msg",
          "iteration"
        ],
        "return_type": null,
        "calls": [
          "make_llm_call",
          "split",
          "print"
        ],
        "complexity": 4
      },
      {
        "name": "verify_test_exhaustiveness",
        "signature": "def verify_test_exhaustiveness(test_code, module_code, module_name, pass_number = 1)",
        "docstring": "Verify if test is exhaustive and suggest improvements.",
        "line_number": 150,
        "is_public": true,
        "parameters": [
          "test_code",
          "module_code",
          "module_name",
          "pass_number"
        ],
        "return_type": null,
        "calls": [
          "filter",
          "split",
          "print",
          "startswith",
          "strip",
          "make_llm_call",
          "append",
          "join",
          "int"
        ],
        "complexity": 16
      },
      {
        "name": "generate_enhanced_test",
        "signature": "def generate_enhanced_test(module_path, max_healing_iterations = 5, max_verifier_passes = 3)",
        "docstring": "Generate test with self-healing and iterative verification.",
        "line_number": 234,
        "is_public": true,
        "parameters": [
          "module_path",
          "max_healing_iterations",
          "max_verifier_passes"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "make_llm_call",
          "verify_test_exhaustiveness",
          "relative_to",
          "mkdir",
          "fix_syntax_error",
          "parse",
          "range",
          "rsplit",
          "read"
        ],
        "complexity": 28
      },
      {
        "name": "process_modules_enhanced",
        "signature": "def process_modules_enhanced(modules, max_workers = 3)",
        "docstring": "Process modules with enhanced healing and verification.",
        "line_number": 381,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "as_completed",
          "print",
          "str",
          "Path",
          "len",
          "glob",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "result",
          "list"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main enhanced conversion process.",
        "line_number": 437,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "list",
          "min",
          "open",
          "lower",
          "print",
          "Path",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "total_seconds",
          "sum",
          "process_modules_enhanced",
          "now",
          "isoformat"
        ],
        "complexity": 4
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 49,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 50,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 56,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'traceback', 'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os'}",
    "dependencies": "{'traceback', 'os', 'datetime', 'pathlib', 'threading', 'google', 'sys', 'json', 'ast', 'time', 'concurrent'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 512,
    "complexity": 69
  },
  "archive\\legacy_scripts\\enhance_auto_generated_tests.py": {
    "file_path": "archive\\legacy_scripts\\enhance_auto_generated_tests.py",
    "file_hash": "7de623e43bd7293572a7eb060d52bb19",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main execution function.",
        "line_number": 316,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "enhance_all_tests",
          "print",
          "run",
          "TestEnhancer"
        ],
        "complexity": 5
      }
    ],
    "classes": [
      {
        "name": "TestEnhancer",
        "line_number": 24,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 27,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "analyze_source_module",
            "signature": "def analyze_source_module(self, module_name: str) -> Dict[str, Any]",
            "docstring": "Analyze the source module to understand its structure.",
            "line_number": 51,
            "is_public": true,
            "parameters": [
              "self",
              "module_name"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_get_init_args",
              "isinstance",
              "replace",
              "print",
              "exists",
              "any",
              "append",
              "parse",
              "walk",
              "read_text",
              "isupper"
            ],
            "complexity": 13
          },
          {
            "name": "_get_init_args",
            "signature": "def _get_init_args(self, class_node: ast.ClassDef) -> List[str]",
            "docstring": "Get __init__ method arguments.",
            "line_number": 110,
            "is_public": false,
            "parameters": [
              "self",
              "class_node"
            ],
            "return_type": "List[str]",
            "calls": [
              "isinstance"
            ],
            "complexity": 4
          },
          {
            "name": "enhance_test_file",
            "signature": "def enhance_test_file(self, test_file: Path) -> bool",
            "docstring": "Enhance a single test file with specific logic.",
            "line_number": 117,
            "is_public": true,
            "parameters": [
              "self",
              "test_file"
            ],
            "return_type": "bool",
            "calls": [
              "enhance_initialization_tests",
              "enhance_edge_case_tests",
              "read_text",
              "any",
              "enhance_integration_tests",
              "analyze_source_module",
              "add_enhancement_marker",
              "enhance_method_tests",
              "write_text"
            ],
            "complexity": 5
          },
          {
            "name": "enhance_initialization_tests",
            "signature": "def enhance_initialization_tests(self, content: str, analysis: Dict) -> str",
            "docstring": "Enhance initialization tests with realistic parameters.",
            "line_number": 151,
            "is_public": true,
            "parameters": [
              "self",
              "content",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "generate_test_data",
              "sub"
            ],
            "complexity": 5
          },
          {
            "name": "enhance_method_tests",
            "signature": "def enhance_method_tests(self, content: str, analysis: Dict) -> str",
            "docstring": "Enhance method tests with real method calls and assertions.",
            "line_number": 175,
            "is_public": true,
            "parameters": [
              "self",
              "content",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "startswith",
              "group",
              "sub"
            ],
            "complexity": 5
          },
          {
            "name": "enhance_edge_case_tests",
            "signature": "def enhance_edge_case_tests(self, content: str, analysis: Dict) -> str",
            "docstring": "Enhance edge case tests with specific test cases.",
            "line_number": 199,
            "is_public": true,
            "parameters": [
              "self",
              "content",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "extend",
              "split",
              "startswith",
              "strip",
              "append",
              "join"
            ],
            "complexity": 7
          },
          {
            "name": "enhance_integration_tests",
            "signature": "def enhance_integration_tests(self, content: str, analysis: Dict) -> str",
            "docstring": "Enhance integration tests with realistic scenarios.",
            "line_number": 233,
            "is_public": true,
            "parameters": [
              "self",
              "content",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "strip",
              "sub"
            ],
            "complexity": 2
          },
          {
            "name": "generate_test_data",
            "signature": "def generate_test_data(self, class_name: str, init_args: List[str]) -> str",
            "docstring": "Generate realistic test data based on class name and arguments.",
            "line_number": 258,
            "is_public": true,
            "parameters": [
              "self",
              "class_name",
              "init_args"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "append",
              "join"
            ],
            "complexity": 10
          },
          {
            "name": "add_enhancement_marker",
            "signature": "def add_enhancement_marker(self, content: str) -> str",
            "docstring": "Add marker to indicate test has been enhanced.",
            "line_number": 288,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "replace",
              "join",
              "split",
              "enumerate"
            ],
            "complexity": 4
          },
          {
            "name": "enhance_all_tests",
            "signature": "def enhance_all_tests(self)",
            "docstring": "Enhance all auto-generated test files.",
            "line_number": 300,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "len",
              "glob",
              "enhance_test_file",
              "list"
            ],
            "complexity": 4
          }
        ],
        "bases": [],
        "docstring": "Enhances auto-generated tests with specific logic."
      }
    ],
    "imports": "{'pathlib', 're', 'sys', 'json', 'ast', 'os', 'typing'}",
    "dependencies": "{'pathlib', 're', 'sys', 'json', 'ast', 'os', 'typing'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 349,
    "complexity": 5
  },
  "archive\\legacy_scripts\\fast_converter.py": {
    "file_path": "archive\\legacy_scripts\\fast_converter.py",
    "file_hash": "e71fd96952be1321ed03663a64491a89",
    "functions": [
      {
        "name": "generate_test_for_module",
        "signature": "def generate_test_for_module(module_path: Path, client: genai.Client) -> bool",
        "docstring": "Generate test for a single module quickly.",
        "line_number": 19,
        "is_public": true,
        "parameters": [
          "module_path",
          "client"
        ],
        "return_type": "bool",
        "calls": [
          "split",
          "print",
          "replace",
          "with_suffix",
          "GenerateContentConfig",
          "generate_content",
          "Path",
          "len",
          "str",
          "strip",
          "relative_to",
          "mkdir",
          "read_text",
          "write_text",
          "count"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Generate tests for critical modules.",
        "line_number": 85,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "Client",
          "exists",
          "generate_test_for_module",
          "getenv",
          "Path",
          "len"
        ],
        "complexity": 5
      }
    ],
    "classes": [],
    "imports": "{'dotenv', 'google', 'pathlib', 'sys', 'ast', 'google.genai', 'os'}",
    "dependencies": "{'dotenv', 'google', 'pathlib', 'sys', 'ast', 'os'}",
    "globals": [],
    "main_block": true,
    "total_lines": 136,
    "complexity": 11
  },
  "archive\\legacy_scripts\\final_five_converter.py": {
    "file_path": "archive\\legacy_scripts\\final_five_converter.py",
    "file_hash": "07892f80256754827d78d17514c04b88",
    "functions": [
      {
        "name": "generate_test_for_module",
        "signature": "def generate_test_for_module(module_name, module_path)",
        "docstring": "Generate test for a specific module.",
        "line_number": 30,
        "is_public": true,
        "parameters": [
          "module_name",
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "print",
          "replace",
          "GenerativeModel",
          "generate_content",
          "Path",
          "str",
          "relative_to",
          "GenerationConfig",
          "read"
        ],
        "complexity": 10
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Generate tests for the final 5 modules.",
        "line_number": 116,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sleep",
          "generate_test_for_module",
          "Path",
          "print"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'pathlib', 'google.generativeai', 'sys', 'time', 'os'}",
    "dependencies": "{'google', 'pathlib', 'sys', 'time', 'os'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 154,
    "complexity": 14
  },
  "archive\\legacy_scripts\\find_truly_missing.py": {
    "file_path": "archive\\legacy_scripts\\find_truly_missing.py",
    "file_hash": "1d95d9033ca84ddb740be8c06fec56c2",
    "functions": [
      {
        "name": "find_truly_missing",
        "signature": "def find_truly_missing()",
        "docstring": "Find modules with absolutely no test coverage.",
        "line_number": 8,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "items",
          "sort",
          "set",
          "split",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "relative_to",
          "enumerate",
          "add",
          "rglob"
        ],
        "complexity": 14
      }
    ],
    "classes": [],
    "imports": "{'pathlib'}",
    "dependencies": "{'pathlib'}",
    "globals": [],
    "main_block": true,
    "total_lines": 74,
    "complexity": 14
  },
  "archive\\legacy_scripts\\fix_all_imports.py": {
    "file_path": "archive\\legacy_scripts\\fix_all_imports.py",
    "file_hash": "b401ebe256fb121b13654e69c95c0292",
    "functions": [
      {
        "name": "fix_test_imports",
        "signature": "def fix_test_imports(test_file: Path) -> bool",
        "docstring": "Fix imports in a single test file.",
        "line_number": 12,
        "is_public": true,
        "parameters": [
          "test_file"
        ],
        "return_type": "bool",
        "calls": [
          "print",
          "startswith",
          "strip",
          "join",
          "enumerate",
          "splitlines",
          "read_text",
          "write_text"
        ],
        "complexity": 9
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Fix all test files.",
        "line_number": 52,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "Path",
          "fix_test_imports",
          "len",
          "glob",
          "list"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'sys', 'pathlib'}",
    "dependencies": "{'sys', 'pathlib'}",
    "globals": [],
    "main_block": true,
    "total_lines": 91,
    "complexity": 13
  },
  "archive\\legacy_scripts\\fix_enhanced_test_imports.py": {
    "file_path": "archive\\legacy_scripts\\fix_enhanced_test_imports.py",
    "file_hash": "fda06b8440e16be78240a03c16ddad97",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main execution function.",
        "line_number": 193,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "fix_all_tests",
          "run",
          "EnhancedTestImportFixer",
          "print"
        ],
        "complexity": 6
      }
    ],
    "classes": [
      {
        "name": "EnhancedTestImportFixer",
        "line_number": 17,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 20,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "fix_test_file",
            "signature": "def fix_test_file(self, test_file: Path) -> bool",
            "docstring": "Fix import issues in a single test file.",
            "line_number": 24,
            "is_public": true,
            "parameters": [
              "self",
              "test_file"
            ],
            "return_type": "bool",
            "calls": [
              "improve_mock_behavior",
              "fix_method_calls",
              "fix_class_instantiation",
              "read_text",
              "write_text",
              "fix_missing_imports"
            ],
            "complexity": 4
          },
          {
            "name": "fix_missing_imports",
            "signature": "def fix_missing_imports(self, content: str) -> str",
            "docstring": "Add proper import handling for missing classes.",
            "line_number": 50,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "split",
              "startswith",
              "join",
              "enumerate",
              "insert"
            ],
            "complexity": 6
          },
          {
            "name": "fix_class_instantiation",
            "signature": "def fix_class_instantiation(self, content: str) -> str",
            "docstring": "Fix class instantiation to use safer patterns.",
            "line_number": 93,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "replace",
              "sub"
            ],
            "complexity": 5
          },
          {
            "name": "fix_method_calls",
            "signature": "def fix_method_calls(self, content: str) -> str",
            "docstring": "Fix method calls that may fail.",
            "line_number": 136,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "group",
              "sub"
            ],
            "complexity": 2
          },
          {
            "name": "improve_mock_behavior",
            "signature": "def improve_mock_behavior(self, content: str) -> str",
            "docstring": "Improve mock behavior to be more realistic.",
            "line_number": 161,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "replace"
            ],
            "complexity": 2
          },
          {
            "name": "fix_all_tests",
            "signature": "def fix_all_tests(self)",
            "docstring": "Fix all enhanced test files.",
            "line_number": 177,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "fix_test_file",
              "print",
              "len",
              "glob",
              "list"
            ],
            "complexity": 4
          }
        ],
        "bases": [],
        "docstring": "Fixes import issues in enhanced tests."
      }
    ],
    "imports": "{'sys', 'pathlib', 're'}",
    "dependencies": "{'sys', 'pathlib', 're'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 230,
    "complexity": 6
  },
  "archive\\legacy_scripts\\fix_failing_tests.py": {
    "file_path": "archive\\legacy_scripts\\fix_failing_tests.py",
    "file_hash": "a016bde25e597f9d5026c9c444458a20",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main execution function.",
        "line_number": 191,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "split",
          "print",
          "run",
          "TestFixer",
          "fix_all_tests"
        ],
        "complexity": 5
      }
    ],
    "classes": [
      {
        "name": "TestFixer",
        "line_number": 23,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 26,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "fix_all_tests",
            "signature": "def fix_all_tests(self)",
            "docstring": "Fix all test files in the tests directory.",
            "line_number": 44,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "fix_test_file",
              "print",
              "len",
              "glob",
              "list"
            ],
            "complexity": 3
          },
          {
            "name": "fix_test_file",
            "signature": "def fix_test_file(self, test_file: Path)",
            "docstring": "Fix a single test file.",
            "line_number": 58,
            "is_public": true,
            "parameters": [
              "self",
              "test_file"
            ],
            "return_type": null,
            "calls": [
              "print",
              "fix_initialization_issues",
              "add_mock_helpers",
              "fix_undefined_variables",
              "write_text",
              "fix_method_calls",
              "fix_imports",
              "read_text",
              "fix_pytest_issues"
            ],
            "complexity": 4
          },
          {
            "name": "fix_imports",
            "signature": "def fix_imports(self, content: str) -> str",
            "docstring": "Fix import issues by adding proper error handling.",
            "line_number": 85,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "split",
              "startswith",
              "any",
              "strip",
              "append",
              "join",
              "insert"
            ],
            "complexity": 7
          },
          {
            "name": "fix_undefined_variables",
            "signature": "def fix_undefined_variables(self, content: str) -> str",
            "docstring": "Fix undefined variable references.",
            "line_number": 105,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "items",
              "sub"
            ],
            "complexity": 2
          },
          {
            "name": "fix_initialization_issues",
            "signature": "def fix_initialization_issues(self, content: str) -> str",
            "docstring": "Fix complex class initialization issues.",
            "line_number": 111,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "split",
              "len",
              "startswith",
              "strip",
              "join",
              "enumerate",
              "range",
              "insert"
            ],
            "complexity": 13
          },
          {
            "name": "fix_method_calls",
            "signature": "def fix_method_calls(self, content: str) -> str",
            "docstring": "Fix method calls that will fail.",
            "line_number": 150,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "sub"
            ],
            "complexity": 1
          },
          {
            "name": "add_mock_helpers",
            "signature": "def add_mock_helpers(self, content: str) -> str",
            "docstring": "Add mock helper methods if needed.",
            "line_number": 162,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "replace"
            ],
            "complexity": 2
          },
          {
            "name": "fix_pytest_issues",
            "signature": "def fix_pytest_issues(self, content: str) -> str",
            "docstring": "Fix pytest-specific issues.",
            "line_number": 173,
            "is_public": true,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "replace",
              "sub"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Fixes common issues in auto-generated tests."
      }
    ],
    "imports": "{'pathlib', 're', 'sys', 'os', 'typing'}",
    "dependencies": "{'pathlib', 're', 'sys', 'os', 'typing'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 225,
    "complexity": 5
  },
  "archive\\legacy_scripts\\fix_import_paths.py": {
    "file_path": "archive\\legacy_scripts\\fix_import_paths.py",
    "file_hash": "2ddc7e368c8d5c914f33691fc4e22aff",
    "functions": [
      {
        "name": "fix_import_path",
        "signature": "def fix_import_path(test_content: str, test_filename: str) -> Tuple[str, List[str]]",
        "docstring": "Fix import paths in a test file.\n\nReturns:\n    Tuple of (fixed_content, list_of_changes)",
        "line_number": 11,
        "is_public": true,
        "parameters": [
          "test_content",
          "test_filename"
        ],
        "return_type": "Tuple[str, List[str]]",
        "calls": [
          "replace",
          "append",
          "get"
        ],
        "complexity": 6
      },
      {
        "name": "process_test_files",
        "signature": "def process_test_files()",
        "docstring": "Process all intelligent test files and fix their imports.",
        "line_number": 92,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "list",
          "print",
          "Path",
          "len",
          "glob",
          "fix_import_path",
          "read_text",
          "write_text"
        ],
        "complexity": 4
      },
      {
        "name": "verify_imports",
        "signature": "def verify_imports()",
        "docstring": "Verify that fixed imports can be resolved.",
        "line_number": 134,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "list",
          "compile",
          "print",
          "Path",
          "glob",
          "read_text"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'pathlib', 'typing', 're'}",
    "dependencies": "{'pathlib', 'typing', 're'}",
    "globals": [],
    "main_block": true,
    "total_lines": 166,
    "complexity": 14
  },
  "archive\\legacy_scripts\\fix_remaining_issues.py": {
    "file_path": "archive\\legacy_scripts\\fix_remaining_issues.py",
    "file_hash": "9af9f35cce1c2cd8a6a98c8fc5b0a252",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run remaining fixes.",
        "line_number": 381,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "TestIssueFixer",
          "apply_all_fixes",
          "print"
        ],
        "complexity": 1
      }
    ],
    "classes": [
      {
        "name": "TestIssueFixer",
        "line_number": 14,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 17,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "fix_async_await_issues",
            "signature": "def fix_async_await_issues(self)",
            "docstring": "Fix async/await issues in tests.",
            "line_number": 21,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "exists",
              "read_text",
              "write_text"
            ],
            "complexity": 4
          },
          {
            "name": "fix_missing_imports",
            "signature": "def fix_missing_imports(self)",
            "docstring": "Fix missing imports in test files.",
            "line_number": 70,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "print",
              "exists",
              "startswith",
              "insert",
              "join",
              "enumerate",
              "splitlines",
              "read_text",
              "write_text"
            ],
            "complexity": 11
          },
          {
            "name": "fix_pattern_metadata_issue",
            "signature": "def fix_pattern_metadata_issue(self)",
            "docstring": "Fix pattern.metadata issue.",
            "line_number": 119,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "exists",
              "read_text",
              "write_text"
            ],
            "complexity": 3
          },
          {
            "name": "fix_container_string_issue",
            "signature": "def fix_container_string_issue(self)",
            "docstring": "Fix container.register string issue.",
            "line_number": 158,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "exists",
              "read_text",
              "write_text"
            ],
            "complexity": 3
          },
          {
            "name": "fix_missing_class_imports",
            "signature": "def fix_missing_class_imports(self)",
            "docstring": "Fix missing class imports.",
            "line_number": 182,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "exists",
              "startswith",
              "join",
              "enumerate",
              "write_text",
              "splitlines",
              "read_text",
              "insert"
            ],
            "complexity": 6
          },
          {
            "name": "fix_response_data_structure",
            "signature": "def fix_response_data_structure(self)",
            "docstring": "Fix response data structure issues.",
            "line_number": 237,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "exists",
              "read_text",
              "write_text"
            ],
            "complexity": 3
          },
          {
            "name": "fix_domain_imports",
            "signature": "def fix_domain_imports(self)",
            "docstring": "Fix domain module imports.",
            "line_number": 272,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "exists",
              "read_text",
              "write_text"
            ],
            "complexity": 3
          },
          {
            "name": "fix_container_decorators",
            "signature": "def fix_container_decorators(self)",
            "docstring": "Fix container decorator imports.",
            "line_number": 314,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "exists",
              "read_text",
              "write_text"
            ],
            "complexity": 3
          },
          {
            "name": "apply_all_fixes",
            "signature": "def apply_all_fixes(self)",
            "docstring": "Apply all fixes.",
            "line_number": 350,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "values",
              "fix_response_data_structure",
              "fix_async_await_issues",
              "print",
              "fix_missing_class_imports",
              "fix_pattern_metadata_issue",
              "fix_container_decorators",
              "fix_container_string_issue",
              "sum",
              "fix_domain_imports",
              "fix_missing_imports"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Fix remaining test issues."
      }
    ],
    "imports": "{'sys', 'typing', 'pathlib', 're'}",
    "dependencies": "{'sys', 'typing', 'pathlib', 're'}",
    "globals": [],
    "main_block": true,
    "total_lines": 398,
    "complexity": 1
  },
  "archive\\legacy_scripts\\fix_tests_for_real_modules.py": {
    "file_path": "archive\\legacy_scripts\\fix_tests_for_real_modules.py",
    "file_hash": "7937d8ac5004a46210a2e0e955b448a0",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main execution function.",
        "line_number": 312,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "RealModuleTestFixer",
          "run",
          "fix_all_available_modules",
          "count"
        ],
        "complexity": 5
      }
    ],
    "classes": [
      {
        "name": "RealModuleTestFixer",
        "line_number": 19,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 22,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "find_importable_modules",
            "signature": "def find_importable_modules(self) -> Dict[str, Any]",
            "docstring": "Find which modules are actually importable.",
            "line_number": 28,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "_analyze_module_contents",
              "str",
              "import_module",
              "print"
            ],
            "complexity": 3
          },
          {
            "name": "_analyze_module_contents",
            "signature": "def _analyze_module_contents(self, module) -> Dict[str, Any]",
            "docstring": "Analyze what's actually in an importable module.",
            "line_number": 56,
            "is_public": false,
            "parameters": [
              "self",
              "module"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "isupper",
              "callable",
              "isinstance",
              "startswith",
              "append",
              "getattr",
              "dir",
              "_get_init_signature"
            ],
            "complexity": 7
          },
          {
            "name": "_get_init_signature",
            "signature": "def _get_init_signature(self, cls) -> List[str]",
            "docstring": "Get the __init__ method signature for a class.",
            "line_number": 90,
            "is_public": false,
            "parameters": [
              "self",
              "cls"
            ],
            "return_type": "List[str]",
            "calls": [
              "values",
              "signature"
            ],
            "complexity": 2
          },
          {
            "name": "fix_test_for_real_module",
            "signature": "def fix_test_for_real_module(self, test_file: Path, module_name: str, module_contents: Dict) -> bool",
            "docstring": "Fix a test file to work with a real importable module.",
            "line_number": 99,
            "is_public": true,
            "parameters": [
              "self",
              "test_file",
              "module_name",
              "module_contents"
            ],
            "return_type": "bool",
            "calls": [
              "_fix_function_tests",
              "_fix_class_tests",
              "_fix_imports",
              "_remove_unnecessary_skips",
              "read_text",
              "write_text"
            ],
            "complexity": 5
          },
          {
            "name": "_fix_imports",
            "signature": "def _fix_imports(self, content: str, module_name: str) -> str",
            "docstring": "Fix imports to use the real module properly.",
            "line_number": 131,
            "is_public": false,
            "parameters": [
              "self",
              "content",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "strip",
              "sub"
            ],
            "complexity": 1
          },
          {
            "name": "_fix_class_tests",
            "signature": "def _fix_class_tests(self, content: str, classes: List[Dict]) -> str",
            "docstring": "Fix class tests to use real classes.",
            "line_number": 153,
            "is_public": false,
            "parameters": [
              "self",
              "content",
              "classes"
            ],
            "return_type": "str",
            "calls": [
              "strip",
              "_generate_real_params",
              "sub"
            ],
            "complexity": 3
          },
          {
            "name": "_fix_function_tests",
            "signature": "def _fix_function_tests(self, content: str, functions: List[Dict]) -> str",
            "docstring": "Fix function tests to test real functions.",
            "line_number": 201,
            "is_public": false,
            "parameters": [
              "self",
              "content",
              "functions"
            ],
            "return_type": "str",
            "calls": [
              "strip",
              "sub"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_real_params",
            "signature": "def _generate_real_params(self, param_names: List[str]) -> str",
            "docstring": "Generate realistic parameters for class initialization.",
            "line_number": 241,
            "is_public": false,
            "parameters": [
              "self",
              "param_names"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "append",
              "join"
            ],
            "complexity": 16
          },
          {
            "name": "_remove_unnecessary_skips",
            "signature": "def _remove_unnecessary_skips(self, content: str) -> str",
            "docstring": "Remove skip decorators for modules that are available.",
            "line_number": 266,
            "is_public": false,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "str",
            "calls": [
              "sub"
            ],
            "complexity": 1
          },
          {
            "name": "fix_all_available_modules",
            "signature": "def fix_all_available_modules(self)",
            "docstring": "Fix tests for all modules that are actually available.",
            "line_number": 279,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "find_importable_modules",
              "split",
              "print",
              "exists",
              "len",
              "fix_test_for_real_module",
              "keys"
            ],
            "complexity": 6
          }
        ],
        "bases": [],
        "docstring": "Fixes tests to work with actual importable modules."
      }
    ],
    "imports": "{'pathlib', 'sys', 'ast', 'importlib', 'os', 'typing'}",
    "dependencies": "{'pathlib', 'sys', 'ast', 'importlib', 'os', 'typing'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 348,
    "complexity": 5
  },
  "archive\\legacy_scripts\\fix_test_infrastructure.py": {
    "file_path": "archive\\legacy_scripts\\fix_test_infrastructure.py",
    "file_hash": "10a6721784bb01cdabb63d1532ac6ce6",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run infrastructure fixes.",
        "line_number": 316,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "TestInfrastructureFixer",
          "apply_all_fixes",
          "analyze_api_mismatches",
          "print"
        ],
        "complexity": 1
      }
    ],
    "classes": [
      {
        "name": "TestInfrastructureFixer",
        "line_number": 15,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 18,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "fix_all_imports",
            "signature": "def fix_all_imports(self)",
            "docstring": "Fix import issues in all test files.",
            "line_number": 23,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "startswith",
              "strip",
              "join",
              "enumerate",
              "splitlines",
              "rglob",
              "read_text",
              "write_text"
            ],
            "complexity": 9
          },
          {
            "name": "analyze_api_mismatches",
            "signature": "def analyze_api_mismatches(self) -> Dict[str, List[str]]",
            "docstring": "Analyze API mismatches in tests.",
            "line_number": 62,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, List[str]]",
            "calls": [
              "items",
              "isinstance",
              "print",
              "str",
              "Path",
              "len",
              "append",
              "rglob",
              "read_text"
            ],
            "complexity": 11
          },
          {
            "name": "fix_api_mismatches",
            "signature": "def fix_api_mismatches(self)",
            "docstring": "Fix API mismatches automatically.",
            "line_number": 115,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "search",
              "print",
              "rglob",
              "read_text",
              "write_text",
              "sub"
            ],
            "complexity": 5
          },
          {
            "name": "fix_async_issues",
            "signature": "def fix_async_issues(self)",
            "docstring": "Fix async/await issues in tests.",
            "line_number": 163,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "len",
              "append",
              "insert",
              "join",
              "enumerate",
              "splitlines",
              "rglob",
              "read_text",
              "write_text",
              "sub"
            ],
            "complexity": 10
          },
          {
            "name": "fix_mock_issues",
            "signature": "def fix_mock_issues(self)",
            "docstring": "Fix mock-related issues.",
            "line_number": 217,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "replace",
              "findall",
              "rglob",
              "read_text",
              "write_text",
              "sub"
            ],
            "complexity": 8
          },
          {
            "name": "validate_fixes",
            "signature": "def validate_fixes(self)",
            "docstring": "Validate that fixes improved the situation.",
            "line_number": 259,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "run",
              "str",
              "print"
            ],
            "complexity": 2
          },
          {
            "name": "apply_all_fixes",
            "signature": "def apply_all_fixes(self)",
            "docstring": "Apply all infrastructure fixes.",
            "line_number": 284,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "values",
              "print",
              "fix_mock_issues",
              "fix_api_mismatches",
              "fix_async_issues",
              "validate_fixes",
              "sum",
              "fix_all_imports"
            ],
            "complexity": 3
          }
        ],
        "bases": [],
        "docstring": "Fix all test infrastructure issues."
      }
    ],
    "imports": "{'pathlib', 're', 'sys', 'ast', 'typing'}",
    "dependencies": "{'pathlib', 're', 'sys', 'ast', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 338,
    "complexity": 1
  },
  "archive\\legacy_scripts\\fix_week2_test_imports.py": {
    "file_path": "archive\\legacy_scripts\\fix_week2_test_imports.py",
    "file_hash": "8ef0dd05782b0ffdcd614ea5b20126fd",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main execution function.",
        "line_number": 89,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "run",
          "Week2ImportFixer",
          "fix_all_tests",
          "print"
        ],
        "complexity": 6
      }
    ],
    "classes": [
      {
        "name": "Week2ImportFixer",
        "line_number": 16,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 19,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "fix_test_file",
            "signature": "def fix_test_file(self, test_file: Path) -> bool",
            "docstring": "Fix import issues in a single test file.",
            "line_number": 23,
            "is_public": true,
            "parameters": [
              "self",
              "test_file"
            ],
            "return_type": "bool",
            "calls": [
              "read_text",
              "write_text",
              "sub"
            ],
            "complexity": 4
          },
          {
            "name": "fix_all_tests",
            "signature": "def fix_all_tests(self)",
            "docstring": "Fix all Week 2 test files.",
            "line_number": 73,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "fix_test_file",
              "print",
              "len",
              "glob",
              "stat"
            ],
            "complexity": 4
          }
        ],
        "bases": [],
        "docstring": "Fixes import indentation issues in Week 2 tests."
      }
    ],
    "imports": "{'sys', 'pathlib', 're'}",
    "dependencies": "{'sys', 'pathlib', 're'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 125,
    "complexity": 6
  },
  "archive\\legacy_scripts\\gemini_powered_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\gemini_powered_test_generator.py",
    "file_hash": "cf8673849b1699b69d675035742c5ab5",
    "functions": [],
    "classes": [
      {
        "name": "CodeAnalysis",
        "line_number": 24,
        "methods": [],
        "bases": [],
        "docstring": "Analysis of code to test."
      },
      {
        "name": "GeminiTestGenerator",
        "line_number": 34,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, api_key: Optional[str] = None)",
            "docstring": null,
            "line_number": 37,
            "is_public": false,
            "parameters": [
              "self",
              "api_key"
            ],
            "return_type": null,
            "calls": [
              "Client",
              "getenv",
              "Path",
              "ValueError"
            ],
            "complexity": 3
          },
          {
            "name": "analyze_code_file",
            "signature": "def analyze_code_file(self, file_path: Path) -> CodeAnalysis",
            "docstring": "Analyze a Python file to understand what needs testing.",
            "line_number": 50,
            "is_public": true,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "CodeAnalysis",
            "calls": [
              "open",
              "set",
              "isinstance",
              "CodeAnalysis",
              "str",
              "append",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 10
          },
          {
            "name": "get_uncovered_lines",
            "signature": "def get_uncovered_lines(self, file_path: Path) -> Set[int]",
            "docstring": "Get uncovered lines from coverage data.",
            "line_number": 91,
            "is_public": true,
            "parameters": [
              "self",
              "file_path"
            ],
            "return_type": "Set[int]",
            "calls": [
              "items",
              "open",
              "set",
              "exists",
              "Path",
              "get",
              "load"
            ],
            "complexity": 4
          },
          {
            "name": "extract_code_from_response",
            "signature": "def extract_code_from_response(self, response_text: str) -> str",
            "docstring": "Extract Python code from Gemini response.",
            "line_number": 184,
            "is_public": true,
            "parameters": [
              "self",
              "response_text"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "split",
              "startswith",
              "strip",
              "any",
              "append",
              "join"
            ],
            "complexity": 13
          },
          {
            "name": "validate_generated_tests",
            "signature": "def validate_generated_tests(self)",
            "docstring": "Validate that generated tests are syntactically correct.",
            "line_number": 299,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "open",
              "print",
              "str",
              "len",
              "glob",
              "append",
              "parse",
              "read"
            ],
            "complexity": 5
          }
        ],
        "bases": [],
        "docstring": "Generate tests using Gemini AI."
      }
    ],
    "imports": "{'google', 'pathlib', 'sys', 'json', 'time', 'ast', 'asyncio', 'google.genai', 'dataclasses', 'os', 'typing'}",
    "dependencies": "{'google', 'pathlib', 'sys', 'json', 'time', 'ast', 'asyncio', 'dataclasses', 'os', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 365,
    "complexity": 0
  },
  "archive\\legacy_scripts\\gemini_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\gemini_test_generator.py",
    "file_hash": "703c944d16d46ca372bb4b9801b55678",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Generate Gemini-powered tests for 100% coverage.",
        "line_number": 434,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "generate_tests_for_directory",
          "GeminiTestGenerator",
          "print",
          "getenv",
          "Path",
          "len",
          "measure_coverage",
          "write_tests"
        ],
        "complexity": 7
      }
    ],
    "classes": [
      {
        "name": "GeminiTestGenerator",
        "line_number": 36,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, api_key: Optional[str] = None)",
            "docstring": "Initialize with Gemini API.",
            "line_number": 39,
            "is_public": false,
            "parameters": [
              "self",
              "api_key"
            ],
            "return_type": null,
            "calls": [
              "Client",
              "getenv",
              "ValueError",
              "print"
            ],
            "complexity": 3
          },
          {
            "name": "analyze_module",
            "signature": "def analyze_module(self, module_path: Path) -> Dict[str, Any]",
            "docstring": "Use Gemini to deeply analyze a module's functionality.",
            "line_number": 51,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "print",
              "endswith",
              "exists",
              "FileNotFoundError",
              "generate_content",
              "len",
              "startswith",
              "strip",
              "_ast_analyze",
              "GenerateContentConfig",
              "loads",
              "read_text"
            ],
            "complexity": 9
          },
          {
            "name": "_ast_analyze",
            "signature": "def _ast_analyze(self, module_path: Path, content: str) -> Dict[str, Any]",
            "docstring": "Fallback AST-based analysis.",
            "line_number": 133,
            "is_public": false,
            "parameters": [
              "self",
              "module_path",
              "content"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "isinstance",
              "startswith",
              "append",
              "parse",
              "walk"
            ],
            "complexity": 12
          },
          {
            "name": "generate_comprehensive_test",
            "signature": "def generate_comprehensive_test(self, module_path: Path, analysis: Dict[str, Any]) -> str",
            "docstring": "Use Gemini to generate comprehensive tests for 100% coverage.",
            "line_number": 179,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "with_suffix",
              "print",
              "replace",
              "endswith",
              "GenerateContentConfig",
              "str",
              "generate_content",
              "len",
              "Path",
              "strip",
              "startswith",
              "dumps",
              "relative_to",
              "_generate_template_test",
              "parse",
              "read_text"
            ],
            "complexity": 9
          },
          {
            "name": "_generate_template_test",
            "signature": "def _generate_template_test(self, module_name: str, import_path: str, analysis: Dict) -> str",
            "docstring": "Generate template-based test as fallback.",
            "line_number": 258,
            "is_public": false,
            "parameters": [
              "self",
              "module_name",
              "import_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "isinstance",
              "replace",
              "title",
              "startswith",
              "get"
            ],
            "complexity": 8
          },
          {
            "name": "generate_tests_for_directory",
            "signature": "def generate_tests_for_directory(self, source_dir: Path, limit: int = None) -> Dict[Path, str]",
            "docstring": "Generate tests for all Python files in directory.",
            "line_number": 355,
            "is_public": true,
            "parameters": [
              "self",
              "source_dir",
              "limit"
            ],
            "return_type": "Dict[Path, str]",
            "calls": [
              "print",
              "str",
              "analyze_module",
              "Path",
              "len",
              "generate_comprehensive_test",
              "enumerate",
              "rglob",
              "list",
              "count"
            ],
            "complexity": 7
          },
          {
            "name": "write_tests",
            "signature": "def write_tests(self, tests: Dict[Path, str]) -> int",
            "docstring": "Write generated tests to files.",
            "line_number": 400,
            "is_public": true,
            "parameters": [
              "self",
              "tests"
            ],
            "return_type": "int",
            "calls": [
              "items",
              "mkdir",
              "write_text",
              "print"
            ],
            "complexity": 2
          },
          {
            "name": "measure_coverage",
            "signature": "def measure_coverage(self) -> float",
            "docstring": "Measure current test coverage.",
            "line_number": 412,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "float",
            "calls": [
              "open",
              "print",
              "exists",
              "Path",
              "run",
              "get",
              "load"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Generate comprehensive tests using Gemini AI to achieve 100% coverage."
      }
    ],
    "imports": "{'dotenv', 'pathlib', 'sys', 'json', 'ast', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'dotenv', 'pathlib', 'sys', 'json', 'ast', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 490,
    "complexity": 7
  },
  "archive\\legacy_scripts\\generate_coverage_sequential.py": {
    "file_path": "archive\\legacy_scripts\\generate_coverage_sequential.py",
    "file_hash": "5d397802494e68368bb9e4d8fcb08632",
    "functions": [
      {
        "name": "load_env",
        "signature": "def load_env()",
        "docstring": null,
        "line_number": 19,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "split",
          "exists",
          "Path",
          "startswith",
          "strip"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main function.",
        "line_number": 254,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "add_argument",
          "ArgumentParser",
          "parse_args",
          "run",
          "SequentialTestGenerator"
        ],
        "complexity": 1
      }
    ],
    "classes": [
      {
        "name": "SequentialTestGenerator",
        "line_number": 34,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 37,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Client",
              "mkdir",
              "getenv",
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "get_uncovered_modules",
            "signature": "def get_uncovered_modules(self) -> list",
            "docstring": "Get list of modules that need tests.",
            "line_number": 45,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "list",
            "calls": [
              "print",
              "exists",
              "str",
              "len",
              "append",
              "rglob",
              "list"
            ],
            "complexity": 5
          },
          {
            "name": "generate_test_for_module",
            "signature": "def generate_test_for_module(self, src_file: Path) -> bool",
            "docstring": "Generate test for a single module.",
            "line_number": 68,
            "is_public": true,
            "parameters": [
              "self",
              "src_file"
            ],
            "return_type": "bool",
            "calls": [
              "open",
              "split",
              "print",
              "GenerateContentConfig",
              "generate_content",
              "len",
              "write_text",
              "read"
            ],
            "complexity": 8
          },
          {
            "name": "measure_coverage",
            "signature": "def measure_coverage(self) -> float",
            "docstring": "Measure current test coverage.",
            "line_number": 160,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "float",
            "calls": [
              "split",
              "print",
              "rstrip",
              "float",
              "len",
              "run"
            ],
            "complexity": 6
          },
          {
            "name": "run",
            "signature": "def run(self, limit: int = None)",
            "docstring": "Run sequential test generation.",
            "line_number": 189,
            "is_public": true,
            "parameters": [
              "self",
              "limit"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "get_uncovered_modules",
              "print",
              "generate_test_for_module",
              "len",
              "measure_coverage",
              "enumerate"
            ],
            "complexity": 9
          }
        ],
        "bases": [],
        "docstring": "Generate tests sequentially with Gemini 2.5 Pro."
      }
    ],
    "imports": "{'google', 'pathlib', 'sys', 'json', 'time', 'google.genai', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'google', 'pathlib', 'sys', 'json', 'time', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 268,
    "complexity": 7
  },
  "archive\\legacy_scripts\\implement_test_stubs.py": {
    "file_path": "archive\\legacy_scripts\\implement_test_stubs.py",
    "file_hash": "aa312b508d3608313d4723fa18b17fb2",
    "functions": [
      {
        "name": "analyze_module",
        "signature": "def analyze_module(module_path: Path) -> Dict[str, Any]",
        "docstring": "Analyze a Python module to extract testable components.",
        "line_number": 17,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": "Dict[str, Any]",
        "calls": [
          "open",
          "isinstance",
          "append",
          "parse",
          "walk",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "generate_test_implementation",
        "signature": "def generate_test_implementation(class_info: Dict, module_name: str) -> str",
        "docstring": "Generate test implementation for a class.",
        "line_number": 67,
        "is_public": true,
        "parameters": [
          "class_info",
          "module_name"
        ],
        "return_type": "str",
        "calls": [
          "startswith"
        ],
        "complexity": 3
      },
      {
        "name": "generate_function_tests",
        "signature": "def generate_function_tests(functions: List[Dict], module_name: str) -> str",
        "docstring": "Generate tests for standalone functions.",
        "line_number": 148,
        "is_public": true,
        "parameters": [
          "functions",
          "module_name"
        ],
        "return_type": "str",
        "calls": [],
        "complexity": 3
      },
      {
        "name": "implement_test_stub",
        "signature": "def implement_test_stub(stub_path: Path, module_path: Path) -> bool",
        "docstring": "Implement a test stub with actual test cases.",
        "line_number": 177,
        "is_public": true,
        "parameters": [
          "stub_path",
          "module_path"
        ],
        "return_type": "bool",
        "calls": [
          "open",
          "write",
          "print",
          "exists",
          "analyze_module",
          "generate_function_tests",
          "append",
          "join",
          "generate_test_implementation",
          "read"
        ],
        "complexity": 5
      },
      {
        "name": "batch_implement_stubs",
        "signature": "def batch_implement_stubs(test_dir: Path = Path('tests/unit'), limit: int = 10)",
        "docstring": "Batch implement test stubs.",
        "line_number": 251,
        "is_public": true,
        "parameters": [
          "test_dir",
          "limit"
        ],
        "return_type": null,
        "calls": [
          "open",
          "implement_test_stub",
          "print",
          "replace",
          "exists",
          "Path",
          "glob",
          "read"
        ],
        "complexity": 8
      },
      {
        "name": "create_test_template",
        "signature": "def create_test_template(module_name: str, output_path: Path)",
        "docstring": "Create a comprehensive test template for a module.",
        "line_number": 291,
        "is_public": true,
        "parameters": [
          "module_name",
          "output_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "print"
        ],
        "complexity": 1
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main entry point.",
        "line_number": 476,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "add_argument",
          "ArgumentParser",
          "create_test_template",
          "parse_args",
          "print",
          "exists",
          "Path",
          "analyze_module",
          "len",
          "batch_implement_stubs"
        ],
        "complexity": 5
      }
    ],
    "classes": [],
    "imports": "{'pathlib', 'sys', 'ast', 'inspect', 'os', 'typing'}",
    "dependencies": "{'pathlib', 'sys', 'ast', 'inspect', 'os', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 507,
    "complexity": 37
  },
  "archive\\legacy_scripts\\independent_test_verifier.py": {
    "file_path": "archive\\legacy_scripts\\independent_test_verifier.py",
    "file_hash": "d61ac278d7dff8cc90f73b712b15292e",
    "functions": [
      {
        "name": "analyze_test_coverage",
        "signature": "def analyze_test_coverage(test_file: Path, module_file: Path) -> Dict",
        "docstring": "Analyze test coverage and quality for a single module.",
        "line_number": 36,
        "is_public": true,
        "parameters": [
          "test_file",
          "module_file"
        ],
        "return_type": "Dict",
        "calls": [
          "min",
          "max",
          "open",
          "lower",
          "isinstance",
          "len",
          "startswith",
          "any",
          "parse",
          "walk",
          "read"
        ],
        "complexity": 9
      },
      {
        "name": "verify_with_llm",
        "signature": "def verify_with_llm(test_file: Path, module_file: Path, basic_metrics: Dict) -> Dict",
        "docstring": "Use LLM to provide detailed verification.",
        "line_number": 94,
        "is_public": true,
        "parameters": [
          "test_file",
          "module_file",
          "basic_metrics"
        ],
        "return_type": "Dict",
        "calls": [
          "open",
          "GenerativeModel",
          "generate_content",
          "read"
        ],
        "complexity": 2
      },
      {
        "name": "verify_test_suite",
        "signature": "def verify_test_suite(test_dir: Path = Path('tests/unit'), module_dir: Path = Path('multi_coder_analysis'), limit: int = 10) -> Dict",
        "docstring": "Verify entire test suite quality.",
        "line_number": 139,
        "is_public": true,
        "parameters": [
          "test_dir",
          "module_dir",
          "limit"
        ],
        "return_type": "Dict",
        "calls": [
          "analyze_test_coverage",
          "open",
          "print",
          "replace",
          "str",
          "Path",
          "len",
          "dump",
          "glob",
          "startswith",
          "append",
          "get",
          "now",
          "sum",
          "rglob",
          "list",
          "isoformat"
        ],
        "complexity": 5
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 're', 'google.generativeai', 'sys', 'json', 'ast', 'os', 'typing'}",
    "dependencies": "{'google', 'datetime', 'pathlib', 're', 'sys', 'json', 'ast', 'os', 'typing'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 215,
    "complexity": 16
  },
  "archive\\legacy_scripts\\integration_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\integration_test_generator.py",
    "file_hash": "16d44be7db8d9f8c6455609a3955619a",
    "functions": [],
    "classes": [
      {
        "name": "ExecutionPath",
        "line_number": 19,
        "methods": [],
        "bases": [],
        "docstring": "Represents an execution path through the system."
      },
      {
        "name": "IntegrationPoint",
        "line_number": 28,
        "methods": [],
        "bases": [],
        "docstring": "Represents an integration point between components."
      },
      {
        "name": "ExecutionFlowAnalyzer",
        "line_number": 36,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, project_root: Path = Path('.'))",
            "docstring": null,
            "line_number": 39,
            "is_public": false,
            "parameters": [
              "self",
              "project_root"
            ],
            "return_type": null,
            "calls": [
              "Path",
              "DiGraph"
            ],
            "complexity": 1
          },
          {
            "name": "analyze_main",
            "signature": "def analyze_main(self, main_file: Path = None) -> List[ExecutionPath]",
            "docstring": "Analyze main.py or specified orchestrator file.",
            "line_number": 45,
            "is_public": true,
            "parameters": [
              "self",
              "main_file"
            ],
            "return_type": "List[ExecutionPath]",
            "calls": [
              "items",
              "open",
              "ExecutionPath",
              "_extract_main_flow",
              "print",
              "_identify_critical_paths",
              "_trace_call_chains",
              "_extract_modules_from_calls",
              "exists",
              "FileNotFoundError",
              "_trace_data_flow",
              "append",
              "parse",
              "read"
            ],
            "complexity": 7
          },
          {
            "name": "_extract_main_flow",
            "signature": "def _extract_main_flow(self, tree: ast.AST) -> List[str]",
            "docstring": "Extract main execution flow.",
            "line_number": 97,
            "is_public": false,
            "parameters": [
              "self",
              "tree"
            ],
            "return_type": "List[str]",
            "calls": [
              "walk",
              "append",
              "isinstance"
            ],
            "complexity": 11
          },
          {
            "name": "_trace_call_chains",
            "signature": "def _trace_call_chains(self, tree: ast.AST) -> Dict[str, List[str]]",
            "docstring": "Trace function call chains.",
            "line_number": 119,
            "is_public": false,
            "parameters": [
              "self",
              "tree"
            ],
            "return_type": "Dict[str, List[str]]",
            "calls": [
              "walk",
              "append",
              "isinstance"
            ],
            "complexity": 8
          },
          {
            "name": "_identify_critical_paths",
            "signature": "def _identify_critical_paths(self, content: str) -> Set[str]",
            "docstring": "Identify critical execution paths.",
            "line_number": 142,
            "is_public": false,
            "parameters": [
              "self",
              "content"
            ],
            "return_type": "Set[str]",
            "calls": [
              "set",
              "update",
              "findall"
            ],
            "complexity": 2
          },
          {
            "name": "_extract_modules_from_calls",
            "signature": "def _extract_modules_from_calls(self, calls: List[str]) -> Set[str]",
            "docstring": "Extract module names from function calls.",
            "line_number": 163,
            "is_public": false,
            "parameters": [
              "self",
              "calls"
            ],
            "return_type": "Set[str]",
            "calls": [
              "set",
              "split",
              "len",
              "add"
            ],
            "complexity": 4
          },
          {
            "name": "_trace_data_flow",
            "signature": "def _trace_data_flow(self, tree: ast.AST, calls: List[str]) -> List[Tuple[str, str]]",
            "docstring": "Trace data flow between functions.",
            "line_number": 176,
            "is_public": false,
            "parameters": [
              "self",
              "tree",
              "calls"
            ],
            "return_type": "List[Tuple[str, str]]",
            "calls": [
              "range",
              "len",
              "append"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Analyzes execution flow from entry points."
      },
      {
        "name": "IntegrationTestBuilder",
        "line_number": 186,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 189,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "generate_integration_tests",
            "signature": "def generate_integration_tests(self, paths: List[ExecutionPath]) -> str",
            "docstring": "Generate integration tests for execution paths.",
            "line_number": 197,
            "is_public": true,
            "parameters": [
              "self",
              "paths"
            ],
            "return_type": "str",
            "calls": [
              "_generate_data_flow_tests",
              "_generate_path_test",
              "append",
              "join",
              "enumerate",
              "_generate_end_to_end_test"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_path_test",
            "signature": "def _generate_path_test(self, path: ExecutionPath, index: int) -> str",
            "docstring": "Generate test for a specific execution path.",
            "line_number": 230,
            "is_public": false,
            "parameters": [
              "self",
              "path",
              "index"
            ],
            "return_type": "str",
            "calls": [
              "replace",
              "join",
              "enumerate"
            ],
            "complexity": 3
          },
          {
            "name": "_generate_sequential_test",
            "signature": "def _generate_sequential_test(self, steps: List[str]) -> str",
            "docstring": "Generate test for sequential execution.",
            "line_number": 272,
            "is_public": false,
            "parameters": [
              "self",
              "steps"
            ],
            "return_type": "str",
            "calls": [
              "join",
              "len"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_pipeline_test",
            "signature": "def _generate_pipeline_test(self, modules: Set[str]) -> str",
            "docstring": "Generate pipeline test.",
            "line_number": 290,
            "is_public": false,
            "parameters": [
              "self",
              "modules"
            ],
            "return_type": "str",
            "calls": [
              "list",
              "join"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_error_path_test",
            "signature": "def _generate_error_path_test(self, path: ExecutionPath) -> str",
            "docstring": "Generate error handling test.",
            "line_number": 310,
            "is_public": false,
            "parameters": [
              "self",
              "path"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_generate_data_flow_test",
            "signature": "def _generate_data_flow_test(self, flow: List[Tuple[str, str]]) -> str",
            "docstring": "Generate data flow test.",
            "line_number": 326,
            "is_public": false,
            "parameters": [
              "self",
              "flow"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 2
          },
          {
            "name": "_generate_data_flow_tests",
            "signature": "def _generate_data_flow_tests(self, paths: List[ExecutionPath]) -> str",
            "docstring": "Generate comprehensive data flow tests.",
            "line_number": 346,
            "is_public": false,
            "parameters": [
              "self",
              "paths"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_generate_end_to_end_test",
            "signature": "def _generate_end_to_end_test(self, paths: List[ExecutionPath]) -> str",
            "docstring": "Generate end-to-end test.",
            "line_number": 365,
            "is_public": false,
            "parameters": [
              "self",
              "paths"
            ],
            "return_type": "str",
            "calls": [
              "max",
              "list",
              "len"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Builds integration tests from execution paths."
      },
      {
        "name": "SmartIntegrationTestGenerator",
        "line_number": 401,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, project_root: Path = Path('.'))",
            "docstring": null,
            "line_number": 404,
            "is_public": false,
            "parameters": [
              "self",
              "project_root"
            ],
            "return_type": null,
            "calls": [
              "ExecutionFlowAnalyzer",
              "IntegrationTestBuilder",
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "generate_from_main",
            "signature": "def generate_from_main(self, main_file: Path = None) -> str",
            "docstring": "Generate integration tests by analyzing main entry point.",
            "line_number": 409,
            "is_public": true,
            "parameters": [
              "self",
              "main_file"
            ],
            "return_type": "str",
            "calls": [
              "analyze_main",
              "print",
              "generate_integration_tests",
              "len",
              "_generate_test_utilities"
            ],
            "complexity": 1
          },
          {
            "name": "_generate_test_utilities",
            "signature": "def _generate_test_utilities(self) -> str",
            "docstring": "Generate utility functions for integration testing.",
            "line_number": 495,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "generate_and_save",
            "signature": "def generate_and_save(self, output_file: Path = None)",
            "docstring": "Generate and save integration tests.",
            "line_number": 528,
            "is_public": true,
            "parameters": [
              "self",
              "output_file"
            ],
            "return_type": null,
            "calls": [
              "open",
              "write",
              "print",
              "str",
              "Path",
              "len",
              "dump",
              "mkdir",
              "generate_from_main",
              "sum",
              "now",
              "isoformat"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Main generator that creates integration tests intelligently."
      }
    ],
    "imports": "{'pathlib', 'networkx', 're', 'json', 'ast', 'dataclasses', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'pathlib', 'networkx', 're', 'json', 'ast', 'dataclasses', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 572,
    "complexity": 0
  },
  "archive\\legacy_scripts\\integration_test_matrix.py": {
    "file_path": "archive\\legacy_scripts\\integration_test_matrix.py",
    "file_hash": "8cfbbba69401a74429901499536d9107",
    "functions": [],
    "classes": [
      {
        "name": "TestStatus",
        "line_number": 26,
        "methods": [],
        "bases": [
          "Enum"
        ],
        "docstring": "Status of integration test."
      },
      {
        "name": "IntegrationTestCase",
        "line_number": 37,
        "methods": [],
        "bases": [],
        "docstring": "Represents a single integration test case."
      },
      {
        "name": "TestResult",
        "line_number": 52,
        "methods": [],
        "bases": [],
        "docstring": "Result of integration test execution."
      },
      {
        "name": "IntegrationTestMatrix",
        "line_number": 62,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 67,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "_initialize_test_matrix"
            ],
            "complexity": 1
          },
          {
            "name": "_initialize_test_matrix",
            "signature": "def _initialize_test_matrix(self) -> None",
            "docstring": "Initialize the complete test matrix.",
            "line_number": 76,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "_create_performance_integration_tests",
              "_create_analysis_tests",
              "_create_provider_tests",
              "_create_error_propagation_tests",
              "_create_pipeline_tests",
              "_create_cross_module_tests",
              "_create_data_flow_tests",
              "_create_pattern_processing_tests",
              "_create_utility_tests"
            ],
            "complexity": 1
          },
          {
            "name": "_create_provider_tests",
            "signature": "def _create_provider_tests(self) -> None",
            "docstring": "Create tests for provider interfaces.",
            "line_number": 110,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_provider_factory_creation",
            "signature": "def _test_provider_factory_creation(self) -> TestResult",
            "docstring": "Test provider factory creation.",
            "line_number": 140,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "create_provider",
              "str",
              "TestResult",
              "time",
              "len",
              "get",
              "get_available_providers",
              "get_available_models"
            ],
            "complexity": 5
          },
          {
            "name": "_test_provider_to_generator",
            "signature": "def _test_provider_to_generator(self) -> TestResult",
            "docstring": "Test provider to generator integration.",
            "line_number": 173,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "str",
              "TestResult",
              "time",
              "len",
              "get",
              "all",
              "generate_patterns",
              "GenerationRequest"
            ],
            "complexity": 4
          },
          {
            "name": "_test_providers_cost_tracking",
            "signature": "def _test_providers_cost_tracking(self) -> TestResult",
            "docstring": "Test cost tracking across providers.",
            "line_number": 212,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "track_api_usage",
              "isinstance",
              "str",
              "TestResult",
              "time",
              "get",
              "generate_cost_report",
              "calculate_total_cost"
            ],
            "complexity": 3
          },
          {
            "name": "_create_pattern_processing_tests",
            "signature": "def _create_pattern_processing_tests(self) -> None",
            "docstring": "Create pattern processing integration tests.",
            "line_number": 249,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_generator_to_evaluator",
            "signature": "def _test_generator_to_evaluator(self) -> TestResult",
            "docstring": "Test generator to evaluator integration.",
            "line_number": 288,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "str",
              "TestResult",
              "time",
              "evaluate_pattern",
              "len",
              "get",
              "generate_patterns",
              "GenerationRequest"
            ],
            "complexity": 5
          },
          {
            "name": "_test_evaluator_to_optimizer",
            "signature": "def _test_evaluator_to_optimizer(self) -> TestResult",
            "docstring": "Test evaluator to optimizer integration.",
            "line_number": 330,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "str",
              "TestResult",
              "optimize_patterns",
              "time",
              "len",
              "get",
              "OptimizationConfig",
              "evaluate_patterns",
              "all",
              "Pattern"
            ],
            "complexity": 4
          },
          {
            "name": "_test_patterns_deduplication",
            "signature": "def _test_patterns_deduplication(self) -> TestResult",
            "docstring": "Test pattern deduplication.",
            "line_number": 373,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "deduplicate_patterns",
              "isinstance",
              "str",
              "TestResult",
              "time",
              "len",
              "all",
              "get",
              "Pattern"
            ],
            "complexity": 3
          },
          {
            "name": "_test_pattern_validation",
            "signature": "def _test_pattern_validation(self) -> TestResult",
            "docstring": "Test pattern validation.",
            "line_number": 416,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "validate_pattern",
              "isinstance",
              "str",
              "TestResult",
              "time",
              "len",
              "all",
              "get",
              "enumerate",
              "sum",
              "Pattern",
              "validate_patterns"
            ],
            "complexity": 4
          },
          {
            "name": "_create_analysis_tests",
            "signature": "def _create_analysis_tests(self) -> None",
            "docstring": "Create analysis integration tests.",
            "line_number": 465,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_performance_analysis",
            "signature": "def _test_performance_analysis(self) -> TestResult",
            "docstring": "Test performance analyzer integration.",
            "line_number": 486,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "sleep",
              "isinstance",
              "analyze_throughput",
              "generate_performance_report",
              "str",
              "TestResult",
              "time",
              "analyze_latency",
              "get"
            ],
            "complexity": 3
          },
          {
            "name": "_test_quality_analysis",
            "signature": "def _test_quality_analysis(self) -> TestResult",
            "docstring": "Test quality analyzer integration.",
            "line_number": 525,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "analyze_dataset_quality",
              "str",
              "EvaluationMetrics",
              "TestResult",
              "analyze_pattern_quality",
              "time",
              "get",
              "Pattern",
              "keys",
              "generate_quality_report",
              "list"
            ],
            "complexity": 3
          },
          {
            "name": "_create_pipeline_tests",
            "signature": "def _create_pipeline_tests(self) -> None",
            "docstring": "Create pipeline integration tests.",
            "line_number": 568,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_full_pipeline",
            "signature": "def _test_full_pipeline(self) -> TestResult",
            "docstring": "Test full pipeline integration.",
            "line_number": 589,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "values",
              "isinstance",
              "str",
              "TestResult",
              "time",
              "len",
              "run",
              "get",
              "all",
              "sum",
              "validate_inputs",
              "generate_report"
            ],
            "complexity": 3
          },
          {
            "name": "_test_pipeline_orchestrator",
            "signature": "def _test_pipeline_orchestrator(self) -> TestResult",
            "docstring": "Test pipeline orchestrator integration.",
            "line_number": 637,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "str",
              "execute_stage",
              "time",
              "TestResult",
              "get",
              "register_component",
              "get_component"
            ],
            "complexity": 3
          },
          {
            "name": "_create_utility_tests",
            "signature": "def _create_utility_tests(self) -> None",
            "docstring": "Create utility integration tests.",
            "line_number": 679,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_cache_integration",
            "signature": "def _test_cache_integration(self) -> TestResult",
            "docstring": "Test cache integration.",
            "line_number": 709,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "delete",
              "set",
              "exists",
              "str",
              "TestResult",
              "time",
              "get"
            ],
            "complexity": 3
          },
          {
            "name": "_test_configuration_integration",
            "signature": "def _test_configuration_integration(self) -> TestResult",
            "docstring": "Test configuration integration.",
            "line_number": 745,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "validate",
              "set",
              "isinstance",
              "str",
              "TestResult",
              "time",
              "get"
            ],
            "complexity": 3
          },
          {
            "name": "_test_logger_integration",
            "signature": "def _test_logger_integration(self) -> TestResult",
            "docstring": "Test logger integration.",
            "line_number": 779,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "critical",
              "error",
              "str",
              "TestResult",
              "time",
              "info",
              "get",
              "debug",
              "warning"
            ],
            "complexity": 3
          },
          {
            "name": "_create_cross_module_tests",
            "signature": "def _create_cross_module_tests(self) -> None",
            "docstring": "Create cross-module integration tests.",
            "line_number": 811,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_complete_flow",
            "signature": "def _test_complete_flow(self) -> TestResult",
            "docstring": "Test complete processing flow.",
            "line_number": 823,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "deduplicate_patterns",
              "isinstance",
              "str",
              "TestResult",
              "time",
              "optimize_patterns",
              "len",
              "get",
              "OptimizationConfig",
              "evaluate_patterns",
              "all",
              "generate_patterns",
              "GenerationRequest"
            ],
            "complexity": 3
          },
          {
            "name": "_create_data_flow_tests",
            "signature": "def _create_data_flow_tests(self) -> None",
            "docstring": "Create data flow tests.",
            "line_number": 884,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_data_consistency",
            "signature": "def _test_data_consistency(self) -> TestResult",
            "docstring": "Test data consistency across pipeline.",
            "line_number": 896,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "NamedTemporaryFile",
              "isinstance",
              "export_patterns",
              "str",
              "TestResult",
              "time",
              "evaluate_pattern",
              "len",
              "get",
              "all",
              "generate_patterns",
              "GenerationRequest"
            ],
            "complexity": 4
          },
          {
            "name": "_create_error_propagation_tests",
            "signature": "def _create_error_propagation_tests(self) -> None",
            "docstring": "Create error propagation tests.",
            "line_number": 950,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_error_propagation",
            "signature": "def _test_error_propagation(self) -> TestResult",
            "docstring": "Test error propagation across components.",
            "line_number": 962,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "str",
              "TestResult",
              "time",
              "evaluate_pattern",
              "get",
              "Pattern",
              "generate_patterns",
              "GenerationRequest"
            ],
            "complexity": 6
          },
          {
            "name": "_create_performance_integration_tests",
            "signature": "def _create_performance_integration_tests(self) -> None",
            "docstring": "Create performance integration tests.",
            "line_number": 1017,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "None",
            "calls": [
              "IntegrationTestCase"
            ],
            "complexity": 1
          },
          {
            "name": "_test_concurrent_operations",
            "signature": "def _test_concurrent_operations(self) -> TestResult",
            "docstring": "Test concurrent operations.",
            "line_number": 1029,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "TestResult",
            "calls": [
              "isinstance",
              "str",
              "TestResult",
              "time",
              "len",
              "generate_patterns_batch",
              "all",
              "get",
              "sum",
              "range",
              "GenerationRequest"
            ],
            "complexity": 3
          },
          {
            "name": "register_implementation",
            "signature": "def register_implementation(self, interface: Type, implementation: Any) -> None",
            "docstring": "Register an implementation for an interface.",
            "line_number": 1070,
            "is_public": true,
            "parameters": [
              "self",
              "interface",
              "implementation"
            ],
            "return_type": "None",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "run_single_test",
            "signature": "def run_single_test(self, test_id: str) -> TestResult",
            "docstring": "Run a single test case.",
            "line_number": 1074,
            "is_public": true,
            "parameters": [
              "self",
              "test_id"
            ],
            "return_type": "TestResult",
            "calls": [
              "test_function",
              "str",
              "ValueError",
              "TestResult"
            ],
            "complexity": 4
          },
          {
            "name": "run_all_tests",
            "signature": "def run_all_tests(self) -> Dict[str, TestResult]",
            "docstring": "Run all integration tests.",
            "line_number": 1101,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, TestResult]",
            "calls": [
              "run_single_test",
              "keys"
            ],
            "complexity": 2
          },
          {
            "name": "generate_test_report",
            "signature": "def generate_test_report(self) -> Dict[str, Any]",
            "docstring": "Generate a comprehensive test report.",
            "line_number": 1111,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "values",
              "sum",
              "len"
            ],
            "complexity": 1
          },
          {
            "name": "export_report",
            "signature": "def export_report(self, output_path: Path) -> None",
            "docstring": "Export test report to file.",
            "line_number": 1152,
            "is_public": true,
            "parameters": [
              "self",
              "output_path"
            ],
            "return_type": "None",
            "calls": [
              "generate_test_report",
              "open",
              "dump",
              "print"
            ],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Comprehensive integration test matrix covering all module interfaces."
      }
    ],
    "imports": "{'datetime', 'pathlib', 'enum', 'json', 'inspect', 'asyncio', 'time', 'src.interfaces', 'dataclasses', 'typing'}",
    "dependencies": "{'datetime', 'pathlib', 'enum', 'src', 'json', 'inspect', 'asyncio', 'time', 'dataclasses', 'typing'}",
    "globals": [],
    "main_block": false,
    "total_lines": 1159,
    "complexity": 0
  },
  "archive\\legacy_scripts\\intelligent_converter.py": {
    "file_path": "archive\\legacy_scripts\\intelligent_converter.py",
    "file_hash": "e68e34e87878bca9227cfb1c95f82097",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main entry point.",
        "line_number": 320,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "run_to_100_percent",
          "IntelligentTestConverter",
          "print"
        ],
        "complexity": 2
      }
    ],
    "classes": [
      {
        "name": "IntelligentTestConverter",
        "line_number": 24,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": "Initialize with Google API key.",
            "line_number": 27,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "ValueError",
              "Client",
              "getenv",
              "Path",
              "mkdir"
            ],
            "complexity": 2
          },
          {
            "name": "analyze_module",
            "signature": "def analyze_module(self, module_path: Path) -> Dict",
            "docstring": "Analyze a module to understand its structure.",
            "line_number": 39,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict",
            "calls": [
              "isinstance",
              "str",
              "len",
              "any",
              "splitlines",
              "append",
              "parse",
              "walk",
              "read_text"
            ],
            "complexity": 16
          },
          {
            "name": "generate_comprehensive_test",
            "signature": "def generate_comprehensive_test(self, module_path: Path, analysis: Dict) -> Optional[str]",
            "docstring": "Generate comprehensive test using Gemini API.",
            "line_number": 97,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "Optional[str]",
            "calls": [
              "print",
              "replace",
              "endswith",
              "with_suffix",
              "generate_content",
              "str",
              "len",
              "startswith",
              "strip",
              "GenerateContentConfig",
              "relative_to",
              "join",
              "parse",
              "read_text"
            ],
            "complexity": 8
          },
          {
            "name": "process_module",
            "signature": "def process_module(self, module_path: Path) -> bool",
            "docstring": "Process a single module.",
            "line_number": 178,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "bool",
            "calls": [
              "print",
              "analyze_module",
              "len",
              "generate_comprehensive_test",
              "write_text",
              "count"
            ],
            "complexity": 4
          },
          {
            "name": "convert_batch",
            "signature": "def convert_batch(self, modules: List[Path]) -> Dict",
            "docstring": "Convert a batch of modules.",
            "line_number": 214,
            "is_public": true,
            "parameters": [
              "self",
              "modules"
            ],
            "return_type": "Dict",
            "calls": [
              "process_module",
              "print",
              "str",
              "append"
            ],
            "complexity": 4
          },
          {
            "name": "measure_coverage",
            "signature": "def measure_coverage(self) -> float",
            "docstring": "Measure current test coverage.",
            "line_number": 234,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "float",
            "calls": [
              "open",
              "print",
              "exists",
              "Path",
              "run",
              "get",
              "load"
            ],
            "complexity": 3
          },
          {
            "name": "run_to_100_percent",
            "signature": "def run_to_100_percent(self)",
            "docstring": "Run conversion until 100% coverage is achieved.",
            "line_number": 261,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "str",
              "len",
              "measure_coverage",
              "convert_batch",
              "range",
              "rglob",
              "list"
            ],
            "complexity": 7
          }
        ],
        "bases": [],
        "docstring": "Convert and generate tests for 100% coverage using GenAI SDK."
      }
    ],
    "imports": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'json', 'ast', 'google.genai', 'os', 'typing', 'subprocess'}",
    "dependencies": "{'dotenv', 'google', 'datetime', 'pathlib', 'sys', 'json', 'ast', 'os', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 335,
    "complexity": 2
  },
  "archive\\legacy_scripts\\intelligent_test_builder.py": {
    "file_path": "archive\\legacy_scripts\\intelligent_test_builder.py",
    "file_hash": "31c522d046659811dc7dc7f0038cd25d",
    "functions": [
      {
        "name": "test_gemini_connection",
        "signature": "def test_gemini_connection()",
        "docstring": "Test that Gemini API is working.",
        "line_number": 285,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "lower",
          "IntelligentTestBuilder",
          "isinstance",
          "print",
          "str",
          "provider"
        ],
        "complexity": 7
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main function to test the intelligent test builder.",
        "line_number": 325,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "IntelligentTestBuilder",
          "print",
          "exists",
          "Path",
          "build_test_for_module",
          "test_gemini_connection"
        ],
        "complexity": 4
      }
    ],
    "classes": [
      {
        "name": "IntelligentTestBuilder",
        "line_number": 31,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, model: str = None, api_key: Optional[str] = None)",
            "docstring": "Initialize with best available Gemini model.",
            "line_number": 34,
            "is_public": false,
            "parameters": [
              "self",
              "model",
              "api_key"
            ],
            "return_type": null,
            "calls": [
              "ValueError",
              "print",
              "str",
              "getenv",
              "GeminiProvider",
              "provider"
            ],
            "complexity": 8
          },
          {
            "name": "analyze_module",
            "signature": "def analyze_module(self, module_path: Path) -> Dict[str, Any]",
            "docstring": "Analyze a module to understand its functionality.",
            "line_number": 72,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "isinstance",
              "print",
              "endswith",
              "exists",
              "FileNotFoundError",
              "str",
              "startswith",
              "strip",
              "loads",
              "read_text",
              "provider"
            ],
            "complexity": 9
          },
          {
            "name": "generate_intelligent_test",
            "signature": "def generate_intelligent_test(self, module_path: Path, analysis: Dict[str, Any]) -> str",
            "docstring": "Generate intelligent test code based on module analysis.",
            "line_number": 158,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "split",
              "isinstance",
              "replace",
              "print",
              "endswith",
              "str",
              "startswith",
              "strip",
              "dumps",
              "provider"
            ],
            "complexity": 7
          },
          {
            "name": "build_test_for_module",
            "signature": "def build_test_for_module(self, module_path: Path, output_dir: Path = None) -> bool",
            "docstring": "Complete workflow to build intelligent test for a module.",
            "line_number": 221,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "output_dir"
            ],
            "return_type": "bool",
            "calls": [
              "isinstance",
              "print",
              "analyze_module",
              "Path",
              "len",
              "get",
              "mkdir",
              "parse",
              "generate_intelligent_test",
              "write_text"
            ],
            "complexity": 6
          }
        ],
        "bases": [],
        "docstring": "Build intelligent, exhaustive tests using Gemini models."
      }
    ],
    "imports": "{'pathlib', 'sys', 'json', 'time', 'multi_coder_analysis.llm_providers.gemini_provider', 'os', 'typing'}",
    "dependencies": "{'pathlib', 'sys', 'json', 'time', 'multi_coder_analysis', 'os', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 359,
    "complexity": 11
  },
  "archive\\legacy_scripts\\intelligent_test_builder_offline.py": {
    "file_path": "archive\\legacy_scripts\\intelligent_test_builder_offline.py",
    "file_hash": "8a659850d8ffb4e0446d9ac80c31d356",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main function to demonstrate offline test builder.",
        "line_number": 322,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "OfflineIntelligentTestBuilder",
          "print",
          "exists",
          "Path",
          "build_test_for_module"
        ],
        "complexity": 3
      }
    ],
    "classes": [
      {
        "name": "OfflineIntelligentTestBuilder",
        "line_number": 20,
        "methods": [
          {
            "name": "analyze_module_ast",
            "signature": "def analyze_module_ast(self, module_path: Path) -> Dict[str, Any]",
            "docstring": "Analyze a module using AST to understand its structure.",
            "line_number": 23,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "hasattr",
              "isinstance",
              "exists",
              "FileNotFoundError",
              "str",
              "startswith",
              "any",
              "append",
              "parse",
              "walk",
              "read_text",
              "unparse"
            ],
            "complexity": 16
          },
          {
            "name": "generate_intelligent_test_template",
            "signature": "def generate_intelligent_test_template(self, module_path: Path, analysis: Dict[str, Any]) -> str",
            "docstring": "Generate comprehensive test template based on analysis.",
            "line_number": 88,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "split",
              "replace",
              "str",
              "find",
              "get"
            ],
            "complexity": 12
          },
          {
            "name": "build_test_for_module",
            "signature": "def build_test_for_module(self, module_path: Path, output_dir: Path = None) -> bool",
            "docstring": "Build intelligent test template for a module.",
            "line_number": 267,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "output_dir"
            ],
            "return_type": "bool",
            "calls": [
              "generate_intelligent_test_template",
              "print",
              "Path",
              "len",
              "analyze_module_ast",
              "mkdir",
              "get",
              "parse",
              "write_text"
            ],
            "complexity": 7
          }
        ],
        "bases": [],
        "docstring": "Build intelligent test templates through local analysis."
      }
    ],
    "imports": "{'pathlib', 'sys', 'ast', 'inspect', 'os', 'typing'}",
    "dependencies": "{'pathlib', 'sys', 'ast', 'inspect', 'os', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 356,
    "complexity": 3
  },
  "archive\\legacy_scripts\\intelligent_test_builder_v2.py": {
    "file_path": "archive\\legacy_scripts\\intelligent_test_builder_v2.py",
    "file_hash": "057cacf17842b16debc6627a1a348973",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Test the intelligent test builder V2.",
        "line_number": 229,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "exists",
          "getenv",
          "Path",
          "build_test_for_module",
          "IntelligentTestBuilderV2"
        ],
        "complexity": 4
      }
    ],
    "classes": [
      {
        "name": "IntelligentTestBuilderV2",
        "line_number": 27,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, model: str = 'models/gemini-2.5-pro', api_key: Optional[str] = None)",
            "docstring": "Initialize with specified model (default: gemini-2.5-pro for best quality).",
            "line_number": 30,
            "is_public": false,
            "parameters": [
              "self",
              "model",
              "api_key"
            ],
            "return_type": null,
            "calls": [
              "Client",
              "getenv",
              "print"
            ],
            "complexity": 2
          },
          {
            "name": "analyze_module",
            "signature": "def analyze_module(self, module_path: Path) -> Dict[str, Any]",
            "docstring": "Analyze a module to understand its functionality.",
            "line_number": 36,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "ValueError",
              "print",
              "endswith",
              "exists",
              "FileNotFoundError",
              "generate_content",
              "len",
              "startswith",
              "strip",
              "str",
              "loads",
              "read_text"
            ],
            "complexity": 9
          },
          {
            "name": "generate_intelligent_test",
            "signature": "def generate_intelligent_test(self, module_path: Path, analysis: Dict[str, Any]) -> str",
            "docstring": "Generate intelligent test code based on module analysis.",
            "line_number": 112,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "ValueError",
              "print",
              "replace",
              "endswith",
              "generate_content",
              "str",
              "startswith",
              "strip",
              "find",
              "dumps"
            ],
            "complexity": 7
          },
          {
            "name": "build_test_for_module",
            "signature": "def build_test_for_module(self, module_path: Path, output_dir: Path = None) -> bool",
            "docstring": "Complete workflow to build intelligent test for a module.",
            "line_number": 175,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "output_dir"
            ],
            "return_type": "bool",
            "calls": [
              "print",
              "analyze_module",
              "Path",
              "len",
              "get",
              "mkdir",
              "parse",
              "generate_intelligent_test",
              "write_text",
              "count"
            ],
            "complexity": 6
          }
        ],
        "bases": [],
        "docstring": "Build intelligent tests using direct SDK calls."
      }
    ],
    "imports": "{'dotenv', 'pathlib', 'sys', 'json', 'ast', 'google.genai', 'os', 'typing'}",
    "dependencies": "{'dotenv', 'google', 'pathlib', 'sys', 'json', 'ast', 'os', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 273,
    "complexity": 4
  },
  "archive\\legacy_scripts\\measure_final_coverage.py": {
    "file_path": "archive\\legacy_scripts\\measure_final_coverage.py",
    "file_hash": "72811ba7b9916b63513bc031b802f859",
    "functions": [
      {
        "name": "count_test_files",
        "signature": "def count_test_files()",
        "docstring": "Count test files by category.",
        "line_number": 10,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "glob",
          "set",
          "list",
          "Path"
        ],
        "complexity": 2
      },
      {
        "name": "count_source_modules",
        "signature": "def count_source_modules()",
        "docstring": "Count source modules.",
        "line_number": 32,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "str",
          "Path",
          "startswith",
          "append",
          "rglob"
        ],
        "complexity": 5
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": null,
        "line_number": 45,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "items",
          "set",
          "split",
          "print",
          "replace",
          "Path",
          "add",
          "len",
          "append",
          "sorted",
          "count_source_modules",
          "count_test_files",
          "rglob"
        ],
        "complexity": 12
      }
    ],
    "classes": [],
    "imports": "{'sys', 'pathlib', 'subprocess'}",
    "dependencies": "{'sys', 'pathlib', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 124,
    "complexity": 19
  },
  "archive\\legacy_scripts\\monitor_progress.py": {
    "file_path": "archive\\legacy_scripts\\monitor_progress.py",
    "file_hash": "29357acc250dfa0533fbfc1febff9be3",
    "functions": [
      {
        "name": "monitor",
        "signature": "def monitor()",
        "docstring": "Monitor test file creation.",
        "line_number": 8,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sleep",
          "print",
          "strftime",
          "Path",
          "len",
          "now",
          "glob",
          "list"
        ],
        "complexity": 3
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'time'}",
    "dependencies": "{'datetime', 'pathlib', 'time'}",
    "globals": [],
    "main_block": true,
    "total_lines": 30,
    "complexity": 3
  },
  "archive\\legacy_scripts\\monitor_to_100.py": {
    "file_path": "archive\\legacy_scripts\\monitor_to_100.py",
    "file_hash": "d3009aeefc64fe0812ab13b135c141c0",
    "functions": [
      {
        "name": "monitor",
        "signature": "def monitor()",
        "docstring": "Monitor until 100% completion.",
        "line_number": 8,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sleep",
          "print",
          "strftime",
          "exists",
          "now",
          "len",
          "Path",
          "glob",
          "list"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'time'}",
    "dependencies": "{'datetime', 'pathlib', 'time'}",
    "globals": [],
    "main_block": true,
    "total_lines": 38,
    "complexity": 4
  },
  "archive\\legacy_scripts\\parallel_converter.py": {
    "file_path": "archive\\legacy_scripts\\parallel_converter.py",
    "file_hash": "3374f60a9d25b2d6301f77d9af188a45",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without intelligent tests, starting from where we left off.",
        "line_number": 57,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 9
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a module with rate limiting.",
        "line_number": 84,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "parse",
          "replace",
          "wait_if_needed",
          "exists",
          "GenerativeModel",
          "Path",
          "generate_content",
          "len",
          "str",
          "relative_to",
          "mkdir",
          "GenerationConfig",
          "rsplit",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "process_modules_parallel",
        "signature": "def process_modules_parallel(modules, max_workers = 5)",
        "docstring": "Process modules in parallel with proper rate limiting.",
        "line_number": 176,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "as_completed",
          "print",
          "str",
          "Path",
          "len",
          "glob",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "result",
          "list"
        ],
        "complexity": 5
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main parallel conversion process.",
        "line_number": 225,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "list",
          "open",
          "lower",
          "print",
          "Path",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "process_modules_parallel",
          "total_seconds",
          "sum",
          "now",
          "isoformat"
        ],
        "complexity": 8
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 39,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 40,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 46,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'queue', 'json', 'ast', 'time', 'asyncio', 'os'}",
    "dependencies": "{'os', 'google', 'datetime', 'pathlib', 'threading', 'sys', 'queue', 'json', 'ast', 'time', 'asyncio', 'concurrent'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 311,
    "complexity": 34
  },
  "archive\\legacy_scripts\\parallel_converter_fixed.py": {
    "file_path": "archive\\legacy_scripts\\parallel_converter_fixed.py",
    "file_hash": "b54ae0be57511ed0afe6b229ae2447f7",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without intelligent tests.",
        "line_number": 57,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 9
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a module with rate limiting.",
        "line_number": 84,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "parse",
          "replace",
          "wait_if_needed",
          "exists",
          "GenerativeModel",
          "Path",
          "generate_content",
          "len",
          "str",
          "relative_to",
          "mkdir",
          "GenerationConfig",
          "rsplit",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "save_incremental_results",
        "signature": "def save_incremental_results(results, filename = 'parallel_results_incremental.json')",
        "docstring": "Save results incrementally to avoid losing data.",
        "line_number": 176,
        "is_public": true,
        "parameters": [
          "results",
          "filename"
        ],
        "return_type": null,
        "calls": [
          "open",
          "print",
          "dump"
        ],
        "complexity": 2
      },
      {
        "name": "process_modules_parallel",
        "signature": "def process_modules_parallel(modules, max_workers = 5)",
        "docstring": "Process modules in parallel with proper rate limiting and error handling.",
        "line_number": 184,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "save_incremental_results",
          "as_completed",
          "print",
          "str",
          "Path",
          "len",
          "now",
          "glob",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "print_exc",
          "result",
          "list",
          "isoformat"
        ],
        "complexity": 7
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main parallel conversion process with better error handling.",
        "line_number": 251,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "lower",
          "print",
          "now",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "Path",
          "process_modules_parallel",
          "total_seconds",
          "sum",
          "list",
          "isoformat",
          "print_exc"
        ],
        "complexity": 10
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 39,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 40,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 46,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'traceback', 'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os'}",
    "dependencies": "{'traceback', 'os', 'datetime', 'pathlib', 'threading', 'google', 'sys', 'json', 'ast', 'time', 'concurrent'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 352,
    "complexity": 40
  },
  "archive\\legacy_scripts\\parallel_converter_working.py": {
    "file_path": "archive\\legacy_scripts\\parallel_converter_working.py",
    "file_hash": "df6e14db1100893135e27b8c47fa0968",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without tests - SIMPLE version.",
        "line_number": 56,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "split",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 11
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a module with rate limiting.",
        "line_number": 91,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "parse",
          "replace",
          "wait_if_needed",
          "exists",
          "GenerativeModel",
          "Path",
          "generate_content",
          "len",
          "str",
          "relative_to",
          "mkdir",
          "GenerationConfig",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "process_modules_parallel",
        "signature": "def process_modules_parallel(modules, max_workers = 5)",
        "docstring": "Process modules in parallel with proper rate limiting.",
        "line_number": 182,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "as_completed",
          "print",
          "str",
          "Path",
          "len",
          "glob",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "result",
          "list"
        ],
        "complexity": 5
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main parallel conversion process.",
        "line_number": 230,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "list",
          "open",
          "lower",
          "print",
          "Path",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "process_modules_parallel",
          "total_seconds",
          "sum",
          "now",
          "isoformat"
        ],
        "complexity": 4
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 38,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 39,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 45,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os'}",
    "dependencies": "{'os', 'google', 'datetime', 'pathlib', 'threading', 'sys', 'json', 'ast', 'time', 'concurrent'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 297,
    "complexity": 32
  },
  "archive\\legacy_scripts\\parallel_coverage_converter.py": {
    "file_path": "archive\\legacy_scripts\\parallel_coverage_converter.py",
    "file_hash": "aa96ad1b81ff9320eed58ecaa3249b17",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without test coverage, focusing on uncovered code.",
        "line_number": 58,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "print",
          "replace",
          "get_coverage_data",
          "exists",
          "str",
          "Path",
          "get_module_coverage",
          "len",
          "glob",
          "startswith",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 12
      },
      {
        "name": "get_coverage_data",
        "signature": "def get_coverage_data()",
        "docstring": "Get current coverage data.",
        "line_number": 100,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "exists",
          "Path",
          "run",
          "load"
        ],
        "complexity": 3
      },
      {
        "name": "get_module_coverage",
        "signature": "def get_module_coverage(module_path, coverage_data)",
        "docstring": "Get coverage percentage for a specific module.",
        "line_number": 122,
        "is_public": true,
        "parameters": [
          "module_path",
          "coverage_data"
        ],
        "return_type": null,
        "calls": [
          "items",
          "get",
          "Path",
          "len"
        ],
        "complexity": 5
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a module with rate limiting.",
        "line_number": 137,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "write",
          "generate_content",
          "Path",
          "len",
          "parse",
          "open",
          "split",
          "replace",
          "get_coverage_data",
          "wait_if_needed",
          "exists",
          "relative_to",
          "GenerationConfig",
          "items",
          "mkdir",
          "GenerativeModel",
          "str",
          "get",
          "read"
        ],
        "complexity": 15
      },
      {
        "name": "process_modules_parallel",
        "signature": "def process_modules_parallel(modules, max_workers = 5)",
        "docstring": "Process modules in parallel with proper rate limiting.",
        "line_number": 271,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "as_completed",
          "print",
          "str",
          "measure_current_coverage",
          "len",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "result"
        ],
        "complexity": 5
      },
      {
        "name": "measure_current_coverage",
        "signature": "def measure_current_coverage()",
        "docstring": "Measure current test coverage.",
        "line_number": 319,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "split",
          "rstrip",
          "float",
          "len",
          "run"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main parallel conversion process for 100% coverage.",
        "line_number": 344,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "lower",
          "print",
          "measure_current_coverage",
          "len",
          "dump",
          "get_remaining_modules",
          "process_modules_parallel",
          "total_seconds",
          "sum",
          "now",
          "isoformat"
        ],
        "complexity": 10
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 40,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 41,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 47,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'queue', 'json', 'ast', 'time', 'os', 'subprocess'}",
    "dependencies": "{'os', 'google', 'datetime', 'pathlib', 'threading', 'sys', 'queue', 'json', 'ast', 'time', 'concurrent', 'subprocess'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 434,
    "complexity": 56
  },
  "archive\\legacy_scripts\\parallel_coverage_converter_fixed.py": {
    "file_path": "archive\\legacy_scripts\\parallel_coverage_converter_fixed.py",
    "file_hash": "632cda5dcb554a417c83884c5702255f",
    "functions": [
      {
        "name": "get_coverage_data",
        "signature": "def get_coverage_data()",
        "docstring": "Get current coverage data.",
        "line_number": 58,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "print",
          "exists",
          "Path",
          "run",
          "load"
        ],
        "complexity": 3
      },
      {
        "name": "get_module_coverage",
        "signature": "def get_module_coverage(module_path, coverage_data)",
        "docstring": "Get coverage percentage for a specific module.",
        "line_number": 80,
        "is_public": true,
        "parameters": [
          "module_path",
          "coverage_data"
        ],
        "return_type": null,
        "calls": [
          "items",
          "get",
          "Path",
          "len"
        ],
        "complexity": 5
      },
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without full test coverage.",
        "line_number": 95,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "print",
          "replace",
          "get_coverage_data",
          "exists",
          "str",
          "Path",
          "get_module_coverage",
          "len",
          "glob",
          "startswith",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 11
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a module with rate limiting.",
        "line_number": 135,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "write",
          "generate_content",
          "Path",
          "len",
          "glob",
          "now",
          "open",
          "split",
          "replace",
          "get_coverage_data",
          "wait_if_needed",
          "strftime",
          "relative_to",
          "GenerationConfig",
          "items",
          "mkdir",
          "compile",
          "GenerativeModel",
          "str",
          "get",
          "list",
          "read"
        ],
        "complexity": 17
      },
      {
        "name": "save_incremental_results",
        "signature": "def save_incremental_results(results, filename = 'coverage_results_incremental.json')",
        "docstring": "Save results incrementally to avoid losing data.",
        "line_number": 269,
        "is_public": true,
        "parameters": [
          "results",
          "filename"
        ],
        "return_type": null,
        "calls": [
          "open",
          "print",
          "dump"
        ],
        "complexity": 2
      },
      {
        "name": "measure_current_coverage",
        "signature": "def measure_current_coverage()",
        "docstring": "Measure current test coverage.",
        "line_number": 277,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "split",
          "print",
          "rstrip",
          "float",
          "len",
          "run"
        ],
        "complexity": 7
      },
      {
        "name": "process_modules_parallel",
        "signature": "def process_modules_parallel(modules, max_workers = 5)",
        "docstring": "Process modules in parallel with proper rate limiting and error handling.",
        "line_number": 309,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "save_incremental_results",
          "as_completed",
          "print",
          "str",
          "measure_current_coverage",
          "len",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "print_exc",
          "result",
          "now",
          "isoformat"
        ],
        "complexity": 7
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main parallel conversion process with better error handling.",
        "line_number": 378,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "min",
          "open",
          "lower",
          "print",
          "measure_current_coverage",
          "len",
          "dump",
          "get_remaining_modules",
          "process_modules_parallel",
          "total_seconds",
          "sum",
          "now",
          "isoformat",
          "print_exc"
        ],
        "complexity": 12
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 40,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 41,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 47,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'traceback', 'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os', 'subprocess'}",
    "dependencies": "{'traceback', 'os', 'datetime', 'pathlib', 'threading', 'google', 'sys', 'json', 'ast', 'time', 'concurrent', 'subprocess'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 491,
    "complexity": 64
  },
  "archive\\legacy_scripts\\quick_coverage_boost.py": {
    "file_path": "archive\\legacy_scripts\\quick_coverage_boost.py",
    "file_hash": "173d1b4903f4bfd084342384c3d7377d",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run quick coverage boost.",
        "line_number": 324,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "QuickCoverageBooster",
          "print",
          "boost_coverage"
        ],
        "complexity": 1
      }
    ],
    "classes": [
      {
        "name": "QuickCoverageBooster",
        "line_number": 14,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 17,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "scan_untested_modules",
            "signature": "def scan_untested_modules(self) -> List[Path]",
            "docstring": "Find modules without tests.",
            "line_number": 21,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "List[Path]",
            "calls": [
              "set",
              "replace",
              "str",
              "glob",
              "append",
              "add",
              "rglob"
            ],
            "complexity": 6
          },
          {
            "name": "generate_comprehensive_test",
            "signature": "def generate_comprehensive_test(self, module_path: Path) -> str",
            "docstring": "Generate a comprehensive test that imports and exercises everything.",
            "line_number": 43,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "str",
            "calls": [
              "open",
              "isinstance",
              "replace",
              "with_suffix",
              "str",
              "startswith",
              "append",
              "relative_to",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 10
          },
          {
            "name": "boost_coverage",
            "signature": "def boost_coverage(self)",
            "docstring": "Generate tests to boost coverage quickly.",
            "line_number": 151,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "print",
              "exists",
              "len",
              "generate_comprehensive_test",
              "write_text",
              "create_mega_import_test",
              "scan_untested_modules"
            ],
            "complexity": 4
          },
          {
            "name": "create_mega_import_test",
            "signature": "def create_mega_import_test(self)",
            "docstring": "Create a test that imports all modules for coverage.",
            "line_number": 184,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "write_text",
              "print"
            ],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generate tests quickly to boost coverage."
      }
    ],
    "imports": "{'sys', 'typing', 'pathlib', 'ast'}",
    "dependencies": "{'sys', 'typing', 'pathlib', 'ast'}",
    "globals": [],
    "main_block": true,
    "total_lines": 339,
    "complexity": 1
  },
  "archive\\legacy_scripts\\quick_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\quick_test_generator.py",
    "file_hash": "ad9c6765e05d7607db89695be73b71c4",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Generate tests for key modules quickly.",
        "line_number": 24,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "GeminiTestGenerator",
          "print",
          "exists",
          "str",
          "getenv",
          "Path",
          "analyze_module",
          "len",
          "generate_comprehensive_test",
          "measure_coverage",
          "mkdir",
          "enumerate",
          "write_text",
          "count"
        ],
        "complexity": 9
      }
    ],
    "classes": [],
    "imports": "{'dotenv', 'pathlib', 'sys', 'scripts.test_coverage.gemini_test_generator', 'os', 'subprocess'}",
    "dependencies": "{'dotenv', 'pathlib', 'scripts', 'sys', 'os', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 112,
    "complexity": 9
  },
  "archive\\legacy_scripts\\quick_test_summary.py": {
    "file_path": "archive\\legacy_scripts\\quick_test_summary.py",
    "file_hash": "508986facf044a2a771ed42b4869a8fe",
    "functions": [
      {
        "name": "test_file",
        "signature": "def test_file(test_path)",
        "docstring": "Test a single file and return result.",
        "line_number": 10,
        "is_public": true,
        "parameters": [
          "test_path"
        ],
        "return_type": null,
        "calls": [
          "run",
          "str"
        ],
        "complexity": 8
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": null,
        "line_number": 30,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "test_file",
          "Path",
          "len",
          "glob",
          "append",
          "sorted",
          "enumerate"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'sys', 'pathlib', 'subprocess'}",
    "dependencies": "{'sys', 'pathlib', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 60,
    "complexity": 12
  },
  "archive\\legacy_scripts\\run_intelligent_tests.py": {
    "file_path": "archive\\legacy_scripts\\run_intelligent_tests.py",
    "file_hash": "6076480a20b8abc2ef78692be4622430",
    "functions": [
      {
        "name": "run_single_test",
        "signature": "def run_single_test(test_file: Path) -> dict",
        "docstring": "Run a single test file and capture results.",
        "line_number": 13,
        "is_public": true,
        "parameters": [
          "test_file"
        ],
        "return_type": "dict",
        "calls": [
          "open",
          "search",
          "split",
          "print",
          "exists",
          "str",
          "Path",
          "len",
          "time",
          "strip",
          "run",
          "get",
          "load",
          "group",
          "int",
          "unlink"
        ],
        "complexity": 21
      },
      {
        "name": "run_all_intelligent_tests",
        "signature": "def run_all_intelligent_tests()",
        "docstring": "Run all intelligent test files and generate report.",
        "line_number": 125,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "sleep",
          "print",
          "Path",
          "len",
          "dump",
          "glob",
          "append",
          "sorted",
          "sum",
          "generate_markdown_report",
          "run_single_test",
          "now",
          "isoformat"
        ],
        "complexity": 10
      },
      {
        "name": "generate_markdown_report",
        "signature": "def generate_markdown_report(report: dict)",
        "docstring": "Generate a markdown report from test results.",
        "line_number": 221,
        "is_public": true,
        "parameters": [
          "report"
        ],
        "return_type": null,
        "calls": [
          "Path",
          "write_text",
          "print"
        ],
        "complexity": 4
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'sys', 'json', 'time', 'subprocess'}",
    "dependencies": "{'datetime', 'pathlib', 'sys', 'json', 'time', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 273,
    "complexity": 35
  },
  "archive\\legacy_scripts\\run_limited_coverage.py": {
    "file_path": "archive\\legacy_scripts\\run_limited_coverage.py",
    "file_hash": "1c70d0f45a2e7016ed082fd4b54e7a78",
    "functions": [],
    "classes": [],
    "imports": "{'asyncio', 'achieve_100_percent_coverage', 'sys', 'pathlib'}",
    "dependencies": "{'asyncio', 'achieve_100_percent_coverage', 'sys', 'pathlib'}",
    "globals": [],
    "main_block": true,
    "total_lines": 49,
    "complexity": 0
  },
  "archive\\legacy_scripts\\self_healing_converter.py": {
    "file_path": "archive\\legacy_scripts\\self_healing_converter.py",
    "file_hash": "780f1d34a43914fdff3de7256bc57872",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without tests.",
        "line_number": 57,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sort",
          "set",
          "split",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 11
      },
      {
        "name": "fix_syntax_error",
        "signature": "def fix_syntax_error(test_code, error_msg, iteration = 1)",
        "docstring": "Use LLM to fix syntax errors in generated code.",
        "line_number": 89,
        "is_public": true,
        "parameters": [
          "test_code",
          "error_msg",
          "iteration"
        ],
        "return_type": null,
        "calls": [
          "split",
          "print",
          "wait_if_needed",
          "GenerativeModel",
          "generate_content",
          "GenerationConfig"
        ],
        "complexity": 4
      },
      {
        "name": "generate_test_with_healing",
        "signature": "def generate_test_with_healing(module_path, max_iterations = 5)",
        "docstring": "Generate test with automatic syntax error fixing.",
        "line_number": 141,
        "is_public": true,
        "parameters": [
          "module_path",
          "max_iterations"
        ],
        "return_type": null,
        "calls": [
          "write",
          "generate_content",
          "Path",
          "len",
          "parse",
          "range",
          "open",
          "split",
          "replace",
          "wait_if_needed",
          "exists",
          "relative_to",
          "GenerationConfig",
          "mkdir",
          "print",
          "GenerativeModel",
          "str",
          "fix_syntax_error",
          "read"
        ],
        "complexity": 17
      },
      {
        "name": "process_modules_with_healing",
        "signature": "def process_modules_with_healing(modules, max_workers = 5)",
        "docstring": "Process modules in parallel with self-healing.",
        "line_number": 254,
        "is_public": true,
        "parameters": [
          "modules",
          "max_workers"
        ],
        "return_type": null,
        "calls": [
          "as_completed",
          "print",
          "str",
          "Path",
          "len",
          "glob",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "result",
          "list"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main self-healing conversion process.",
        "line_number": 311,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "list",
          "min",
          "process_modules_with_healing",
          "open",
          "lower",
          "print",
          "Path",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "total_seconds",
          "sum",
          "now",
          "isoformat"
        ],
        "complexity": 5
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "line_number": 39,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, calls_per_minute = 30)",
            "docstring": null,
            "line_number": 40,
            "is_public": false,
            "parameters": [
              "self",
              "calls_per_minute"
            ],
            "return_type": null,
            "calls": [
              "Lock"
            ],
            "complexity": 1
          },
          {
            "name": "wait_if_needed",
            "signature": "def wait_if_needed(self)",
            "docstring": null,
            "line_number": 46,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "sleep",
              "time"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": null
      }
    ],
    "imports": "{'traceback', 'datetime', 'pathlib', 'threading', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os'}",
    "dependencies": "{'traceback', 'os', 'datetime', 'pathlib', 'threading', 'google', 'sys', 'json', 'ast', 'time', 'concurrent'}",
    "globals": [
      "env_file",
      "API_KEY",
      "rate_limiter"
    ],
    "main_block": true,
    "total_lines": 384,
    "complexity": 43
  },
  "archive\\legacy_scripts\\simple_100_percent.py": {
    "file_path": "archive\\legacy_scripts\\simple_100_percent.py",
    "file_hash": "09c66606177e414a0ca3ef17e6b79998",
    "functions": [
      {
        "name": "test_all_modules",
        "signature": "def test_all_modules()",
        "docstring": "Import and test all modules to maximize coverage.",
        "line_number": 12,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "UseCaseResponse",
          "success_response",
          "len",
          "run",
          "OptimizePatternsResponse",
          "UseCaseRequest",
          "GeneratePatternsUseCase",
          "MockLogger",
          "GeneratePatternsResponse",
          "authorize_request",
          "MockPatternEvaluator",
          "ApplicationBootstrap",
          "print",
          "GeneratePatternsRequest",
          "OptimizePatternsRequest",
          "validate_request",
          "failure_response",
          "MockPatternGenerator",
          "test_async"
        ],
        "complexity": 1
      }
    ],
    "classes": [],
    "imports": "{'sys', 'pathlib'}",
    "dependencies": "{'sys', 'pathlib'}",
    "globals": [],
    "main_block": true,
    "total_lines": 146,
    "complexity": 1
  },
  "archive\\legacy_scripts\\simple_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\simple_test_generator.py",
    "file_hash": "66bd0c6d85df600d05542127df0d9ad5",
    "functions": [
      {
        "name": "get_modules_to_test",
        "signature": "def get_modules_to_test()",
        "docstring": "Get modules that need tests.",
        "line_number": 32,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "set",
          "split",
          "replace",
          "exists",
          "str",
          "Path",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 10
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a single module.",
        "line_number": 58,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "print",
          "replace",
          "GenerativeModel",
          "generate_content",
          "Path",
          "str",
          "relative_to",
          "GenerationConfig",
          "read"
        ],
        "complexity": 9
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main function.",
        "line_number": 142,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "sleep",
          "print",
          "len",
          "get_modules_to_test",
          "enumerate",
          "generate_test"
        ],
        "complexity": 5
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'google.generativeai', 'sys', 'json', 'time', 'os'}",
    "dependencies": "{'google', 'datetime', 'pathlib', 'sys', 'json', 'time', 'os'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 182,
    "complexity": 24
  },
  "archive\\legacy_scripts\\simple_test_runner.py": {
    "file_path": "archive\\legacy_scripts\\simple_test_runner.py",
    "file_hash": "b9d112b1a59582b3f3964908afb42924",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": null,
        "line_number": 11,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "str",
          "Path",
          "len",
          "glob",
          "run",
          "append",
          "sorted",
          "enumerate"
        ],
        "complexity": 11
      }
    ],
    "classes": [],
    "imports": "{'subprocess', 'sys', 'pathlib', 'time'}",
    "dependencies": "{'subprocess', 'sys', 'pathlib', 'time'}",
    "globals": [],
    "main_block": true,
    "total_lines": 86,
    "complexity": 11
  },
  "archive\\legacy_scripts\\smart_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\smart_test_generator.py",
    "file_hash": "eb2a9f49a90d34f64ea8a142884f3abd",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run smart test generation.",
        "line_number": 425,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "print",
          "generate_all_tests",
          "SmartTestGenerator"
        ],
        "complexity": 1
      }
    ],
    "classes": [
      {
        "name": "CodeElement",
        "line_number": 19,
        "methods": [],
        "bases": [],
        "docstring": "Represents a code element to test."
      },
      {
        "name": "SmartTestGenerator",
        "line_number": 28,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 31,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "analyze_module",
            "signature": "def analyze_module(self, module_path: Path) -> Dict",
            "docstring": "Deep analysis of a module.",
            "line_number": 36,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict",
            "calls": [
              "open",
              "isupper",
              "isinstance",
              "analyze_function",
              "append",
              "parse",
              "walk",
              "analyze_class",
              "read"
            ],
            "complexity": 16
          },
          {
            "name": "analyze_class",
            "signature": "def analyze_class(self, node: ast.ClassDef) -> Dict",
            "docstring": "Analyze a class definition.",
            "line_number": 83,
            "is_public": true,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "Dict",
            "calls": [
              "get_name",
              "isinstance",
              "analyze_function",
              "append",
              "unparse"
            ],
            "complexity": 10
          },
          {
            "name": "analyze_function",
            "signature": "def analyze_function(self, node) -> Dict",
            "docstring": "Analyze a function definition.",
            "line_number": 119,
            "is_public": true,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "Dict",
            "calls": [
              "walk",
              "unparse",
              "append",
              "isinstance"
            ],
            "complexity": 6
          },
          {
            "name": "get_name",
            "signature": "def get_name(self, node) -> str",
            "docstring": "Get name from AST node.",
            "line_number": 143,
            "is_public": true,
            "parameters": [
              "self",
              "node"
            ],
            "return_type": "str",
            "calls": [
              "unparse",
              "get_name",
              "isinstance"
            ],
            "complexity": 3
          },
          {
            "name": "generate_test_for_class",
            "signature": "def generate_test_for_class(self, class_name: str, class_info: Dict) -> str",
            "docstring": "Generate tests for a class.",
            "line_number": 152,
            "is_public": true,
            "parameters": [
              "self",
              "class_name",
              "class_info"
            ],
            "return_type": "str",
            "calls": [
              "items",
              "get",
              "join",
              "startswith"
            ],
            "complexity": 14
          },
          {
            "name": "generate_test_for_function",
            "signature": "def generate_test_for_function(self, func_name: str, func_info: Dict) -> str",
            "docstring": "Generate test for a function.",
            "line_number": 237,
            "is_public": true,
            "parameters": [
              "self",
              "func_name",
              "func_info"
            ],
            "return_type": "str",
            "calls": [
              "join"
            ],
            "complexity": 9
          },
          {
            "name": "generate_comprehensive_test",
            "signature": "def generate_comprehensive_test(self, module_path: Path, analysis: Dict) -> str",
            "docstring": "Generate comprehensive test file.",
            "line_number": 287,
            "is_public": true,
            "parameters": [
              "self",
              "module_path",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "items",
              "generate_edge_case_tests",
              "replace",
              "with_suffix",
              "str",
              "startswith",
              "generate_test_for_function",
              "relative_to",
              "generate_integration_test",
              "generate_test_for_class"
            ],
            "complexity": 4
          },
          {
            "name": "generate_edge_case_tests",
            "signature": "def generate_edge_case_tests(self, analysis: Dict) -> str",
            "docstring": "Generate edge case tests.",
            "line_number": 340,
            "is_public": true,
            "parameters": [
              "self",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "items",
              "join",
              "startswith"
            ],
            "complexity": 4
          },
          {
            "name": "generate_integration_test",
            "signature": "def generate_integration_test(self, module_name: str, analysis: Dict) -> str",
            "docstring": "Generate integration test.",
            "line_number": 366,
            "is_public": true,
            "parameters": [
              "self",
              "module_name",
              "analysis"
            ],
            "return_type": "str",
            "calls": [
              "keys",
              "list"
            ],
            "complexity": 3
          },
          {
            "name": "generate_all_tests",
            "signature": "def generate_all_tests(self, limit: int = 30)",
            "docstring": "Generate tests for all modules.",
            "line_number": 382,
            "is_public": true,
            "parameters": [
              "self",
              "limit"
            ],
            "return_type": null,
            "calls": [
              "print",
              "exists",
              "str",
              "analyze_module",
              "len",
              "generate_comprehensive_test",
              "append",
              "rglob",
              "write_text"
            ],
            "complexity": 9
          }
        ],
        "bases": [],
        "docstring": "Generate smart tests based on code analysis."
      }
    ],
    "imports": "{'pathlib', 'sys', 'json', 'ast', 'textwrap', 'dataclasses', 'typing'}",
    "dependencies": "{'pathlib', 'sys', 'json', 'ast', 'textwrap', 'dataclasses', 'typing'}",
    "globals": [],
    "main_block": true,
    "total_lines": 452,
    "complexity": 1
  },
  "archive\\legacy_scripts\\specialized_test_generators.py": {
    "file_path": "archive\\legacy_scripts\\specialized_test_generators.py",
    "file_hash": "1d502a5982fa9833aac9e21bc2236738",
    "functions": [],
    "classes": [
      {
        "name": "RegressionTestGenerator",
        "line_number": 23,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, gold_standard_path: Path = Path('data/processed/gold_standard_preliminary_corrected_v3.csv'))",
            "docstring": null,
            "line_number": 29,
            "is_public": false,
            "parameters": [
              "self",
              "gold_standard_path"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "generate_regression_suite",
            "signature": "def generate_regression_suite(self) -> str",
            "docstring": "Generate regression tests for model outputs.",
            "line_number": 33,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates regression tests to ensure model outputs remain consistent.\nCritical for catching performance degradation."
      },
      {
        "name": "PerformanceTestGenerator",
        "line_number": 156,
        "methods": [
          {
            "name": "generate_performance_suite",
            "signature": "def generate_performance_suite(self) -> str",
            "docstring": null,
            "line_number": 162,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates performance and benchmark tests.\nEssential for optimization-heavy systems."
      },
      {
        "name": "DataValidationTestGenerator",
        "line_number": 263,
        "methods": [
          {
            "name": "generate_data_validation_suite",
            "signature": "def generate_data_validation_suite(self) -> str",
            "docstring": null,
            "line_number": 269,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates data validation tests.\nEssential for ML pipelines with multiple data sources."
      },
      {
        "name": "LLMTestGenerator",
        "line_number": 363,
        "methods": [
          {
            "name": "generate_llm_test_suite",
            "signature": "def generate_llm_test_suite(self) -> str",
            "docstring": null,
            "line_number": 369,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates tests for LLM interactions.\nEssential for systems heavily dependent on language models."
      },
      {
        "name": "ConfigurationTestGenerator",
        "line_number": 484,
        "methods": [
          {
            "name": "generate_config_test_suite",
            "signature": "def generate_config_test_suite(self) -> str",
            "docstring": null,
            "line_number": 490,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates tests for configuration and rule systems.\nEssential for systems with complex configuration."
      },
      {
        "name": "ExperimentTestGenerator",
        "line_number": 582,
        "methods": [
          {
            "name": "generate_experiment_test_suite",
            "signature": "def generate_experiment_test_suite(self) -> str",
            "docstring": null,
            "line_number": 588,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates tests for experiment tracking and ablation studies.\nEssential for research-oriented ML systems."
      },
      {
        "name": "ComprehensiveTestSuiteGenerator",
        "line_number": 693,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 698,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "RegressionTestGenerator",
              "PerformanceTestGenerator",
              "DataValidationTestGenerator",
              "ExperimentTestGenerator",
              "LLMTestGenerator",
              "ConfigurationTestGenerator"
            ],
            "complexity": 1
          },
          {
            "name": "generate_all_tests",
            "signature": "def generate_all_tests(self, output_dir: Path = Path('tests/specialized'))",
            "docstring": "Generate all specialized test suites.",
            "line_number": 708,
            "is_public": true,
            "parameters": [
              "self",
              "output_dir"
            ],
            "return_type": null,
            "calls": [
              "items",
              "open",
              "write",
              "hasattr",
              "print",
              "replace",
              "_generate_test_runner",
              "Path",
              "len",
              "append",
              "mkdir",
              "getattr"
            ],
            "complexity": 3
          },
          {
            "name": "_generate_test_runner",
            "signature": "def _generate_test_runner(self) -> str",
            "docstring": "Generate script to run all specialized tests.",
            "line_number": 745,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "str",
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Generates all specialized test types for the codebase."
      }
    ],
    "imports": "{'numpy', 'pathlib', 'hashlib', 'datetime', 'json', 'time', 'ast', 'random', 'os', 'typing', 'dataclasses'}",
    "dependencies": "{'numpy', 'pathlib', 'hashlib', 'datetime', 'json', 'time', 'ast', 'random', 'os', 'typing', 'dataclasses'}",
    "globals": [],
    "main_block": true,
    "total_lines": 816,
    "complexity": 0
  },
  "archive\\legacy_scripts\\systematic_coverage.py": {
    "file_path": "archive\\legacy_scripts\\systematic_coverage.py",
    "file_hash": "fa89d7db5194bd179a582ee66e7e78e9",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Run systematic coverage generation.",
        "line_number": 355,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "run_and_measure_improvement",
          "generate_module_tests",
          "print",
          "SystematicCoverageAnalyzer"
        ],
        "complexity": 2
      }
    ],
    "classes": [
      {
        "name": "ModuleCoverage",
        "line_number": 19,
        "methods": [],
        "bases": [],
        "docstring": "Coverage information for a module."
      },
      {
        "name": "SystematicCoverageAnalyzer",
        "line_number": 28,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 31,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "Path"
            ],
            "complexity": 1
          },
          {
            "name": "analyze_module_structure",
            "signature": "def analyze_module_structure(self, module_path: Path) -> Dict",
            "docstring": "Analyze a Python module's structure.",
            "line_number": 37,
            "is_public": true,
            "parameters": [
              "self",
              "module_path"
            ],
            "return_type": "Dict",
            "calls": [
              "open",
              "isinstance",
              "print",
              "readlines",
              "len",
              "defaultdict",
              "append",
              "parse",
              "walk",
              "read"
            ],
            "complexity": 12
          },
          {
            "name": "get_current_coverage",
            "signature": "def get_current_coverage(self) -> Dict[str, ModuleCoverage]",
            "docstring": "Get current coverage data for all modules.",
            "line_number": 72,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, ModuleCoverage]",
            "calls": [
              "items",
              "open",
              "set",
              "analyze_module_structure",
              "print",
              "exists",
              "Path",
              "len",
              "run",
              "get",
              "load",
              "ModuleCoverage"
            ],
            "complexity": 4
          },
          {
            "name": "prioritize_modules",
            "signature": "def prioritize_modules(self, coverage_data: Dict[str, ModuleCoverage]) -> List[Tuple[str, ModuleCoverage]]",
            "docstring": "Prioritize modules for testing based on importance and coverage.",
            "line_number": 117,
            "is_public": true,
            "parameters": [
              "self",
              "coverage_data"
            ],
            "return_type": "List[Tuple[str, ModuleCoverage]]",
            "calls": [
              "items",
              "append",
              "sort",
              "len"
            ],
            "complexity": 4
          },
          {
            "name": "generate_test_template",
            "signature": "def generate_test_template(self, module_name: str, coverage: ModuleCoverage) -> str",
            "docstring": "Generate a test template for a module.",
            "line_number": 148,
            "is_public": true,
            "parameters": [
              "self",
              "module_name",
              "coverage"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "analyze_module_structure",
              "replace",
              "_group_lines_into_ranges",
              "with_suffix",
              "str",
              "Path",
              "startswith",
              "relative_to",
              "get",
              "enumerate"
            ],
            "complexity": 9
          },
          {
            "name": "_group_lines_into_ranges",
            "signature": "def _group_lines_into_ranges(self, lines: Set[int]) -> List[Tuple[int, int]]",
            "docstring": "Group line numbers into ranges.",
            "line_number": 246,
            "is_public": false,
            "parameters": [
              "self",
              "lines"
            ],
            "return_type": "List[Tuple[int, int]]",
            "calls": [
              "append",
              "sorted"
            ],
            "complexity": 4
          },
          {
            "name": "generate_module_tests",
            "signature": "def generate_module_tests(self)",
            "docstring": "Generate tests for all modules systematically.",
            "line_number": 266,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "analyze_module_structure",
              "set",
              "print",
              "get_current_coverage",
              "generate_test_template",
              "exists",
              "str",
              "len",
              "get",
              "range",
              "rglob",
              "ModuleCoverage",
              "write_text",
              "prioritize_modules"
            ],
            "complexity": 8
          },
          {
            "name": "run_and_measure_improvement",
            "signature": "def run_and_measure_improvement(self)",
            "docstring": "Run tests and measure coverage improvement.",
            "line_number": 323,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "split",
              "print",
              "rstrip",
              "float",
              "len",
              "run"
            ],
            "complexity": 5
          }
        ],
        "bases": [],
        "docstring": "Analyze and improve coverage systematically."
      }
    ],
    "imports": "{'pathlib', 'sys', 'collections', 'json', 'ast', 'dataclasses', 'typing', 'subprocess'}",
    "dependencies": "{'pathlib', 'sys', 'collections', 'json', 'ast', 'dataclasses', 'typing', 'subprocess'}",
    "globals": [],
    "main_block": true,
    "total_lines": 387,
    "complexity": 2
  },
  "archive\\legacy_scripts\\testmaster_orchestrator.py": {
    "file_path": "archive\\legacy_scripts\\testmaster_orchestrator.py",
    "file_hash": "fc6460884f1d6054e08bb84cd05b61fc",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main entry point for the orchestrator.",
        "line_number": 523,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "add_argument",
          "ArgumentParser",
          "parse_args",
          "create_test_generation_workflow",
          "execute_workflow",
          "print",
          "Path",
          "len",
          "load_progress",
          "dumps",
          "run",
          "PipelineOrchestrator",
          "get_status"
        ],
        "complexity": 5
      }
    ],
    "classes": [
      {
        "name": "TaskStatus",
        "line_number": 38,
        "methods": [],
        "bases": [
          "Enum"
        ],
        "docstring": "Task execution status."
      },
      {
        "name": "TaskType",
        "line_number": 48,
        "methods": [],
        "bases": [
          "Enum"
        ],
        "docstring": "Types of tasks the orchestrator can handle."
      },
      {
        "name": "Task",
        "line_number": 63,
        "methods": [
          {
            "name": "__hash__",
            "signature": "def __hash__(self)",
            "docstring": null,
            "line_number": 80,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "hash"
            ],
            "complexity": 1
          },
          {
            "name": "__lt__",
            "signature": "def __lt__(self, other)",
            "docstring": "For priority queue comparison.",
            "line_number": 83,
            "is_public": false,
            "parameters": [
              "self",
              "other"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          }
        ],
        "bases": [],
        "docstring": "Represents a single task in the pipeline."
      },
      {
        "name": "WorkflowDAG",
        "line_number": 88,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 91,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "add_task",
            "signature": "def add_task(self, task: Task)",
            "docstring": "Add a task to the DAG.",
            "line_number": 96,
            "is_public": true,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": null,
            "calls": [
              "set",
              "add"
            ],
            "complexity": 3
          },
          {
            "name": "get_ready_tasks",
            "signature": "def get_ready_tasks(self) -> List[Task]",
            "docstring": "Get tasks that are ready to execute (all dependencies completed).",
            "line_number": 107,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "List[Task]",
            "calls": [
              "items",
              "append",
              "all",
              "sorted",
              "get",
              "Task"
            ],
            "complexity": 4
          },
          {
            "name": "has_cycles",
            "signature": "def has_cycles(self) -> bool",
            "docstring": "Check if the DAG has cycles.",
            "line_number": 121,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "bool",
            "calls": [
              "set",
              "visit",
              "remove",
              "get",
              "add"
            ],
            "complexity": 8
          }
        ],
        "bases": [],
        "docstring": "Directed Acyclic Graph for workflow management."
      },
      {
        "name": "PipelineOrchestrator",
        "line_number": 147,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self, config_path: Optional[Path] = None)",
            "docstring": null,
            "line_number": 150,
            "is_public": false,
            "parameters": [
              "self",
              "config_path"
            ],
            "return_type": null,
            "calls": [
              "set",
              "Lock",
              "Path",
              "_load_config",
              "get",
              "ThreadPoolExecutor",
              "_initialize_handlers",
              "WorkflowDAG"
            ],
            "complexity": 1
          },
          {
            "name": "_load_config",
            "signature": "def _load_config(self, config_path: Optional[Path]) -> Dict",
            "docstring": "Load orchestrator configuration.",
            "line_number": 159,
            "is_public": false,
            "parameters": [
              "self",
              "config_path"
            ],
            "return_type": "Dict",
            "calls": [
              "open",
              "exists",
              "update",
              "load"
            ],
            "complexity": 3
          },
          {
            "name": "_initialize_handlers",
            "signature": "def _initialize_handlers(self) -> Dict[TaskType, callable]",
            "docstring": "Initialize task type handlers.",
            "line_number": 179,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[TaskType, callable]",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "create_test_generation_workflow",
            "signature": "def create_test_generation_workflow(self, module_paths: List[Path]) -> str",
            "docstring": "Create a complete test generation workflow for modules.",
            "line_number": 194,
            "is_public": true,
            "parameters": [
              "self",
              "module_paths"
            ],
            "return_type": "str",
            "calls": [
              "strftime",
              "len",
              "Task",
              "enumerate",
              "add_task",
              "range",
              "now"
            ],
            "complexity": 2
          },
          {
            "name": "_execute_task",
            "signature": "def _execute_task(self, task: Task) -> Any",
            "docstring": "Execute a single task.",
            "line_number": 334,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Any",
            "calls": [
              "info",
              "get",
              "handler",
              "ValueError"
            ],
            "complexity": 2
          },
          {
            "name": "_handle_generate_test",
            "signature": "def _handle_generate_test(self, task: Task) -> Dict",
            "docstring": "Handle test generation task.",
            "line_number": 344,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "generate_test",
              "get",
              "str",
              "IntelligentTestBuilder"
            ],
            "complexity": 1
          },
          {
            "name": "_handle_self_heal",
            "signature": "def _handle_self_heal(self, task: Task) -> Dict",
            "docstring": "Handle self-healing task.",
            "line_number": 359,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "str"
            ],
            "complexity": 1
          },
          {
            "name": "_handle_verify_quality",
            "signature": "def _handle_verify_quality(self, task: Task) -> Dict",
            "docstring": "Handle quality verification task.",
            "line_number": 369,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "str"
            ],
            "complexity": 1
          },
          {
            "name": "_handle_fix_imports",
            "signature": "def _handle_fix_imports(self, task: Task) -> Dict",
            "docstring": "Handle import fixing task.",
            "line_number": 379,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "str"
            ],
            "complexity": 1
          },
          {
            "name": "_handle_deduplicate",
            "signature": "def _handle_deduplicate(self, task: Task) -> Dict",
            "docstring": "Handle test deduplication task.",
            "line_number": 388,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "str"
            ],
            "complexity": 1
          },
          {
            "name": "_handle_analyze_coverage",
            "signature": "def _handle_analyze_coverage(self, task: Task) -> Dict",
            "docstring": "Handle coverage analysis task.",
            "line_number": 397,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_handle_generate_report",
            "signature": "def _handle_generate_report(self, task: Task) -> Dict",
            "docstring": "Handle report generation task.",
            "line_number": 405,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "items",
              "open",
              "values",
              "str",
              "Path",
              "len",
              "dump",
              "get",
              "mkdir",
              "sum",
              "total_seconds",
              "now",
              "isoformat"
            ],
            "complexity": 4
          },
          {
            "name": "_handle_monitor_changes",
            "signature": "def _handle_monitor_changes(self, task: Task) -> Dict",
            "docstring": "Handle change monitoring task.",
            "line_number": 441,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_handle_batch_convert",
            "signature": "def _handle_batch_convert(self, task: Task) -> Dict",
            "docstring": "Handle batch conversion task.",
            "line_number": 449,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [],
            "complexity": 1
          },
          {
            "name": "_handle_incremental_update",
            "signature": "def _handle_incremental_update(self, task: Task) -> Dict",
            "docstring": "Handle incremental update task.",
            "line_number": 457,
            "is_public": false,
            "parameters": [
              "self",
              "task"
            ],
            "return_type": "Dict",
            "calls": [
              "str"
            ],
            "complexity": 1
          },
          {
            "name": "_save_progress",
            "signature": "def _save_progress(self)",
            "docstring": "Save workflow progress to file.",
            "line_number": 466,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [
              "items",
              "open",
              "str",
              "dump",
              "now",
              "isoformat"
            ],
            "complexity": 2
          },
          {
            "name": "load_progress",
            "signature": "def load_progress(self) -> bool",
            "docstring": "Load and resume previous workflow progress.",
            "line_number": 485,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "bool",
            "calls": [
              "items",
              "open",
              "error",
              "TaskStatus",
              "exists",
              "info",
              "get",
              "load"
            ],
            "complexity": 5
          },
          {
            "name": "get_status",
            "signature": "def get_status(self) -> Dict[str, Any]",
            "docstring": "Get current workflow status.",
            "line_number": 509,
            "is_public": true,
            "parameters": [
              "self"
            ],
            "return_type": "Dict[str, Any]",
            "calls": [
              "items",
              "values",
              "list",
              "len"
            ],
            "complexity": 2
          }
        ],
        "bases": [],
        "docstring": "Main orchestrator for TestMaster pipeline."
      }
    ],
    "imports": "{'os', 'datetime', 'pathlib', 'hashlib', 'threading', 'concurrent.futures', 'sys', 'queue', 'json', 'time', 'asyncio', 'pickle', 'typing', 'dataclasses', 'logging', 'enum'}",
    "dependencies": "{'os', 'datetime', 'pathlib', 'threading', 'hashlib', 'logging', 'sys', 'queue', 'json', 'time', 'asyncio', 'pickle', 'typing', 'dataclasses', 'concurrent', 'enum'}",
    "globals": [
      "logger"
    ],
    "main_block": true,
    "total_lines": 567,
    "complexity": 5
  },
  "archive\\legacy_scripts\\test_gemini_api.py": {
    "file_path": "archive\\legacy_scripts\\test_gemini_api.py",
    "file_hash": "3dbbfb23ef81d9905775c4d89c253291",
    "functions": [],
    "classes": [],
    "imports": "{'dotenv', 'os', 'sys'}",
    "dependencies": "{'dotenv', 'os', 'sys'}",
    "globals": [
      "api_key"
    ],
    "main_block": false,
    "total_lines": 88,
    "complexity": 0
  },
  "archive\\legacy_scripts\\test_gemini_config.py": {
    "file_path": "archive\\legacy_scripts\\test_gemini_config.py",
    "file_hash": "bd55e0ad0984a687b5bb776f717c112b",
    "functions": [
      {
        "name": "load_env",
        "signature": "def load_env()",
        "docstring": "Load environment variables from .env file.",
        "line_number": 15,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "split",
          "print",
          "exists",
          "Path",
          "startswith",
          "strip"
        ],
        "complexity": 6
      }
    ],
    "classes": [],
    "imports": "{'asyncio', 'os', 'pathlib', 'sys'}",
    "dependencies": "{'asyncio', 'os', 'pathlib', 'sys'}",
    "globals": [],
    "main_block": true,
    "total_lines": 148,
    "complexity": 6
  },
  "archive\\legacy_scripts\\test_gemini_correct.py": {
    "file_path": "archive\\legacy_scripts\\test_gemini_correct.py",
    "file_hash": "e30784d1bcfc62dada388dfa35a0b055",
    "functions": [],
    "classes": [],
    "imports": "{'dotenv', 'os', 'sys'}",
    "dependencies": "{'dotenv', 'os', 'sys'}",
    "globals": [
      "api_key"
    ],
    "main_block": false,
    "total_lines": 115,
    "complexity": 0
  },
  "archive\\legacy_scripts\\test_single_api_call.py": {
    "file_path": "archive\\legacy_scripts\\test_single_api_call.py",
    "file_hash": "0de40c4f0e103edbd00903d59614218a",
    "functions": [
      {
        "name": "test_single_generation",
        "signature": "def test_single_generation()",
        "docstring": "Test single generation with exact proven syntax.",
        "line_number": 29,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "write",
          "type",
          "generate_content",
          "Path",
          "len",
          "parse",
          "rsplit",
          "open",
          "split",
          "replace",
          "exists",
          "relative_to",
          "GenerationConfig",
          "mkdir",
          "print_exc",
          "print",
          "GenerativeModel",
          "str",
          "read"
        ],
        "complexity": 11
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main test function.",
        "line_number": 157,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "test_single_generation",
          "print"
        ],
        "complexity": 2
      }
    ],
    "classes": [],
    "imports": "{'google.generativeai', 'os', 'pathlib', 'sys'}",
    "dependencies": "{'google', 'os', 'pathlib', 'sys'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 174,
    "complexity": 13
  },
  "archive\\legacy_scripts\\test_single_generation.py": {
    "file_path": "archive\\legacy_scripts\\test_single_generation.py",
    "file_hash": "4ac58523e096556908ddba7bace5984f",
    "functions": [
      {
        "name": "load_env",
        "signature": "def load_env()",
        "docstring": null,
        "line_number": 15,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "split",
          "exists",
          "Path",
          "startswith",
          "strip"
        ],
        "complexity": 6
      }
    ],
    "classes": [],
    "imports": "{'google', 'pathlib', 'sys', 'asyncio', 'google.genai', 'os'}",
    "dependencies": "{'google', 'pathlib', 'sys', 'asyncio', 'os'}",
    "globals": [],
    "main_block": true,
    "total_lines": 134,
    "complexity": 6
  },
  "archive\\legacy_scripts\\test_updated_prompt.py": {
    "file_path": "archive\\legacy_scripts\\test_updated_prompt.py",
    "file_hash": "b4db56a1604e16b5b91f67c574dc341d",
    "functions": [
      {
        "name": "test_with_correct_imports",
        "signature": "def test_with_correct_imports()",
        "docstring": "Test with correct import paths.",
        "line_number": 30,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "lower",
          "write",
          "split",
          "parse",
          "print",
          "replace",
          "GenerativeModel",
          "Path",
          "generate_content",
          "str",
          "run",
          "relative_to",
          "enumerate",
          "GenerationConfig",
          "read"
        ],
        "complexity": 12
      }
    ],
    "classes": [],
    "imports": "{'pathlib', 'google.generativeai', 'sys', 'ast', 'os'}",
    "dependencies": "{'google', 'pathlib', 'sys', 'ast', 'os'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 174,
    "complexity": 12
  },
  "archive\\legacy_scripts\\turbo_converter.py": {
    "file_path": "archive\\legacy_scripts\\turbo_converter.py",
    "file_hash": "061591c9b1bfe0c4f860c354e607b9bc",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules without intelligent tests.",
        "line_number": 35,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "set",
          "replace",
          "exists",
          "str",
          "Path",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 9
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate test for a module - FAST version.",
        "line_number": 58,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "parse",
          "replace",
          "exists",
          "GenerativeModel",
          "Path",
          "generate_content",
          "len",
          "str",
          "relative_to",
          "mkdir",
          "GenerationConfig",
          "rsplit",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "process_batch",
        "signature": "def process_batch(modules, batch_size = 16)",
        "docstring": "Process modules in parallel batches - 1000 RPM = ~16 per second.",
        "line_number": 146,
        "is_public": true,
        "parameters": [
          "modules",
          "batch_size"
        ],
        "return_type": null,
        "calls": [
          "as_completed",
          "str",
          "append",
          "ThreadPoolExecutor",
          "submit",
          "result"
        ],
        "complexity": 3
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Turbo conversion with 1000 RPM rate limit.",
        "line_number": 173,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "extend",
          "min",
          "open",
          "sleep",
          "print",
          "Path",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "now",
          "sum",
          "range",
          "list",
          "isoformat",
          "process_batch"
        ],
        "complexity": 8
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'google.generativeai', 'concurrent.futures', 'sys', 'json', 'ast', 'time', 'os'}",
    "dependencies": "{'os', 'google', 'datetime', 'pathlib', 'sys', 'json', 'ast', 'time', 'concurrent'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 264,
    "complexity": 32
  },
  "archive\\legacy_scripts\\week_5_8_batch_converter.py": {
    "file_path": "archive\\legacy_scripts\\week_5_8_batch_converter.py",
    "file_hash": "04ecf91411210ad2d1efe1481ec48062",
    "functions": [
      {
        "name": "read_module_content",
        "signature": "def read_module_content(module_path)",
        "docstring": "Read module content for test generation.",
        "line_number": 41,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "print",
          "read",
          "len"
        ],
        "complexity": 3
      },
      {
        "name": "generate_intelligent_test",
        "signature": "def generate_intelligent_test(module_path, content)",
        "docstring": "Generate intelligent test using Gemini-2.5-pro.",
        "line_number": 54,
        "is_public": true,
        "parameters": [
          "module_path",
          "content"
        ],
        "return_type": null,
        "calls": [
          "split",
          "parse",
          "print",
          "GenerativeModel",
          "generate_content",
          "GenerationConfig"
        ],
        "complexity": 5
      },
      {
        "name": "fix_import_paths",
        "signature": "def fix_import_paths(test_code, module_path)",
        "docstring": "Fix import paths to use multi_coder_analysis.",
        "line_number": 115,
        "is_public": true,
        "parameters": [
          "test_code",
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "replace",
          "relative_to",
          "str"
        ],
        "complexity": 5
      },
      {
        "name": "save_test_file",
        "signature": "def save_test_file(test_code, module_name)",
        "docstring": "Save the generated test file.",
        "line_number": 140,
        "is_public": true,
        "parameters": [
          "test_code",
          "module_name"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "mkdir",
          "Path"
        ],
        "complexity": 1
      },
      {
        "name": "convert_batch",
        "signature": "def convert_batch(modules, batch_name = 'batch')",
        "docstring": "Convert a batch of modules to intelligent tests.",
        "line_number": 152,
        "is_public": true,
        "parameters": [
          "modules",
          "batch_name"
        ],
        "return_type": null,
        "calls": [
          "open",
          "sleep",
          "print",
          "fix_import_paths",
          "save_test_file",
          "exists",
          "str",
          "Path",
          "len",
          "dump",
          "append",
          "read_module_content",
          "enumerate",
          "generate_intelligent_test",
          "now",
          "isoformat"
        ],
        "complexity": 5
      },
      {
        "name": "get_priority_modules",
        "signature": "def get_priority_modules()",
        "docstring": "Get priority modules for conversion.",
        "line_number": 228,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "exists",
          "Path",
          "startswith",
          "glob",
          "append"
        ],
        "complexity": 11
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main conversion process for weeks 5-8.",
        "line_number": 268,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "open",
          "min",
          "write",
          "sleep",
          "print",
          "get_priority_modules",
          "len",
          "find_unconverted_modules",
          "enumerate",
          "convert_batch",
          "range",
          "now"
        ],
        "complexity": 6
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'json', 'time', 'ast', 'os'}",
    "dependencies": "{'datetime', 'pathlib', 'json', 'time', 'ast', 'os'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 331,
    "complexity": 36
  },
  "archive\\legacy_scripts\\week_7_8_converter.py": {
    "file_path": "archive\\legacy_scripts\\week_7_8_converter.py",
    "file_hash": "980f1d8b8f3aff545a821513519cba23",
    "functions": [
      {
        "name": "get_remaining_modules",
        "signature": "def get_remaining_modules()",
        "docstring": "Get all modules that don't have intelligent tests yet.",
        "line_number": 35,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "set",
          "print",
          "replace",
          "exists",
          "str",
          "Path",
          "len",
          "startswith",
          "glob",
          "append",
          "add",
          "rglob"
        ],
        "complexity": 16
      },
      {
        "name": "generate_test",
        "signature": "def generate_test(module_path)",
        "docstring": "Generate intelligent test for a module.",
        "line_number": 98,
        "is_public": true,
        "parameters": [
          "module_path"
        ],
        "return_type": null,
        "calls": [
          "open",
          "write",
          "split",
          "parse",
          "replace",
          "exists",
          "GenerativeModel",
          "Path",
          "generate_content",
          "len",
          "str",
          "relative_to",
          "mkdir",
          "GenerationConfig",
          "rsplit",
          "read"
        ],
        "complexity": 12
      },
      {
        "name": "convert_batch",
        "signature": "def convert_batch(modules, batch_name = 'batch', max_modules = 50)",
        "docstring": "Convert a batch of modules.",
        "line_number": 192,
        "is_public": true,
        "parameters": [
          "modules",
          "batch_name",
          "max_modules"
        ],
        "return_type": null,
        "calls": [
          "open",
          "min",
          "sleep",
          "print",
          "str",
          "Path",
          "len",
          "dump",
          "append",
          "enumerate",
          "generate_test",
          "now",
          "isoformat"
        ],
        "complexity": 6
      },
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Main Week 7-8 conversion process.",
        "line_number": 254,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "min",
          "open",
          "sleep",
          "print",
          "now",
          "len",
          "dump",
          "glob",
          "get_remaining_modules",
          "append",
          "Path",
          "convert_batch",
          "range",
          "list",
          "isoformat"
        ],
        "complexity": 5
      }
    ],
    "classes": [],
    "imports": "{'datetime', 'pathlib', 'google.generativeai', 'sys', 'json', 'ast', 'time', 'os'}",
    "dependencies": "{'google', 'datetime', 'pathlib', 'sys', 'json', 'ast', 'time', 'os'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 350,
    "complexity": 39
  },
  "archive\\legacy_scripts\\working_test_generator.py": {
    "file_path": "archive\\legacy_scripts\\working_test_generator.py",
    "file_hash": "324358a8864d4d5dab445bc70ef21c7a",
    "functions": [
      {
        "name": "get_first_module",
        "signature": "def get_first_module()",
        "docstring": "Get first module that needs a test.",
        "line_number": 41,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "glob",
          "rglob",
          "str",
          "Path"
        ],
        "complexity": 6
      },
      {
        "name": "generate_single_test",
        "signature": "def generate_single_test()",
        "docstring": "Generate a single test to verify everything works.",
        "line_number": 58,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "get_first_module",
          "open",
          "write",
          "print",
          "GenerativeModel",
          "generate_content",
          "Path",
          "len",
          "print_exc",
          "GenerationConfig",
          "read"
        ],
        "complexity": 6
      }
    ],
    "classes": [],
    "imports": "{'sys', 'os', 'pathlib', 'time'}",
    "dependencies": "{'sys', 'os', 'pathlib', 'time'}",
    "globals": [
      "env_file",
      "API_KEY"
    ],
    "main_block": true,
    "total_lines": 136,
    "complexity": 12
  },
  "archive\\legacy_scripts\\write_real_tests.py": {
    "file_path": "archive\\legacy_scripts\\write_real_tests.py",
    "file_hash": "26bc82c44d7c6cc96102b2a502232330",
    "functions": [
      {
        "name": "main",
        "signature": "def main()",
        "docstring": "Write real tests for all importable modules.",
        "line_number": 204,
        "is_public": true,
        "parameters": [],
        "return_type": null,
        "calls": [
          "RealTestWriter",
          "items",
          "write_real_test_for_module",
          "print"
        ],
        "complexity": 4
      }
    ],
    "classes": [
      {
        "name": "RealTestWriter",
        "line_number": 16,
        "methods": [
          {
            "name": "__init__",
            "signature": "def __init__(self)",
            "docstring": null,
            "line_number": 19,
            "is_public": false,
            "parameters": [
              "self"
            ],
            "return_type": null,
            "calls": [],
            "complexity": 1
          },
          {
            "name": "write_real_test_for_module",
            "signature": "def write_real_test_for_module(self, module_name: str, contents: dict) -> bool",
            "docstring": "Write a real test file for a specific module.",
            "line_number": 65,
            "is_public": true,
            "parameters": [
              "self",
              "module_name",
              "contents"
            ],
            "return_type": "bool",
            "calls": [
              "format",
              "_generate_function_tests",
              "split",
              "print",
              "get",
              "write_text",
              "_generate_function_sections",
              "_generate_class_sections",
              "_generate_class_tests"
            ],
            "complexity": 2
          },
          {
            "name": "_generate_class_tests",
            "signature": "def _generate_class_tests(self, classes: list) -> str",
            "docstring": "Generate basic tests for classes.",
            "line_number": 94,
            "is_public": false,
            "parameters": [
              "self",
              "classes"
            ],
            "return_type": "str",
            "calls": [
              "append",
              "join"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_function_tests",
            "signature": "def _generate_function_tests(self, functions: list) -> str",
            "docstring": "Generate basic tests for functions.",
            "line_number": 107,
            "is_public": false,
            "parameters": [
              "self",
              "functions"
            ],
            "return_type": "str",
            "calls": [
              "append",
              "join"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_class_sections",
            "signature": "def _generate_class_sections(self, classes: list, module_name: str) -> str",
            "docstring": "Generate test sections for classes.",
            "line_number": 121,
            "is_public": false,
            "parameters": [
              "self",
              "classes",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "lower",
              "append",
              "join"
            ],
            "complexity": 4
          },
          {
            "name": "_generate_function_sections",
            "signature": "def _generate_function_sections(self, functions: list, module_name: str) -> str",
            "docstring": "Generate test sections for functions.",
            "line_number": 162,
            "is_public": false,
            "parameters": [
              "self",
              "functions",
              "module_name"
            ],
            "return_type": "str",
            "calls": [
              "append",
              "join",
              "title"
            ],
            "complexity": 4
          }
        ],
        "bases": [],
        "docstring": "Writes real tests for importable modules."
      }
    ],
    "imports": "{'sys', 'pathlib'}",
    "dependencies": "{'sys', 'pathlib'}",
    "globals": [
      "project_root"
    ],
    "main_block": true,
    "total_lines": 248,
    "complexity": 4
  }
}