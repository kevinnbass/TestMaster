{
  "analysis_metadata": {
    "timestamp": "2025-08-20T21:46:40.815571",
    "total_components": 111,
    "base_path": "."
  },
  "summary_statistics": {
    "total_lines_of_code": 84127,
    "total_classes": 484,
    "total_functions": 2848,
    "components_with_ml": 12,
    "components_with_async": 40,
    "components_with_tests": 0,
    "average_complexity": 6239.333333333333,
    "average_api_surface": 17.27927927927928,
    "migration_complexity_distribution": {
      "high": 12,
      "medium": 98,
      "low": 1
    }
  },
  "consolidation_priorities": [
    {
      "category": "analytics",
      "priority": 1,
      "components": [
        "integration\\cross_system_analytics.py",
        "integration\\cross_system_analytics_robust.py",
        "integration\\predictive_analytics_engine.py",
        "integration\\predictive_analytics_engine_robust.py",
        "testmaster\\analysis\\coverage_analyzer.py",
        "testmaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
        "dashboard\\dashboard_core\\analytics_aggregator.py",
        "dashboard\\dashboard_core\\analytics_anomaly_detector.py",
        "dashboard\\dashboard_core\\analytics_backup.py",
        "dashboard\\dashboard_core\\analytics_batch_processor.py",
        "dashboard\\dashboard_core\\analytics_circuit_breaker.py",
        "dashboard\\dashboard_core\\analytics_compressor.py",
        "dashboard\\dashboard_core\\analytics_connectivity_monitor.py",
        "dashboard\\dashboard_core\\analytics_correlator.py",
        "dashboard\\dashboard_core\\analytics_data_sanitizer.py",
        "dashboard\\dashboard_core\\analytics_dead_letter_queue.py",
        "dashboard\\dashboard_core\\analytics_deduplication.py",
        "dashboard\\dashboard_core\\analytics_deduplication_engine.py",
        "dashboard\\dashboard_core\\analytics_delivery_enhancer.py",
        "dashboard\\dashboard_core\\analytics_delivery_guarantee.py",
        "dashboard\\dashboard_core\\analytics_delivery_verifier.py",
        "dashboard\\dashboard_core\\analytics_error_recovery.py",
        "dashboard\\dashboard_core\\analytics_event_queue.py",
        "dashboard\\dashboard_core\\analytics_export_manager.py",
        "dashboard\\dashboard_core\\analytics_fallback_system.py",
        "dashboard\\dashboard_core\\analytics_flow_monitor.py",
        "dashboard\\dashboard_core\\analytics_health_monitor.py",
        "dashboard\\dashboard_core\\analytics_heartbeat_monitor.py",
        "dashboard\\dashboard_core\\analytics_integrity_guardian.py",
        "dashboard\\dashboard_core\\analytics_integrity_verifier.py",
        "dashboard\\dashboard_core\\analytics_metrics_collector.py",
        "dashboard\\dashboard_core\\analytics_normalizer.py",
        "dashboard\\dashboard_core\\analytics_optimizer.py",
        "dashboard\\dashboard_core\\analytics_performance_booster.py",
        "dashboard\\dashboard_core\\analytics_performance_monitor.py",
        "dashboard\\dashboard_core\\analytics_performance_optimizer.py",
        "dashboard\\dashboard_core\\analytics_persistence.py",
        "dashboard\\dashboard_core\\analytics_pipeline.py",
        "dashboard\\dashboard_core\\analytics_pipeline_health_monitor.py",
        "dashboard\\dashboard_core\\analytics_priority_queue.py",
        "dashboard\\dashboard_core\\analytics_quality_assurance.py",
        "dashboard\\dashboard_core\\analytics_quantum_retry.py",
        "dashboard\\dashboard_core\\analytics_rate_limiter.py",
        "dashboard\\dashboard_core\\analytics_receipt_tracker.py",
        "dashboard\\dashboard_core\\analytics_recovery_orchestrator.py",
        "dashboard\\dashboard_core\\analytics_redundancy.py",
        "dashboard\\dashboard_core\\analytics_retry_manager.py",
        "dashboard\\dashboard_core\\analytics_sla_tracker.py",
        "dashboard\\dashboard_core\\analytics_smart_cache.py",
        "dashboard\\dashboard_core\\analytics_streaming.py",
        "dashboard\\dashboard_core\\analytics_telemetry.py",
        "dashboard\\dashboard_core\\analytics_validator.py",
        "dashboard\\dashboard_core\\analytics_watchdog.py",
        "dashboard\\dashboard_core\\realtime_analytics_tracker.py",
        "dashboard\\dashboard_core\\real_time_analytics.py"
      ],
      "consolidation_target": "core/intelligence/analytics/",
      "estimated_effort": "high"
    },
    {
      "category": "testing",
      "priority": 1,
      "components": [
        "integration\\cross_module_tester.py",
        "testmaster\\analysis\\coverage_analyzer.py",
        "testmaster\\analysis\\comprehensive_analysis\\api_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
        "testmaster\\analysis\\comprehensive_analysis\\clone_detection.py",
        "testmaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
        "testmaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\database_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
        "testmaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
        "testmaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\security_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\software_metrics.py",
        "testmaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
        "testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py",
        "testmaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
        "dashboard\\dashboard_core\\test_collector.py",
        "core\\testing\\advanced_testing_intelligence.py"
      ],
      "consolidation_target": "core/intelligence/testing/",
      "estimated_effort": "medium"
    },
    {
      "category": "integration",
      "priority": 2,
      "components": [
        "integration\\automatic_scaling_system.py",
        "integration\\automatic_scaling_system_robust.py",
        "integration\\comprehensive_error_recovery.py",
        "integration\\comprehensive_error_recovery_robust.py",
        "integration\\cross_module_tester.py",
        "integration\\cross_system_analytics.py",
        "integration\\cross_system_analytics_robust.py",
        "integration\\cross_system_apis.py",
        "integration\\cross_system_apis_robust.py",
        "integration\\cross_system_communication.py",
        "integration\\distributed_task_queue.py",
        "integration\\intelligent_caching_layer.py",
        "integration\\intelligent_caching_layer_robust.py",
        "integration\\load_balancing_system.py",
        "integration\\multi_environment_support.py",
        "integration\\predictive_analytics_engine.py",
        "integration\\predictive_analytics_engine_robust.py",
        "integration\\realtime_performance_monitoring.py",
        "integration\\realtime_performance_monitoring_robust.py",
        "integration\\resource_optimization_engine.py",
        "integration\\service_mesh_integration.py",
        "integration\\visual_workflow_designer.py",
        "integration\\workflow_execution_engine.py",
        "integration\\workflow_execution_engine_robust.py",
        "integration\\workflow_framework.py"
      ],
      "consolidation_target": "core/intelligence/integration/",
      "estimated_effort": "high"
    }
  ],
  "components": {
    "integration\\automatic_scaling_system.py": {
      "file_path": "integration\\automatic_scaling_system.py",
      "component_name": "automatic_scaling_system",
      "analysis_timestamp": "2025-08-20 21:46:39.466269",
      "classes": [
        {
          "name": "ScalingAction",
          "line_start": 43,
          "line_end": 50,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of scaling actions",
          "decorators": []
        },
        {
          "name": "ScalingTrigger",
          "line_start": 53,
          "line_end": 60,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Scaling trigger types",
          "decorators": []
        },
        {
          "name": "ResourceType",
          "line_start": 63,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of resources to scale",
          "decorators": []
        },
        {
          "name": "ScalingMetric",
          "line_start": 75,
          "line_end": 137,
          "base_classes": [],
          "methods": [
            {
              "name": "add_value",
              "line_start": 93,
              "line_end": 97,
              "args": [
                "self",
                "value"
              ],
              "returns": null,
              "docstring": "Add new value to history",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "_analyze_trend",
              "line_start": 99,
              "line_end": 123,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze trend in metric values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "get_utilization_percentage",
              "line_start": 125,
              "line_end": 129,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get utilization as percentage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "needs_scaling_up",
              "line_start": 131,
              "line_end": 133,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if metric needs scaling up",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            },
            {
              "name": "needs_scaling_down",
              "line_start": 135,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if metric needs scaling down",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Metric used for scaling decisions",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ScalingRule",
          "line_start": 141,
          "line_end": 173,
          "base_classes": [],
          "methods": [
            {
              "name": "can_trigger",
              "line_start": 164,
              "line_end": 173,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if rule can be triggered (not in cooldown)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Rule for automatic scaling",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ScalingDecision",
          "line_start": 177,
          "line_end": 198,
          "base_classes": [],
          "methods": [],
          "docstring": "Decision made by scaling system",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ScalingEvent",
          "line_start": 202,
          "line_end": 237,
          "base_classes": [],
          "methods": [
            {
              "name": "calculate_effectiveness",
              "line_start": 226,
              "line_end": 237,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate scaling effectiveness score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            }
          ],
          "docstring": "Scaling event for tracking and analysis",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AutomaticScalingSystem",
          "line_start": 244,
          "line_end": 1071,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 251,
              "line_end": 294,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "_initialize_default_metrics",
              "line_start": 296,
              "line_end": 336,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize default scaling metrics for all systems",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "_initialize_default_rules",
              "line_start": 338,
              "line_end": 391,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize default scaling rules",
              "is_async": false,
              "decorators": [],
              "complexity_score": 232
            },
            {
              "name": "add_scaling_metric",
              "line_start": 915,
              "line_end": 923,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Add custom scaling metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "add_scaling_rule",
              "line_start": 925,
              "line_end": 933,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add custom scaling rule",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "get_scaling_status",
              "line_start": 935,
              "line_end": 952,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current scaling system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "get_scaling_metrics_summary",
              "line_start": 954,
              "line_end": 979,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get summary of scaling metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 132
            },
            {
              "name": "get_recent_scaling_decisions",
              "line_start": 981,
              "line_end": 1002,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get recent scaling decisions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "get_scaling_effectiveness",
              "line_start": 1004,
              "line_end": 1032,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get scaling effectiveness analysis",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "set_target_capacity",
              "line_start": 1038,
              "line_end": 1042,
              "args": [
                "self",
                "capacity"
              ],
              "returns": null,
              "docstring": "Set target capacity for scaling.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "get_current_capacity",
              "line_start": 1044,
              "line_end": 1046,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current capacity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "add_scaling_policy",
              "line_start": 1048,
              "line_end": 1053,
              "args": [
                "self",
                "name",
                "threshold"
              ],
              "returns": null,
              "docstring": "Add a scaling policy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "get_scaling_policies",
              "line_start": 1055,
              "line_end": 1057,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get all scaling policies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "trigger_scale_up",
              "line_start": 1059,
              "line_end": 1064,
              "args": [
                "self",
                "reason"
              ],
              "returns": null,
              "docstring": "Trigger scale up event.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "trigger_scale_down",
              "line_start": 1066,
              "line_end": 1071,
              "args": [
                "self",
                "reason"
              ],
              "returns": null,
              "docstring": "Trigger scale down event.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            }
          ],
          "docstring": "Intelligent automatic scaling system that uses predictive analytics,\ncross-system metrics correlation, and workflow orchestration to optimize\nsystem performance and resource utilization.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "add_value",
          "line_start": 93,
          "line_end": 97,
          "args": [
            "self",
            "value"
          ],
          "returns": null,
          "docstring": "Add new value to history",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "_analyze_trend",
          "line_start": 99,
          "line_end": 123,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze trend in metric values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "get_utilization_percentage",
          "line_start": 125,
          "line_end": 129,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get utilization as percentage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "needs_scaling_up",
          "line_start": 131,
          "line_end": 133,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if metric needs scaling up",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "needs_scaling_down",
          "line_start": 135,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if metric needs scaling down",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "can_trigger",
          "line_start": 164,
          "line_end": 173,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if rule can be triggered (not in cooldown)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "calculate_effectiveness",
          "line_start": 226,
          "line_end": 237,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate scaling effectiveness score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "__init__",
          "line_start": 251,
          "line_end": 294,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "_initialize_default_metrics",
          "line_start": 296,
          "line_end": 336,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize default scaling metrics for all systems",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "_initialize_default_rules",
          "line_start": 338,
          "line_end": 391,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize default scaling rules",
          "is_async": false,
          "decorators": [],
          "complexity_score": 232
        },
        {
          "name": "add_scaling_metric",
          "line_start": 915,
          "line_end": 923,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Add custom scaling metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "add_scaling_rule",
          "line_start": 925,
          "line_end": 933,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add custom scaling rule",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "get_scaling_status",
          "line_start": 935,
          "line_end": 952,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current scaling system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "get_scaling_metrics_summary",
          "line_start": 954,
          "line_end": 979,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get summary of scaling metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 132
        },
        {
          "name": "get_recent_scaling_decisions",
          "line_start": 981,
          "line_end": 1002,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get recent scaling decisions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "get_scaling_effectiveness",
          "line_start": 1004,
          "line_end": 1032,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get scaling effectiveness analysis",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "set_target_capacity",
          "line_start": 1038,
          "line_end": 1042,
          "args": [
            "self",
            "capacity"
          ],
          "returns": null,
          "docstring": "Set target capacity for scaling.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "get_current_capacity",
          "line_start": 1044,
          "line_end": 1046,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current capacity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "add_scaling_policy",
          "line_start": 1048,
          "line_end": 1053,
          "args": [
            "self",
            "name",
            "threshold"
          ],
          "returns": null,
          "docstring": "Add a scaling policy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "get_scaling_policies",
          "line_start": 1055,
          "line_end": 1057,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get all scaling policies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "trigger_scale_up",
          "line_start": 1059,
          "line_end": 1064,
          "args": [
            "self",
            "reason"
          ],
          "returns": null,
          "docstring": "Trigger scale up event.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "trigger_scale_down",
          "line_start": 1066,
          "line_end": 1071,
          "args": [
            "self",
            "reason"
          ],
          "returns": null,
          "docstring": "Trigger scale down event.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics",
            "MetricType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 34
        },
        {
          "module": "predictive_analytics_engine",
          "names": [
            "predictive_analytics_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "workflow_execution_engine",
          "names": [
            "workflow_execution_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "workflow_framework",
          "names": [
            "workflow_templates"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 770
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowDefinition",
            "WorkflowStep",
            "WorkflowStepType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 800
        }
      ],
      "external_dependencies": "{'workflow_framework', 'dataclasses', 'time', 'typing', 'cross_system_apis', 'json', 'logging', 'concurrent.futures', 'cross_system_analytics', 'enum', 'uuid', 'asyncio', 'threading', 'predictive_analytics_engine', 'workflow_execution_engine', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1092,
      "complexity_score": 3712,
      "api_surface_area": 36,
      "docstring": "Automatic Scaling System\n========================\n\nIntelligent resource scaling system that leverages predictive analytics,\ncross-system metrics correlation, and workflow orchestration to automatically\noptimize system performance and resource utilization.\n\nIntegrates with:\n- Predictive Analytics Engine for scaling predictions\n- Cross-System Analytics for performance correlation\n- Workflow Execution Engine for scaling workflows\n- Cross-System APIs for resource management\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\automatic_scaling_system_robust.py": {
      "file_path": "integration\\automatic_scaling_system_robust.py",
      "component_name": "automatic_scaling_system_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.479171",
      "classes": [
        {
          "name": "ScalingAction",
          "line_start": 43,
          "line_end": 50,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of scaling actions",
          "decorators": []
        },
        {
          "name": "ScalingTrigger",
          "line_start": 53,
          "line_end": 60,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Scaling trigger types",
          "decorators": []
        },
        {
          "name": "ResourceType",
          "line_start": 63,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of resources to scale",
          "decorators": []
        },
        {
          "name": "ScalingMetric",
          "line_start": 75,
          "line_end": 137,
          "base_classes": [],
          "methods": [
            {
              "name": "add_value",
              "line_start": 93,
              "line_end": 97,
              "args": [
                "self",
                "value"
              ],
              "returns": null,
              "docstring": "Add new value to history",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "_analyze_trend",
              "line_start": 99,
              "line_end": 123,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze trend in metric values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "get_utilization_percentage",
              "line_start": 125,
              "line_end": 129,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get utilization as percentage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "needs_scaling_up",
              "line_start": 131,
              "line_end": 133,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if metric needs scaling up",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            },
            {
              "name": "needs_scaling_down",
              "line_start": 135,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if metric needs scaling down",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Metric used for scaling decisions",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ScalingRule",
          "line_start": 141,
          "line_end": 173,
          "base_classes": [],
          "methods": [
            {
              "name": "can_trigger",
              "line_start": 164,
              "line_end": 173,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if rule can be triggered (not in cooldown)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Rule for automatic scaling",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ScalingDecision",
          "line_start": 177,
          "line_end": 197,
          "base_classes": [],
          "methods": [],
          "docstring": "Decision made by scaling system",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ScalingEvent",
          "line_start": 201,
          "line_end": 235,
          "base_classes": [],
          "methods": [
            {
              "name": "calculate_effectiveness",
              "line_start": 224,
              "line_end": 235,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate scaling effectiveness score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            }
          ],
          "docstring": "Scaling event for tracking and analysis",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AutomaticScalingSystem",
          "line_start": 242,
          "line_end": 1030,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 249,
              "line_end": 292,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "_initialize_default_metrics",
              "line_start": 294,
              "line_end": 334,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize default scaling metrics for all systems",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "_initialize_default_rules",
              "line_start": 336,
              "line_end": 389,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize default scaling rules",
              "is_async": false,
              "decorators": [],
              "complexity_score": 232
            },
            {
              "name": "add_scaling_metric",
              "line_start": 913,
              "line_end": 921,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Add custom scaling metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "add_scaling_rule",
              "line_start": 923,
              "line_end": 931,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add custom scaling rule",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "get_scaling_status",
              "line_start": 933,
              "line_end": 950,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current scaling system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "get_scaling_metrics_summary",
              "line_start": 952,
              "line_end": 977,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get summary of scaling metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 132
            },
            {
              "name": "get_recent_scaling_decisions",
              "line_start": 979,
              "line_end": 1000,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get recent scaling decisions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "get_scaling_effectiveness",
              "line_start": 1002,
              "line_end": 1030,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get scaling effectiveness analysis",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            }
          ],
          "docstring": "Intelligent automatic scaling system that uses predictive analytics,\ncross-system metrics correlation, and workflow orchestration to optimize\nsystem performance and resource utilization.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "add_value",
          "line_start": 93,
          "line_end": 97,
          "args": [
            "self",
            "value"
          ],
          "returns": null,
          "docstring": "Add new value to history",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "_analyze_trend",
          "line_start": 99,
          "line_end": 123,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze trend in metric values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "get_utilization_percentage",
          "line_start": 125,
          "line_end": 129,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get utilization as percentage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "needs_scaling_up",
          "line_start": 131,
          "line_end": 133,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if metric needs scaling up",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "needs_scaling_down",
          "line_start": 135,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if metric needs scaling down",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "can_trigger",
          "line_start": 164,
          "line_end": 173,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if rule can be triggered (not in cooldown)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "calculate_effectiveness",
          "line_start": 224,
          "line_end": 235,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate scaling effectiveness score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "__init__",
          "line_start": 249,
          "line_end": 292,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "_initialize_default_metrics",
          "line_start": 294,
          "line_end": 334,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize default scaling metrics for all systems",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "_initialize_default_rules",
          "line_start": 336,
          "line_end": 389,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize default scaling rules",
          "is_async": false,
          "decorators": [],
          "complexity_score": 232
        },
        {
          "name": "add_scaling_metric",
          "line_start": 913,
          "line_end": 921,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Add custom scaling metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "add_scaling_rule",
          "line_start": 923,
          "line_end": 931,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add custom scaling rule",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "get_scaling_status",
          "line_start": 933,
          "line_end": 950,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current scaling system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "get_scaling_metrics_summary",
          "line_start": 952,
          "line_end": 977,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get summary of scaling metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 132
        },
        {
          "name": "get_recent_scaling_decisions",
          "line_start": 979,
          "line_end": 1000,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get recent scaling decisions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "get_scaling_effectiveness",
          "line_start": 1002,
          "line_end": 1030,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get scaling effectiveness analysis",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics",
            "MetricType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 34
        },
        {
          "module": "predictive_analytics_engine",
          "names": [
            "predictive_analytics_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "workflow_execution_engine",
          "names": [
            "workflow_execution_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "workflow_framework",
          "names": [
            "workflow_templates"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 768
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowDefinition",
            "WorkflowStep",
            "WorkflowStepType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 798
        }
      ],
      "external_dependencies": "{'workflow_framework', 'dataclasses', 'time', 'typing', 'cross_system_apis', 'json', 'logging', 'concurrent.futures', 'cross_system_analytics', 'enum', 'uuid', 'asyncio', 'threading', 'predictive_analytics_engine', 'workflow_execution_engine', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1051,
      "complexity_score": 3256,
      "api_surface_area": 24,
      "docstring": "Automatic Scaling System\n========================\n\nIntelligent resource scaling system that leverages predictive analytics,\ncross-system metrics correlation, and workflow orchestration to automatically\noptimize system performance and resource utilization.\n\nIntegrates with:\n- Predictive Analytics Engine for scaling predictions\n- Cross-System Analytics for performance correlation\n- Workflow Execution Engine for scaling workflows\n- Cross-System APIs for resource management\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\comprehensive_error_recovery.py": {
      "file_path": "integration\\comprehensive_error_recovery.py",
      "component_name": "comprehensive_error_recovery",
      "analysis_timestamp": "2025-08-20 21:46:39.493295",
      "classes": [
        {
          "name": "ErrorSeverity",
          "line_start": 43,
          "line_end": 49,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Error severity levels",
          "decorators": []
        },
        {
          "name": "ErrorCategory",
          "line_start": 52,
          "line_end": 63,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Categories of errors",
          "decorators": []
        },
        {
          "name": "RecoveryStrategy",
          "line_start": 66,
          "line_end": 77,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Recovery strategy types",
          "decorators": []
        },
        {
          "name": "RecoveryStatus",
          "line_start": 80,
          "line_end": 87,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Recovery attempt status",
          "decorators": []
        },
        {
          "name": "ErrorEvent",
          "line_start": 91,
          "line_end": 156,
          "base_classes": [],
          "methods": [
            {
              "name": "add_recovery_attempt",
              "line_start": 121,
              "line_end": 123,
              "args": [
                "self",
                "attempt"
              ],
              "returns": null,
              "docstring": "Add recovery attempt to this error",
              "is_async": false,
              "decorators": [],
              "complexity_score": 17
            },
            {
              "name": "mark_resolved",
              "line_start": 125,
              "line_end": 128,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Mark error as resolved",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "get_resolution_duration",
              "line_start": 130,
              "line_end": 134,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get resolution duration in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "calculate_impact_score",
              "line_start": 136,
              "line_end": 156,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate error impact score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            }
          ],
          "docstring": "Error event record",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RecoveryAttempt",
          "line_start": 160,
          "line_end": 203,
          "base_classes": [],
          "methods": [
            {
              "name": "start_attempt",
              "line_start": 183,
              "line_end": 186,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Mark attempt as started",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "complete_attempt",
              "line_start": 188,
              "line_end": 197,
              "args": [
                "self",
                "success",
                "error_message"
              ],
              "returns": null,
              "docstring": "Mark attempt as completed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "get_execution_duration",
              "line_start": 199,
              "line_end": 203,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get execution duration in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            }
          ],
          "docstring": "Recovery attempt record",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ErrorPattern",
          "line_start": 207,
          "line_end": 257,
          "base_classes": [],
          "methods": [
            {
              "name": "add_error_occurrence",
              "line_start": 229,
              "line_end": 244,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "docstring": "Add error occurrence to pattern",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "get_recommended_strategy",
              "line_start": 246,
              "line_end": 257,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get recommended recovery strategy based on pattern",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            }
          ],
          "docstring": "Detected error pattern",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CircuitBreakerState",
          "line_start": 261,
          "line_end": 322,
          "base_classes": [],
          "methods": [
            {
              "name": "record_success",
              "line_start": 281,
              "line_end": 290,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record successful call",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "record_failure",
              "line_start": 292,
              "line_end": 300,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record failed call",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "can_call",
              "line_start": 302,
              "line_end": 316,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if calls are allowed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "get_failure_rate",
              "line_start": 318,
              "line_end": 322,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get failure rate percentage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            }
          ],
          "docstring": "Circuit breaker state for a system component",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ComprehensiveErrorRecoverySystem",
          "line_start": 329,
          "line_end": 1256,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 335,
              "line_end": 381,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "_register_recovery_strategies",
              "line_start": 383,
              "line_end": 396,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Register available recovery strategies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "get_recovery_status",
              "line_start": 1094,
              "line_end": 1108,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current recovery system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "get_error_summary",
              "line_start": 1110,
              "line_end": 1147,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get error summary for specified time period",
              "is_async": false,
              "decorators": [],
              "complexity_score": 258
            },
            {
              "name": "get_circuit_breaker_status",
              "line_start": 1149,
              "line_end": 1163,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get circuit breaker status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "get_error_patterns",
              "line_start": 1165,
              "line_end": 1182,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get detected error patterns",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "register_error_handler",
              "line_start": 1188,
              "line_end": 1193,
              "args": [
                "self",
                "error_type",
                "handler"
              ],
              "returns": null,
              "docstring": "Register an error handler.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "handle_error",
              "line_start": 1195,
              "line_end": 1202,
              "args": [
                "self",
                "error_type",
                "context"
              ],
              "returns": null,
              "docstring": "Handle an error with registered handler.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "get_recovery_metrics",
              "line_start": 1204,
              "line_end": 1211,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get recovery metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "open_circuit",
              "line_start": 1213,
              "line_end": 1234,
              "args": [
                "self",
                "service_name"
              ],
              "returns": null,
              "docstring": "Open circuit breaker for a service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "close_circuit",
              "line_start": 1236,
              "line_end": 1256,
              "args": [
                "self",
                "service_name"
              ],
              "returns": null,
              "docstring": "Close circuit breaker for a service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            }
          ],
          "docstring": "Advanced error recovery and resilience system that provides intelligent\nerror handling, automatic recovery strategies, and system health restoration.",
          "decorators": []
        },
        {
          "name": "State",
          "line_start": 1218,
          "line_end": 1221,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "State",
          "line_start": 1240,
          "line_end": 1243,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "add_recovery_attempt",
          "line_start": 121,
          "line_end": 123,
          "args": [
            "self",
            "attempt"
          ],
          "returns": null,
          "docstring": "Add recovery attempt to this error",
          "is_async": false,
          "decorators": [],
          "complexity_score": 17
        },
        {
          "name": "mark_resolved",
          "line_start": 125,
          "line_end": 128,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Mark error as resolved",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "get_resolution_duration",
          "line_start": 130,
          "line_end": 134,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get resolution duration in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "calculate_impact_score",
          "line_start": 136,
          "line_end": 156,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate error impact score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "start_attempt",
          "line_start": 183,
          "line_end": 186,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Mark attempt as started",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "complete_attempt",
          "line_start": 188,
          "line_end": 197,
          "args": [
            "self",
            "success",
            "error_message"
          ],
          "returns": null,
          "docstring": "Mark attempt as completed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "get_execution_duration",
          "line_start": 199,
          "line_end": 203,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get execution duration in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "add_error_occurrence",
          "line_start": 229,
          "line_end": 244,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "docstring": "Add error occurrence to pattern",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "get_recommended_strategy",
          "line_start": 246,
          "line_end": 257,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get recommended recovery strategy based on pattern",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "record_success",
          "line_start": 281,
          "line_end": 290,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record successful call",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "record_failure",
          "line_start": 292,
          "line_end": 300,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record failed call",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "can_call",
          "line_start": 302,
          "line_end": 316,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if calls are allowed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "get_failure_rate",
          "line_start": 318,
          "line_end": 322,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get failure rate percentage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "__init__",
          "line_start": 335,
          "line_end": 381,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "_register_recovery_strategies",
          "line_start": 383,
          "line_end": 396,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Register available recovery strategies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "get_recovery_status",
          "line_start": 1094,
          "line_end": 1108,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current recovery system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "get_error_summary",
          "line_start": 1110,
          "line_end": 1147,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get error summary for specified time period",
          "is_async": false,
          "decorators": [],
          "complexity_score": 258
        },
        {
          "name": "get_circuit_breaker_status",
          "line_start": 1149,
          "line_end": 1163,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get circuit breaker status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "get_error_patterns",
          "line_start": 1165,
          "line_end": 1182,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get detected error patterns",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "register_error_handler",
          "line_start": 1188,
          "line_end": 1193,
          "args": [
            "self",
            "error_type",
            "handler"
          ],
          "returns": null,
          "docstring": "Register an error handler.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "handle_error",
          "line_start": 1195,
          "line_end": 1202,
          "args": [
            "self",
            "error_type",
            "context"
          ],
          "returns": null,
          "docstring": "Handle an error with registered handler.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "get_recovery_metrics",
          "line_start": 1204,
          "line_end": 1211,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get recovery metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "open_circuit",
          "line_start": 1213,
          "line_end": 1234,
          "args": [
            "self",
            "service_name"
          ],
          "returns": null,
          "docstring": "Open circuit breaker for a service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "close_circuit",
          "line_start": 1236,
          "line_end": 1256,
          "args": [
            "self",
            "service_name"
          ],
          "returns": null,
          "docstring": "Close circuit breaker for a service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 27
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 34
        },
        {
          "module": "workflow_execution_engine",
          "names": [
            "workflow_execution_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "automatic_scaling_system",
          "names": [
            "automatic_scaling_system"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowDefinition",
            "WorkflowStep",
            "WorkflowStepType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 737
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 1217
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 1239
        }
      ],
      "external_dependencies": "{'dataclasses', 'typing', 'json', 'uuid', 'traceback', 'cross_system_analytics', 'automatic_scaling_system', 'enum', 'threading', 'asyncio', 'statistics', 'logging', 'concurrent.futures', 'cross_system_apis', 'workflow_execution_engine', 'datetime', 'collections', 'workflow_framework', 'time'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1280,
      "complexity_score": 3978,
      "api_surface_area": 44,
      "docstring": "Comprehensive Error Recovery System\n==================================\n\nAdvanced error recovery and resilience system that provides intelligent error handling,\nautomatic recovery strategies, and system health restoration across all unified systems.\n\nIntegrates with:\n- Cross-System APIs for system-wide error handling\n- Workflow Execution Engine for recovery workflows\n- Automatic Scaling System for resource-based recovery\n- Cross-System Analytics for error pattern analysis\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9428571428571428,
      "estimated_migration_complexity": "medium"
    },
    "integration\\comprehensive_error_recovery_robust.py": {
      "file_path": "integration\\comprehensive_error_recovery_robust.py",
      "component_name": "comprehensive_error_recovery_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.511294",
      "classes": [
        {
          "name": "ErrorSeverity",
          "line_start": 43,
          "line_end": 49,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Error severity levels",
          "decorators": []
        },
        {
          "name": "ErrorCategory",
          "line_start": 52,
          "line_end": 63,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Categories of errors",
          "decorators": []
        },
        {
          "name": "RecoveryStrategy",
          "line_start": 66,
          "line_end": 77,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Recovery strategy types",
          "decorators": []
        },
        {
          "name": "RecoveryStatus",
          "line_start": 80,
          "line_end": 87,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Recovery attempt status",
          "decorators": []
        },
        {
          "name": "ErrorEvent",
          "line_start": 91,
          "line_end": 155,
          "base_classes": [],
          "methods": [
            {
              "name": "add_recovery_attempt",
              "line_start": 120,
              "line_end": 122,
              "args": [
                "self",
                "attempt"
              ],
              "returns": null,
              "docstring": "Add recovery attempt to this error",
              "is_async": false,
              "decorators": [],
              "complexity_score": 17
            },
            {
              "name": "mark_resolved",
              "line_start": 124,
              "line_end": 127,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Mark error as resolved",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "get_resolution_duration",
              "line_start": 129,
              "line_end": 133,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get resolution duration in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "calculate_impact_score",
              "line_start": 135,
              "line_end": 155,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate error impact score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            }
          ],
          "docstring": "Error event record",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RecoveryAttempt",
          "line_start": 159,
          "line_end": 201,
          "base_classes": [],
          "methods": [
            {
              "name": "start_attempt",
              "line_start": 181,
              "line_end": 184,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Mark attempt as started",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "complete_attempt",
              "line_start": 186,
              "line_end": 195,
              "args": [
                "self",
                "success",
                "error_message"
              ],
              "returns": null,
              "docstring": "Mark attempt as completed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "get_execution_duration",
              "line_start": 197,
              "line_end": 201,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get execution duration in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            }
          ],
          "docstring": "Recovery attempt record",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ErrorPattern",
          "line_start": 205,
          "line_end": 254,
          "base_classes": [],
          "methods": [
            {
              "name": "add_error_occurrence",
              "line_start": 226,
              "line_end": 241,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "docstring": "Add error occurrence to pattern",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "get_recommended_strategy",
              "line_start": 243,
              "line_end": 254,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get recommended recovery strategy based on pattern",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            }
          ],
          "docstring": "Detected error pattern",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CircuitBreakerState",
          "line_start": 258,
          "line_end": 319,
          "base_classes": [],
          "methods": [
            {
              "name": "record_success",
              "line_start": 278,
              "line_end": 287,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record successful call",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "record_failure",
              "line_start": 289,
              "line_end": 297,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record failed call",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "can_call",
              "line_start": 299,
              "line_end": 313,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if calls are allowed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "get_failure_rate",
              "line_start": 315,
              "line_end": 319,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get failure rate percentage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            }
          ],
          "docstring": "Circuit breaker state for a system component",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ComprehensiveErrorRecoverySystem",
          "line_start": 326,
          "line_end": 1179,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 332,
              "line_end": 378,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "_register_recovery_strategies",
              "line_start": 380,
              "line_end": 393,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Register available recovery strategies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "get_recovery_status",
              "line_start": 1091,
              "line_end": 1105,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current recovery system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "get_error_summary",
              "line_start": 1107,
              "line_end": 1144,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get error summary for specified time period",
              "is_async": false,
              "decorators": [],
              "complexity_score": 258
            },
            {
              "name": "get_circuit_breaker_status",
              "line_start": 1146,
              "line_end": 1160,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get circuit breaker status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "get_error_patterns",
              "line_start": 1162,
              "line_end": 1179,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get detected error patterns",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            }
          ],
          "docstring": "Advanced error recovery and resilience system that provides intelligent\nerror handling, automatic recovery strategies, and system health restoration.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "add_recovery_attempt",
          "line_start": 120,
          "line_end": 122,
          "args": [
            "self",
            "attempt"
          ],
          "returns": null,
          "docstring": "Add recovery attempt to this error",
          "is_async": false,
          "decorators": [],
          "complexity_score": 17
        },
        {
          "name": "mark_resolved",
          "line_start": 124,
          "line_end": 127,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Mark error as resolved",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "get_resolution_duration",
          "line_start": 129,
          "line_end": 133,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get resolution duration in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "calculate_impact_score",
          "line_start": 135,
          "line_end": 155,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate error impact score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "start_attempt",
          "line_start": 181,
          "line_end": 184,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Mark attempt as started",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "complete_attempt",
          "line_start": 186,
          "line_end": 195,
          "args": [
            "self",
            "success",
            "error_message"
          ],
          "returns": null,
          "docstring": "Mark attempt as completed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "get_execution_duration",
          "line_start": 197,
          "line_end": 201,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get execution duration in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "add_error_occurrence",
          "line_start": 226,
          "line_end": 241,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "docstring": "Add error occurrence to pattern",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "get_recommended_strategy",
          "line_start": 243,
          "line_end": 254,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get recommended recovery strategy based on pattern",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "record_success",
          "line_start": 278,
          "line_end": 287,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record successful call",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "record_failure",
          "line_start": 289,
          "line_end": 297,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record failed call",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "can_call",
          "line_start": 299,
          "line_end": 313,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if calls are allowed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "get_failure_rate",
          "line_start": 315,
          "line_end": 319,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get failure rate percentage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "__init__",
          "line_start": 332,
          "line_end": 378,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "_register_recovery_strategies",
          "line_start": 380,
          "line_end": 393,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Register available recovery strategies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "get_recovery_status",
          "line_start": 1091,
          "line_end": 1105,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current recovery system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "get_error_summary",
          "line_start": 1107,
          "line_end": 1144,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get error summary for specified time period",
          "is_async": false,
          "decorators": [],
          "complexity_score": 258
        },
        {
          "name": "get_circuit_breaker_status",
          "line_start": 1146,
          "line_end": 1160,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get circuit breaker status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "get_error_patterns",
          "line_start": 1162,
          "line_end": 1179,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get detected error patterns",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 27
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 34
        },
        {
          "module": "workflow_execution_engine",
          "names": [
            "workflow_execution_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "automatic_scaling_system",
          "names": [
            "automatic_scaling_system"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowDefinition",
            "WorkflowStep",
            "WorkflowStepType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 734
        }
      ],
      "external_dependencies": "{'dataclasses', 'typing', 'json', 'uuid', 'traceback', 'cross_system_analytics', 'automatic_scaling_system', 'enum', 'threading', 'asyncio', 'statistics', 'logging', 'concurrent.futures', 'cross_system_apis', 'workflow_execution_engine', 'datetime', 'collections', 'workflow_framework', 'time'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1201,
      "complexity_score": 3184,
      "api_surface_area": 34,
      "docstring": "Comprehensive Error Recovery System\n==================================\n\nAdvanced error recovery and resilience system that provides intelligent error handling,\nautomatic recovery strategies, and system health restoration across all unified systems.\n\nIntegrates with:\n- Cross-System APIs for system-wide error handling\n- Workflow Execution Engine for recovery workflows\n- Automatic Scaling System for resource-based recovery\n- Cross-System Analytics for error pattern analysis\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\cross_module_tester.py": {
      "file_path": "integration\\cross_module_tester.py",
      "component_name": "cross_module_tester",
      "analysis_timestamp": "2025-08-20 21:46:39.524935",
      "classes": [
        {
          "name": "ModuleInterface",
          "line_start": 33,
          "line_end": 43,
          "base_classes": [],
          "methods": [],
          "docstring": "Interface definition for a module.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "IntegrationPoint",
          "line_start": 47,
          "line_end": 56,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents an integration point between modules.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TestContract",
          "line_start": 60,
          "line_end": 70,
          "base_classes": [],
          "methods": [],
          "docstring": "Contract definition for testing module interactions.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ModuleAnalyzer",
          "line_start": 73,
          "line_end": 234,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 76,
              "line_end": 78,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "analyze_module",
              "line_start": 80,
              "line_end": 133,
              "args": [
                "self",
                "module_path"
              ],
              "returns": null,
              "docstring": "Analyze a Python module to extract its interface.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 390
            },
            {
              "name": "_extract_function_signature",
              "line_start": 135,
              "line_end": 160,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Extract function signature as string.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "find_integration_points",
              "line_start": 162,
              "line_end": 178,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Find integration points between analyzed modules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "_analyze_module_interaction",
              "line_start": 180,
              "line_end": 226,
              "args": [
                "self",
                "source",
                "target"
              ],
              "returns": null,
              "docstring": "Analyze interaction between two modules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_extract_call_target",
              "line_start": 228,
              "line_end": 234,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Extract the target function name from a call node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            }
          ],
          "docstring": "Analyzes modules to extract interface information.",
          "decorators": []
        },
        {
          "name": "CrossModuleTestGenerator",
          "line_start": 237,
          "line_end": 793,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 240,
              "line_end": 244,
              "args": [
                "self",
                "test_output_dir"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "analyze_codebase",
              "line_start": 246,
              "line_end": 258,
              "args": [
                "self",
                "source_dir"
              ],
              "returns": null,
              "docstring": "Analyze entire codebase for module interfaces.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "generate_integration_tests",
              "line_start": 260,
              "line_end": 283,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate integration tests for all detected integration points.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_generate_module_integration_test",
              "line_start": 285,
              "line_end": 347,
              "args": [
                "self",
                "target_module",
                "points"
              ],
              "returns": null,
              "docstring": "Generate integration test for a specific module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 221
            },
            {
              "name": "_generate_function_call_test",
              "line_start": 349,
              "line_end": 384,
              "args": [
                "self",
                "point",
                "interface"
              ],
              "returns": null,
              "docstring": "Generate test for function call integration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_generate_inheritance_test",
              "line_start": 386,
              "line_end": 419,
              "args": [
                "self",
                "point",
                "interface"
              ],
              "returns": null,
              "docstring": "Generate test for inheritance integration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "_generate_data_exchange_test",
              "line_start": 421,
              "line_end": 436,
              "args": [
                "self",
                "point",
                "interface"
              ],
              "returns": null,
              "docstring": "Generate test for data exchange integration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_generate_module_integration_tests",
              "line_start": 438,
              "line_end": 480,
              "args": [
                "self",
                "interface"
              ],
              "returns": null,
              "docstring": "Generate general module integration tests.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_generate_boundary_tests",
              "line_start": 482,
              "line_end": 566,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate boundary tests for module interfaces.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "_generate_contract_tests",
              "line_start": 568,
              "line_end": 611,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate contract tests based on defined contracts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 178
            },
            {
              "name": "_generate_single_contract_test",
              "line_start": 613,
              "line_end": 660,
              "args": [
                "self",
                "contract"
              ],
              "returns": null,
              "docstring": "Generate test for a single contract.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "add_contract",
              "line_start": 662,
              "line_end": 664,
              "args": [
                "self",
                "contract"
              ],
              "returns": null,
              "docstring": "Add a contract definition for testing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            },
            {
              "name": "generate_dependency_graph",
              "line_start": 666,
              "line_end": 685,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate dependency graph in DOT format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "generate_integration_report",
              "line_start": 687,
              "line_end": 757,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate comprehensive integration analysis report.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 419
            },
            {
              "name": "_detect_circular_dependencies",
              "line_start": 759,
              "line_end": 793,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect circular dependencies in the module graph.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 191
            }
          ],
          "docstring": "Generates integration tests for cross-module dependencies.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "main",
          "line_start": 796,
          "line_end": 855,
          "args": [],
          "returns": null,
          "docstring": "CLI for cross-module test generation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 388
        },
        {
          "name": "__init__",
          "line_start": 76,
          "line_end": 78,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "analyze_module",
          "line_start": 80,
          "line_end": 133,
          "args": [
            "self",
            "module_path"
          ],
          "returns": null,
          "docstring": "Analyze a Python module to extract its interface.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 390
        },
        {
          "name": "_extract_function_signature",
          "line_start": 135,
          "line_end": 160,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Extract function signature as string.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "find_integration_points",
          "line_start": 162,
          "line_end": 178,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Find integration points between analyzed modules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "_analyze_module_interaction",
          "line_start": 180,
          "line_end": 226,
          "args": [
            "self",
            "source",
            "target"
          ],
          "returns": null,
          "docstring": "Analyze interaction between two modules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_extract_call_target",
          "line_start": 228,
          "line_end": 234,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Extract the target function name from a call node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "__init__",
          "line_start": 240,
          "line_end": 244,
          "args": [
            "self",
            "test_output_dir"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "analyze_codebase",
          "line_start": 246,
          "line_end": 258,
          "args": [
            "self",
            "source_dir"
          ],
          "returns": null,
          "docstring": "Analyze entire codebase for module interfaces.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "generate_integration_tests",
          "line_start": 260,
          "line_end": 283,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate integration tests for all detected integration points.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_generate_module_integration_test",
          "line_start": 285,
          "line_end": 347,
          "args": [
            "self",
            "target_module",
            "points"
          ],
          "returns": null,
          "docstring": "Generate integration test for a specific module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 221
        },
        {
          "name": "_generate_function_call_test",
          "line_start": 349,
          "line_end": 384,
          "args": [
            "self",
            "point",
            "interface"
          ],
          "returns": null,
          "docstring": "Generate test for function call integration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_generate_inheritance_test",
          "line_start": 386,
          "line_end": 419,
          "args": [
            "self",
            "point",
            "interface"
          ],
          "returns": null,
          "docstring": "Generate test for inheritance integration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "_generate_data_exchange_test",
          "line_start": 421,
          "line_end": 436,
          "args": [
            "self",
            "point",
            "interface"
          ],
          "returns": null,
          "docstring": "Generate test for data exchange integration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_generate_module_integration_tests",
          "line_start": 438,
          "line_end": 480,
          "args": [
            "self",
            "interface"
          ],
          "returns": null,
          "docstring": "Generate general module integration tests.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_generate_boundary_tests",
          "line_start": 482,
          "line_end": 566,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate boundary tests for module interfaces.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "_generate_contract_tests",
          "line_start": 568,
          "line_end": 611,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate contract tests based on defined contracts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 178
        },
        {
          "name": "_generate_single_contract_test",
          "line_start": 613,
          "line_end": 660,
          "args": [
            "self",
            "contract"
          ],
          "returns": null,
          "docstring": "Generate test for a single contract.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "add_contract",
          "line_start": 662,
          "line_end": 664,
          "args": [
            "self",
            "contract"
          ],
          "returns": null,
          "docstring": "Add a contract definition for testing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "generate_dependency_graph",
          "line_start": 666,
          "line_end": 685,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate dependency graph in DOT format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "generate_integration_report",
          "line_start": 687,
          "line_end": 757,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate comprehensive integration analysis report.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 419
        },
        {
          "name": "_detect_circular_dependencies",
          "line_start": 759,
          "line_end": 793,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect circular dependencies in the module graph.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "dfs",
          "line_start": 771,
          "line_end": 787,
          "args": [
            "node",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "inspect",
          "names": [
            "inspect"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Set",
            "Optional",
            "Tuple",
            "Any",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "importlib.util",
          "names": [
            "importlib.util"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "textwrap",
          "names": [
            "textwrap"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 26
        },
        {
          "module": "argparse",
          "names": [
            "argparse"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 798
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'dataclasses', 'argparse', 'importlib.util', 'sys', 'json', 'logging', 'inspect', 'textwrap', 'os', 'ast', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 859,
      "complexity_score": 6559,
      "api_surface_area": 16,
      "docstring": "Cross-Module Dependency Test Generator\nGenerates integration tests for module interactions and dependencies.\n\nFeatures:\n- Detects integration points between modules\n- Generates boundary tests for module interfaces\n- Contract testing support\n- API compatibility verification\n- Data flow testing across modules",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9285714285714286,
      "estimated_migration_complexity": "medium"
    },
    "integration\\cross_system_analytics.py": {
      "file_path": "integration\\cross_system_analytics.py",
      "component_name": "cross_system_analytics",
      "analysis_timestamp": "2025-08-20 21:46:39.538955",
      "classes": [
        {
          "name": "MetricType",
          "line_start": 42,
          "line_end": 51,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of metrics",
          "decorators": []
        },
        {
          "name": "CorrelationType",
          "line_start": 54,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of correlations",
          "decorators": []
        },
        {
          "name": "TrendDirection",
          "line_start": 64,
          "line_end": 70,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Trend directions",
          "decorators": []
        },
        {
          "name": "MetricDataPoint",
          "line_start": 74,
          "line_end": 89,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 82,
              "line_end": 89,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            }
          ],
          "docstring": "Individual metric data point",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "MetricSeries",
          "line_start": 93,
          "line_end": 170,
          "base_classes": [],
          "methods": [
            {
              "name": "add_data_point",
              "line_start": 116,
              "line_end": 119,
              "args": [
                "self",
                "point"
              ],
              "returns": null,
              "docstring": "Add data point to series",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "_update_statistics",
              "line_start": 121,
              "line_end": 134,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update statistical properties",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "_analyze_trend",
              "line_start": 136,
              "line_end": 160,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze trend in the data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "get_recent_values",
              "line_start": 162,
              "line_end": 165,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Get recent values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "get_values_in_timeframe",
              "line_start": 167,
              "line_end": 170,
              "args": [
                "self",
                "start_time",
                "end_time"
              ],
              "returns": null,
              "docstring": "Get values within timeframe",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            }
          ],
          "docstring": "Time series of metric data",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CorrelationResult",
          "line_start": 174,
          "line_end": 193,
          "base_classes": [],
          "methods": [
            {
              "name": "is_significant",
              "line_start": 187,
              "line_end": 189,
              "args": [
                "self",
                "threshold"
              ],
              "returns": null,
              "docstring": "Check if correlation is statistically significant",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "is_strong",
              "line_start": 191,
              "line_end": 193,
              "args": [
                "self",
                "threshold"
              ],
              "returns": null,
              "docstring": "Check if correlation is strong",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            }
          ],
          "docstring": "Result of correlation analysis",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnomalyDetection",
          "line_start": 197,
          "line_end": 206,
          "base_classes": [],
          "methods": [],
          "docstring": "Anomaly detection result",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictionResult",
          "line_start": 210,
          "line_end": 217,
          "base_classes": [],
          "methods": [],
          "docstring": "Prediction result",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemAnalyticsEngine",
          "line_start": 224,
          "line_end": 911,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 230,
              "line_end": 272,
              "args": [
                "self",
                "max_metrics"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "_classify_metric_type",
              "line_start": 415,
              "line_end": 432,
              "args": [
                "self",
                "metric_name"
              ],
              "returns": null,
              "docstring": "Classify metric type based on name",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "_align_time_series",
              "line_start": 520,
              "line_end": 547,
              "args": [
                "self",
                "series1",
                "series2"
              ],
              "returns": null,
              "docstring": "Align two time series by timestamp",
              "is_async": false,
              "decorators": [],
              "complexity_score": 248
            },
            {
              "name": "get_metric_series",
              "line_start": 747,
              "line_end": 749,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get metric series by ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "get_system_metrics",
              "line_start": 751,
              "line_end": 754,
              "args": [
                "self",
                "system"
              ],
              "returns": null,
              "docstring": "Get all metrics for a system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "get_correlations",
              "line_start": 756,
              "line_end": 770,
              "args": [
                "self",
                "metric_id",
                "min_strength"
              ],
              "returns": null,
              "docstring": "Get correlations, optionally filtered by metric and strength",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "get_recent_anomalies",
              "line_start": 772,
              "line_end": 785,
              "args": [
                "self",
                "hours",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get recent anomalies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "get_predictions",
              "line_start": 787,
              "line_end": 793,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "get_analytics_summary",
              "line_start": 795,
              "line_end": 850,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive analytics summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 247
            },
            {
              "name": "get_metric_insights",
              "line_start": 852,
              "line_end": 911,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get comprehensive insights for a specific metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 294
            }
          ],
          "docstring": "Advanced analytics engine for cross-system metrics correlation,\nanomaly detection, and predictive analysis.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 82,
          "line_end": 89,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "add_data_point",
          "line_start": 116,
          "line_end": 119,
          "args": [
            "self",
            "point"
          ],
          "returns": null,
          "docstring": "Add data point to series",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "_update_statistics",
          "line_start": 121,
          "line_end": 134,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update statistical properties",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "_analyze_trend",
          "line_start": 136,
          "line_end": 160,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze trend in the data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "get_recent_values",
          "line_start": 162,
          "line_end": 165,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Get recent values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "get_values_in_timeframe",
          "line_start": 167,
          "line_end": 170,
          "args": [
            "self",
            "start_time",
            "end_time"
          ],
          "returns": null,
          "docstring": "Get values within timeframe",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "is_significant",
          "line_start": 187,
          "line_end": 189,
          "args": [
            "self",
            "threshold"
          ],
          "returns": null,
          "docstring": "Check if correlation is statistically significant",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "is_strong",
          "line_start": 191,
          "line_end": 193,
          "args": [
            "self",
            "threshold"
          ],
          "returns": null,
          "docstring": "Check if correlation is strong",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "__init__",
          "line_start": 230,
          "line_end": 272,
          "args": [
            "self",
            "max_metrics"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "_classify_metric_type",
          "line_start": 415,
          "line_end": 432,
          "args": [
            "self",
            "metric_name"
          ],
          "returns": null,
          "docstring": "Classify metric type based on name",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "_align_time_series",
          "line_start": 520,
          "line_end": 547,
          "args": [
            "self",
            "series1",
            "series2"
          ],
          "returns": null,
          "docstring": "Align two time series by timestamp",
          "is_async": false,
          "decorators": [],
          "complexity_score": 248
        },
        {
          "name": "get_metric_series",
          "line_start": 747,
          "line_end": 749,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get metric series by ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "get_system_metrics",
          "line_start": 751,
          "line_end": 754,
          "args": [
            "self",
            "system"
          ],
          "returns": null,
          "docstring": "Get all metrics for a system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "get_correlations",
          "line_start": 756,
          "line_end": 770,
          "args": [
            "self",
            "metric_id",
            "min_strength"
          ],
          "returns": null,
          "docstring": "Get correlations, optionally filtered by metric and strength",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "get_recent_anomalies",
          "line_start": 772,
          "line_end": 785,
          "args": [
            "self",
            "hours",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get recent anomalies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "get_predictions",
          "line_start": 787,
          "line_end": 793,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "get_analytics_summary",
          "line_start": 795,
          "line_end": 850,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive analytics summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 247
        },
        {
          "name": "get_metric_insights",
          "line_start": 852,
          "line_end": 911,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get comprehensive insights for a specific metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 294
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "numpy",
          "names": [
            "numpy"
          ],
          "alias": "np",
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "scipy",
          "names": [
            "stats"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "sklearn.preprocessing",
          "names": [
            "StandardScaler"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 31
        },
        {
          "module": "sklearn.cluster",
          "names": [
            "KMeans"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        }
      ],
      "external_dependencies": "{'sklearn.cluster', 'numpy', 'threading', 'dataclasses', 'time', 'typing', 'cross_system_apis', 'statistics', 'json', 'logging', 'enum', 'scipy', 'uuid', 'sklearn.preprocessing', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 933,
      "complexity_score": 3758,
      "api_surface_area": 26,
      "docstring": "Cross-System Analytics and Metrics Correlation\n==============================================\n\nAdvanced analytics engine that correlates metrics across all unified systems,\nprovides predictive insights, and enables intelligent decision-making.\n\nIntegrates with:\n- Unified Observability for metrics collection\n- Workflow Engine for execution analytics\n- Cross-System APIs for system health data\n- Unified Dashboard for analytics visualization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "{'sklearn', 'numpy', 'scipy'}",
      "documentation_coverage": 0.9629629629629629,
      "estimated_migration_complexity": "high"
    },
    "integration\\cross_system_analytics_robust.py": {
      "file_path": "integration\\cross_system_analytics_robust.py",
      "component_name": "cross_system_analytics_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.550047",
      "classes": [
        {
          "name": "MetricType",
          "line_start": 42,
          "line_end": 51,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of metrics",
          "decorators": []
        },
        {
          "name": "CorrelationType",
          "line_start": 54,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of correlations",
          "decorators": []
        },
        {
          "name": "TrendDirection",
          "line_start": 64,
          "line_end": 70,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Trend directions",
          "decorators": []
        },
        {
          "name": "MetricDataPoint",
          "line_start": 74,
          "line_end": 89,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 82,
              "line_end": 89,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            }
          ],
          "docstring": "Individual metric data point",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "MetricSeries",
          "line_start": 93,
          "line_end": 170,
          "base_classes": [],
          "methods": [
            {
              "name": "add_data_point",
              "line_start": 116,
              "line_end": 119,
              "args": [
                "self",
                "point"
              ],
              "returns": null,
              "docstring": "Add data point to series",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "_update_statistics",
              "line_start": 121,
              "line_end": 134,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update statistical properties",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "_analyze_trend",
              "line_start": 136,
              "line_end": 160,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze trend in the data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "get_recent_values",
              "line_start": 162,
              "line_end": 165,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Get recent values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "get_values_in_timeframe",
              "line_start": 167,
              "line_end": 170,
              "args": [
                "self",
                "start_time",
                "end_time"
              ],
              "returns": null,
              "docstring": "Get values within timeframe",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            }
          ],
          "docstring": "Time series of metric data",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CorrelationResult",
          "line_start": 174,
          "line_end": 193,
          "base_classes": [],
          "methods": [
            {
              "name": "is_significant",
              "line_start": 187,
              "line_end": 189,
              "args": [
                "self",
                "threshold"
              ],
              "returns": null,
              "docstring": "Check if correlation is statistically significant",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "is_strong",
              "line_start": 191,
              "line_end": 193,
              "args": [
                "self",
                "threshold"
              ],
              "returns": null,
              "docstring": "Check if correlation is strong",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            }
          ],
          "docstring": "Result of correlation analysis",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnomalyDetection",
          "line_start": 197,
          "line_end": 206,
          "base_classes": [],
          "methods": [],
          "docstring": "Anomaly detection result",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictionResult",
          "line_start": 210,
          "line_end": 217,
          "base_classes": [],
          "methods": [],
          "docstring": "Prediction result",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemAnalyticsEngine",
          "line_start": 224,
          "line_end": 911,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 230,
              "line_end": 272,
              "args": [
                "self",
                "max_metrics"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "_classify_metric_type",
              "line_start": 415,
              "line_end": 432,
              "args": [
                "self",
                "metric_name"
              ],
              "returns": null,
              "docstring": "Classify metric type based on name",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "_align_time_series",
              "line_start": 520,
              "line_end": 547,
              "args": [
                "self",
                "series1",
                "series2"
              ],
              "returns": null,
              "docstring": "Align two time series by timestamp",
              "is_async": false,
              "decorators": [],
              "complexity_score": 248
            },
            {
              "name": "get_metric_series",
              "line_start": 747,
              "line_end": 749,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get metric series by ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "get_system_metrics",
              "line_start": 751,
              "line_end": 754,
              "args": [
                "self",
                "system"
              ],
              "returns": null,
              "docstring": "Get all metrics for a system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "get_correlations",
              "line_start": 756,
              "line_end": 770,
              "args": [
                "self",
                "metric_id",
                "min_strength"
              ],
              "returns": null,
              "docstring": "Get correlations, optionally filtered by metric and strength",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "get_recent_anomalies",
              "line_start": 772,
              "line_end": 785,
              "args": [
                "self",
                "hours",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get recent anomalies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "get_predictions",
              "line_start": 787,
              "line_end": 793,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "get_analytics_summary",
              "line_start": 795,
              "line_end": 850,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive analytics summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 247
            },
            {
              "name": "get_metric_insights",
              "line_start": 852,
              "line_end": 911,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get comprehensive insights for a specific metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 294
            }
          ],
          "docstring": "Advanced analytics engine for cross-system metrics correlation,\nanomaly detection, and predictive analysis.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 82,
          "line_end": 89,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "add_data_point",
          "line_start": 116,
          "line_end": 119,
          "args": [
            "self",
            "point"
          ],
          "returns": null,
          "docstring": "Add data point to series",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "_update_statistics",
          "line_start": 121,
          "line_end": 134,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update statistical properties",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "_analyze_trend",
          "line_start": 136,
          "line_end": 160,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze trend in the data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "get_recent_values",
          "line_start": 162,
          "line_end": 165,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Get recent values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "get_values_in_timeframe",
          "line_start": 167,
          "line_end": 170,
          "args": [
            "self",
            "start_time",
            "end_time"
          ],
          "returns": null,
          "docstring": "Get values within timeframe",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "is_significant",
          "line_start": 187,
          "line_end": 189,
          "args": [
            "self",
            "threshold"
          ],
          "returns": null,
          "docstring": "Check if correlation is statistically significant",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "is_strong",
          "line_start": 191,
          "line_end": 193,
          "args": [
            "self",
            "threshold"
          ],
          "returns": null,
          "docstring": "Check if correlation is strong",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "__init__",
          "line_start": 230,
          "line_end": 272,
          "args": [
            "self",
            "max_metrics"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "_classify_metric_type",
          "line_start": 415,
          "line_end": 432,
          "args": [
            "self",
            "metric_name"
          ],
          "returns": null,
          "docstring": "Classify metric type based on name",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "_align_time_series",
          "line_start": 520,
          "line_end": 547,
          "args": [
            "self",
            "series1",
            "series2"
          ],
          "returns": null,
          "docstring": "Align two time series by timestamp",
          "is_async": false,
          "decorators": [],
          "complexity_score": 248
        },
        {
          "name": "get_metric_series",
          "line_start": 747,
          "line_end": 749,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get metric series by ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "get_system_metrics",
          "line_start": 751,
          "line_end": 754,
          "args": [
            "self",
            "system"
          ],
          "returns": null,
          "docstring": "Get all metrics for a system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "get_correlations",
          "line_start": 756,
          "line_end": 770,
          "args": [
            "self",
            "metric_id",
            "min_strength"
          ],
          "returns": null,
          "docstring": "Get correlations, optionally filtered by metric and strength",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "get_recent_anomalies",
          "line_start": 772,
          "line_end": 785,
          "args": [
            "self",
            "hours",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get recent anomalies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "get_predictions",
          "line_start": 787,
          "line_end": 793,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "get_analytics_summary",
          "line_start": 795,
          "line_end": 850,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive analytics summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 247
        },
        {
          "name": "get_metric_insights",
          "line_start": 852,
          "line_end": 911,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get comprehensive insights for a specific metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 294
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "numpy",
          "names": [
            "numpy"
          ],
          "alias": "np",
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "scipy",
          "names": [
            "stats"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "sklearn.preprocessing",
          "names": [
            "StandardScaler"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 31
        },
        {
          "module": "sklearn.cluster",
          "names": [
            "KMeans"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        }
      ],
      "external_dependencies": "{'sklearn.cluster', 'numpy', 'threading', 'dataclasses', 'time', 'typing', 'cross_system_apis', 'statistics', 'json', 'logging', 'enum', 'scipy', 'uuid', 'sklearn.preprocessing', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 933,
      "complexity_score": 3758,
      "api_surface_area": 26,
      "docstring": "Cross-System Analytics and Metrics Correlation\n==============================================\n\nAdvanced analytics engine that correlates metrics across all unified systems,\nprovides predictive insights, and enables intelligent decision-making.\n\nIntegrates with:\n- Unified Observability for metrics collection\n- Workflow Engine for execution analytics\n- Cross-System APIs for system health data\n- Unified Dashboard for analytics visualization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "{'sklearn', 'numpy', 'scipy'}",
      "documentation_coverage": 0.9629629629629629,
      "estimated_migration_complexity": "high"
    },
    "integration\\cross_system_apis.py": {
      "file_path": "integration\\cross_system_apis.py",
      "component_name": "cross_system_apis",
      "analysis_timestamp": "2025-08-20 21:46:39.558566",
      "classes": [
        {
          "name": "SystemType",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Unified system types",
          "decorators": []
        },
        {
          "name": "IntegrationEventType",
          "line_start": 43,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cross-system integration event types",
          "decorators": []
        },
        {
          "name": "SystemMessage",
          "line_start": 56,
          "line_end": 80,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 68,
              "line_end": 80,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for serialization",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            }
          ],
          "docstring": "Standardized message format for cross-system communication",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemRequest",
          "line_start": 84,
          "line_end": 107,
          "base_classes": [],
          "methods": [
            {
              "name": "to_message",
              "line_start": 94,
              "line_end": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to system message",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            }
          ],
          "docstring": "Request for cross-system operation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemResponse",
          "line_start": 111,
          "line_end": 119,
          "base_classes": [],
          "methods": [],
          "docstring": "Response from cross-system operation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "UnifiedSystemInterface",
          "line_start": 126,
          "line_end": 152,
          "base_classes": [
            "ABC"
          ],
          "methods": [
            {
              "name": "get_system_type",
              "line_start": 130,
              "line_end": 132,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get the system type identifier",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 10
            },
            {
              "name": "get_system_status",
              "line_start": 135,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current system status and health",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 18
            },
            {
              "name": "handle_cross_system_message",
              "line_start": 140,
              "line_end": 142,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": "Handle incoming cross-system message",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 13
            },
            {
              "name": "get_available_operations",
              "line_start": 145,
              "line_end": 147,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of available cross-system operations",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 14
            },
            {
              "name": "validate_operation_parameters",
              "line_start": 150,
              "line_end": 152,
              "args": [
                "self",
                "operation",
                "parameters"
              ],
              "returns": null,
              "docstring": "Validate parameters for a given operation",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 24
            }
          ],
          "docstring": "Abstract interface that all unified systems must implement",
          "decorators": []
        },
        {
          "name": "CrossSystemMessageBus",
          "line_start": 159,
          "line_end": 366,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 162,
              "line_end": 185,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "register_system",
              "line_start": 187,
              "line_end": 209,
              "args": [
                "self",
                "system"
              ],
              "returns": null,
              "docstring": "Register a unified system with the message bus",
              "is_async": false,
              "decorators": [],
              "complexity_score": 153
            },
            {
              "name": "register_event_handler",
              "line_start": 211,
              "line_end": 217,
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "returns": null,
              "docstring": "Register handler for specific event type",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_update_delivery_stats",
              "line_start": 337,
              "line_end": 346,
              "args": [
                "self",
                "delivery_time_ms"
              ],
              "returns": null,
              "docstring": "Update delivery time statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "get_bus_statistics",
              "line_start": 348,
              "line_end": 358,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get message bus performance statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            }
          ],
          "docstring": "High-performance message bus for cross-system communication",
          "decorators": []
        },
        {
          "name": "CrossSystemAPICoordinator",
          "line_start": 373,
          "line_end": 597,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 379,
              "line_end": 394,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_create_system_adapter",
              "line_start": 469,
              "line_end": 518,
              "args": [
                "self",
                "system_type",
                "config"
              ],
              "returns": null,
              "docstring": "Create adapter for a unified system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "get_integration_status",
              "line_start": 582,
              "line_end": 592,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive integration status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            }
          ],
          "docstring": "Main coordinator for cross-system API operations.\nProvides high-level interface for cross-system workflows.",
          "decorators": []
        },
        {
          "name": "MockSystemAdapter",
          "line_start": 475,
          "line_end": 516,
          "base_classes": [
            "UnifiedSystemInterface"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 476,
              "line_end": 478,
              "args": [
                "self",
                "sys_type"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "get_system_type",
              "line_start": 480,
              "line_end": 481,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 10
            },
            {
              "name": "get_system_status",
              "line_start": 483,
              "line_end": 489,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "handle_cross_system_message",
              "line_start": 491,
              "line_end": 498,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "get_available_operations",
              "line_start": 500,
              "line_end": 512,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "validate_operation_parameters",
              "line_start": 514,
              "line_end": 516,
              "args": [
                "self",
                "operation",
                "parameters"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            }
          ],
          "docstring": null,
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 68,
          "line_end": 80,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for serialization",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "to_message",
          "line_start": 94,
          "line_end": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to system message",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "get_system_type",
          "line_start": 130,
          "line_end": 132,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get the system type identifier",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 10
        },
        {
          "name": "get_system_status",
          "line_start": 135,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current system status and health",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 18
        },
        {
          "name": "handle_cross_system_message",
          "line_start": 140,
          "line_end": 142,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": "Handle incoming cross-system message",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 13
        },
        {
          "name": "get_available_operations",
          "line_start": 145,
          "line_end": 147,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of available cross-system operations",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 14
        },
        {
          "name": "validate_operation_parameters",
          "line_start": 150,
          "line_end": 152,
          "args": [
            "self",
            "operation",
            "parameters"
          ],
          "returns": null,
          "docstring": "Validate parameters for a given operation",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 24
        },
        {
          "name": "__init__",
          "line_start": 162,
          "line_end": 185,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "register_system",
          "line_start": 187,
          "line_end": 209,
          "args": [
            "self",
            "system"
          ],
          "returns": null,
          "docstring": "Register a unified system with the message bus",
          "is_async": false,
          "decorators": [],
          "complexity_score": 153
        },
        {
          "name": "register_event_handler",
          "line_start": 211,
          "line_end": 217,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "returns": null,
          "docstring": "Register handler for specific event type",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_update_delivery_stats",
          "line_start": 337,
          "line_end": 346,
          "args": [
            "self",
            "delivery_time_ms"
          ],
          "returns": null,
          "docstring": "Update delivery time statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "get_bus_statistics",
          "line_start": 348,
          "line_end": 358,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get message bus performance statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "__init__",
          "line_start": 379,
          "line_end": 394,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_create_system_adapter",
          "line_start": 469,
          "line_end": 518,
          "args": [
            "self",
            "system_type",
            "config"
          ],
          "returns": null,
          "docstring": "Create adapter for a unified system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "get_integration_status",
          "line_start": 582,
          "line_end": 592,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive integration status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "__init__",
          "line_start": 476,
          "line_end": 478,
          "args": [
            "self",
            "sys_type"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "get_system_type",
          "line_start": 480,
          "line_end": 481,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 10
        },
        {
          "name": "get_system_status",
          "line_start": 483,
          "line_end": 489,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "handle_cross_system_message",
          "line_start": 491,
          "line_end": 498,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "get_available_operations",
          "line_start": 500,
          "line_end": 512,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "validate_operation_parameters",
          "line_start": 514,
          "line_end": 516,
          "args": [
            "self",
            "operation",
            "parameters"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        }
      ],
      "external_dependencies": "{'pathlib', 'dataclasses', 'time', 'typing', 'abc', 'json', 'logging', 'enum', 'threading', 'uuid', 'asyncio', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 618,
      "complexity_score": 2678,
      "api_surface_area": 32,
      "docstring": "Cross-System Integration APIs\n============================\n\nUnified API layer enabling seamless communication between all consolidated systems.\nProvides standardized interfaces for cross-system workflows and data exchange.\n\nBuilt on Phase 1A consolidated foundation:\n- Observability: unified_monitor.py\n- State/Config: unified_state_manager.py + yaml_config_enhancer.py  \n- Orchestration: unified_orchestrator.py + swarm_router_enhancement.py\n- UI/Dashboard: unified_dashboard.py + nocode_enhancement.py\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.7333333333333333,
      "estimated_migration_complexity": "medium"
    },
    "integration\\cross_system_apis_robust.py": {
      "file_path": "integration\\cross_system_apis_robust.py",
      "component_name": "cross_system_apis_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.565567",
      "classes": [
        {
          "name": "SystemType",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Unified system types",
          "decorators": []
        },
        {
          "name": "IntegrationEventType",
          "line_start": 43,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cross-system integration event types",
          "decorators": []
        },
        {
          "name": "SystemMessage",
          "line_start": 56,
          "line_end": 80,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 68,
              "line_end": 80,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for serialization",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            }
          ],
          "docstring": "Standardized message format for cross-system communication",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemRequest",
          "line_start": 84,
          "line_end": 107,
          "base_classes": [],
          "methods": [
            {
              "name": "to_message",
              "line_start": 94,
              "line_end": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to system message",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            }
          ],
          "docstring": "Request for cross-system operation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemResponse",
          "line_start": 111,
          "line_end": 119,
          "base_classes": [],
          "methods": [],
          "docstring": "Response from cross-system operation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "UnifiedSystemInterface",
          "line_start": 126,
          "line_end": 152,
          "base_classes": [
            "ABC"
          ],
          "methods": [
            {
              "name": "get_system_type",
              "line_start": 130,
              "line_end": 132,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get the system type identifier",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 10
            },
            {
              "name": "get_system_status",
              "line_start": 135,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current system status and health",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 18
            },
            {
              "name": "handle_cross_system_message",
              "line_start": 140,
              "line_end": 142,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": "Handle incoming cross-system message",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 13
            },
            {
              "name": "get_available_operations",
              "line_start": 145,
              "line_end": 147,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of available cross-system operations",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 14
            },
            {
              "name": "validate_operation_parameters",
              "line_start": 150,
              "line_end": 152,
              "args": [
                "self",
                "operation",
                "parameters"
              ],
              "returns": null,
              "docstring": "Validate parameters for a given operation",
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "complexity_score": 24
            }
          ],
          "docstring": "Abstract interface that all unified systems must implement",
          "decorators": []
        },
        {
          "name": "CrossSystemMessageBus",
          "line_start": 159,
          "line_end": 366,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 162,
              "line_end": 185,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "register_system",
              "line_start": 187,
              "line_end": 209,
              "args": [
                "self",
                "system"
              ],
              "returns": null,
              "docstring": "Register a unified system with the message bus",
              "is_async": false,
              "decorators": [],
              "complexity_score": 153
            },
            {
              "name": "register_event_handler",
              "line_start": 211,
              "line_end": 217,
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "returns": null,
              "docstring": "Register handler for specific event type",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_update_delivery_stats",
              "line_start": 337,
              "line_end": 346,
              "args": [
                "self",
                "delivery_time_ms"
              ],
              "returns": null,
              "docstring": "Update delivery time statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "get_bus_statistics",
              "line_start": 348,
              "line_end": 358,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get message bus performance statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            }
          ],
          "docstring": "High-performance message bus for cross-system communication",
          "decorators": []
        },
        {
          "name": "CrossSystemAPICoordinator",
          "line_start": 373,
          "line_end": 597,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 379,
              "line_end": 394,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_create_system_adapter",
              "line_start": 469,
              "line_end": 518,
              "args": [
                "self",
                "system_type",
                "config"
              ],
              "returns": null,
              "docstring": "Create adapter for a unified system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "get_integration_status",
              "line_start": 582,
              "line_end": 592,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive integration status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            }
          ],
          "docstring": "Main coordinator for cross-system API operations.\nProvides high-level interface for cross-system workflows.",
          "decorators": []
        },
        {
          "name": "MockSystemAdapter",
          "line_start": 475,
          "line_end": 516,
          "base_classes": [
            "UnifiedSystemInterface"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 476,
              "line_end": 478,
              "args": [
                "self",
                "sys_type"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "get_system_type",
              "line_start": 480,
              "line_end": 481,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 10
            },
            {
              "name": "get_system_status",
              "line_start": 483,
              "line_end": 489,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "handle_cross_system_message",
              "line_start": 491,
              "line_end": 498,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "get_available_operations",
              "line_start": 500,
              "line_end": 512,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "validate_operation_parameters",
              "line_start": 514,
              "line_end": 516,
              "args": [
                "self",
                "operation",
                "parameters"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            }
          ],
          "docstring": null,
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 68,
          "line_end": 80,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for serialization",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "to_message",
          "line_start": 94,
          "line_end": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to system message",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "get_system_type",
          "line_start": 130,
          "line_end": 132,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get the system type identifier",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 10
        },
        {
          "name": "get_system_status",
          "line_start": 135,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current system status and health",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 18
        },
        {
          "name": "handle_cross_system_message",
          "line_start": 140,
          "line_end": 142,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": "Handle incoming cross-system message",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 13
        },
        {
          "name": "get_available_operations",
          "line_start": 145,
          "line_end": 147,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of available cross-system operations",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 14
        },
        {
          "name": "validate_operation_parameters",
          "line_start": 150,
          "line_end": 152,
          "args": [
            "self",
            "operation",
            "parameters"
          ],
          "returns": null,
          "docstring": "Validate parameters for a given operation",
          "is_async": false,
          "decorators": [
            "abstractmethod"
          ],
          "complexity_score": 24
        },
        {
          "name": "__init__",
          "line_start": 162,
          "line_end": 185,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "register_system",
          "line_start": 187,
          "line_end": 209,
          "args": [
            "self",
            "system"
          ],
          "returns": null,
          "docstring": "Register a unified system with the message bus",
          "is_async": false,
          "decorators": [],
          "complexity_score": 153
        },
        {
          "name": "register_event_handler",
          "line_start": 211,
          "line_end": 217,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "returns": null,
          "docstring": "Register handler for specific event type",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_update_delivery_stats",
          "line_start": 337,
          "line_end": 346,
          "args": [
            "self",
            "delivery_time_ms"
          ],
          "returns": null,
          "docstring": "Update delivery time statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "get_bus_statistics",
          "line_start": 348,
          "line_end": 358,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get message bus performance statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "__init__",
          "line_start": 379,
          "line_end": 394,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_create_system_adapter",
          "line_start": 469,
          "line_end": 518,
          "args": [
            "self",
            "system_type",
            "config"
          ],
          "returns": null,
          "docstring": "Create adapter for a unified system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "get_integration_status",
          "line_start": 582,
          "line_end": 592,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive integration status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "__init__",
          "line_start": 476,
          "line_end": 478,
          "args": [
            "self",
            "sys_type"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "get_system_type",
          "line_start": 480,
          "line_end": 481,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 10
        },
        {
          "name": "get_system_status",
          "line_start": 483,
          "line_end": 489,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "handle_cross_system_message",
          "line_start": 491,
          "line_end": 498,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "get_available_operations",
          "line_start": 500,
          "line_end": 512,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "validate_operation_parameters",
          "line_start": 514,
          "line_end": 516,
          "args": [
            "self",
            "operation",
            "parameters"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        }
      ],
      "external_dependencies": "{'pathlib', 'dataclasses', 'time', 'typing', 'abc', 'json', 'logging', 'enum', 'threading', 'uuid', 'asyncio', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 618,
      "complexity_score": 2678,
      "api_surface_area": 32,
      "docstring": "Cross-System Integration APIs\n============================\n\nUnified API layer enabling seamless communication between all consolidated systems.\nProvides standardized interfaces for cross-system workflows and data exchange.\n\nBuilt on Phase 1A consolidated foundation:\n- Observability: unified_monitor.py\n- State/Config: unified_state_manager.py + yaml_config_enhancer.py  \n- Orchestration: unified_orchestrator.py + swarm_router_enhancement.py\n- UI/Dashboard: unified_dashboard.py + nocode_enhancement.py\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.7333333333333333,
      "estimated_migration_complexity": "medium"
    },
    "integration\\cross_system_communication.py": {
      "file_path": "integration\\cross_system_communication.py",
      "component_name": "cross_system_communication",
      "analysis_timestamp": "2025-08-20 21:46:39.571568",
      "classes": [
        {
          "name": "SystemType",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Unified system types",
          "decorators": []
        },
        {
          "name": "IntegrationEventType",
          "line_start": 43,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cross-system integration event types",
          "decorators": []
        },
        {
          "name": "SystemMessage",
          "line_start": 56,
          "line_end": 80,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 68,
              "line_end": 80,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for serialization",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            }
          ],
          "docstring": "Standardized message format for cross-system communication",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemRequest",
          "line_start": 84,
          "line_end": 107,
          "base_classes": [],
          "methods": [
            {
              "name": "to_message",
              "line_start": 94,
              "line_end": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to system message",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            }
          ],
          "docstring": "Request for cross-system operation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemResponse",
          "line_start": 111,
          "line_end": 119,
          "base_classes": [],
          "methods": [],
          "docstring": "Response from cross-system operation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CrossSystemCommunication",
          "line_start": 126,
          "line_end": 323,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 129,
              "line_end": 150,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "process",
              "line_start": 152,
              "line_end": 169,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Process data through this integration system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "health_check",
              "line_start": 171,
              "line_end": 173,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check health of this integration system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "register_event_handler",
              "line_start": 175,
              "line_end": 181,
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "returns": null,
              "docstring": "Register handler for specific event type",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_update_delivery_stats",
              "line_start": 252,
              "line_end": 261,
              "args": [
                "self",
                "delivery_time_ms"
              ],
              "returns": null,
              "docstring": "Update delivery time statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "get_bus_statistics",
              "line_start": 263,
              "line_end": 272,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get message bus performance statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "subscribe",
              "line_start": 287,
              "line_end": 292,
              "args": [
                "self",
                "channel",
                "callback"
              ],
              "returns": null,
              "docstring": "Subscribe to a channel.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "publish",
              "line_start": 294,
              "line_end": 300,
              "args": [
                "self",
                "channel",
                "message"
              ],
              "returns": null,
              "docstring": "Publish message to channel.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "register_system",
              "line_start": 302,
              "line_end": 307,
              "args": [
                "self",
                "name",
                "config"
              ],
              "returns": null,
              "docstring": "Register a system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "get_registered_systems",
              "line_start": 309,
              "line_end": 311,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get registered systems.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "send_health_check",
              "line_start": 313,
              "line_end": 317,
              "args": [
                "self",
                "system_name"
              ],
              "returns": null,
              "docstring": "Send health check to a system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "route_message",
              "line_start": 319,
              "line_end": 323,
              "args": [
                "self",
                "target_system",
                "message"
              ],
              "returns": null,
              "docstring": "Route a message to a specific system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            }
          ],
          "docstring": "High-performance message bus for cross-system communication",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 68,
          "line_end": 80,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for serialization",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "to_message",
          "line_start": 94,
          "line_end": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to system message",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "__init__",
          "line_start": 129,
          "line_end": 150,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "process",
          "line_start": 152,
          "line_end": 169,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Process data through this integration system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "health_check",
          "line_start": 171,
          "line_end": 173,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check health of this integration system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "register_event_handler",
          "line_start": 175,
          "line_end": 181,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "returns": null,
          "docstring": "Register handler for specific event type",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_update_delivery_stats",
          "line_start": 252,
          "line_end": 261,
          "args": [
            "self",
            "delivery_time_ms"
          ],
          "returns": null,
          "docstring": "Update delivery time statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "get_bus_statistics",
          "line_start": 263,
          "line_end": 272,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get message bus performance statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "subscribe",
          "line_start": 287,
          "line_end": 292,
          "args": [
            "self",
            "channel",
            "callback"
          ],
          "returns": null,
          "docstring": "Subscribe to a channel.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "publish",
          "line_start": 294,
          "line_end": 300,
          "args": [
            "self",
            "channel",
            "message"
          ],
          "returns": null,
          "docstring": "Publish message to channel.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "register_system",
          "line_start": 302,
          "line_end": 307,
          "args": [
            "self",
            "name",
            "config"
          ],
          "returns": null,
          "docstring": "Register a system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "get_registered_systems",
          "line_start": 309,
          "line_end": 311,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get registered systems.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "send_health_check",
          "line_start": 313,
          "line_end": 317,
          "args": [
            "self",
            "system_name"
          ],
          "returns": null,
          "docstring": "Send health check to a system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "route_message",
          "line_start": 319,
          "line_end": 323,
          "args": [
            "self",
            "target_system",
            "message"
          ],
          "returns": null,
          "docstring": "Route a message to a specific system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        }
      ],
      "external_dependencies": "{'pathlib', 'dataclasses', 'time', 'typing', 'abc', 'json', 'logging', 'enum', 'threading', 'uuid', 'asyncio', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 327,
      "complexity_score": 1646,
      "api_surface_area": 24,
      "docstring": "Cross-System Integration APIs\n============================\n\nUnified API layer enabling seamless communication between all consolidated systems.\nProvides standardized interfaces for cross-system workflows and data exchange.\n\nBuilt on Phase 1A consolidated foundation:\n- Observability: unified_monitor.py\n- State/Config: unified_state_manager.py + yaml_config_enhancer.py  \n- Orchestration: unified_orchestrator.py + swarm_router_enhancement.py\n- UI/Dashboard: unified_dashboard.py + nocode_enhancement.py\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\distributed_task_queue.py": {
      "file_path": "integration\\distributed_task_queue.py",
      "component_name": "distributed_task_queue",
      "analysis_timestamp": "2025-08-20 21:46:39.576566",
      "classes": [
        {
          "name": "TaskPriority",
          "line_start": 25,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Task priority levels",
          "decorators": []
        },
        {
          "name": "TaskStatus",
          "line_start": 33,
          "line_end": 39,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Task execution status",
          "decorators": []
        },
        {
          "name": "Task",
          "line_start": 43,
          "line_end": 63,
          "base_classes": [],
          "methods": [
            {
              "name": "__lt__",
              "line_start": 61,
              "line_end": 63,
              "args": [
                "self",
                "other"
              ],
              "returns": null,
              "docstring": "For priority queue ordering",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            }
          ],
          "docstring": "Distributed task definition",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DistributedTaskQueue",
          "line_start": 66,
          "line_end": 468,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 69,
              "line_end": 108,
              "args": [
                "self",
                "worker_id"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 244
            },
            {
              "name": "submit_task",
              "line_start": 110,
              "line_end": 128,
              "args": [
                "self",
                "function_name"
              ],
              "returns": null,
              "docstring": "Submit a task for distributed execution",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "get_task_status",
              "line_start": 130,
              "line_end": 147,
              "args": [
                "self",
                "task_id"
              ],
              "returns": null,
              "docstring": "Get status of a specific task",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "get_task_result",
              "line_start": 149,
              "line_end": 157,
              "args": [
                "self",
                "task_id"
              ],
              "returns": null,
              "docstring": "Get result of a completed task",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_start_worker_thread",
              "line_start": 159,
              "line_end": 164,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the worker thread for task processing",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_worker_loop",
              "line_start": 166,
              "line_end": 183,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main worker loop for processing tasks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_get_next_task",
              "line_start": 185,
              "line_end": 197,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get the next task from the priority queue",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_execute_task",
              "line_start": 199,
              "line_end": 229,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Execute a single task",
              "is_async": false,
              "decorators": [],
              "complexity_score": 192
            },
            {
              "name": "_handle_task_failure",
              "line_start": 231,
              "line_end": 252,
              "args": [
                "self",
                "task",
                "error_message",
                "start_time"
              ],
              "returns": null,
              "docstring": "Handle task failure with retry logic",
              "is_async": false,
              "decorators": [],
              "complexity_score": 184
            },
            {
              "name": "_update_avg_execution_time",
              "line_start": 254,
              "line_end": 264,
              "args": [
                "self",
                "execution_time"
              ],
              "returns": null,
              "docstring": "Update average execution time statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_execute_test_task",
              "line_start": 267,
              "line_end": 281,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Execute test-related tasks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_process_data_task",
              "line_start": 283,
              "line_end": 296,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Process data transformation tasks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_compute_analytics_task",
              "line_start": 298,
              "line_end": 311,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Compute analytics and metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_integrate_systems_task",
              "line_start": 313,
              "line_end": 328,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Handle cross-system integration tasks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "_optimize_performance_task",
              "line_start": 330,
              "line_end": 344,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Handle performance optimization tasks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_default_task_handler",
              "line_start": 346,
              "line_end": 357,
              "args": [
                "self",
                "task"
              ],
              "returns": null,
              "docstring": "Default handler for unknown task types",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "process",
              "line_start": 359,
              "line_end": 380,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Process data through the task queue system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "health_check",
              "line_start": 382,
              "line_end": 392,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check health of the task queue system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "get_queue_statistics",
              "line_start": 394,
              "line_end": 408,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive queue statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            },
            {
              "name": "shutdown",
              "line_start": 410,
              "line_end": 419,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Gracefully shutdown the task queue",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "submit_task",
              "line_start": 425,
              "line_end": 433,
              "args": [
                "self",
                "task_name",
                "task_data"
              ],
              "returns": null,
              "docstring": "Submit a task to the queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "get_task_status",
              "line_start": 435,
              "line_end": 445,
              "args": [
                "self",
                "task_id"
              ],
              "returns": null,
              "docstring": "Get task status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "add_worker",
              "line_start": 447,
              "line_end": 452,
              "args": [
                "self",
                "worker_name",
                "config"
              ],
              "returns": null,
              "docstring": "Add a worker to the pool.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "get_active_workers",
              "line_start": 454,
              "line_end": 459,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of active workers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "complete_task",
              "line_start": 461,
              "line_end": 468,
              "args": [
                "self",
                "task_id",
                "result"
              ],
              "returns": null,
              "docstring": "Mark a task as completed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            }
          ],
          "docstring": "High-performance distributed task queue system",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__lt__",
          "line_start": 61,
          "line_end": 63,
          "args": [
            "self",
            "other"
          ],
          "returns": null,
          "docstring": "For priority queue ordering",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "__init__",
          "line_start": 69,
          "line_end": 108,
          "args": [
            "self",
            "worker_id"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 244
        },
        {
          "name": "submit_task",
          "line_start": 110,
          "line_end": 128,
          "args": [
            "self",
            "function_name"
          ],
          "returns": null,
          "docstring": "Submit a task for distributed execution",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "get_task_status",
          "line_start": 130,
          "line_end": 147,
          "args": [
            "self",
            "task_id"
          ],
          "returns": null,
          "docstring": "Get status of a specific task",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "get_task_result",
          "line_start": 149,
          "line_end": 157,
          "args": [
            "self",
            "task_id"
          ],
          "returns": null,
          "docstring": "Get result of a completed task",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_start_worker_thread",
          "line_start": 159,
          "line_end": 164,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the worker thread for task processing",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_worker_loop",
          "line_start": 166,
          "line_end": 183,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main worker loop for processing tasks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_get_next_task",
          "line_start": 185,
          "line_end": 197,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get the next task from the priority queue",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_execute_task",
          "line_start": 199,
          "line_end": 229,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Execute a single task",
          "is_async": false,
          "decorators": [],
          "complexity_score": 192
        },
        {
          "name": "_handle_task_failure",
          "line_start": 231,
          "line_end": 252,
          "args": [
            "self",
            "task",
            "error_message",
            "start_time"
          ],
          "returns": null,
          "docstring": "Handle task failure with retry logic",
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        },
        {
          "name": "_update_avg_execution_time",
          "line_start": 254,
          "line_end": 264,
          "args": [
            "self",
            "execution_time"
          ],
          "returns": null,
          "docstring": "Update average execution time statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_execute_test_task",
          "line_start": 267,
          "line_end": 281,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Execute test-related tasks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_process_data_task",
          "line_start": 283,
          "line_end": 296,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Process data transformation tasks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_compute_analytics_task",
          "line_start": 298,
          "line_end": 311,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Compute analytics and metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_integrate_systems_task",
          "line_start": 313,
          "line_end": 328,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Handle cross-system integration tasks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "_optimize_performance_task",
          "line_start": 330,
          "line_end": 344,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Handle performance optimization tasks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_default_task_handler",
          "line_start": 346,
          "line_end": 357,
          "args": [
            "self",
            "task"
          ],
          "returns": null,
          "docstring": "Default handler for unknown task types",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "process",
          "line_start": 359,
          "line_end": 380,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Process data through the task queue system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "health_check",
          "line_start": 382,
          "line_end": 392,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check health of the task queue system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "get_queue_statistics",
          "line_start": 394,
          "line_end": 408,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive queue statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "shutdown",
          "line_start": 410,
          "line_end": 419,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Gracefully shutdown the task queue",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "submit_task",
          "line_start": 425,
          "line_end": 433,
          "args": [
            "self",
            "task_name",
            "task_data"
          ],
          "returns": null,
          "docstring": "Submit a task to the queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "get_task_status",
          "line_start": 435,
          "line_end": 445,
          "args": [
            "self",
            "task_id"
          ],
          "returns": null,
          "docstring": "Get task status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "add_worker",
          "line_start": 447,
          "line_end": 452,
          "args": [
            "self",
            "worker_name",
            "config"
          ],
          "returns": null,
          "docstring": "Add a worker to the pool.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "get_active_workers",
          "line_start": 454,
          "line_end": 459,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of active workers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "complete_task",
          "line_start": 461,
          "line_end": 468,
          "args": [
            "self",
            "task_id",
            "result"
          ],
          "returns": null,
          "docstring": "Mark a task as completed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "heapq",
          "names": [
            "heapq"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'dataclasses', 'time', 'typing', 'json', 'logging', 'enum', 'asyncio', 'threading', 'uuid', 'heapq', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 472,
      "complexity_score": 4504,
      "api_surface_area": 24,
      "docstring": "Distributed Task Queue System\n============================\n\nAdvanced distributed task queue with priority queuing, retry logic,\nload balancing, and cross-system integration capabilities.\n\nAuthor: TestMaster Real Implementation System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\intelligent_caching_layer.py": {
      "file_path": "integration\\intelligent_caching_layer.py",
      "component_name": "intelligent_caching_layer",
      "analysis_timestamp": "2025-08-20 21:46:39.593564",
      "classes": [
        {
          "name": "CacheStrategy",
          "line_start": 45,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cache strategies",
          "decorators": []
        },
        {
          "name": "CacheLevel",
          "line_start": 55,
          "line_end": 60,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cache hierarchy levels",
          "decorators": []
        },
        {
          "name": "CacheEventType",
          "line_start": 63,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cache event types",
          "decorators": []
        },
        {
          "name": "CacheEntry",
          "line_start": 75,
          "line_end": 154,
          "base_classes": [],
          "methods": [
            {
              "name": "is_expired",
              "line_start": 100,
              "line_end": 106,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if entry is expired",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "access",
              "line_start": 108,
              "line_end": 114,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record access to this entry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "_update_access_pattern_score",
              "line_start": 116,
              "line_end": 127,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update access pattern score based on usage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "calculate_size",
              "line_start": 129,
              "line_end": 139,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate and update entry size",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "to_dict",
              "line_start": 141,
              "line_end": 154,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for serialization",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            }
          ],
          "docstring": "Cache entry with metadata",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CacheEvent",
          "line_start": 158,
          "line_end": 176,
          "base_classes": [],
          "methods": [],
          "docstring": "Cache event for analytics",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CacheStatistics",
          "line_start": 180,
          "line_end": 209,
          "base_classes": [],
          "methods": [
            {
              "name": "hit_rate",
              "line_start": 201,
              "line_end": 205,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cache hit rate",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "miss_rate",
              "line_start": 207,
              "line_end": 209,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cache miss rate",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            }
          ],
          "docstring": "Cache performance statistics",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CacheConfiguration",
          "line_start": 213,
          "line_end": 232,
          "base_classes": [],
          "methods": [],
          "docstring": "Cache configuration for a cache level",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "MemoryCache",
          "line_start": 239,
          "line_end": 498,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 242,
              "line_end": 258,
              "args": [
                "self",
                "config"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "get",
              "line_start": 260,
              "line_end": 291,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get value from cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 190
            },
            {
              "name": "put",
              "line_start": 293,
              "line_end": 326,
              "args": [
                "self",
                "key",
                "value",
                "ttl_seconds",
                "system",
                "tags"
              ],
              "returns": null,
              "docstring": "Put value in cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "remove",
              "line_start": 328,
              "line_end": 336,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Remove entry from cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "clear",
              "line_start": 338,
              "line_end": 344,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clear all cache entries",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_check_size_limits",
              "line_start": 346,
              "line_end": 351,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Check if entry fits within size limits",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_ensure_capacity",
              "line_start": 353,
              "line_end": 365,
              "args": [
                "self",
                "new_entry_size"
              ],
              "returns": null,
              "docstring": "Ensure cache has capacity for new entry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_evict_entries",
              "line_start": 367,
              "line_end": 410,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Evict entries based on configured strategy",
              "is_async": false,
              "decorators": [],
              "complexity_score": 335
            },
            {
              "name": "_adaptive_eviction_selection",
              "line_start": 412,
              "line_end": 432,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Select entries for eviction using adaptive algorithm",
              "is_async": false,
              "decorators": [],
              "complexity_score": 153
            },
            {
              "name": "_update_access_tracking",
              "line_start": 434,
              "line_end": 442,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Update access tracking for LRU and frequency counting",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_remove_entry",
              "line_start": 444,
              "line_end": 453,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Remove entry and clean up tracking",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_record_event",
              "line_start": 455,
              "line_end": 464,
              "args": [
                "self",
                "event_type",
                "key",
                "size_bytes",
                "metadata"
              ],
              "returns": null,
              "docstring": "Record cache event",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_update_performance_stats",
              "line_start": 466,
              "line_end": 476,
              "args": [
                "self",
                "response_time_ms",
                "size_bytes"
              ],
              "returns": null,
              "docstring": "Update performance statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "get_statistics",
              "line_start": 478,
              "line_end": 480,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 12
            },
            {
              "name": "get_cache_info",
              "line_start": 482,
              "line_end": 498,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get detailed cache information",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            }
          ],
          "docstring": "High-performance in-memory cache implementation",
          "decorators": []
        },
        {
          "name": "IntelligentCachingLayer",
          "line_start": 505,
          "line_end": 1312,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 511,
              "line_end": 562,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 245
            },
            {
              "name": "_initialize_cache_levels",
              "line_start": 564,
              "line_end": 601,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize cache levels with default configurations",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_record_access_pattern",
              "line_start": 849,
              "line_end": 870,
              "args": [
                "self",
                "key",
                "system"
              ],
              "returns": null,
              "docstring": "Record access pattern for predictive caching",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_are_access_patterns_similar",
              "line_start": 923,
              "line_end": 944,
              "args": [
                "self",
                "key1",
                "key2"
              ],
              "returns": null,
              "docstring": "Check if two keys have similar access patterns",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "get_cache_status",
              "line_start": 1189,
              "line_end": 1201,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive cache system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "get_cache_performance",
              "line_start": 1203,
              "line_end": 1239,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache performance metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 209
            },
            {
              "name": "get_access_patterns",
              "line_start": 1241,
              "line_end": 1266,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get access patterns analysis",
              "is_async": false,
              "decorators": [],
              "complexity_score": 203
            },
            {
              "name": "set",
              "line_start": 1273,
              "line_end": 1277,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "returns": null,
              "docstring": "Set a value in cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "get",
              "line_start": 1279,
              "line_end": 1283,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get a value from cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "invalidate",
              "line_start": 1285,
              "line_end": 1289,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Invalidate a cache entry.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "get_cache_statistics",
              "line_start": 1291,
              "line_end": 1299,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "set_pattern",
              "line_start": 1301,
              "line_end": 1306,
              "args": [
                "self",
                "pattern",
                "ttl"
              ],
              "returns": null,
              "docstring": "Set a cache pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "warm_cache",
              "line_start": 1308,
              "line_end": 1312,
              "args": [
                "self",
                "cache_name",
                "data"
              ],
              "returns": null,
              "docstring": "Warm the cache with preloaded data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            }
          ],
          "docstring": "Multi-level intelligent caching system with predictive warming,\nadaptive strategies, and cross-system coordination.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "is_expired",
          "line_start": 100,
          "line_end": 106,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if entry is expired",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "access",
          "line_start": 108,
          "line_end": 114,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record access to this entry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "_update_access_pattern_score",
          "line_start": 116,
          "line_end": 127,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update access pattern score based on usage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "calculate_size",
          "line_start": 129,
          "line_end": 139,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate and update entry size",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "to_dict",
          "line_start": 141,
          "line_end": 154,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for serialization",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "hit_rate",
          "line_start": 201,
          "line_end": 205,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cache hit rate",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "miss_rate",
          "line_start": 207,
          "line_end": 209,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cache miss rate",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "__init__",
          "line_start": 242,
          "line_end": 258,
          "args": [
            "self",
            "config"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "get",
          "line_start": 260,
          "line_end": 291,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get value from cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 190
        },
        {
          "name": "put",
          "line_start": 293,
          "line_end": 326,
          "args": [
            "self",
            "key",
            "value",
            "ttl_seconds",
            "system",
            "tags"
          ],
          "returns": null,
          "docstring": "Put value in cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "remove",
          "line_start": 328,
          "line_end": 336,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Remove entry from cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "clear",
          "line_start": 338,
          "line_end": 344,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clear all cache entries",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_check_size_limits",
          "line_start": 346,
          "line_end": 351,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Check if entry fits within size limits",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_ensure_capacity",
          "line_start": 353,
          "line_end": 365,
          "args": [
            "self",
            "new_entry_size"
          ],
          "returns": null,
          "docstring": "Ensure cache has capacity for new entry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_evict_entries",
          "line_start": 367,
          "line_end": 410,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Evict entries based on configured strategy",
          "is_async": false,
          "decorators": [],
          "complexity_score": 335
        },
        {
          "name": "_adaptive_eviction_selection",
          "line_start": 412,
          "line_end": 432,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Select entries for eviction using adaptive algorithm",
          "is_async": false,
          "decorators": [],
          "complexity_score": 153
        },
        {
          "name": "_update_access_tracking",
          "line_start": 434,
          "line_end": 442,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Update access tracking for LRU and frequency counting",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_remove_entry",
          "line_start": 444,
          "line_end": 453,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Remove entry and clean up tracking",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_record_event",
          "line_start": 455,
          "line_end": 464,
          "args": [
            "self",
            "event_type",
            "key",
            "size_bytes",
            "metadata"
          ],
          "returns": null,
          "docstring": "Record cache event",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_update_performance_stats",
          "line_start": 466,
          "line_end": 476,
          "args": [
            "self",
            "response_time_ms",
            "size_bytes"
          ],
          "returns": null,
          "docstring": "Update performance statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "get_statistics",
          "line_start": 478,
          "line_end": 480,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 12
        },
        {
          "name": "get_cache_info",
          "line_start": 482,
          "line_end": 498,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get detailed cache information",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "__init__",
          "line_start": 511,
          "line_end": 562,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 245
        },
        {
          "name": "_initialize_cache_levels",
          "line_start": 564,
          "line_end": 601,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize cache levels with default configurations",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_record_access_pattern",
          "line_start": 849,
          "line_end": 870,
          "args": [
            "self",
            "key",
            "system"
          ],
          "returns": null,
          "docstring": "Record access pattern for predictive caching",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_are_access_patterns_similar",
          "line_start": 923,
          "line_end": 944,
          "args": [
            "self",
            "key1",
            "key2"
          ],
          "returns": null,
          "docstring": "Check if two keys have similar access patterns",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "get_cache_status",
          "line_start": 1189,
          "line_end": 1201,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive cache system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "get_cache_performance",
          "line_start": 1203,
          "line_end": 1239,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache performance metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 209
        },
        {
          "name": "get_access_patterns",
          "line_start": 1241,
          "line_end": 1266,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get access patterns analysis",
          "is_async": false,
          "decorators": [],
          "complexity_score": 203
        },
        {
          "name": "set",
          "line_start": 1273,
          "line_end": 1277,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "returns": null,
          "docstring": "Set a value in cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "get",
          "line_start": 1279,
          "line_end": 1283,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get a value from cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "invalidate",
          "line_start": 1285,
          "line_end": 1289,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Invalidate a cache entry.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "get_cache_statistics",
          "line_start": 1291,
          "line_end": 1299,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "set_pattern",
          "line_start": 1301,
          "line_end": 1306,
          "args": [
            "self",
            "pattern",
            "ttl"
          ],
          "returns": null,
          "docstring": "Set a cache pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "warm_cache",
          "line_start": 1308,
          "line_end": 1312,
          "args": [
            "self",
            "cache_name",
            "data"
          ],
          "returns": null,
          "docstring": "Warm the cache with preloaded data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque",
            "OrderedDict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Union",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 30
        },
        {
          "module": "weakref",
          "names": [
            "weakref"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics",
            "MetricType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "predictive_analytics_engine",
          "names": [
            "predictive_analytics_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 37
        },
        {
          "module": "comprehensive_error_recovery",
          "names": [
            "comprehensive_error_recovery",
            "ErrorSeverity",
            "ErrorCategory"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        }
      ],
      "external_dependencies": "{'weakref', 'dataclasses', 'typing', 'json', 'uuid', 'cross_system_analytics', 'enum', 'threading', 'asyncio', 'statistics', 'logging', 'concurrent.futures', 'cross_system_apis', 'datetime', 'collections', 'comprehensive_error_recovery', 'time', 'pickle', 'predictive_analytics_engine', 'hashlib'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1334,
      "complexity_score": 6846,
      "api_surface_area": 42,
      "docstring": "Intelligent Caching Layer\n=========================\n\nAdvanced caching system with predictive cache warming, intelligent eviction policies,\ncross-system cache coordination, and adaptive cache strategies based on usage patterns.\n\nIntegrates with:\n- Cross-System Analytics for usage pattern analysis\n- Predictive Analytics Engine for cache warming predictions\n- Cross-System APIs for distributed cache coordination\n- Comprehensive Error Recovery for cache failure handling\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9772727272727273,
      "estimated_migration_complexity": "medium"
    },
    "integration\\intelligent_caching_layer_robust.py": {
      "file_path": "integration\\intelligent_caching_layer_robust.py",
      "component_name": "intelligent_caching_layer_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.612586",
      "classes": [
        {
          "name": "CacheStrategy",
          "line_start": 45,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cache strategies",
          "decorators": []
        },
        {
          "name": "CacheLevel",
          "line_start": 55,
          "line_end": 60,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cache hierarchy levels",
          "decorators": []
        },
        {
          "name": "CacheEventType",
          "line_start": 63,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Cache event types",
          "decorators": []
        },
        {
          "name": "CacheEntry",
          "line_start": 75,
          "line_end": 154,
          "base_classes": [],
          "methods": [
            {
              "name": "is_expired",
              "line_start": 100,
              "line_end": 106,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if entry is expired",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "access",
              "line_start": 108,
              "line_end": 114,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record access to this entry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "_update_access_pattern_score",
              "line_start": 116,
              "line_end": 127,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update access pattern score based on usage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "calculate_size",
              "line_start": 129,
              "line_end": 139,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate and update entry size",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "to_dict",
              "line_start": 141,
              "line_end": 154,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for serialization",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            }
          ],
          "docstring": "Cache entry with metadata",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CacheEvent",
          "line_start": 158,
          "line_end": 175,
          "base_classes": [],
          "methods": [],
          "docstring": "Cache event for analytics",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CacheStatistics",
          "line_start": 179,
          "line_end": 208,
          "base_classes": [],
          "methods": [
            {
              "name": "hit_rate",
              "line_start": 200,
              "line_end": 204,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cache hit rate",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "miss_rate",
              "line_start": 206,
              "line_end": 208,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cache miss rate",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            }
          ],
          "docstring": "Cache performance statistics",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CacheConfiguration",
          "line_start": 212,
          "line_end": 231,
          "base_classes": [],
          "methods": [],
          "docstring": "Cache configuration for a cache level",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "MemoryCache",
          "line_start": 238,
          "line_end": 497,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 241,
              "line_end": 257,
              "args": [
                "self",
                "config"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "get",
              "line_start": 259,
              "line_end": 290,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get value from cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 190
            },
            {
              "name": "put",
              "line_start": 292,
              "line_end": 325,
              "args": [
                "self",
                "key",
                "value",
                "ttl_seconds",
                "system",
                "tags"
              ],
              "returns": null,
              "docstring": "Put value in cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "remove",
              "line_start": 327,
              "line_end": 335,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Remove entry from cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "clear",
              "line_start": 337,
              "line_end": 343,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clear all cache entries",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_check_size_limits",
              "line_start": 345,
              "line_end": 350,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Check if entry fits within size limits",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_ensure_capacity",
              "line_start": 352,
              "line_end": 364,
              "args": [
                "self",
                "new_entry_size"
              ],
              "returns": null,
              "docstring": "Ensure cache has capacity for new entry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_evict_entries",
              "line_start": 366,
              "line_end": 409,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Evict entries based on configured strategy",
              "is_async": false,
              "decorators": [],
              "complexity_score": 335
            },
            {
              "name": "_adaptive_eviction_selection",
              "line_start": 411,
              "line_end": 431,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Select entries for eviction using adaptive algorithm",
              "is_async": false,
              "decorators": [],
              "complexity_score": 153
            },
            {
              "name": "_update_access_tracking",
              "line_start": 433,
              "line_end": 441,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Update access tracking for LRU and frequency counting",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_remove_entry",
              "line_start": 443,
              "line_end": 452,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Remove entry and clean up tracking",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_record_event",
              "line_start": 454,
              "line_end": 463,
              "args": [
                "self",
                "event_type",
                "key",
                "size_bytes",
                "metadata"
              ],
              "returns": null,
              "docstring": "Record cache event",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_update_performance_stats",
              "line_start": 465,
              "line_end": 475,
              "args": [
                "self",
                "response_time_ms",
                "size_bytes"
              ],
              "returns": null,
              "docstring": "Update performance statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "get_statistics",
              "line_start": 477,
              "line_end": 479,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 12
            },
            {
              "name": "get_cache_info",
              "line_start": 481,
              "line_end": 497,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get detailed cache information",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            }
          ],
          "docstring": "High-performance in-memory cache implementation",
          "decorators": []
        },
        {
          "name": "IntelligentCachingLayer",
          "line_start": 504,
          "line_end": 1265,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 510,
              "line_end": 561,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 245
            },
            {
              "name": "_initialize_cache_levels",
              "line_start": 563,
              "line_end": 600,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize cache levels with default configurations",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_record_access_pattern",
              "line_start": 848,
              "line_end": 869,
              "args": [
                "self",
                "key",
                "system"
              ],
              "returns": null,
              "docstring": "Record access pattern for predictive caching",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_are_access_patterns_similar",
              "line_start": 922,
              "line_end": 943,
              "args": [
                "self",
                "key1",
                "key2"
              ],
              "returns": null,
              "docstring": "Check if two keys have similar access patterns",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "get_cache_status",
              "line_start": 1188,
              "line_end": 1200,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive cache system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "get_cache_performance",
              "line_start": 1202,
              "line_end": 1238,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache performance metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 209
            },
            {
              "name": "get_access_patterns",
              "line_start": 1240,
              "line_end": 1265,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get access patterns analysis",
              "is_async": false,
              "decorators": [],
              "complexity_score": 203
            }
          ],
          "docstring": "Multi-level intelligent caching system with predictive warming,\nadaptive strategies, and cross-system coordination.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "is_expired",
          "line_start": 100,
          "line_end": 106,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if entry is expired",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "access",
          "line_start": 108,
          "line_end": 114,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record access to this entry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "_update_access_pattern_score",
          "line_start": 116,
          "line_end": 127,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update access pattern score based on usage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "calculate_size",
          "line_start": 129,
          "line_end": 139,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate and update entry size",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "to_dict",
          "line_start": 141,
          "line_end": 154,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for serialization",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "hit_rate",
          "line_start": 200,
          "line_end": 204,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cache hit rate",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "miss_rate",
          "line_start": 206,
          "line_end": 208,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cache miss rate",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "__init__",
          "line_start": 241,
          "line_end": 257,
          "args": [
            "self",
            "config"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "get",
          "line_start": 259,
          "line_end": 290,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get value from cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 190
        },
        {
          "name": "put",
          "line_start": 292,
          "line_end": 325,
          "args": [
            "self",
            "key",
            "value",
            "ttl_seconds",
            "system",
            "tags"
          ],
          "returns": null,
          "docstring": "Put value in cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "remove",
          "line_start": 327,
          "line_end": 335,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Remove entry from cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "clear",
          "line_start": 337,
          "line_end": 343,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clear all cache entries",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_check_size_limits",
          "line_start": 345,
          "line_end": 350,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Check if entry fits within size limits",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_ensure_capacity",
          "line_start": 352,
          "line_end": 364,
          "args": [
            "self",
            "new_entry_size"
          ],
          "returns": null,
          "docstring": "Ensure cache has capacity for new entry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_evict_entries",
          "line_start": 366,
          "line_end": 409,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Evict entries based on configured strategy",
          "is_async": false,
          "decorators": [],
          "complexity_score": 335
        },
        {
          "name": "_adaptive_eviction_selection",
          "line_start": 411,
          "line_end": 431,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Select entries for eviction using adaptive algorithm",
          "is_async": false,
          "decorators": [],
          "complexity_score": 153
        },
        {
          "name": "_update_access_tracking",
          "line_start": 433,
          "line_end": 441,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Update access tracking for LRU and frequency counting",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_remove_entry",
          "line_start": 443,
          "line_end": 452,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Remove entry and clean up tracking",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_record_event",
          "line_start": 454,
          "line_end": 463,
          "args": [
            "self",
            "event_type",
            "key",
            "size_bytes",
            "metadata"
          ],
          "returns": null,
          "docstring": "Record cache event",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_update_performance_stats",
          "line_start": 465,
          "line_end": 475,
          "args": [
            "self",
            "response_time_ms",
            "size_bytes"
          ],
          "returns": null,
          "docstring": "Update performance statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "get_statistics",
          "line_start": 477,
          "line_end": 479,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 12
        },
        {
          "name": "get_cache_info",
          "line_start": 481,
          "line_end": 497,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get detailed cache information",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "__init__",
          "line_start": 510,
          "line_end": 561,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 245
        },
        {
          "name": "_initialize_cache_levels",
          "line_start": 563,
          "line_end": 600,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize cache levels with default configurations",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_record_access_pattern",
          "line_start": 848,
          "line_end": 869,
          "args": [
            "self",
            "key",
            "system"
          ],
          "returns": null,
          "docstring": "Record access pattern for predictive caching",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_are_access_patterns_similar",
          "line_start": 922,
          "line_end": 943,
          "args": [
            "self",
            "key1",
            "key2"
          ],
          "returns": null,
          "docstring": "Check if two keys have similar access patterns",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "get_cache_status",
          "line_start": 1188,
          "line_end": 1200,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive cache system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "get_cache_performance",
          "line_start": 1202,
          "line_end": 1238,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache performance metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 209
        },
        {
          "name": "get_access_patterns",
          "line_start": 1240,
          "line_end": 1265,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get access patterns analysis",
          "is_async": false,
          "decorators": [],
          "complexity_score": 203
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque",
            "OrderedDict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Union",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 30
        },
        {
          "module": "weakref",
          "names": [
            "weakref"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics",
            "MetricType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "predictive_analytics_engine",
          "names": [
            "predictive_analytics_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 37
        },
        {
          "module": "comprehensive_error_recovery",
          "names": [
            "comprehensive_error_recovery",
            "ErrorSeverity",
            "ErrorCategory"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        }
      ],
      "external_dependencies": "{'weakref', 'dataclasses', 'typing', 'json', 'uuid', 'cross_system_analytics', 'enum', 'threading', 'asyncio', 'statistics', 'logging', 'concurrent.futures', 'cross_system_apis', 'datetime', 'collections', 'comprehensive_error_recovery', 'time', 'pickle', 'predictive_analytics_engine', 'hashlib'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1287,
      "complexity_score": 6332,
      "api_surface_area": 30,
      "docstring": "Intelligent Caching Layer\n=========================\n\nAdvanced caching system with predictive cache warming, intelligent eviction policies,\ncross-system cache coordination, and adaptive cache strategies based on usage patterns.\n\nIntegrates with:\n- Cross-System Analytics for usage pattern analysis\n- Predictive Analytics Engine for cache warming predictions\n- Cross-System APIs for distributed cache coordination\n- Comprehensive Error Recovery for cache failure handling\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9736842105263158,
      "estimated_migration_complexity": "medium"
    },
    "integration\\load_balancing_system.py": {
      "file_path": "integration\\load_balancing_system.py",
      "component_name": "load_balancing_system",
      "analysis_timestamp": "2025-08-20 21:46:39.626125",
      "classes": [
        {
          "name": "LoadBalancingAlgorithm",
          "line_start": 39,
          "line_end": 49,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Load balancing algorithms.",
          "decorators": []
        },
        {
          "name": "ServerState",
          "line_start": 51,
          "line_end": 57,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Server health states.",
          "decorators": []
        },
        {
          "name": "SessionAffinity",
          "line_start": 59,
          "line_end": 65,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Session affinity types.",
          "decorators": []
        },
        {
          "name": "ServerInstance",
          "line_start": 68,
          "line_end": 112,
          "base_classes": [],
          "methods": [
            {
              "name": "update_metrics",
              "line_start": 104,
              "line_end": 112,
              "args": [
                "self",
                "response_time",
                "success"
              ],
              "returns": null,
              "docstring": "Update server performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            }
          ],
          "docstring": "Represents a backend server instance.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "LoadBalancingPolicy",
          "line_start": 115,
          "line_end": 141,
          "base_classes": [],
          "methods": [],
          "docstring": "Load balancing policy configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ConsistentHashRing",
          "line_start": 143,
          "line_end": 205,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 146,
              "line_end": 150,
              "args": [
                "self",
                "virtual_nodes"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_hash",
              "line_start": 152,
              "line_end": 154,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Generate hash for a key.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "add_server",
              "line_start": 156,
              "line_end": 163,
              "args": [
                "self",
                "server"
              ],
              "returns": null,
              "docstring": "Add server to hash ring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "remove_server",
              "line_start": 165,
              "line_end": 174,
              "args": [
                "self",
                "server_id"
              ],
              "returns": null,
              "docstring": "Remove server from hash ring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_update_sorted_keys",
              "line_start": 176,
              "line_end": 178,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update sorted keys for binary search.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "get_server",
              "line_start": 180,
              "line_end": 189,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get server for a given key.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_binary_search",
              "line_start": 191,
              "line_end": 205,
              "args": [
                "self",
                "hash_value"
              ],
              "returns": null,
              "docstring": "Binary search for next server position.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            }
          ],
          "docstring": "Consistent hash ring for distributed load balancing.",
          "decorators": []
        },
        {
          "name": "LoadBalancingSystem",
          "line_start": 207,
          "line_end": 540,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 210,
              "line_end": 237,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "register_server",
              "line_start": 239,
              "line_end": 256,
              "args": [
                "self",
                "server_name",
                "config"
              ],
              "returns": null,
              "docstring": "Register a new backend server.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            },
            {
              "name": "set_algorithm",
              "line_start": 258,
              "line_end": 276,
              "args": [
                "self",
                "algorithm",
                "service"
              ],
              "returns": null,
              "docstring": "Set load balancing algorithm for a service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "get_next_server",
              "line_start": 278,
              "line_end": 313,
              "args": [
                "self",
                "request_context"
              ],
              "returns": null,
              "docstring": "Get next server based on load balancing algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            },
            {
              "name": "_select_server",
              "line_start": 315,
              "line_end": 364,
              "args": [
                "self",
                "servers",
                "policy",
                "context"
              ],
              "returns": null,
              "docstring": "Select server based on algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 378
            },
            {
              "name": "_get_session_server",
              "line_start": 366,
              "line_end": 384,
              "args": [
                "self",
                "context",
                "policy"
              ],
              "returns": null,
              "docstring": "Get server based on session affinity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "mark_server_healthy",
              "line_start": 386,
              "line_end": 392,
              "args": [
                "self",
                "server_name"
              ],
              "returns": null,
              "docstring": "Mark server as healthy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "mark_server_unhealthy",
              "line_start": 394,
              "line_end": 403,
              "args": [
                "self",
                "server_name"
              ],
              "returns": null,
              "docstring": "Mark server as unhealthy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "update_server_load",
              "line_start": 405,
              "line_end": 410,
              "args": [
                "self",
                "server_name",
                "load"
              ],
              "returns": null,
              "docstring": "Update server load metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "get_load_metrics",
              "line_start": 412,
              "line_end": 443,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive load balancing metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 236
            },
            {
              "name": "_start_health_check",
              "line_start": 445,
              "line_end": 474,
              "args": [
                "self",
                "server"
              ],
              "returns": null,
              "docstring": "Start health checking for a server.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            },
            {
              "name": "_monitor_servers",
              "line_start": 476,
              "line_end": 495,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring of server performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "apply_rate_limit",
              "line_start": 497,
              "line_end": 515,
              "args": [
                "self",
                "client_id",
                "requests_per_second"
              ],
              "returns": null,
              "docstring": "Apply rate limiting using token bucket algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "shutdown",
              "line_start": 517,
              "line_end": 521,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Gracefully shutdown the load balancer.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "add_backend",
              "line_start": 524,
              "line_end": 526,
              "args": [
                "self",
                "name",
                "config"
              ],
              "returns": null,
              "docstring": "Add a backend server (alias for register_server).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "get_active_backends",
              "line_start": 528,
              "line_end": 531,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of active backend servers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "route_request",
              "line_start": 533,
              "line_end": 536,
              "args": [
                "self",
                "request"
              ],
              "returns": null,
              "docstring": "Route a request to a backend server.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "get_load_statistics",
              "line_start": 538,
              "line_end": 540,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get load statistics (alias for get_load_metrics).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 13
            }
          ],
          "docstring": "Comprehensive load balancing system with advanced features.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "update_metrics",
          "line_start": 104,
          "line_end": 112,
          "args": [
            "self",
            "response_time",
            "success"
          ],
          "returns": null,
          "docstring": "Update server performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "__init__",
          "line_start": 146,
          "line_end": 150,
          "args": [
            "self",
            "virtual_nodes"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_hash",
          "line_start": 152,
          "line_end": 154,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Generate hash for a key.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "add_server",
          "line_start": 156,
          "line_end": 163,
          "args": [
            "self",
            "server"
          ],
          "returns": null,
          "docstring": "Add server to hash ring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "remove_server",
          "line_start": 165,
          "line_end": 174,
          "args": [
            "self",
            "server_id"
          ],
          "returns": null,
          "docstring": "Remove server from hash ring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_update_sorted_keys",
          "line_start": 176,
          "line_end": 178,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update sorted keys for binary search.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "get_server",
          "line_start": 180,
          "line_end": 189,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get server for a given key.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_binary_search",
          "line_start": 191,
          "line_end": 205,
          "args": [
            "self",
            "hash_value"
          ],
          "returns": null,
          "docstring": "Binary search for next server position.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "__init__",
          "line_start": 210,
          "line_end": 237,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "register_server",
          "line_start": 239,
          "line_end": 256,
          "args": [
            "self",
            "server_name",
            "config"
          ],
          "returns": null,
          "docstring": "Register a new backend server.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "set_algorithm",
          "line_start": 258,
          "line_end": 276,
          "args": [
            "self",
            "algorithm",
            "service"
          ],
          "returns": null,
          "docstring": "Set load balancing algorithm for a service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "get_next_server",
          "line_start": 278,
          "line_end": 313,
          "args": [
            "self",
            "request_context"
          ],
          "returns": null,
          "docstring": "Get next server based on load balancing algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "_select_server",
          "line_start": 315,
          "line_end": 364,
          "args": [
            "self",
            "servers",
            "policy",
            "context"
          ],
          "returns": null,
          "docstring": "Select server based on algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 378
        },
        {
          "name": "_get_session_server",
          "line_start": 366,
          "line_end": 384,
          "args": [
            "self",
            "context",
            "policy"
          ],
          "returns": null,
          "docstring": "Get server based on session affinity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "mark_server_healthy",
          "line_start": 386,
          "line_end": 392,
          "args": [
            "self",
            "server_name"
          ],
          "returns": null,
          "docstring": "Mark server as healthy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "mark_server_unhealthy",
          "line_start": 394,
          "line_end": 403,
          "args": [
            "self",
            "server_name"
          ],
          "returns": null,
          "docstring": "Mark server as unhealthy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "update_server_load",
          "line_start": 405,
          "line_end": 410,
          "args": [
            "self",
            "server_name",
            "load"
          ],
          "returns": null,
          "docstring": "Update server load metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "get_load_metrics",
          "line_start": 412,
          "line_end": 443,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive load balancing metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 236
        },
        {
          "name": "_start_health_check",
          "line_start": 445,
          "line_end": 474,
          "args": [
            "self",
            "server"
          ],
          "returns": null,
          "docstring": "Start health checking for a server.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "_monitor_servers",
          "line_start": 476,
          "line_end": 495,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring of server performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "apply_rate_limit",
          "line_start": 497,
          "line_end": 515,
          "args": [
            "self",
            "client_id",
            "requests_per_second"
          ],
          "returns": null,
          "docstring": "Apply rate limiting using token bucket algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "shutdown",
          "line_start": 517,
          "line_end": 521,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Gracefully shutdown the load balancer.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "add_backend",
          "line_start": 524,
          "line_end": 526,
          "args": [
            "self",
            "name",
            "config"
          ],
          "returns": null,
          "docstring": "Add a backend server (alias for register_server).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "get_active_backends",
          "line_start": 528,
          "line_end": 531,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of active backend servers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "route_request",
          "line_start": 533,
          "line_end": 536,
          "args": [
            "self",
            "request"
          ],
          "returns": null,
          "docstring": "Route a request to a backend server.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "get_load_statistics",
          "line_start": 538,
          "line_end": 540,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get load statistics (alias for get_load_metrics).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "check_health",
          "line_start": 447,
          "line_end": 471,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 161
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "random",
          "names": [
            "random"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 26
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 27
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 31
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "socket",
          "names": [
            "socket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 34
        },
        {
          "module": "struct",
          "names": [
            "struct"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 35
        }
      ],
      "external_dependencies": "{'random', 'dataclasses', 'struct', 'typing', 'time', 'socket', 'json', 'logging', 'concurrent.futures', 'enum', 'threading', 'uuid', 'hashlib', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 543,
      "complexity_score": 5255,
      "api_surface_area": 35,
      "docstring": "Load Balancing System\n====================\n\nAdvanced load balancing system with multiple algorithms, health checking,\nsession affinity, and intelligent traffic distribution.\n\nFeatures:\n- Multiple load balancing algorithms (round-robin, least connections, weighted, etc.)\n- Real-time health monitoring and automatic failover\n- Session affinity/sticky sessions support\n- Traffic shaping and rate limiting\n- SSL/TLS termination support\n- WebSocket connection balancing\n- Metrics collection and performance monitoring\n\nAuthor: TestMaster Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9411764705882353,
      "estimated_migration_complexity": "medium"
    },
    "integration\\multi_environment_support.py": {
      "file_path": "integration\\multi_environment_support.py",
      "component_name": "multi_environment_support",
      "analysis_timestamp": "2025-08-20 21:46:39.636344",
      "classes": [
        {
          "name": "Environment",
          "line_start": 22,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Deployment environments.",
          "decorators": []
        },
        {
          "name": "ConfigSection",
          "line_start": 32,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Configuration sections.",
          "decorators": []
        },
        {
          "name": "EnvironmentConfig",
          "line_start": 44,
          "line_end": 58,
          "base_classes": [],
          "methods": [],
          "docstring": "Environment-specific configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "EnvironmentManager",
          "line_start": 60,
          "line_end": 316,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 63,
              "line_end": 73,
              "args": [
                "self",
                "config_dir"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_detect_current_environment",
              "line_start": 75,
              "line_end": 94,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect current environment from various sources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_load_all_environments",
              "line_start": 96,
              "line_end": 109,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load all environment configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_create_default_environments",
              "line_start": 111,
              "line_end": 153,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Create default environment configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_load_environment_config",
              "line_start": 155,
              "line_end": 178,
              "args": [
                "self",
                "config_file"
              ],
              "returns": null,
              "docstring": "Load environment configuration from file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 143
            },
            {
              "name": "get_current_config",
              "line_start": 180,
              "line_end": 184,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current environment configuration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "get_environment_config",
              "line_start": 186,
              "line_end": 190,
              "args": [
                "self",
                "environment"
              ],
              "returns": null,
              "docstring": "Get specific environment configuration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "set_current_environment",
              "line_start": 192,
              "line_end": 199,
              "args": [
                "self",
                "environment"
              ],
              "returns": null,
              "docstring": "Set current environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "get_setting",
              "line_start": 201,
              "line_end": 230,
              "args": [
                "self",
                "key",
                "default",
                "environment"
              ],
              "returns": null,
              "docstring": "Get environment-specific setting.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "set_setting",
              "line_start": 232,
              "line_end": 243,
              "args": [
                "self",
                "key",
                "value",
                "environment"
              ],
              "returns": null,
              "docstring": "Set environment-specific setting.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "is_feature_enabled",
              "line_start": 245,
              "line_end": 248,
              "args": [
                "self",
                "feature",
                "environment"
              ],
              "returns": null,
              "docstring": "Check if feature is enabled in environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "get_scaling_config",
              "line_start": 250,
              "line_end": 253,
              "args": [
                "self",
                "environment"
              ],
              "returns": null,
              "docstring": "Get scaling configuration for environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "save_environment_config",
              "line_start": 255,
              "line_end": 275,
              "args": [
                "self",
                "environment"
              ],
              "returns": null,
              "docstring": "Save environment configuration to file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "clone_environment",
              "line_start": 277,
              "line_end": 306,
              "args": [
                "self",
                "source",
                "target"
              ],
              "returns": null,
              "docstring": "Clone environment configuration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 158
            },
            {
              "name": "get_environment_metrics",
              "line_start": 308,
              "line_end": 316,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get environment management metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            }
          ],
          "docstring": "Manages multiple environment configurations.",
          "decorators": []
        },
        {
          "name": "MultiEnvironmentSupport",
          "line_start": 318,
          "line_end": 458,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 321,
              "line_end": 333,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "process",
              "line_start": 335,
              "line_end": 352,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Process data through multi-environment system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "health_check",
              "line_start": 354,
              "line_end": 358,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check health of multi-environment support.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "get_environment_info",
              "line_start": 360,
              "line_end": 380,
              "args": [
                "self",
                "environment"
              ],
              "returns": null,
              "docstring": "Get detailed environment information.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "switch_environment",
              "line_start": 382,
              "line_end": 390,
              "args": [
                "self",
                "environment"
              ],
              "returns": null,
              "docstring": "Switch to different environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "get_comprehensive_metrics",
              "line_start": 392,
              "line_end": 408,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive multi-environment metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "configure_environment",
              "line_start": 415,
              "line_end": 420,
              "args": [
                "self",
                "env_name",
                "config"
              ],
              "returns": null,
              "docstring": "Configure an environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "switch_environment",
              "line_start": 422,
              "line_end": 426,
              "args": [
                "self",
                "env_name"
              ],
              "returns": null,
              "docstring": "Switch to a different environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "get_current_config",
              "line_start": 428,
              "line_end": 432,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current environment configuration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "validate_environment",
              "line_start": 434,
              "line_end": 444,
              "args": [
                "self",
                "env_name"
              ],
              "returns": null,
              "docstring": "Validate environment configuration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "set_environment",
              "line_start": 447,
              "line_end": 449,
              "args": [
                "self",
                "env"
              ],
              "returns": null,
              "docstring": "Set the active environment (alias).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "get_environment",
              "line_start": 451,
              "line_end": 453,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get the current environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "get_config",
              "line_start": 455,
              "line_end": 458,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Get configuration value for current environment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 26
            }
          ],
          "docstring": "Comprehensive multi-environment support system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 63,
          "line_end": 73,
          "args": [
            "self",
            "config_dir"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_detect_current_environment",
          "line_start": 75,
          "line_end": 94,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect current environment from various sources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_load_all_environments",
          "line_start": 96,
          "line_end": 109,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load all environment configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_create_default_environments",
          "line_start": 111,
          "line_end": 153,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Create default environment configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_load_environment_config",
          "line_start": 155,
          "line_end": 178,
          "args": [
            "self",
            "config_file"
          ],
          "returns": null,
          "docstring": "Load environment configuration from file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 143
        },
        {
          "name": "get_current_config",
          "line_start": 180,
          "line_end": 184,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current environment configuration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "get_environment_config",
          "line_start": 186,
          "line_end": 190,
          "args": [
            "self",
            "environment"
          ],
          "returns": null,
          "docstring": "Get specific environment configuration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "set_current_environment",
          "line_start": 192,
          "line_end": 199,
          "args": [
            "self",
            "environment"
          ],
          "returns": null,
          "docstring": "Set current environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "get_setting",
          "line_start": 201,
          "line_end": 230,
          "args": [
            "self",
            "key",
            "default",
            "environment"
          ],
          "returns": null,
          "docstring": "Get environment-specific setting.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "set_setting",
          "line_start": 232,
          "line_end": 243,
          "args": [
            "self",
            "key",
            "value",
            "environment"
          ],
          "returns": null,
          "docstring": "Set environment-specific setting.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "is_feature_enabled",
          "line_start": 245,
          "line_end": 248,
          "args": [
            "self",
            "feature",
            "environment"
          ],
          "returns": null,
          "docstring": "Check if feature is enabled in environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "get_scaling_config",
          "line_start": 250,
          "line_end": 253,
          "args": [
            "self",
            "environment"
          ],
          "returns": null,
          "docstring": "Get scaling configuration for environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "save_environment_config",
          "line_start": 255,
          "line_end": 275,
          "args": [
            "self",
            "environment"
          ],
          "returns": null,
          "docstring": "Save environment configuration to file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "clone_environment",
          "line_start": 277,
          "line_end": 306,
          "args": [
            "self",
            "source",
            "target"
          ],
          "returns": null,
          "docstring": "Clone environment configuration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "get_environment_metrics",
          "line_start": 308,
          "line_end": 316,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get environment management metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "__init__",
          "line_start": 321,
          "line_end": 333,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "process",
          "line_start": 335,
          "line_end": 352,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Process data through multi-environment system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "health_check",
          "line_start": 354,
          "line_end": 358,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check health of multi-environment support.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "get_environment_info",
          "line_start": 360,
          "line_end": 380,
          "args": [
            "self",
            "environment"
          ],
          "returns": null,
          "docstring": "Get detailed environment information.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "switch_environment",
          "line_start": 382,
          "line_end": 390,
          "args": [
            "self",
            "environment"
          ],
          "returns": null,
          "docstring": "Switch to different environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "get_comprehensive_metrics",
          "line_start": 392,
          "line_end": 408,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive multi-environment metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "configure_environment",
          "line_start": 415,
          "line_end": 420,
          "args": [
            "self",
            "env_name",
            "config"
          ],
          "returns": null,
          "docstring": "Configure an environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "switch_environment",
          "line_start": 422,
          "line_end": 426,
          "args": [
            "self",
            "env_name"
          ],
          "returns": null,
          "docstring": "Switch to a different environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "get_current_config",
          "line_start": 428,
          "line_end": 432,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current environment configuration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "validate_environment",
          "line_start": 434,
          "line_end": 444,
          "args": [
            "self",
            "env_name"
          ],
          "returns": null,
          "docstring": "Validate environment configuration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "set_environment",
          "line_start": 447,
          "line_end": 449,
          "args": [
            "self",
            "env"
          ],
          "returns": null,
          "docstring": "Set the active environment (alias).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "get_environment",
          "line_start": 451,
          "line_end": 453,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get the current environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "get_config",
          "line_start": 455,
          "line_end": 458,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Get configuration value for current environment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        }
      ],
      "imports": [
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 8
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 9
        },
        {
          "module": "yaml",
          "names": [
            "yaml"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 10
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 12
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'pathlib', 'dataclasses', 'typing', 'json', 'logging', 'enum', 'datetime', 'threading', 'yaml', 'hashlib', 'os'}",
      "internal_dependencies": "set()",
      "lines_of_code": 462,
      "complexity_score": 4502,
      "api_surface_area": 44,
      "docstring": "Multi Environment Support\n==================================================\nComprehensive multi-environment configuration and management system.\nRestored from configuration system archive.",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9696969696969697,
      "estimated_migration_complexity": "medium"
    },
    "integration\\predictive_analytics_engine.py": {
      "file_path": "integration\\predictive_analytics_engine.py",
      "component_name": "predictive_analytics_engine",
      "analysis_timestamp": "2025-08-20 21:46:39.647346",
      "classes": [
        {
          "name": "ModelType",
          "line_start": 55,
          "line_end": 62,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of predictive models",
          "decorators": []
        },
        {
          "name": "PredictionAccuracy",
          "line_start": 65,
          "line_end": 70,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Prediction accuracy levels",
          "decorators": []
        },
        {
          "name": "DecisionType",
          "line_start": 73,
          "line_end": 82,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of intelligent decisions",
          "decorators": []
        },
        {
          "name": "ModelPerformance",
          "line_start": 86,
          "line_end": 107,
          "base_classes": [],
          "methods": [
            {
              "name": "get_accuracy_level",
              "line_start": 98,
              "line_end": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get accuracy level based on score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Model performance metrics",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictiveModel",
          "line_start": 111,
          "line_end": 137,
          "base_classes": [],
          "methods": [
            {
              "name": "serialize",
              "line_start": 126,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Serialize model metadata (not the actual model)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            }
          ],
          "docstring": "Predictive model container",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictionResult",
          "line_start": 141,
          "line_end": 180,
          "base_classes": [],
          "methods": [
            {
              "name": "get_next_value",
              "line_start": 161,
              "line_end": 163,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get next predicted value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "get_trend_direction",
              "line_start": 165,
              "line_end": 180,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Determine trend direction from predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            }
          ],
          "docstring": "Enhanced prediction result",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "IntelligentDecision",
          "line_start": 184,
          "line_end": 204,
          "base_classes": [],
          "methods": [],
          "docstring": "Intelligent decision recommendation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CapacityForecast",
          "line_start": 208,
          "line_end": 228,
          "base_classes": [],
          "methods": [],
          "docstring": "Capacity planning forecast",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictiveAnalyticsEngine",
          "line_start": 235,
          "line_end": 1125,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 241,
              "line_end": 285,
              "args": [
                "self",
                "model_storage_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 207
            },
            {
              "name": "_initialize_decision_rules",
              "line_start": 287,
              "line_end": 298,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize intelligent decision rules",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "_prepare_training_data",
              "line_start": 584,
              "line_end": 604,
              "args": [
                "self",
                "series"
              ],
              "returns": null,
              "docstring": "Prepare training data with time series features",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_prepare_prediction_data",
              "line_start": 606,
              "line_end": 617,
              "args": [
                "self",
                "series"
              ],
              "returns": null,
              "docstring": "Prepare data for making predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_choose_model_type",
              "line_start": 619,
              "line_end": 629,
              "args": [
                "self",
                "series",
                "X",
                "y"
              ],
              "returns": null,
              "docstring": "Choose appropriate model type based on data characteristics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_rule_high_cpu_predicted",
              "line_start": 759,
              "line_end": 783,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: High CPU usage predicted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_rule_memory_pressure_forecast",
              "line_start": 785,
              "line_end": 810,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Memory pressure forecasted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_rule_error_rate_increasing",
              "line_start": 812,
              "line_end": 835,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Error rate increasing trend",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            },
            {
              "name": "_rule_latency_degradation",
              "line_start": 837,
              "line_end": 862,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Latency degradation predicted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_rule_capacity_shortage",
              "line_start": 864,
              "line_end": 867,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Capacity shortage predicted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "_rule_cost_optimization",
              "line_start": 869,
              "line_end": 872,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Cost optimization opportunity",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "_cleanup_old_predictions",
              "line_start": 899,
              "line_end": 916,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_cleanup_old_decisions",
              "line_start": 918,
              "line_end": 925,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old decisions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "get_active_predictions",
              "line_start": 978,
              "line_end": 984,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get active predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "get_intelligent_decisions",
              "line_start": 986,
              "line_end": 991,
              "args": [
                "self",
                "urgency_threshold"
              ],
              "returns": null,
              "docstring": "Get intelligent decisions above urgency threshold",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "get_capacity_forecasts",
              "line_start": 993,
              "line_end": 995,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get capacity planning forecasts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "get_model_performance_summary",
              "line_start": 997,
              "line_end": 1017,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get model performance summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 181
            },
            {
              "name": "get_engine_analytics",
              "line_start": 1019,
              "line_end": 1039,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive engine analytics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "ingest_data",
              "line_start": 1051,
              "line_end": 1058,
              "args": [
                "self",
                "data_type",
                "data"
              ],
              "returns": null,
              "docstring": "Ingest data for analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "train_model",
              "line_start": 1060,
              "line_end": 1069,
              "args": [
                "self",
                "model_name",
                "data_type"
              ],
              "returns": null,
              "docstring": "Train a predictive model.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "predict",
              "line_start": 1071,
              "line_end": 1079,
              "args": [
                "self",
                "model_name",
                "input_data"
              ],
              "returns": null,
              "docstring": "Make a prediction using a model.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "get_model_performance",
              "line_start": 1081,
              "line_end": 1090,
              "args": [
                "self",
                "model_name"
              ],
              "returns": null,
              "docstring": "Get model performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "get_predictions_history",
              "line_start": 1092,
              "line_end": 1097,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get prediction history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "get_model_metrics",
              "line_start": 1100,
              "line_end": 1107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get model metrics (alias).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 17
            },
            {
              "name": "detect_patterns",
              "line_start": 1111,
              "line_end": 1116,
              "args": [
                "self",
                "data_type"
              ],
              "returns": null,
              "docstring": "Detect patterns in data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "get_analytics_metrics",
              "line_start": 1118,
              "line_end": 1125,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get analytics metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 26
            }
          ],
          "docstring": "Advanced predictive analytics engine with ML models,\nintelligent decision-making, and capacity planning.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_accuracy_level",
          "line_start": 98,
          "line_end": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get accuracy level based on score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "serialize",
          "line_start": 126,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Serialize model metadata (not the actual model)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "get_next_value",
          "line_start": 161,
          "line_end": 163,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get next predicted value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "get_trend_direction",
          "line_start": 165,
          "line_end": 180,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Determine trend direction from predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "__init__",
          "line_start": 241,
          "line_end": 285,
          "args": [
            "self",
            "model_storage_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 207
        },
        {
          "name": "_initialize_decision_rules",
          "line_start": 287,
          "line_end": 298,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize intelligent decision rules",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "_prepare_training_data",
          "line_start": 584,
          "line_end": 604,
          "args": [
            "self",
            "series"
          ],
          "returns": null,
          "docstring": "Prepare training data with time series features",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_prepare_prediction_data",
          "line_start": 606,
          "line_end": 617,
          "args": [
            "self",
            "series"
          ],
          "returns": null,
          "docstring": "Prepare data for making predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_choose_model_type",
          "line_start": 619,
          "line_end": 629,
          "args": [
            "self",
            "series",
            "X",
            "y"
          ],
          "returns": null,
          "docstring": "Choose appropriate model type based on data characteristics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_rule_high_cpu_predicted",
          "line_start": 759,
          "line_end": 783,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: High CPU usage predicted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_rule_memory_pressure_forecast",
          "line_start": 785,
          "line_end": 810,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Memory pressure forecasted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_rule_error_rate_increasing",
          "line_start": 812,
          "line_end": 835,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Error rate increasing trend",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "_rule_latency_degradation",
          "line_start": 837,
          "line_end": 862,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Latency degradation predicted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_rule_capacity_shortage",
          "line_start": 864,
          "line_end": 867,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Capacity shortage predicted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "_rule_cost_optimization",
          "line_start": 869,
          "line_end": 872,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Cost optimization opportunity",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "_cleanup_old_predictions",
          "line_start": 899,
          "line_end": 916,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_cleanup_old_decisions",
          "line_start": 918,
          "line_end": 925,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old decisions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "get_active_predictions",
          "line_start": 978,
          "line_end": 984,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get active predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "get_intelligent_decisions",
          "line_start": 986,
          "line_end": 991,
          "args": [
            "self",
            "urgency_threshold"
          ],
          "returns": null,
          "docstring": "Get intelligent decisions above urgency threshold",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "get_capacity_forecasts",
          "line_start": 993,
          "line_end": 995,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get capacity planning forecasts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "get_model_performance_summary",
          "line_start": 997,
          "line_end": 1017,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get model performance summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 181
        },
        {
          "name": "get_engine_analytics",
          "line_start": 1019,
          "line_end": 1039,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive engine analytics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "ingest_data",
          "line_start": 1051,
          "line_end": 1058,
          "args": [
            "self",
            "data_type",
            "data"
          ],
          "returns": null,
          "docstring": "Ingest data for analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "train_model",
          "line_start": 1060,
          "line_end": 1069,
          "args": [
            "self",
            "model_name",
            "data_type"
          ],
          "returns": null,
          "docstring": "Train a predictive model.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "predict",
          "line_start": 1071,
          "line_end": 1079,
          "args": [
            "self",
            "model_name",
            "input_data"
          ],
          "returns": null,
          "docstring": "Make a prediction using a model.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "get_model_performance",
          "line_start": 1081,
          "line_end": 1090,
          "args": [
            "self",
            "model_name"
          ],
          "returns": null,
          "docstring": "Get model performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "get_predictions_history",
          "line_start": 1092,
          "line_end": 1097,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get prediction history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "get_model_metrics",
          "line_start": 1100,
          "line_end": 1107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get model metrics (alias).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 17
        },
        {
          "name": "detect_patterns",
          "line_start": 1111,
          "line_end": 1116,
          "args": [
            "self",
            "data_type"
          ],
          "returns": null,
          "docstring": "Detect patterns in data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "get_analytics_metrics",
          "line_start": 1118,
          "line_end": 1125,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get analytics metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "numpy",
          "names": [
            "numpy"
          ],
          "alias": "np",
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "pandas",
          "names": [
            "pandas"
          ],
          "alias": "pd",
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "warnings",
          "names": [
            "warnings"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "sklearn.ensemble",
          "names": [
            "RandomForestRegressor",
            "IsolationForest"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "sklearn.linear_model",
          "names": [
            "LinearRegression",
            "Ridge"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "sklearn.metrics",
          "names": [
            "mean_squared_error",
            "mean_absolute_error",
            "r2_score"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 37
        },
        {
          "module": "sklearn.model_selection",
          "names": [
            "train_test_split"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        },
        {
          "module": "sklearn.preprocessing",
          "names": [
            "StandardScaler",
            "MinMaxScaler"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 39
        },
        {
          "module": "sklearn.cluster",
          "names": [
            "DBSCAN",
            "KMeans"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 40
        },
        {
          "module": "scipy.stats",
          "names": [
            "scipy.stats"
          ],
          "alias": "stats",
          "is_from_import": false,
          "line_number": 41
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "MetricSeries",
            "MetricDataPoint",
            "cross_system_analytics",
            "MetricType",
            "TrendDirection"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 44
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 48
        }
      ],
      "external_dependencies": "{'dataclasses', 'typing', 'sklearn.model_selection', 'json', 'uuid', 'pandas', 'sklearn.metrics', 'numpy', 'sklearn.cluster', 'warnings', 'cross_system_analytics', 'enum', 'asyncio', 'pathlib', 'logging', 'sklearn.ensemble', 'cross_system_apis', 'sklearn.preprocessing', 'datetime', 'collections', 'scipy.stats', 'time', 'sklearn.linear_model', 'pickle'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1142,
      "complexity_score": 4358,
      "api_surface_area": 34,
      "docstring": "Predictive Analytics Engine\n==========================\n\nAdvanced predictive analytics engine with machine learning models,\ntime series forecasting, and intelligent decision-making capabilities.\n\nIntegrates with:\n- Cross-System Analytics for historical data\n- Workflow Engine for predictive workflow optimization\n- All Unified Systems for real-time decision intelligence\n- Visual Dashboard for predictive insights visualization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "{'sklearn', 'pandas', 'numpy', 'scipy'}",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "high"
    },
    "integration\\predictive_analytics_engine_robust.py": {
      "file_path": "integration\\predictive_analytics_engine_robust.py",
      "component_name": "predictive_analytics_engine_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.660856",
      "classes": [
        {
          "name": "ModelType",
          "line_start": 55,
          "line_end": 62,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of predictive models",
          "decorators": []
        },
        {
          "name": "PredictionAccuracy",
          "line_start": 65,
          "line_end": 70,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Prediction accuracy levels",
          "decorators": []
        },
        {
          "name": "DecisionType",
          "line_start": 73,
          "line_end": 82,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of intelligent decisions",
          "decorators": []
        },
        {
          "name": "ModelPerformance",
          "line_start": 86,
          "line_end": 107,
          "base_classes": [],
          "methods": [
            {
              "name": "get_accuracy_level",
              "line_start": 98,
              "line_end": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get accuracy level based on score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Model performance metrics",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictiveModel",
          "line_start": 111,
          "line_end": 137,
          "base_classes": [],
          "methods": [
            {
              "name": "serialize",
              "line_start": 126,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Serialize model metadata (not the actual model)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            }
          ],
          "docstring": "Predictive model container",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictionResult",
          "line_start": 141,
          "line_end": 180,
          "base_classes": [],
          "methods": [
            {
              "name": "get_next_value",
              "line_start": 161,
              "line_end": 163,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get next predicted value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "get_trend_direction",
              "line_start": 165,
              "line_end": 180,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Determine trend direction from predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            }
          ],
          "docstring": "Enhanced prediction result",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "IntelligentDecision",
          "line_start": 184,
          "line_end": 204,
          "base_classes": [],
          "methods": [],
          "docstring": "Intelligent decision recommendation",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CapacityForecast",
          "line_start": 208,
          "line_end": 228,
          "base_classes": [],
          "methods": [],
          "docstring": "Capacity planning forecast",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictiveAnalyticsEngine",
          "line_start": 235,
          "line_end": 1039,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 241,
              "line_end": 285,
              "args": [
                "self",
                "model_storage_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "_initialize_decision_rules",
              "line_start": 287,
              "line_end": 298,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize intelligent decision rules",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_prepare_training_data",
              "line_start": 584,
              "line_end": 604,
              "args": [
                "self",
                "series"
              ],
              "returns": null,
              "docstring": "Prepare training data with time series features",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_prepare_prediction_data",
              "line_start": 606,
              "line_end": 617,
              "args": [
                "self",
                "series"
              ],
              "returns": null,
              "docstring": "Prepare data for making predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_choose_model_type",
              "line_start": 619,
              "line_end": 629,
              "args": [
                "self",
                "series",
                "X",
                "y"
              ],
              "returns": null,
              "docstring": "Choose appropriate model type based on data characteristics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_rule_high_cpu_predicted",
              "line_start": 759,
              "line_end": 783,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: High CPU usage predicted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_rule_memory_pressure_forecast",
              "line_start": 785,
              "line_end": 810,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Memory pressure forecasted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_rule_error_rate_increasing",
              "line_start": 812,
              "line_end": 835,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Error rate increasing trend",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            },
            {
              "name": "_rule_latency_degradation",
              "line_start": 837,
              "line_end": 862,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Latency degradation predicted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_rule_capacity_shortage",
              "line_start": 864,
              "line_end": 867,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Capacity shortage predicted",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "_rule_cost_optimization",
              "line_start": 869,
              "line_end": 872,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Rule: Cost optimization opportunity",
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "_cleanup_old_predictions",
              "line_start": 899,
              "line_end": 916,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_cleanup_old_decisions",
              "line_start": 918,
              "line_end": 925,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old decisions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "get_active_predictions",
              "line_start": 978,
              "line_end": 984,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get active predictions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "get_intelligent_decisions",
              "line_start": 986,
              "line_end": 991,
              "args": [
                "self",
                "urgency_threshold"
              ],
              "returns": null,
              "docstring": "Get intelligent decisions above urgency threshold",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "get_capacity_forecasts",
              "line_start": 993,
              "line_end": 995,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get capacity planning forecasts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "get_model_performance_summary",
              "line_start": 997,
              "line_end": 1017,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get model performance summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 181
            },
            {
              "name": "get_engine_analytics",
              "line_start": 1019,
              "line_end": 1039,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive engine analytics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            }
          ],
          "docstring": "Advanced predictive analytics engine with ML models,\nintelligent decision-making, and capacity planning.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_accuracy_level",
          "line_start": 98,
          "line_end": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get accuracy level based on score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "serialize",
          "line_start": 126,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Serialize model metadata (not the actual model)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "get_next_value",
          "line_start": 161,
          "line_end": 163,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get next predicted value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "get_trend_direction",
          "line_start": 165,
          "line_end": 180,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Determine trend direction from predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "__init__",
          "line_start": 241,
          "line_end": 285,
          "args": [
            "self",
            "model_storage_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "_initialize_decision_rules",
          "line_start": 287,
          "line_end": 298,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize intelligent decision rules",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_prepare_training_data",
          "line_start": 584,
          "line_end": 604,
          "args": [
            "self",
            "series"
          ],
          "returns": null,
          "docstring": "Prepare training data with time series features",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_prepare_prediction_data",
          "line_start": 606,
          "line_end": 617,
          "args": [
            "self",
            "series"
          ],
          "returns": null,
          "docstring": "Prepare data for making predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_choose_model_type",
          "line_start": 619,
          "line_end": 629,
          "args": [
            "self",
            "series",
            "X",
            "y"
          ],
          "returns": null,
          "docstring": "Choose appropriate model type based on data characteristics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_rule_high_cpu_predicted",
          "line_start": 759,
          "line_end": 783,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: High CPU usage predicted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_rule_memory_pressure_forecast",
          "line_start": 785,
          "line_end": 810,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Memory pressure forecasted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_rule_error_rate_increasing",
          "line_start": 812,
          "line_end": 835,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Error rate increasing trend",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "_rule_latency_degradation",
          "line_start": 837,
          "line_end": 862,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Latency degradation predicted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_rule_capacity_shortage",
          "line_start": 864,
          "line_end": 867,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Capacity shortage predicted",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "_rule_cost_optimization",
          "line_start": 869,
          "line_end": 872,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Rule: Cost optimization opportunity",
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "_cleanup_old_predictions",
          "line_start": 899,
          "line_end": 916,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_cleanup_old_decisions",
          "line_start": 918,
          "line_end": 925,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old decisions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "get_active_predictions",
          "line_start": 978,
          "line_end": 984,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get active predictions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "get_intelligent_decisions",
          "line_start": 986,
          "line_end": 991,
          "args": [
            "self",
            "urgency_threshold"
          ],
          "returns": null,
          "docstring": "Get intelligent decisions above urgency threshold",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "get_capacity_forecasts",
          "line_start": 993,
          "line_end": 995,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get capacity planning forecasts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "get_model_performance_summary",
          "line_start": 997,
          "line_end": 1017,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get model performance summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 181
        },
        {
          "name": "get_engine_analytics",
          "line_start": 1019,
          "line_end": 1039,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive engine analytics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "numpy",
          "names": [
            "numpy"
          ],
          "alias": "np",
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "pandas",
          "names": [
            "pandas"
          ],
          "alias": "pd",
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "warnings",
          "names": [
            "warnings"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "sklearn.ensemble",
          "names": [
            "RandomForestRegressor",
            "IsolationForest"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        },
        {
          "module": "sklearn.linear_model",
          "names": [
            "LinearRegression",
            "Ridge"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "sklearn.metrics",
          "names": [
            "mean_squared_error",
            "mean_absolute_error",
            "r2_score"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 37
        },
        {
          "module": "sklearn.model_selection",
          "names": [
            "train_test_split"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        },
        {
          "module": "sklearn.preprocessing",
          "names": [
            "StandardScaler",
            "MinMaxScaler"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 39
        },
        {
          "module": "sklearn.cluster",
          "names": [
            "DBSCAN",
            "KMeans"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 40
        },
        {
          "module": "scipy.stats",
          "names": [
            "scipy.stats"
          ],
          "alias": "stats",
          "is_from_import": false,
          "line_number": 41
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "MetricSeries",
            "MetricDataPoint",
            "cross_system_analytics",
            "MetricType",
            "TrendDirection"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 44
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 48
        }
      ],
      "external_dependencies": "{'dataclasses', 'typing', 'sklearn.model_selection', 'json', 'uuid', 'pandas', 'sklearn.metrics', 'numpy', 'sklearn.cluster', 'warnings', 'cross_system_analytics', 'enum', 'asyncio', 'pathlib', 'logging', 'sklearn.ensemble', 'cross_system_apis', 'sklearn.preprocessing', 'datetime', 'collections', 'scipy.stats', 'time', 'sklearn.linear_model', 'pickle'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1061,
      "complexity_score": 3746,
      "api_surface_area": 18,
      "docstring": "Predictive Analytics Engine\n==========================\n\nAdvanced predictive analytics engine with machine learning models,\ntime series forecasting, and intelligent decision-making capabilities.\n\nIntegrates with:\n- Cross-System Analytics for historical data\n- Workflow Engine for predictive workflow optimization\n- All Unified Systems for real-time decision intelligence\n- Visual Dashboard for predictive insights visualization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "{'sklearn', 'pandas', 'numpy', 'scipy'}",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "high"
    },
    "integration\\realtime_performance_monitoring.py": {
      "file_path": "integration\\realtime_performance_monitoring.py",
      "component_name": "realtime_performance_monitoring",
      "analysis_timestamp": "2025-08-20 21:46:39.674855",
      "classes": [
        {
          "name": "AlertSeverity",
          "line_start": 48,
          "line_end": 53,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Alert severity levels",
          "decorators": []
        },
        {
          "name": "MetricCategory",
          "line_start": 56,
          "line_end": 63,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Performance metric categories",
          "decorators": []
        },
        {
          "name": "MonitoringMode",
          "line_start": 66,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Monitoring operation modes",
          "decorators": []
        },
        {
          "name": "PerformanceMetric",
          "line_start": 75,
          "line_end": 225,
          "base_classes": [],
          "methods": [
            {
              "name": "add_value",
              "line_start": 112,
              "line_end": 125,
              "args": [
                "self",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Add new metric value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_update_statistics",
              "line_start": 127,
              "line_end": 140,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update statistical properties",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_analyze_trend",
              "line_start": 142,
              "line_end": 166,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze trend in metric values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            },
            {
              "name": "_detect_anomalies",
              "line_start": 168,
              "line_end": 181,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect anomalies in metric values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "is_threshold_breached",
              "line_start": 183,
              "line_end": 195,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if current value breaches thresholds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "get_recent_values",
              "line_start": 197,
              "line_end": 203,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Get recent metric values with timestamps",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "to_dict",
              "line_start": 205,
              "line_end": 225,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert metric to dictionary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            }
          ],
          "docstring": "Performance metric definition",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PerformanceAlert",
          "line_start": 229,
          "line_end": 270,
          "base_classes": [],
          "methods": [
            {
              "name": "acknowledge",
              "line_start": 254,
              "line_end": 256,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Acknowledge the alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            },
            {
              "name": "resolve",
              "line_start": 258,
              "line_end": 261,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Resolve the alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "escalate",
              "line_start": 263,
              "line_end": 265,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Escalate the alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 12
            },
            {
              "name": "get_duration",
              "line_start": 267,
              "line_end": 270,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get alert duration in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            }
          ],
          "docstring": "Performance alert",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SystemHealthSnapshot",
          "line_start": 274,
          "line_end": 340,
          "base_classes": [],
          "methods": [
            {
              "name": "calculate_health_score",
              "line_start": 307,
              "line_end": 340,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall health score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            }
          ],
          "docstring": "System health snapshot",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RealTimePerformanceMonitoring",
          "line_start": 347,
          "line_end": 1409,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 353,
              "line_end": 400,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 220
            },
            {
              "name": "_initialize_system_metrics",
              "line_start": 402,
              "line_end": 441,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize default system metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 227
            },
            {
              "name": "_find_existing_alert",
              "line_start": 976,
              "line_end": 983,
              "args": [
                "self",
                "metric_id",
                "severity",
                "alert_type"
              ],
              "returns": null,
              "docstring": "Find existing alert for metric and severity",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_update_collection_latency",
              "line_start": 1116,
              "line_end": 1123,
              "args": [
                "self",
                "latency_ms"
              ],
              "returns": null,
              "docstring": "Update collection latency statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "add_custom_metric",
              "line_start": 1129,
              "line_end": 1137,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Add custom performance metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "register_alert_handler",
              "line_start": 1139,
              "line_end": 1142,
              "args": [
                "self",
                "severity",
                "handler"
              ],
              "returns": null,
              "docstring": "Register alert handler for specific severity",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "acknowledge_alert",
              "line_start": 1144,
              "line_end": 1151,
              "args": [
                "self",
                "alert_id"
              ],
              "returns": null,
              "docstring": "Acknowledge an alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "resolve_alert",
              "line_start": 1153,
              "line_end": 1160,
              "args": [
                "self",
                "alert_id"
              ],
              "returns": null,
              "docstring": "Manually resolve an alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "get_monitoring_status",
              "line_start": 1162,
              "line_end": 1177,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive monitoring system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "get_system_health_summary",
              "line_start": 1179,
              "line_end": 1198,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get system health summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "get_active_alerts",
              "line_start": 1200,
              "line_end": 1224,
              "args": [
                "self",
                "system"
              ],
              "returns": null,
              "docstring": "Get active alerts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "get_metric_details",
              "line_start": 1226,
              "line_end": 1239,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get detailed information about a specific metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "get_performance_dashboard_data",
              "line_start": 1241,
              "line_end": 1253,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive performance dashboard data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_get_performance_trends",
              "line_start": 1255,
              "line_end": 1275,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get performance trends summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_get_predictive_insights_summary",
              "line_start": 1277,
              "line_end": 1284,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get predictive insights summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "start_monitoring",
              "line_start": 1296,
              "line_end": 1306,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Start monitoring a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "stop_monitoring",
              "line_start": 1308,
              "line_end": 1313,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Stop monitoring a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "get_real_time_metrics",
              "line_start": 1315,
              "line_end": 1326,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real-time performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 25
            },
            {
              "name": "get_performance_alerts",
              "line_start": 1328,
              "line_end": 1333,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get performance alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "get_historical_metrics",
              "line_start": 1335,
              "line_end": 1345,
              "args": [
                "self",
                "duration_minutes"
              ],
              "returns": null,
              "docstring": "Get historical performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "get_current_metrics",
              "line_start": 1348,
              "line_end": 1350,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current metrics (alias).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 13
            },
            {
              "name": "get_performance_report",
              "line_start": 1352,
              "line_end": 1358,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get performance report.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "collect_metrics",
              "line_start": 1362,
              "line_end": 1364,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect current metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 13
            },
            {
              "name": "get_alerts",
              "line_start": 1366,
              "line_end": 1368,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 13
            },
            {
              "name": "record_metric",
              "line_start": 1371,
              "line_end": 1381,
              "args": [
                "self",
                "metric_name",
                "value",
                "tags"
              ],
              "returns": null,
              "docstring": "Record a metric value.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "set_alert_threshold",
              "line_start": 1383,
              "line_end": 1391,
              "args": [
                "self",
                "metric_name",
                "max_value",
                "min_value"
              ],
              "returns": null,
              "docstring": "Set alert thresholds for a metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "get_dashboard_data",
              "line_start": 1393,
              "line_end": 1400,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get data for dashboard display.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "get_alert_history",
              "line_start": 1402,
              "line_end": 1409,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get alert history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            }
          ],
          "docstring": "Comprehensive real-time performance monitoring system with intelligent\nalerting, predictive analytics integration, and automated response capabilities.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "add_value",
          "line_start": 112,
          "line_end": 125,
          "args": [
            "self",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Add new metric value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_update_statistics",
          "line_start": 127,
          "line_end": 140,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update statistical properties",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_analyze_trend",
          "line_start": 142,
          "line_end": 166,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze trend in metric values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "_detect_anomalies",
          "line_start": 168,
          "line_end": 181,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect anomalies in metric values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "is_threshold_breached",
          "line_start": 183,
          "line_end": 195,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if current value breaches thresholds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "get_recent_values",
          "line_start": 197,
          "line_end": 203,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Get recent metric values with timestamps",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "to_dict",
          "line_start": 205,
          "line_end": 225,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert metric to dictionary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "acknowledge",
          "line_start": 254,
          "line_end": 256,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Acknowledge the alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        },
        {
          "name": "resolve",
          "line_start": 258,
          "line_end": 261,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Resolve the alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "escalate",
          "line_start": 263,
          "line_end": 265,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Escalate the alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 12
        },
        {
          "name": "get_duration",
          "line_start": 267,
          "line_end": 270,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get alert duration in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "calculate_health_score",
          "line_start": 307,
          "line_end": 340,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall health score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "__init__",
          "line_start": 353,
          "line_end": 400,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 220
        },
        {
          "name": "_initialize_system_metrics",
          "line_start": 402,
          "line_end": 441,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize default system metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 227
        },
        {
          "name": "_find_existing_alert",
          "line_start": 976,
          "line_end": 983,
          "args": [
            "self",
            "metric_id",
            "severity",
            "alert_type"
          ],
          "returns": null,
          "docstring": "Find existing alert for metric and severity",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_update_collection_latency",
          "line_start": 1116,
          "line_end": 1123,
          "args": [
            "self",
            "latency_ms"
          ],
          "returns": null,
          "docstring": "Update collection latency statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "add_custom_metric",
          "line_start": 1129,
          "line_end": 1137,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Add custom performance metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "register_alert_handler",
          "line_start": 1139,
          "line_end": 1142,
          "args": [
            "self",
            "severity",
            "handler"
          ],
          "returns": null,
          "docstring": "Register alert handler for specific severity",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "acknowledge_alert",
          "line_start": 1144,
          "line_end": 1151,
          "args": [
            "self",
            "alert_id"
          ],
          "returns": null,
          "docstring": "Acknowledge an alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "resolve_alert",
          "line_start": 1153,
          "line_end": 1160,
          "args": [
            "self",
            "alert_id"
          ],
          "returns": null,
          "docstring": "Manually resolve an alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "get_monitoring_status",
          "line_start": 1162,
          "line_end": 1177,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive monitoring system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "get_system_health_summary",
          "line_start": 1179,
          "line_end": 1198,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get system health summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "get_active_alerts",
          "line_start": 1200,
          "line_end": 1224,
          "args": [
            "self",
            "system"
          ],
          "returns": null,
          "docstring": "Get active alerts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "get_metric_details",
          "line_start": 1226,
          "line_end": 1239,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get detailed information about a specific metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "get_performance_dashboard_data",
          "line_start": 1241,
          "line_end": 1253,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive performance dashboard data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_get_performance_trends",
          "line_start": 1255,
          "line_end": 1275,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get performance trends summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_get_predictive_insights_summary",
          "line_start": 1277,
          "line_end": 1284,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get predictive insights summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "start_monitoring",
          "line_start": 1296,
          "line_end": 1306,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Start monitoring a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "stop_monitoring",
          "line_start": 1308,
          "line_end": 1313,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Stop monitoring a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "get_real_time_metrics",
          "line_start": 1315,
          "line_end": 1326,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real-time performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 25
        },
        {
          "name": "get_performance_alerts",
          "line_start": 1328,
          "line_end": 1333,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get performance alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "get_historical_metrics",
          "line_start": 1335,
          "line_end": 1345,
          "args": [
            "self",
            "duration_minutes"
          ],
          "returns": null,
          "docstring": "Get historical performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "get_current_metrics",
          "line_start": 1348,
          "line_end": 1350,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current metrics (alias).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "get_performance_report",
          "line_start": 1352,
          "line_end": 1358,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get performance report.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "collect_metrics",
          "line_start": 1362,
          "line_end": 1364,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect current metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "get_alerts",
          "line_start": 1366,
          "line_end": 1368,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "record_metric",
          "line_start": 1371,
          "line_end": 1381,
          "args": [
            "self",
            "metric_name",
            "value",
            "tags"
          ],
          "returns": null,
          "docstring": "Record a metric value.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "set_alert_threshold",
          "line_start": 1383,
          "line_end": 1391,
          "args": [
            "self",
            "metric_name",
            "max_value",
            "min_value"
          ],
          "returns": null,
          "docstring": "Set alert thresholds for a metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "get_dashboard_data",
          "line_start": 1393,
          "line_end": 1400,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get data for dashboard display.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "get_alert_history",
          "line_start": 1402,
          "line_end": 1409,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get alert history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 30
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "socket",
          "names": [
            "socket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 32
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics",
            "MetricType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 37
        },
        {
          "module": "predictive_analytics_engine",
          "names": [
            "predictive_analytics_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        },
        {
          "module": "automatic_scaling_system",
          "names": [
            "automatic_scaling_system"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 39
        },
        {
          "module": "comprehensive_error_recovery",
          "names": [
            "comprehensive_error_recovery",
            "ErrorSeverity",
            "ErrorCategory"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 40
        },
        {
          "module": "intelligent_caching_layer",
          "names": [
            "intelligent_caching_layer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 41
        }
      ],
      "external_dependencies": "{'dataclasses', 'typing', 'socket', 'json', 'uuid', 'psutil', 'cross_system_analytics', 'automatic_scaling_system', 'enum', 'threading', 'asyncio', 'statistics', 'intelligent_caching_layer', 'logging', 'concurrent.futures', 'cross_system_apis', 'datetime', 'collections', 'comprehensive_error_recovery', 'time', 'predictive_analytics_engine'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1427,
      "complexity_score": 5848,
      "api_surface_area": 62,
      "docstring": "Real-Time Performance Monitoring System\n=======================================\n\nAdvanced real-time performance monitoring system that provides comprehensive\nsystem health tracking, performance bottleneck detection, and intelligent\nalerting across all unified systems.\n\nIntegrates with:\n- Cross-System Analytics for performance data correlation\n- Predictive Analytics Engine for performance forecasting\n- Automatic Scaling System for performance-based scaling\n- Comprehensive Error Recovery for performance incident handling\n- Intelligent Caching Layer for performance optimization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\realtime_performance_monitoring_robust.py": {
      "file_path": "integration\\realtime_performance_monitoring_robust.py",
      "component_name": "realtime_performance_monitoring_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.692172",
      "classes": [
        {
          "name": "AlertSeverity",
          "line_start": 48,
          "line_end": 53,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Alert severity levels",
          "decorators": []
        },
        {
          "name": "MetricCategory",
          "line_start": 56,
          "line_end": 63,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Performance metric categories",
          "decorators": []
        },
        {
          "name": "MonitoringMode",
          "line_start": 66,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Monitoring operation modes",
          "decorators": []
        },
        {
          "name": "PerformanceMetric",
          "line_start": 75,
          "line_end": 225,
          "base_classes": [],
          "methods": [
            {
              "name": "add_value",
              "line_start": 112,
              "line_end": 125,
              "args": [
                "self",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Add new metric value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_update_statistics",
              "line_start": 127,
              "line_end": 140,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update statistical properties",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_analyze_trend",
              "line_start": 142,
              "line_end": 166,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze trend in metric values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            },
            {
              "name": "_detect_anomalies",
              "line_start": 168,
              "line_end": 181,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect anomalies in metric values",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "is_threshold_breached",
              "line_start": 183,
              "line_end": 195,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if current value breaches thresholds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "get_recent_values",
              "line_start": 197,
              "line_end": 203,
              "args": [
                "self",
                "count"
              ],
              "returns": null,
              "docstring": "Get recent metric values with timestamps",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "to_dict",
              "line_start": 205,
              "line_end": 225,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert metric to dictionary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            }
          ],
          "docstring": "Performance metric definition",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PerformanceAlert",
          "line_start": 229,
          "line_end": 271,
          "base_classes": [],
          "methods": [
            {
              "name": "acknowledge",
              "line_start": 255,
              "line_end": 257,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Acknowledge the alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            },
            {
              "name": "resolve",
              "line_start": 259,
              "line_end": 262,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Resolve the alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "escalate",
              "line_start": 264,
              "line_end": 266,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Escalate the alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 12
            },
            {
              "name": "get_duration",
              "line_start": 268,
              "line_end": 271,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get alert duration in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            }
          ],
          "docstring": "Performance alert",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SystemHealthSnapshot",
          "line_start": 275,
          "line_end": 338,
          "base_classes": [],
          "methods": [
            {
              "name": "calculate_health_score",
              "line_start": 305,
              "line_end": 338,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall health score",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            }
          ],
          "docstring": "System health snapshot",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RealTimePerformanceMonitoring",
          "line_start": 345,
          "line_end": 1282,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 351,
              "line_end": 398,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_initialize_system_metrics",
              "line_start": 400,
              "line_end": 439,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize default system metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 227
            },
            {
              "name": "_find_existing_alert",
              "line_start": 974,
              "line_end": 981,
              "args": [
                "self",
                "metric_id",
                "severity",
                "alert_type"
              ],
              "returns": null,
              "docstring": "Find existing alert for metric and severity",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_update_collection_latency",
              "line_start": 1114,
              "line_end": 1121,
              "args": [
                "self",
                "latency_ms"
              ],
              "returns": null,
              "docstring": "Update collection latency statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "add_custom_metric",
              "line_start": 1127,
              "line_end": 1135,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Add custom performance metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "register_alert_handler",
              "line_start": 1137,
              "line_end": 1140,
              "args": [
                "self",
                "severity",
                "handler"
              ],
              "returns": null,
              "docstring": "Register alert handler for specific severity",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "acknowledge_alert",
              "line_start": 1142,
              "line_end": 1149,
              "args": [
                "self",
                "alert_id"
              ],
              "returns": null,
              "docstring": "Acknowledge an alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "resolve_alert",
              "line_start": 1151,
              "line_end": 1158,
              "args": [
                "self",
                "alert_id"
              ],
              "returns": null,
              "docstring": "Manually resolve an alert",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "get_monitoring_status",
              "line_start": 1160,
              "line_end": 1175,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive monitoring system status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "get_system_health_summary",
              "line_start": 1177,
              "line_end": 1196,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get system health summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "get_active_alerts",
              "line_start": 1198,
              "line_end": 1222,
              "args": [
                "self",
                "system"
              ],
              "returns": null,
              "docstring": "Get active alerts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "get_metric_details",
              "line_start": 1224,
              "line_end": 1237,
              "args": [
                "self",
                "metric_id"
              ],
              "returns": null,
              "docstring": "Get detailed information about a specific metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "get_performance_dashboard_data",
              "line_start": 1239,
              "line_end": 1251,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive performance dashboard data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_get_performance_trends",
              "line_start": 1253,
              "line_end": 1273,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get performance trends summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_get_predictive_insights_summary",
              "line_start": 1275,
              "line_end": 1282,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get predictive insights summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            }
          ],
          "docstring": "Comprehensive real-time performance monitoring system with intelligent\nalerting, predictive analytics integration, and automated response capabilities.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "add_value",
          "line_start": 112,
          "line_end": 125,
          "args": [
            "self",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Add new metric value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_update_statistics",
          "line_start": 127,
          "line_end": 140,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update statistical properties",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_analyze_trend",
          "line_start": 142,
          "line_end": 166,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze trend in metric values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "_detect_anomalies",
          "line_start": 168,
          "line_end": 181,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect anomalies in metric values",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "is_threshold_breached",
          "line_start": 183,
          "line_end": 195,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if current value breaches thresholds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "get_recent_values",
          "line_start": 197,
          "line_end": 203,
          "args": [
            "self",
            "count"
          ],
          "returns": null,
          "docstring": "Get recent metric values with timestamps",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "to_dict",
          "line_start": 205,
          "line_end": 225,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert metric to dictionary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "acknowledge",
          "line_start": 255,
          "line_end": 257,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Acknowledge the alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        },
        {
          "name": "resolve",
          "line_start": 259,
          "line_end": 262,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Resolve the alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "escalate",
          "line_start": 264,
          "line_end": 266,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Escalate the alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 12
        },
        {
          "name": "get_duration",
          "line_start": 268,
          "line_end": 271,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get alert duration in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "calculate_health_score",
          "line_start": 305,
          "line_end": 338,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall health score",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "__init__",
          "line_start": 351,
          "line_end": 398,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_initialize_system_metrics",
          "line_start": 400,
          "line_end": 439,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize default system metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 227
        },
        {
          "name": "_find_existing_alert",
          "line_start": 974,
          "line_end": 981,
          "args": [
            "self",
            "metric_id",
            "severity",
            "alert_type"
          ],
          "returns": null,
          "docstring": "Find existing alert for metric and severity",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_update_collection_latency",
          "line_start": 1114,
          "line_end": 1121,
          "args": [
            "self",
            "latency_ms"
          ],
          "returns": null,
          "docstring": "Update collection latency statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "add_custom_metric",
          "line_start": 1127,
          "line_end": 1135,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Add custom performance metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "register_alert_handler",
          "line_start": 1137,
          "line_end": 1140,
          "args": [
            "self",
            "severity",
            "handler"
          ],
          "returns": null,
          "docstring": "Register alert handler for specific severity",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "acknowledge_alert",
          "line_start": 1142,
          "line_end": 1149,
          "args": [
            "self",
            "alert_id"
          ],
          "returns": null,
          "docstring": "Acknowledge an alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "resolve_alert",
          "line_start": 1151,
          "line_end": 1158,
          "args": [
            "self",
            "alert_id"
          ],
          "returns": null,
          "docstring": "Manually resolve an alert",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "get_monitoring_status",
          "line_start": 1160,
          "line_end": 1175,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive monitoring system status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "get_system_health_summary",
          "line_start": 1177,
          "line_end": 1196,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get system health summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "get_active_alerts",
          "line_start": 1198,
          "line_end": 1222,
          "args": [
            "self",
            "system"
          ],
          "returns": null,
          "docstring": "Get active alerts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "get_metric_details",
          "line_start": 1224,
          "line_end": 1237,
          "args": [
            "self",
            "metric_id"
          ],
          "returns": null,
          "docstring": "Get detailed information about a specific metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "get_performance_dashboard_data",
          "line_start": 1239,
          "line_end": 1251,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive performance dashboard data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_get_performance_trends",
          "line_start": 1253,
          "line_end": 1273,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get performance trends summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_get_predictive_insights_summary",
          "line_start": 1275,
          "line_end": 1282,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get predictive insights summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 30
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "socket",
          "names": [
            "socket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 32
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 36
        },
        {
          "module": "cross_system_analytics",
          "names": [
            "cross_system_analytics",
            "MetricType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 37
        },
        {
          "module": "predictive_analytics_engine",
          "names": [
            "predictive_analytics_engine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        },
        {
          "module": "automatic_scaling_system",
          "names": [
            "automatic_scaling_system"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 39
        },
        {
          "module": "comprehensive_error_recovery",
          "names": [
            "comprehensive_error_recovery",
            "ErrorSeverity",
            "ErrorCategory"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 40
        },
        {
          "module": "intelligent_caching_layer",
          "names": [
            "intelligent_caching_layer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 41
        }
      ],
      "external_dependencies": "{'dataclasses', 'typing', 'socket', 'json', 'uuid', 'psutil', 'cross_system_analytics', 'automatic_scaling_system', 'enum', 'threading', 'asyncio', 'statistics', 'intelligent_caching_layer', 'logging', 'concurrent.futures', 'cross_system_apis', 'datetime', 'collections', 'comprehensive_error_recovery', 'time', 'predictive_analytics_engine'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1302,
      "complexity_score": 4948,
      "api_surface_area": 36,
      "docstring": "Real-Time Performance Monitoring System\n=======================================\n\nAdvanced real-time performance monitoring system that provides comprehensive\nsystem health tracking, performance bottleneck detection, and intelligent\nalerting across all unified systems.\n\nIntegrates with:\n- Cross-System Analytics for performance data correlation\n- Predictive Analytics Engine for performance forecasting\n- Automatic Scaling System for performance-based scaling\n- Comprehensive Error Recovery for performance incident handling\n- Intelligent Caching Layer for performance optimization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\resource_optimization_engine.py": {
      "file_path": "integration\\resource_optimization_engine.py",
      "component_name": "resource_optimization_engine",
      "analysis_timestamp": "2025-08-20 21:46:39.704758",
      "classes": [
        {
          "name": "ResourceType",
          "line_start": 21,
          "line_end": 27,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "System resource types.",
          "decorators": []
        },
        {
          "name": "OptimizationStrategy",
          "line_start": 29,
          "line_end": 34,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Resource optimization strategies.",
          "decorators": []
        },
        {
          "name": "SystemResources",
          "line_start": 37,
          "line_end": 45,
          "base_classes": [],
          "methods": [],
          "docstring": "Current system resource availability.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "OptimizationRule",
          "line_start": 48,
          "line_end": 56,
          "base_classes": [],
          "methods": [],
          "docstring": "Resource optimization rule.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ResourceMonitor",
          "line_start": 58,
          "line_end": 195,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 61,
              "line_end": 67,
              "args": [
                "self",
                "update_interval"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "start_monitoring",
              "line_start": 69,
              "line_end": 75,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start resource monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_monitoring",
              "line_start": 77,
              "line_end": 82,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop resource monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "_monitor_loop",
              "line_start": 84,
              "line_end": 130,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 184
            },
            {
              "name": "_check_resource_alerts",
              "line_start": 132,
              "line_end": 152,
              "args": [
                "self",
                "resources"
              ],
              "returns": null,
              "docstring": "Check for resource alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "get_resource_trends",
              "line_start": 154,
              "line_end": 169,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get resource usage trends.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "can_handle_load",
              "line_start": 171,
              "line_end": 180,
              "args": [
                "self",
                "estimated_cpu",
                "estimated_memory"
              ],
              "returns": null,
              "docstring": "Check if system can handle additional load.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "get_optimal_concurrency",
              "line_start": 182,
              "line_end": 195,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimal concurrency based on current resources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            }
          ],
          "docstring": "Advanced system resource monitoring.",
          "decorators": []
        },
        {
          "name": "ResourceOptimizer",
          "line_start": 197,
          "line_end": 329,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 200,
              "line_end": 206,
              "args": [
                "self",
                "strategy"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "_setup_default_rules",
              "line_start": 208,
              "line_end": 216,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default optimization rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "add_optimization_rule",
              "line_start": 218,
              "line_end": 222,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add custom optimization rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "optimize_resources",
              "line_start": 224,
              "line_end": 260,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform resource optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_get_resource_value",
              "line_start": 262,
              "line_end": 272,
              "args": [
                "self",
                "resources",
                "resource_type"
              ],
              "returns": null,
              "docstring": "Get resource value by type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "_execute_optimization_action",
              "line_start": 274,
              "line_end": 291,
              "args": [
                "self",
                "rule",
                "resource_value"
              ],
              "returns": null,
              "docstring": "Execute optimization action.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "get_optimization_recommendations",
              "line_start": 293,
              "line_end": 329,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimization recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            }
          ],
          "docstring": "Advanced resource optimization engine.",
          "decorators": []
        },
        {
          "name": "ResourceOptimizationEngine",
          "line_start": 331,
          "line_end": 571,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 334,
              "line_end": 344,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "process",
              "line_start": 346,
              "line_end": 368,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Process data through optimization engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 155
            },
            {
              "name": "health_check",
              "line_start": 370,
              "line_end": 374,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check health of optimization engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "get_comprehensive_metrics",
              "line_start": 376,
              "line_end": 399,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive optimization metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "shutdown",
              "line_start": 401,
              "line_end": 404,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown optimization engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "analyze_resource_usage",
              "line_start": 411,
              "line_end": 418,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze current resource usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "suggest_optimizations",
              "line_start": 420,
              "line_end": 426,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Suggest resource optimizations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "apply_optimization",
              "line_start": 428,
              "line_end": 435,
              "args": [
                "self",
                "optimization_type"
              ],
              "returns": null,
              "docstring": "Apply a specific optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "get_optimization_history",
              "line_start": 437,
              "line_end": 442,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimization history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "calculate_cost_savings",
              "line_start": 444,
              "line_end": 451,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cost savings from optimizations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 17
            },
            {
              "name": "analyze_resources",
              "line_start": 454,
              "line_end": 456,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze resources (alias).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 13
            },
            {
              "name": "optimize_resources",
              "line_start": 458,
              "line_end": 465,
              "args": [
                "self",
                "target"
              ],
              "returns": null,
              "docstring": "Optimize resources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "get_optimization_report",
              "line_start": 467,
              "line_end": 473,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimization report.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "get_optimization_suggestions",
              "line_start": 477,
              "line_end": 479,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimization suggestions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 13
            },
            {
              "name": "register_resource",
              "line_start": 482,
              "line_end": 491,
              "args": [
                "self",
                "resource_name",
                "capacity",
                "current_usage"
              ],
              "returns": null,
              "docstring": "Register a resource with its capacity and usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "optimize_allocation",
              "line_start": 493,
              "line_end": 515,
              "args": [
                "self",
                "requested"
              ],
              "returns": null,
              "docstring": "Optimize resource allocation for requested resources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "predict_resource_needs",
              "line_start": 517,
              "line_end": 533,
              "args": [
                "self",
                "time_horizon"
              ],
              "returns": null,
              "docstring": "Predict future resource needs.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "get_scaling_recommendations",
              "line_start": 535,
              "line_end": 556,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get scaling recommendations based on resource usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "calculate_efficiency",
              "line_start": 558,
              "line_end": 571,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate resource efficiency metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            }
          ],
          "docstring": "Comprehensive resource optimization engine.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 61,
          "line_end": 67,
          "args": [
            "self",
            "update_interval"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "start_monitoring",
          "line_start": 69,
          "line_end": 75,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start resource monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_monitoring",
          "line_start": 77,
          "line_end": 82,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop resource monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "_monitor_loop",
          "line_start": 84,
          "line_end": 130,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        },
        {
          "name": "_check_resource_alerts",
          "line_start": 132,
          "line_end": 152,
          "args": [
            "self",
            "resources"
          ],
          "returns": null,
          "docstring": "Check for resource alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "get_resource_trends",
          "line_start": 154,
          "line_end": 169,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get resource usage trends.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "can_handle_load",
          "line_start": 171,
          "line_end": 180,
          "args": [
            "self",
            "estimated_cpu",
            "estimated_memory"
          ],
          "returns": null,
          "docstring": "Check if system can handle additional load.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "get_optimal_concurrency",
          "line_start": 182,
          "line_end": 195,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimal concurrency based on current resources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "__init__",
          "line_start": 200,
          "line_end": 206,
          "args": [
            "self",
            "strategy"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "_setup_default_rules",
          "line_start": 208,
          "line_end": 216,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default optimization rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "add_optimization_rule",
          "line_start": 218,
          "line_end": 222,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add custom optimization rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "optimize_resources",
          "line_start": 224,
          "line_end": 260,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform resource optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_get_resource_value",
          "line_start": 262,
          "line_end": 272,
          "args": [
            "self",
            "resources",
            "resource_type"
          ],
          "returns": null,
          "docstring": "Get resource value by type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "_execute_optimization_action",
          "line_start": 274,
          "line_end": 291,
          "args": [
            "self",
            "rule",
            "resource_value"
          ],
          "returns": null,
          "docstring": "Execute optimization action.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "get_optimization_recommendations",
          "line_start": 293,
          "line_end": 329,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimization recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "__init__",
          "line_start": 334,
          "line_end": 344,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "process",
          "line_start": 346,
          "line_end": 368,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Process data through optimization engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 155
        },
        {
          "name": "health_check",
          "line_start": 370,
          "line_end": 374,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check health of optimization engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "get_comprehensive_metrics",
          "line_start": 376,
          "line_end": 399,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive optimization metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "shutdown",
          "line_start": 401,
          "line_end": 404,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown optimization engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "analyze_resource_usage",
          "line_start": 411,
          "line_end": 418,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze current resource usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "suggest_optimizations",
          "line_start": 420,
          "line_end": 426,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Suggest resource optimizations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "apply_optimization",
          "line_start": 428,
          "line_end": 435,
          "args": [
            "self",
            "optimization_type"
          ],
          "returns": null,
          "docstring": "Apply a specific optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "get_optimization_history",
          "line_start": 437,
          "line_end": 442,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimization history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "calculate_cost_savings",
          "line_start": 444,
          "line_end": 451,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cost savings from optimizations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 17
        },
        {
          "name": "analyze_resources",
          "line_start": 454,
          "line_end": 456,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze resources (alias).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "optimize_resources",
          "line_start": 458,
          "line_end": 465,
          "args": [
            "self",
            "target"
          ],
          "returns": null,
          "docstring": "Optimize resources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "get_optimization_report",
          "line_start": 467,
          "line_end": 473,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimization report.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "get_optimization_suggestions",
          "line_start": 477,
          "line_end": 479,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimization suggestions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "register_resource",
          "line_start": 482,
          "line_end": 491,
          "args": [
            "self",
            "resource_name",
            "capacity",
            "current_usage"
          ],
          "returns": null,
          "docstring": "Register a resource with its capacity and usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "optimize_allocation",
          "line_start": 493,
          "line_end": 515,
          "args": [
            "self",
            "requested"
          ],
          "returns": null,
          "docstring": "Optimize resource allocation for requested resources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "predict_resource_needs",
          "line_start": 517,
          "line_end": 533,
          "args": [
            "self",
            "time_horizon"
          ],
          "returns": null,
          "docstring": "Predict future resource needs.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "get_scaling_recommendations",
          "line_start": 535,
          "line_end": 556,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get scaling recommendations based on resource usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "calculate_efficiency",
          "line_start": 558,
          "line_end": 571,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate resource efficiency metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 8
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 9
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 10
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 12
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "gc",
          "names": [
            "gc"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 284
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'dataclasses', 'logging', 'enum', 'threading', 'gc', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 574,
      "complexity_score": 5056,
      "api_surface_area": 52,
      "docstring": "Resource Optimization Engine\n==================================================\nComprehensive resource optimization with monitoring and adaptive execution.\nRestored from execution optimizer archive.",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9512195121951219,
      "estimated_migration_complexity": "medium"
    },
    "integration\\service_mesh_integration.py": {
      "file_path": "integration\\service_mesh_integration.py",
      "component_name": "service_mesh_integration",
      "analysis_timestamp": "2025-08-20 21:46:39.713608",
      "classes": [
        {
          "name": "ServiceProtocol",
          "line_start": 39,
          "line_end": 47,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Service communication protocols.",
          "decorators": []
        },
        {
          "name": "ServiceStatus",
          "line_start": 49,
          "line_end": 56,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Service health status.",
          "decorators": []
        },
        {
          "name": "TrafficStrategy",
          "line_start": 58,
          "line_end": 65,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Traffic management strategies.",
          "decorators": []
        },
        {
          "name": "CircuitState",
          "line_start": 67,
          "line_end": 71,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Circuit breaker states.",
          "decorators": []
        },
        {
          "name": "ServiceEndpoint",
          "line_start": 74,
          "line_end": 101,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a service endpoint.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TrafficPolicy",
          "line_start": 104,
          "line_end": 121,
          "base_classes": [],
          "methods": [],
          "docstring": "Traffic management policy.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CircuitBreaker",
          "line_start": 124,
          "line_end": 179,
          "base_classes": [],
          "methods": [
            {
              "name": "record_success",
              "line_start": 141,
              "line_end": 151,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record successful request.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "record_failure",
              "line_start": 153,
              "line_end": 164,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Record failed request.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "should_attempt_request",
              "line_start": 166,
              "line_end": 179,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if request should be attempted.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            }
          ],
          "docstring": "Circuit breaker configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ServiceDependency",
          "line_start": 182,
          "line_end": 188,
          "base_classes": [],
          "methods": [],
          "docstring": "Service dependency mapping.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ServiceMeshIntegration",
          "line_start": 190,
          "line_end": 622,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 193,
              "line_end": 231,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "register_service",
              "line_start": 233,
              "line_end": 273,
              "args": [
                "self",
                "service_name",
                "config"
              ],
              "returns": null,
              "docstring": "Register a service in the mesh.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 236
            },
            {
              "name": "discover_services",
              "line_start": 275,
              "line_end": 280,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Discover all available services in the mesh.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "find_service",
              "line_start": 282,
              "line_end": 298,
              "args": [
                "self",
                "service_name"
              ],
              "returns": null,
              "docstring": "Find a specific service and return its configuration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "configure_traffic_split",
              "line_start": 300,
              "line_end": 312,
              "args": [
                "self",
                "service_name",
                "split_config"
              ],
              "returns": null,
              "docstring": "Configure traffic splitting for a service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "enable_circuit_breaker",
              "line_start": 314,
              "line_end": 324,
              "args": [
                "self",
                "service_name",
                "config"
              ],
              "returns": null,
              "docstring": "Enable circuit breaker for a service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "route_traffic",
              "line_start": 326,
              "line_end": 372,
              "args": [
                "self",
                "service",
                "request"
              ],
              "returns": null,
              "docstring": "Route traffic to a service based on policies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 220
            },
            {
              "name": "_select_endpoint",
              "line_start": 374,
              "line_end": 398,
              "args": [
                "self",
                "service",
                "request"
              ],
              "returns": null,
              "docstring": "Select endpoint based on traffic policy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "get_service_metrics",
              "line_start": 400,
              "line_end": 428,
              "args": [
                "self",
                "service_name"
              ],
              "returns": null,
              "docstring": "Get detailed metrics for a service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 200
            },
            {
              "name": "get_mesh_status",
              "line_start": 430,
              "line_end": 450,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get overall mesh status and health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 154
            },
            {
              "name": "get_mesh_health",
              "line_start": 452,
              "line_end": 459,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get mesh health status (compatibility method).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "get_service_topology",
              "line_start": 461,
              "line_end": 486,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get service dependency topology.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "enable_canary_deployment",
              "line_start": 488,
              "line_end": 500,
              "args": [
                "self",
                "service",
                "canary_version",
                "percentage"
              ],
              "returns": null,
              "docstring": "Enable canary deployment for gradual rollout.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "enable_traffic_mirroring",
              "line_start": 502,
              "line_end": 517,
              "args": [
                "self",
                "service",
                "mirror_to",
                "percentage"
              ],
              "returns": null,
              "docstring": "Enable traffic mirroring for testing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "_start_health_check",
              "line_start": 519,
              "line_end": 545,
              "args": [
                "self",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Start health checking for an endpoint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 189
            },
            {
              "name": "_monitor_services",
              "line_start": 547,
              "line_end": 571,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring of services.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_record_trace",
              "line_start": 573,
              "line_end": 595,
              "args": [
                "self",
                "service",
                "endpoint",
                "request",
                "latency_ms",
                "success"
              ],
              "returns": null,
              "docstring": "Record distributed trace.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_notify_service_discovery",
              "line_start": 597,
              "line_end": 603,
              "args": [
                "self",
                "service",
                "event"
              ],
              "returns": null,
              "docstring": "Notify service discovery callbacks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "shutdown",
              "line_start": 605,
              "line_end": 609,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Gracefully shutdown the service mesh.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "enable_service_discovery",
              "line_start": 612,
              "line_end": 616,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Enable service discovery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "enable_load_balancing",
              "line_start": 618,
              "line_end": 622,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Enable load balancing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            }
          ],
          "docstring": "Comprehensive service mesh implementation.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "record_success",
          "line_start": 141,
          "line_end": 151,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record successful request.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "record_failure",
          "line_start": 153,
          "line_end": 164,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Record failed request.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "should_attempt_request",
          "line_start": 166,
          "line_end": 179,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if request should be attempted.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "__init__",
          "line_start": 193,
          "line_end": 231,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "register_service",
          "line_start": 233,
          "line_end": 273,
          "args": [
            "self",
            "service_name",
            "config"
          ],
          "returns": null,
          "docstring": "Register a service in the mesh.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 236
        },
        {
          "name": "discover_services",
          "line_start": 275,
          "line_end": 280,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Discover all available services in the mesh.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "find_service",
          "line_start": 282,
          "line_end": 298,
          "args": [
            "self",
            "service_name"
          ],
          "returns": null,
          "docstring": "Find a specific service and return its configuration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "configure_traffic_split",
          "line_start": 300,
          "line_end": 312,
          "args": [
            "self",
            "service_name",
            "split_config"
          ],
          "returns": null,
          "docstring": "Configure traffic splitting for a service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "enable_circuit_breaker",
          "line_start": 314,
          "line_end": 324,
          "args": [
            "self",
            "service_name",
            "config"
          ],
          "returns": null,
          "docstring": "Enable circuit breaker for a service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "route_traffic",
          "line_start": 326,
          "line_end": 372,
          "args": [
            "self",
            "service",
            "request"
          ],
          "returns": null,
          "docstring": "Route traffic to a service based on policies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 220
        },
        {
          "name": "_select_endpoint",
          "line_start": 374,
          "line_end": 398,
          "args": [
            "self",
            "service",
            "request"
          ],
          "returns": null,
          "docstring": "Select endpoint based on traffic policy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "get_service_metrics",
          "line_start": 400,
          "line_end": 428,
          "args": [
            "self",
            "service_name"
          ],
          "returns": null,
          "docstring": "Get detailed metrics for a service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 200
        },
        {
          "name": "get_mesh_status",
          "line_start": 430,
          "line_end": 450,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get overall mesh status and health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 154
        },
        {
          "name": "get_mesh_health",
          "line_start": 452,
          "line_end": 459,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get mesh health status (compatibility method).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "get_service_topology",
          "line_start": 461,
          "line_end": 486,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get service dependency topology.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "enable_canary_deployment",
          "line_start": 488,
          "line_end": 500,
          "args": [
            "self",
            "service",
            "canary_version",
            "percentage"
          ],
          "returns": null,
          "docstring": "Enable canary deployment for gradual rollout.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "enable_traffic_mirroring",
          "line_start": 502,
          "line_end": 517,
          "args": [
            "self",
            "service",
            "mirror_to",
            "percentage"
          ],
          "returns": null,
          "docstring": "Enable traffic mirroring for testing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "_start_health_check",
          "line_start": 519,
          "line_end": 545,
          "args": [
            "self",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Start health checking for an endpoint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 189
        },
        {
          "name": "_monitor_services",
          "line_start": 547,
          "line_end": 571,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring of services.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_record_trace",
          "line_start": 573,
          "line_end": 595,
          "args": [
            "self",
            "service",
            "endpoint",
            "request",
            "latency_ms",
            "success"
          ],
          "returns": null,
          "docstring": "Record distributed trace.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_notify_service_discovery",
          "line_start": 597,
          "line_end": 603,
          "args": [
            "self",
            "service",
            "event"
          ],
          "returns": null,
          "docstring": "Notify service discovery callbacks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "shutdown",
          "line_start": 605,
          "line_end": 609,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Gracefully shutdown the service mesh.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "enable_service_discovery",
          "line_start": 612,
          "line_end": 616,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Enable service discovery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "enable_load_balancing",
          "line_start": 618,
          "line_end": 622,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Enable load balancing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "check_health",
          "line_start": 521,
          "line_end": 543,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "random",
          "names": [
            "random"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 26
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 27
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 31
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Set",
            "Tuple",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 34
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 35
        }
      ],
      "external_dependencies": "{'random', 'dataclasses', 'typing', 'time', 'json', 'logging', 'concurrent.futures', 'enum', 'threading', 'uuid', 'hashlib', 'traceback', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 625,
      "complexity_score": 5525,
      "api_surface_area": 37,
      "docstring": "Service Mesh Integration\n========================\n\nComprehensive service mesh implementation with service discovery, traffic management,\nobservability, and security features for microservices architecture.\n\nFeatures:\n- Automatic service discovery and registration\n- Advanced traffic management (routing, splitting, mirroring)\n- Circuit breakers and retry policies\n- Distributed tracing and observability\n- mTLS and security policies\n- Canary deployments and A/B testing\n- Health checking and automatic recovery\n- Service dependency mapping\n\nAuthor: TestMaster Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9705882352941176,
      "estimated_migration_complexity": "medium"
    },
    "integration\\visual_workflow_designer.py": {
      "file_path": "integration\\visual_workflow_designer.py",
      "component_name": "visual_workflow_designer",
      "analysis_timestamp": "2025-08-20 21:46:39.723602",
      "classes": [
        {
          "name": "NodeType",
          "line_start": 41,
          "line_end": 53,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Visual node types in workflow designer",
          "decorators": []
        },
        {
          "name": "ConnectionType",
          "line_start": 56,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Connection types between nodes",
          "decorators": []
        },
        {
          "name": "VisualNode",
          "line_start": 65,
          "line_end": 117,
          "base_classes": [],
          "methods": [
            {
              "name": "to_workflow_step",
              "line_start": 88,
              "line_end": 101,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert visual node to workflow step",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_map_node_type_to_step_type",
              "line_start": 103,
              "line_end": 117,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Map visual node type to workflow step type",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            }
          ],
          "docstring": "Visual node in workflow designer",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "VisualConnection",
          "line_start": 121,
          "line_end": 138,
          "base_classes": [],
          "methods": [],
          "docstring": "Connection between visual nodes",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowDesignSession",
          "line_start": 142,
          "line_end": 334,
          "base_classes": [],
          "methods": [
            {
              "name": "add_node",
              "line_start": 164,
              "line_end": 171,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Add node to design session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "add_connection",
              "line_start": 173,
              "line_end": 182,
              "args": [
                "self",
                "connection"
              ],
              "returns": null,
              "docstring": "Add connection to design session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "remove_node",
              "line_start": 184,
              "line_end": 203,
              "args": [
                "self",
                "node_id"
              ],
              "returns": null,
              "docstring": "Remove node and associated connections",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "validate_design",
              "line_start": 205,
              "line_end": 239,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Validate the workflow design",
              "is_async": false,
              "decorators": [],
              "complexity_score": 256
            },
            {
              "name": "_validate_node",
              "line_start": 241,
              "line_end": 262,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Validate individual node",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "_has_invalid_cycles",
              "line_start": 264,
              "line_end": 301,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for invalid cycles (excluding intentional loops)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "to_workflow_definition",
              "line_start": 303,
              "line_end": 334,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert design session to workflow definition",
              "is_async": false,
              "decorators": [],
              "complexity_score": 187
            }
          ],
          "docstring": "Visual workflow design session",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "VisualWorkflowDesigner",
          "line_start": 341,
          "line_end": 749,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 347,
              "line_end": 362,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_initialize_node_templates",
              "line_start": 364,
              "line_end": 475,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize node templates for the designer palette",
              "is_async": false,
              "decorators": [],
              "complexity_score": 254
            },
            {
              "name": "_load_system_operations",
              "line_start": 477,
              "line_end": 497,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load available operations for each system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "create_design_session",
              "line_start": 499,
              "line_end": 505,
              "args": [
                "self",
                "workflow_name"
              ],
              "returns": null,
              "docstring": "Create new workflow design session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "get_design_session",
              "line_start": 507,
              "line_end": 509,
              "args": [
                "self",
                "session_id"
              ],
              "returns": null,
              "docstring": "Get design session by ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "add_node_to_session",
              "line_start": 511,
              "line_end": 536,
              "args": [
                "self",
                "session_id",
                "template_name",
                "position"
              ],
              "returns": null,
              "docstring": "Add node to design session from template",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            },
            {
              "name": "connect_nodes",
              "line_start": 538,
              "line_end": 558,
              "args": [
                "self",
                "session_id",
                "source_node_id",
                "target_node_id",
                "connection_type"
              ],
              "returns": null,
              "docstring": "Connect two nodes in design session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "update_node_properties",
              "line_start": 560,
              "line_end": 578,
              "args": [
                "self",
                "session_id",
                "node_id",
                "properties"
              ],
              "returns": null,
              "docstring": "Update node properties",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "validate_session",
              "line_start": 580,
              "line_end": 596,
              "args": [
                "self",
                "session_id"
              ],
              "returns": null,
              "docstring": "Validate design session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "generate_workflow_yaml",
              "line_start": 598,
              "line_end": 613,
              "args": [
                "self",
                "session_id"
              ],
              "returns": null,
              "docstring": "Generate YAML workflow definition from design session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "save_workflow_design",
              "line_start": 615,
              "line_end": 630,
              "args": [
                "self",
                "session_id",
                "file_path"
              ],
              "returns": null,
              "docstring": "Save workflow design to file",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            },
            {
              "name": "load_workflow_design",
              "line_start": 632,
              "line_end": 643,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Load workflow design from file into new session",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_create_session_from_workflow",
              "line_start": 645,
              "line_end": 684,
              "args": [
                "self",
                "workflow_def"
              ],
              "returns": null,
              "docstring": "Create design session from workflow definition",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "_map_step_type_to_node_type",
              "line_start": 686,
              "line_end": 700,
              "args": [
                "self",
                "step_type"
              ],
              "returns": null,
              "docstring": "Map workflow step type to visual node type",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_calculate_auto_layout",
              "line_start": 702,
              "line_end": 722,
              "args": [
                "self",
                "steps"
              ],
              "returns": null,
              "docstring": "Calculate automatic layout positions for workflow steps",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "get_node_templates",
              "line_start": 724,
              "line_end": 726,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get available node templates for designer palette",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "get_system_operations",
              "line_start": 728,
              "line_end": 730,
              "args": [
                "self",
                "system_type"
              ],
              "returns": null,
              "docstring": "Get available operations for a system",
              "is_async": false,
              "decorators": [],
              "complexity_score": 26
            },
            {
              "name": "get_designer_statistics",
              "line_start": 732,
              "line_end": 749,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get designer usage statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            }
          ],
          "docstring": "Main visual workflow designer component.\nIntegrates with no-code dashboard builder for UI rendering.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_workflow_step",
          "line_start": 88,
          "line_end": 101,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert visual node to workflow step",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_map_node_type_to_step_type",
          "line_start": 103,
          "line_end": 117,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Map visual node type to workflow step type",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "add_node",
          "line_start": 164,
          "line_end": 171,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Add node to design session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "add_connection",
          "line_start": 173,
          "line_end": 182,
          "args": [
            "self",
            "connection"
          ],
          "returns": null,
          "docstring": "Add connection to design session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "remove_node",
          "line_start": 184,
          "line_end": 203,
          "args": [
            "self",
            "node_id"
          ],
          "returns": null,
          "docstring": "Remove node and associated connections",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "validate_design",
          "line_start": 205,
          "line_end": 239,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Validate the workflow design",
          "is_async": false,
          "decorators": [],
          "complexity_score": 256
        },
        {
          "name": "_validate_node",
          "line_start": 241,
          "line_end": 262,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Validate individual node",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "_has_invalid_cycles",
          "line_start": 264,
          "line_end": 301,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for invalid cycles (excluding intentional loops)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "to_workflow_definition",
          "line_start": 303,
          "line_end": 334,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert design session to workflow definition",
          "is_async": false,
          "decorators": [],
          "complexity_score": 187
        },
        {
          "name": "__init__",
          "line_start": 347,
          "line_end": 362,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_initialize_node_templates",
          "line_start": 364,
          "line_end": 475,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize node templates for the designer palette",
          "is_async": false,
          "decorators": [],
          "complexity_score": 254
        },
        {
          "name": "_load_system_operations",
          "line_start": 477,
          "line_end": 497,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load available operations for each system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "create_design_session",
          "line_start": 499,
          "line_end": 505,
          "args": [
            "self",
            "workflow_name"
          ],
          "returns": null,
          "docstring": "Create new workflow design session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "get_design_session",
          "line_start": 507,
          "line_end": 509,
          "args": [
            "self",
            "session_id"
          ],
          "returns": null,
          "docstring": "Get design session by ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "add_node_to_session",
          "line_start": 511,
          "line_end": 536,
          "args": [
            "self",
            "session_id",
            "template_name",
            "position"
          ],
          "returns": null,
          "docstring": "Add node to design session from template",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        },
        {
          "name": "connect_nodes",
          "line_start": 538,
          "line_end": 558,
          "args": [
            "self",
            "session_id",
            "source_node_id",
            "target_node_id",
            "connection_type"
          ],
          "returns": null,
          "docstring": "Connect two nodes in design session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "update_node_properties",
          "line_start": 560,
          "line_end": 578,
          "args": [
            "self",
            "session_id",
            "node_id",
            "properties"
          ],
          "returns": null,
          "docstring": "Update node properties",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "validate_session",
          "line_start": 580,
          "line_end": 596,
          "args": [
            "self",
            "session_id"
          ],
          "returns": null,
          "docstring": "Validate design session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "generate_workflow_yaml",
          "line_start": 598,
          "line_end": 613,
          "args": [
            "self",
            "session_id"
          ],
          "returns": null,
          "docstring": "Generate YAML workflow definition from design session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "save_workflow_design",
          "line_start": 615,
          "line_end": 630,
          "args": [
            "self",
            "session_id",
            "file_path"
          ],
          "returns": null,
          "docstring": "Save workflow design to file",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "load_workflow_design",
          "line_start": 632,
          "line_end": 643,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Load workflow design from file into new session",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_create_session_from_workflow",
          "line_start": 645,
          "line_end": 684,
          "args": [
            "self",
            "workflow_def"
          ],
          "returns": null,
          "docstring": "Create design session from workflow definition",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "_map_step_type_to_node_type",
          "line_start": 686,
          "line_end": 700,
          "args": [
            "self",
            "step_type"
          ],
          "returns": null,
          "docstring": "Map workflow step type to visual node type",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_calculate_auto_layout",
          "line_start": 702,
          "line_end": 722,
          "args": [
            "self",
            "steps"
          ],
          "returns": null,
          "docstring": "Calculate automatic layout positions for workflow steps",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "get_node_templates",
          "line_start": 724,
          "line_end": 726,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get available node templates for designer palette",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "get_system_operations",
          "line_start": 728,
          "line_end": 730,
          "args": [
            "self",
            "system_type"
          ],
          "returns": null,
          "docstring": "Get available operations for a system",
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        },
        {
          "name": "get_designer_statistics",
          "line_start": 732,
          "line_end": 749,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get designer usage statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "has_cycle",
          "line_start": 280,
          "line_end": 294,
          "args": [
            "node"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        }
      ],
      "imports": [
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowStepType",
            "WorkflowStatus",
            "StepStatus",
            "WorkflowStep",
            "WorkflowDefinition",
            "WorkflowVariable",
            "workflow_parser",
            "workflow_templates"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 34
        }
      ],
      "external_dependencies": "{'pathlib', 'workflow_framework', 'dataclasses', 'typing', 'json', 'logging', 'enum', 'uuid', 'cross_system_apis', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 768,
      "complexity_score": 5787,
      "api_surface_area": 37,
      "docstring": "Visual Workflow Designer\n=======================\n\nDrag-and-drop visual workflow designer built on the no-code dashboard infrastructure.\nEnables intuitive creation of cross-system workflows with real-time validation.\n\nIntegrates with:\n- No-Code Dashboard Builder for visual interface\n- Workflow Framework for YAML generation\n- Cross-System APIs for real-time validation\n- Unified Dashboard for workflow monitoring\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9705882352941176,
      "estimated_migration_complexity": "medium"
    },
    "integration\\workflow_execution_engine.py": {
      "file_path": "integration\\workflow_execution_engine.py",
      "component_name": "workflow_execution_engine",
      "analysis_timestamp": "2025-08-20 21:46:39.738118",
      "classes": [
        {
          "name": "ExecutionMode",
          "line_start": 48,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Workflow execution modes",
          "decorators": []
        },
        {
          "name": "ExecutionPriority",
          "line_start": 55,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Execution priority levels",
          "decorators": []
        },
        {
          "name": "ExecutionContext",
          "line_start": 65,
          "line_end": 123,
          "base_classes": [],
          "methods": [
            {
              "name": "get_variable",
              "line_start": 86,
              "line_end": 97,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Get variable value with fallback to workflow defaults",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "set_variable",
              "line_start": 99,
              "line_end": 101,
              "args": [
                "self",
                "name",
                "value"
              ],
              "returns": null,
              "docstring": "Set variable value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "interpolate_value",
              "line_start": 103,
              "line_end": 123,
              "args": [
                "self",
                "value"
              ],
              "returns": null,
              "docstring": "Interpolate variables in value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            }
          ],
          "docstring": "Context for workflow execution",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "StepExecution",
          "line_start": 127,
          "line_end": 157,
          "base_classes": [],
          "methods": [
            {
              "name": "can_execute",
              "line_start": 146,
              "line_end": 151,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if step can be executed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "needs_retry",
              "line_start": 153,
              "line_end": 157,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if step needs retry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Individual step execution tracking",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowExecutionEngine",
          "line_start": 164,
          "line_end": 973,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 170,
              "line_end": 222,
              "args": [
                "self",
                "max_concurrent_workflows",
                "max_concurrent_steps"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 247
            },
            {
              "name": "_initialize_step_executions",
              "line_start": 317,
              "line_end": 340,
              "args": [
                "self",
                "execution_id",
                "context"
              ],
              "returns": null,
              "docstring": "Initialize step execution tracking",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_update_execution_progress",
              "line_start": 795,
              "line_end": 811,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update execution progress for all active workflows",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "_cleanup_old_executions",
              "line_start": 813,
              "line_end": 828,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old completed executions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "_update_statistics",
              "line_start": 830,
              "line_end": 846,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update execution statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "register_event_handler",
              "line_start": 866,
              "line_end": 872,
              "args": [
                "self",
                "event_name",
                "handler"
              ],
              "returns": null,
              "docstring": "Register event handler",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "get_workflow_status",
              "line_start": 920,
              "line_end": 943,
              "args": [
                "self",
                "execution_id"
              ],
              "returns": null,
              "docstring": "Get workflow execution status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "get_engine_statistics",
              "line_start": 945,
              "line_end": 959,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get engine statistics and health",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "list_active_executions",
              "line_start": 961,
              "line_end": 973,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "List all active workflow executions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            }
          ],
          "docstring": "High-performance workflow execution engine with intelligent scheduling,\nparallel execution, error recovery, and real-time monitoring.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_variable",
          "line_start": 86,
          "line_end": 97,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Get variable value with fallback to workflow defaults",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "set_variable",
          "line_start": 99,
          "line_end": 101,
          "args": [
            "self",
            "name",
            "value"
          ],
          "returns": null,
          "docstring": "Set variable value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "interpolate_value",
          "line_start": 103,
          "line_end": 123,
          "args": [
            "self",
            "value"
          ],
          "returns": null,
          "docstring": "Interpolate variables in value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "can_execute",
          "line_start": 146,
          "line_end": 151,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if step can be executed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "needs_retry",
          "line_start": 153,
          "line_end": 157,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if step needs retry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "__init__",
          "line_start": 170,
          "line_end": 222,
          "args": [
            "self",
            "max_concurrent_workflows",
            "max_concurrent_steps"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 247
        },
        {
          "name": "_initialize_step_executions",
          "line_start": 317,
          "line_end": 340,
          "args": [
            "self",
            "execution_id",
            "context"
          ],
          "returns": null,
          "docstring": "Initialize step execution tracking",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_update_execution_progress",
          "line_start": 795,
          "line_end": 811,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update execution progress for all active workflows",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "_cleanup_old_executions",
          "line_start": 813,
          "line_end": 828,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old completed executions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "_update_statistics",
          "line_start": 830,
          "line_end": 846,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update execution statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "register_event_handler",
          "line_start": 866,
          "line_end": 872,
          "args": [
            "self",
            "event_name",
            "handler"
          ],
          "returns": null,
          "docstring": "Register event handler",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "get_workflow_status",
          "line_start": 920,
          "line_end": 943,
          "args": [
            "self",
            "execution_id"
          ],
          "returns": null,
          "docstring": "Get workflow execution status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "get_engine_statistics",
          "line_start": 945,
          "line_end": 959,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get engine statistics and health",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "list_active_executions",
          "line_start": 961,
          "line_end": 973,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "List all active workflow executions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor",
            "as_completed"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "queue",
          "names": [
            "Queue",
            "PriorityQueue"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowDefinition",
            "WorkflowExecution",
            "WorkflowStep",
            "WorkflowStatus",
            "StepStatus",
            "WorkflowStepType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "SystemMessage",
            "CrossSystemRequest",
            "CrossSystemResponse",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        }
      ],
      "external_dependencies": "{'workflow_framework', 'dataclasses', 'time', 'typing', 'cross_system_apis', 'json', 'logging', 'concurrent.futures', 'enum', 'threading', 'uuid', 'queue', 'asyncio', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 991,
      "complexity_score": 3160,
      "api_surface_area": 18,
      "docstring": "Workflow Execution Engine\n========================\n\nHigh-performance workflow execution engine that coordinates workflow steps\nacross all unified systems with intelligent scheduling, error recovery,\nand real-time monitoring.\n\nIntegrates with:\n- Cross-System APIs for system communication\n- Workflow Framework for workflow definitions\n- Visual Designer for execution monitoring\n- Unified State Manager for execution state persistence\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\workflow_execution_engine_robust.py": {
      "file_path": "integration\\workflow_execution_engine_robust.py",
      "component_name": "workflow_execution_engine_robust",
      "analysis_timestamp": "2025-08-20 21:46:39.749641",
      "classes": [
        {
          "name": "ExecutionMode",
          "line_start": 48,
          "line_end": 52,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Workflow execution modes",
          "decorators": []
        },
        {
          "name": "ExecutionPriority",
          "line_start": 55,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Execution priority levels",
          "decorators": []
        },
        {
          "name": "ExecutionContext",
          "line_start": 65,
          "line_end": 123,
          "base_classes": [],
          "methods": [
            {
              "name": "get_variable",
              "line_start": 86,
              "line_end": 97,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Get variable value with fallback to workflow defaults",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "set_variable",
              "line_start": 99,
              "line_end": 101,
              "args": [
                "self",
                "name",
                "value"
              ],
              "returns": null,
              "docstring": "Set variable value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "interpolate_value",
              "line_start": 103,
              "line_end": 123,
              "args": [
                "self",
                "value"
              ],
              "returns": null,
              "docstring": "Interpolate variables in value",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            }
          ],
          "docstring": "Context for workflow execution",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "StepExecution",
          "line_start": 127,
          "line_end": 157,
          "base_classes": [],
          "methods": [
            {
              "name": "can_execute",
              "line_start": 146,
              "line_end": 151,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if step can be executed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "needs_retry",
              "line_start": 153,
              "line_end": 157,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if step needs retry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Individual step execution tracking",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowExecutionEngine",
          "line_start": 164,
          "line_end": 973,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 170,
              "line_end": 222,
              "args": [
                "self",
                "max_concurrent_workflows",
                "max_concurrent_steps"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 247
            },
            {
              "name": "_initialize_step_executions",
              "line_start": 317,
              "line_end": 340,
              "args": [
                "self",
                "execution_id",
                "context"
              ],
              "returns": null,
              "docstring": "Initialize step execution tracking",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_update_execution_progress",
              "line_start": 795,
              "line_end": 811,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update execution progress for all active workflows",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "_cleanup_old_executions",
              "line_start": 813,
              "line_end": 828,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old completed executions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "_update_statistics",
              "line_start": 830,
              "line_end": 846,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update execution statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "register_event_handler",
              "line_start": 866,
              "line_end": 872,
              "args": [
                "self",
                "event_name",
                "handler"
              ],
              "returns": null,
              "docstring": "Register event handler",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "get_workflow_status",
              "line_start": 920,
              "line_end": 943,
              "args": [
                "self",
                "execution_id"
              ],
              "returns": null,
              "docstring": "Get workflow execution status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "get_engine_statistics",
              "line_start": 945,
              "line_end": 959,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get engine statistics and health",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "list_active_executions",
              "line_start": 961,
              "line_end": 973,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "List all active workflow executions",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            }
          ],
          "docstring": "High-performance workflow execution engine with intelligent scheduling,\nparallel execution, error recovery, and real-time monitoring.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_variable",
          "line_start": 86,
          "line_end": 97,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Get variable value with fallback to workflow defaults",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "set_variable",
          "line_start": 99,
          "line_end": 101,
          "args": [
            "self",
            "name",
            "value"
          ],
          "returns": null,
          "docstring": "Set variable value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "interpolate_value",
          "line_start": 103,
          "line_end": 123,
          "args": [
            "self",
            "value"
          ],
          "returns": null,
          "docstring": "Interpolate variables in value",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "can_execute",
          "line_start": 146,
          "line_end": 151,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if step can be executed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "needs_retry",
          "line_start": 153,
          "line_end": 157,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if step needs retry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "__init__",
          "line_start": 170,
          "line_end": 222,
          "args": [
            "self",
            "max_concurrent_workflows",
            "max_concurrent_steps"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 247
        },
        {
          "name": "_initialize_step_executions",
          "line_start": 317,
          "line_end": 340,
          "args": [
            "self",
            "execution_id",
            "context"
          ],
          "returns": null,
          "docstring": "Initialize step execution tracking",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_update_execution_progress",
          "line_start": 795,
          "line_end": 811,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update execution progress for all active workflows",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "_cleanup_old_executions",
          "line_start": 813,
          "line_end": 828,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old completed executions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "_update_statistics",
          "line_start": 830,
          "line_end": 846,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update execution statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "register_event_handler",
          "line_start": 866,
          "line_end": 872,
          "args": [
            "self",
            "event_name",
            "handler"
          ],
          "returns": null,
          "docstring": "Register event handler",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "get_workflow_status",
          "line_start": 920,
          "line_end": 943,
          "args": [
            "self",
            "execution_id"
          ],
          "returns": null,
          "docstring": "Get workflow execution status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "get_engine_statistics",
          "line_start": 945,
          "line_end": 959,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get engine statistics and health",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "list_active_executions",
          "line_start": 961,
          "line_end": 973,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "List all active workflow executions",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor",
            "as_completed"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "queue",
          "names": [
            "Queue",
            "PriorityQueue"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "workflow_framework",
          "names": [
            "WorkflowDefinition",
            "WorkflowExecution",
            "WorkflowStep",
            "WorkflowStatus",
            "StepStatus",
            "WorkflowStepType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "SystemMessage",
            "CrossSystemRequest",
            "CrossSystemResponse",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 38
        }
      ],
      "external_dependencies": "{'workflow_framework', 'dataclasses', 'time', 'typing', 'cross_system_apis', 'json', 'logging', 'concurrent.futures', 'enum', 'threading', 'uuid', 'queue', 'asyncio', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 991,
      "complexity_score": 3160,
      "api_surface_area": 18,
      "docstring": "Workflow Execution Engine\n========================\n\nHigh-performance workflow execution engine that coordinates workflow steps\nacross all unified systems with intelligent scheduling, error recovery,\nand real-time monitoring.\n\nIntegrates with:\n- Cross-System APIs for system communication\n- Workflow Framework for workflow definitions\n- Visual Designer for execution monitoring\n- Unified State Manager for execution state persistence\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "integration\\workflow_framework.py": {
      "file_path": "integration\\workflow_framework.py",
      "component_name": "workflow_framework",
      "analysis_timestamp": "2025-08-20 21:46:39.758108",
      "classes": [
        {
          "name": "WorkflowStepType",
          "line_start": 41,
          "line_end": 50,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of workflow steps",
          "decorators": []
        },
        {
          "name": "WorkflowStatus",
          "line_start": 53,
          "line_end": 60,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Workflow execution status",
          "decorators": []
        },
        {
          "name": "StepStatus",
          "line_start": 63,
          "line_end": 70,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Individual step status",
          "decorators": []
        },
        {
          "name": "WorkflowVariable",
          "line_start": 74,
          "line_end": 81,
          "base_classes": [],
          "methods": [],
          "docstring": "Variable definition for workflows",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowStep",
          "line_start": 85,
          "line_end": 125,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 106,
              "line_end": 125,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for serialization",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            }
          ],
          "docstring": "Individual workflow step definition",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowDefinition",
          "line_start": 129,
          "line_end": 204,
          "base_classes": [],
          "methods": [
            {
              "name": "get_step",
              "line_start": 144,
              "line_end": 149,
              "args": [
                "self",
                "step_id"
              ],
              "returns": null,
              "docstring": "Get step by ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "get_variable",
              "line_start": 151,
              "line_end": 156,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Get variable by name",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "validate",
              "line_start": 158,
              "line_end": 177,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Validate workflow definition",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            },
            {
              "name": "_has_circular_dependencies",
              "line_start": 179,
              "line_end": 204,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for circular dependencies using topological sort",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            }
          ],
          "docstring": "Complete workflow definition",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowExecution",
          "line_start": 208,
          "line_end": 253,
          "base_classes": [],
          "methods": [
            {
              "name": "get_progress_percentage",
              "line_start": 229,
              "line_end": 237,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate workflow progress percentage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "get_execution_summary",
              "line_start": 239,
              "line_end": 253,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get execution summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            }
          ],
          "docstring": "Runtime workflow execution instance",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowYAMLParser",
          "line_start": 260,
          "line_end": 414,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 263,
              "line_end": 264,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "parse_workflow_file",
              "line_start": 266,
              "line_end": 276,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Parse workflow from YAML file",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "parse_workflow_dict",
              "line_start": 278,
              "line_end": 331,
              "args": [
                "self",
                "yaml_dict"
              ],
              "returns": null,
              "docstring": "Parse workflow from dictionary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 291
            },
            {
              "name": "_parse_step",
              "line_start": 333,
              "line_end": 364,
              "args": [
                "self",
                "step_dict"
              ],
              "returns": null,
              "docstring": "Parse individual workflow step",
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "export_workflow_to_yaml",
              "line_start": 366,
              "line_end": 414,
              "args": [
                "self",
                "workflow"
              ],
              "returns": null,
              "docstring": "Export workflow definition to YAML string",
              "is_async": false,
              "decorators": [],
              "complexity_score": 198
            }
          ],
          "docstring": "Parse YAML workflow definitions",
          "decorators": []
        },
        {
          "name": "WorkflowTemplateLibrary",
          "line_start": 421,
          "line_end": 688,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 424,
              "line_end": 427,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_initialize_templates",
              "line_start": 429,
              "line_end": 657,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize built-in workflow templates",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "get_template",
              "line_start": 659,
              "line_end": 661,
              "args": [
                "self",
                "template_name"
              ],
              "returns": null,
              "docstring": "Get workflow template by name",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "list_templates",
              "line_start": 663,
              "line_end": 665,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of available template names",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "add_template",
              "line_start": 667,
              "line_end": 670,
              "args": [
                "self",
                "name",
                "yaml_content"
              ],
              "returns": null,
              "docstring": "Add custom template to library",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "create_workflow_from_template",
              "line_start": 672,
              "line_end": 688,
              "args": [
                "self",
                "template_name",
                "variables"
              ],
              "returns": null,
              "docstring": "Create workflow from template with variable substitution",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            }
          ],
          "docstring": "Library of pre-built workflow templates",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 106,
          "line_end": 125,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for serialization",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "get_step",
          "line_start": 144,
          "line_end": 149,
          "args": [
            "self",
            "step_id"
          ],
          "returns": null,
          "docstring": "Get step by ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "get_variable",
          "line_start": 151,
          "line_end": 156,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Get variable by name",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "validate",
          "line_start": 158,
          "line_end": 177,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Validate workflow definition",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "_has_circular_dependencies",
          "line_start": 179,
          "line_end": 204,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for circular dependencies using topological sort",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "get_progress_percentage",
          "line_start": 229,
          "line_end": 237,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate workflow progress percentage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "get_execution_summary",
          "line_start": 239,
          "line_end": 253,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get execution summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "__init__",
          "line_start": 263,
          "line_end": 264,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "parse_workflow_file",
          "line_start": 266,
          "line_end": 276,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Parse workflow from YAML file",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "parse_workflow_dict",
          "line_start": 278,
          "line_end": 331,
          "args": [
            "self",
            "yaml_dict"
          ],
          "returns": null,
          "docstring": "Parse workflow from dictionary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 291
        },
        {
          "name": "_parse_step",
          "line_start": 333,
          "line_end": 364,
          "args": [
            "self",
            "step_dict"
          ],
          "returns": null,
          "docstring": "Parse individual workflow step",
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "export_workflow_to_yaml",
          "line_start": 366,
          "line_end": 414,
          "args": [
            "self",
            "workflow"
          ],
          "returns": null,
          "docstring": "Export workflow definition to YAML string",
          "is_async": false,
          "decorators": [],
          "complexity_score": 198
        },
        {
          "name": "__init__",
          "line_start": 424,
          "line_end": 427,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_initialize_templates",
          "line_start": 429,
          "line_end": 657,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize built-in workflow templates",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "get_template",
          "line_start": 659,
          "line_end": 661,
          "args": [
            "self",
            "template_name"
          ],
          "returns": null,
          "docstring": "Get workflow template by name",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "list_templates",
          "line_start": 663,
          "line_end": 665,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of available template names",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "add_template",
          "line_start": 667,
          "line_end": 670,
          "args": [
            "self",
            "name",
            "yaml_content"
          ],
          "returns": null,
          "docstring": "Add custom template to library",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "create_workflow_from_template",
          "line_start": 672,
          "line_end": 688,
          "args": [
            "self",
            "template_name",
            "variables"
          ],
          "returns": null,
          "docstring": "Create workflow from template with variable substitution",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "yaml",
          "names": [
            "yaml"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "cross_system_apis",
          "names": [
            "SystemType",
            "IntegrationEventType",
            "SystemMessage",
            "CrossSystemRequest",
            "cross_system_coordinator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 31
        }
      ],
      "external_dependencies": "{'pathlib', 'dataclasses', 'time', 'typing', 'yaml', 'json', 'logging', 'concurrent.futures', 'enum', 'uuid', 'cross_system_apis', 'asyncio', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 712,
      "complexity_score": 3304,
      "api_surface_area": 26,
      "docstring": "Workflow Definition Framework\n============================\n\nYAML-based workflow system enabling complex processes that span across\nall unified systems with intelligent coordination and state management.\n\nIntegrates with:\n- Cross-System APIs for system communication\n- Unified State Manager for workflow state persistence\n- ML Router for intelligent step execution\n- Unified Dashboard for workflow visualization\n\nAuthor: TestMaster Phase 1B Integration System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9629629629629629,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\coverage_analyzer.py": {
      "file_path": "testmaster\\analysis\\coverage_analyzer.py",
      "component_name": "coverage_analyzer",
      "analysis_timestamp": "2025-08-20 21:46:39.783651",
      "classes": [
        {
          "name": "FunctionCoverage",
          "line_start": 36,
          "line_end": 47,
          "base_classes": [],
          "methods": [],
          "docstring": "Coverage information for a function.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ModuleCoverage",
          "line_start": 51,
          "line_end": 62,
          "base_classes": [],
          "methods": [],
          "docstring": "Coverage information for a module.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CoverageReport",
          "line_start": 66,
          "line_end": 80,
          "base_classes": [],
          "methods": [],
          "docstring": "Complete coverage analysis results.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CoverageAnalyzer",
          "line_start": 83,
          "line_end": 507,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 96,
              "line_end": 115,
              "args": [
                "self",
                "source_dir",
                "test_dir"
              ],
              "returns": null,
              "docstring": "Initialize the coverage analyzer.\n\nArgs:\n    source_dir: Directory containing source code\n    test_dir: Directory containing tests",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "run_full_analysis",
              "line_start": 117,
              "line_end": 165,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Run comprehensive coverage analysis.\n\nReturns:\n    Complete coverage report with all metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 186
            },
            {
              "name": "_run_tests_with_coverage",
              "line_start": 167,
              "line_end": 193,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Run tests with coverage measurement.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_analyze_modules",
              "line_start": 195,
              "line_end": 205,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze coverage for all source modules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_should_analyze_file",
              "line_start": 207,
              "line_end": 217,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Check if file should be analyzed for coverage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_analyze_module",
              "line_start": 219,
              "line_end": 256,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Analyze coverage for a single module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 177
            },
            {
              "name": "_analyze_functions",
              "line_start": 258,
              "line_end": 279,
              "args": [
                "self",
                "file_path",
                "executable_lines",
                "missing_lines"
              ],
              "returns": null,
              "docstring": "Analyze coverage for functions in a module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "_analyze_function",
              "line_start": 281,
              "line_end": 322,
              "args": [
                "self",
                "func_node",
                "executable_lines",
                "missing_lines"
              ],
              "returns": null,
              "docstring": "Analyze coverage for a single function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "_calculate_complexity",
              "line_start": 324,
              "line_end": 337,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate cyclomatic complexity of a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_find_test_files",
              "line_start": 339,
              "line_end": 356,
              "args": [
                "self",
                "source_file"
              ],
              "returns": null,
              "docstring": "Find test files related to a source module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_categorize_tests",
              "line_start": 358,
              "line_end": 391,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Categorize tests by type (from measure_final_coverage.py logic).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "_calculate_branch_coverage",
              "line_start": 393,
              "line_end": 408,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate branch coverage from coverage data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_calculate_function_coverage",
              "line_start": 410,
              "line_end": 421,
              "args": [
                "self",
                "modules"
              ],
              "returns": null,
              "docstring": "Calculate function-level coverage percentage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_print_summary",
              "line_start": 423,
              "line_end": 451,
              "args": [
                "self",
                "report"
              ],
              "returns": null,
              "docstring": "Print coverage summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 254
            },
            {
              "name": "get_uncovered_functions",
              "line_start": 453,
              "line_end": 462,
              "args": [
                "self",
                "report"
              ],
              "returns": null,
              "docstring": "Get list of uncovered functions for test generation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "save_report",
              "line_start": 464,
              "line_end": 507,
              "args": [
                "self",
                "report",
                "output_path"
              ],
              "returns": null,
              "docstring": "Save coverage report to JSON file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            }
          ],
          "docstring": "Unified coverage analyzer that consolidates multiple analysis approaches.\n\nFeatures:\n- Line and branch coverage measurement\n- Function-level coverage analysis\n- Test categorization and tracking\n- Missing coverage identification\n- Quality scoring integration",
          "decorators": []
        },
        {
          "name": "ComprehensiveCodebaseAnalyzer",
          "line_start": 514,
          "line_end": 2297,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 529,
              "line_end": 535,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "perform_comprehensive_analysis",
              "line_start": 537,
              "line_end": 559,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform complete classical codebase analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_analyze_software_metrics",
              "line_start": 561,
              "line_end": 579,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Comprehensive software metrics analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            },
            {
              "name": "_analyze_graph_structures",
              "line_start": 581,
              "line_end": 606,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Graph theory analysis of code structures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_detect_code_clones",
              "line_start": 608,
              "line_end": 624,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Comprehensive code clone detection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            },
            {
              "name": "_analyze_security_patterns",
              "line_start": 626,
              "line_end": 645,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Security vulnerability and code smell analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 126
            },
            {
              "name": "_analyze_linguistic_features",
              "line_start": 647,
              "line_end": 664,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Linguistic and identifier analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_evolution_patterns",
              "line_start": 666,
              "line_end": 683,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Evolution and change pattern analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_perform_statistical_analysis",
              "line_start": 685,
              "line_end": 702,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Statistical analysis of code properties.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_structural_patterns",
              "line_start": 704,
              "line_end": 721,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Structural and architectural pattern analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_comprehensive_complexity_analysis",
              "line_start": 723,
              "line_end": 740,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Comprehensive complexity analysis beyond McCabe.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_comprehensive_quality_analysis",
              "line_start": 742,
              "line_end": 759,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Comprehensive quality analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_calculate_halstead_metrics",
              "line_start": 765,
              "line_end": 827,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate Halstead software science metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 371
            },
            {
              "name": "_calculate_mccabe_complexity",
              "line_start": 829,
              "line_end": 863,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate McCabe cyclomatic complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "_calculate_function_complexity",
              "line_start": 865,
              "line_end": 878,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate cyclomatic complexity for a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_calculate_sloc_metrics",
              "line_start": 880,
              "line_end": 956,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate comprehensive Source Lines of Code metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 539
            },
            {
              "name": "_detect_exact_clones",
              "line_start": 958,
              "line_end": 996,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect exact code clones using hash comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "_detect_vulnerability_patterns",
              "line_start": 998,
              "line_end": 1047,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect basic security vulnerability patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 228
            },
            {
              "name": "_analyze_identifiers",
              "line_start": 1049,
              "line_end": 1098,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze identifier patterns and naming conventions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 316
            },
            {
              "name": "_generate_comprehensive_summary",
              "line_start": 1100,
              "line_end": 1158,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "docstring": "Generate a comprehensive summary of all analysis results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 450
            },
            {
              "name": "_should_analyze_file",
              "line_start": 1160,
              "line_end": 1165,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Check if file should be analyzed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "_calculate_maintainability_index",
              "line_start": 1171,
              "line_end": 1188,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate maintainability index - simplified implementation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "_calculate_coupling_metrics",
              "line_start": 1190,
              "line_end": 1275,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate comprehensive coupling metrics (fan-in, fan-out, CBO).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 641
            },
            {
              "name": "_calculate_cohesion_metrics",
              "line_start": 1277,
              "line_end": 1320,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cohesion metrics using LCOM (Lack of Cohesion of Methods).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 257
            },
            {
              "name": "_calculate_lcom",
              "line_start": 1322,
              "line_end": 1373,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Calculate LCOM (Lack of Cohesion of Methods) for a class.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 346
            },
            {
              "name": "_calculate_distribution",
              "line_start": 1375,
              "line_end": 1397,
              "args": [
                "self",
                "values"
              ],
              "returns": null,
              "docstring": "Calculate distribution of values into ranges.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_calculate_inheritance_metrics",
              "line_start": 1399,
              "line_end": 1524,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate comprehensive inheritance metrics (DIT, NOC, etc.).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 682
            },
            {
              "name": "_calculate_polymorphism_metrics",
              "line_start": 1526,
              "line_end": 1624,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate polymorphism metrics (method overriding, interface usage).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 563
            },
            {
              "name": "_calculate_encapsulation_metrics",
              "line_start": 1626,
              "line_end": 1628,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Simplified encapsulation metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_abstraction_metrics",
              "line_start": 1630,
              "line_end": 1632,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Simplified abstraction metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_build_call_graph",
              "line_start": 1634,
              "line_end": 1636,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Build simplified call graph.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 7
            },
            {
              "name": "_build_control_flow_graphs",
              "line_start": 1638,
              "line_end": 1640,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Build simplified control flow graphs.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 7
            },
            {
              "name": "_build_dependency_graph",
              "line_start": 1642,
              "line_end": 1644,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Build simplified dependency graph.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_call_graph",
              "line_start": 1646,
              "line_end": 1648,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze call graph - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_analyze_control_flows",
              "line_start": 1650,
              "line_end": 1652,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze control flows - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_analyze_dependency_graph",
              "line_start": 1654,
              "line_end": 1656,
              "args": [
                "self",
                "graph"
              ],
              "returns": null,
              "docstring": "Analyze dependency graph - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "_calculate_centrality_measures",
              "line_start": 1658,
              "line_end": 1660,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate graph centrality measures - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_graph_clustering",
              "line_start": 1662,
              "line_end": 1664,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze graph clustering - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_graph_connectivity",
              "line_start": 1666,
              "line_end": 1668,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze graph connectivity - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_detect_graph_cycles",
              "line_start": 1670,
              "line_end": 1672,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect graph cycles - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_critical_paths",
              "line_start": 1674,
              "line_end": 1676,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze critical paths - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_detect_near_clones",
              "line_start": 1678,
              "line_end": 1762,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect near clones using sequence similarity analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 493
            },
            {
              "name": "_calculate_line_similarity",
              "line_start": 1764,
              "line_end": 1771,
              "args": [
                "self",
                "lines1",
                "lines2"
              ],
              "returns": null,
              "docstring": "Calculate similarity between two sets of code lines.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_calculate_structural_similarity",
              "line_start": 1773,
              "line_end": 1787,
              "args": [
                "self",
                "lines1",
                "lines2"
              ],
              "returns": null,
              "docstring": "Calculate structural similarity based on code patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            },
            {
              "name": "_extract_code_structure",
              "line_start": 1789,
              "line_end": 1824,
              "args": [
                "self",
                "lines"
              ],
              "returns": null,
              "docstring": "Extract structural elements from code lines.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 234
            },
            {
              "name": "_detect_structural_clones",
              "line_start": 1826,
              "line_end": 1828,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect structural clones - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_detect_semantic_clones",
              "line_start": 1830,
              "line_end": 1832,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect semantic clones - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_group_clone_families",
              "line_start": 1834,
              "line_end": 1836,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Group clone families - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_analyze_clone_evolution",
              "line_start": 1838,
              "line_end": 1840,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze clone evolution - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_clone_metrics",
              "line_start": 1842,
              "line_end": 1844,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate clone metrics - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_detect_code_smells",
              "line_start": 1846,
              "line_end": 1851,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect code smells - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_detect_antipatterns",
              "line_start": 1853,
              "line_end": 1855,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect antipatterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_identify_security_hotspots",
              "line_start": 1857,
              "line_end": 1859,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify security hotspots - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_analyze_input_validation",
              "line_start": 1861,
              "line_end": 1863,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze input validation - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_authentication",
              "line_start": 1865,
              "line_end": 1867,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze authentication patterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_authorization",
              "line_start": 1869,
              "line_end": 1871,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze authorization patterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_cryptography_usage",
              "line_start": 1873,
              "line_end": 1875,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze cryptography usage - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_sql_injection_risks",
              "line_start": 1877,
              "line_end": 1879,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze SQL injection risks - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_analyze_xss_vulnerabilities",
              "line_start": 1881,
              "line_end": 1883,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze XSS vulnerabilities - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_analyze_naming_conventions",
              "line_start": 1885,
              "line_end": 1887,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze naming conventions - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_vocabulary_metrics",
              "line_start": 1889,
              "line_end": 1891,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate vocabulary metrics - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_analyze_comments",
              "line_start": 1893,
              "line_end": 1895,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze comments - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_assess_documentation_quality",
              "line_start": 1897,
              "line_end": 1899,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess documentation quality - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_readability_metrics",
              "line_start": 1901,
              "line_end": 1903,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate readability metrics - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_abbreviations",
              "line_start": 1905,
              "line_end": 1907,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze abbreviation usage - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_extract_domain_terms",
              "line_start": 1909,
              "line_end": 1911,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Extract domain terminology - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_nl_patterns",
              "line_start": 1913,
              "line_end": 1915,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze natural language patterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_file_ages",
              "line_start": 1918,
              "line_end": 1920,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze file ages - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_growth_patterns",
              "line_start": 1922,
              "line_end": 1924,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze growth patterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_detect_refactoring_patterns",
              "line_start": 1926,
              "line_end": 1928,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect refactoring patterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_identify_change_hotspots",
              "line_start": 1930,
              "line_end": 1932,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify change hotspots - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_calculate_stability_metrics",
              "line_start": 1934,
              "line_end": 1936,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate stability metrics - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_change_frequency",
              "line_start": 1938,
              "line_end": 1940,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze change frequency - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_code_churn",
              "line_start": 1942,
              "line_end": 1944,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate code churn - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_developer_patterns",
              "line_start": 1946,
              "line_end": 1948,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze developer patterns - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_temporal_coupling",
              "line_start": 1950,
              "line_end": 1952,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze temporal coupling - simplified.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_distributions",
              "line_start": 1955,
              "line_end": 1956,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_correlations",
              "line_start": 1958,
              "line_end": 1959,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_detect_outliers",
              "line_start": 1961,
              "line_end": 1962,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "_perform_clustering",
              "line_start": 1964,
              "line_end": 1965,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_trends",
              "line_start": 1967,
              "line_end": 1968,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_variance",
              "line_start": 1970,
              "line_end": 1971,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_entropy_measures",
              "line_start": 1973,
              "line_end": 1974,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_apply_information_theory",
              "line_start": 1976,
              "line_end": 1977,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_perform_statistical_tests",
              "line_start": 1979,
              "line_end": 1980,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_detect_design_patterns",
              "line_start": 1983,
              "line_end": 2112,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect common design patterns in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 473
            },
            {
              "name": "_is_singleton_pattern",
              "line_start": 2114,
              "line_end": 2129,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect singleton pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_is_factory_pattern",
              "line_start": 2131,
              "line_end": 2146,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect factory pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_is_observer_pattern",
              "line_start": 2148,
              "line_end": 2161,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect observer pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_is_decorator_pattern",
              "line_start": 2163,
              "line_end": 2186,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect decorator pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_is_strategy_pattern",
              "line_start": 2188,
              "line_end": 2202,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect strategy pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_is_command_pattern",
              "line_start": 2204,
              "line_end": 2217,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect command pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_detect_architectural_patterns",
              "line_start": 2219,
              "line_end": 2220,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_analyze_layered_architecture",
              "line_start": 2222,
              "line_end": 2223,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_modular_structure",
              "line_start": 2225,
              "line_end": 2226,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_package_structure",
              "line_start": 2228,
              "line_end": 2229,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_interfaces",
              "line_start": 2231,
              "line_end": 2232,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_abstract_coupling",
              "line_start": 2234,
              "line_end": 2235,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_concrete_coupling",
              "line_start": 2237,
              "line_end": 2238,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_fan_metrics",
              "line_start": 2240,
              "line_end": 2241,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_quality_metrics",
              "line_start": 2244,
              "line_end": 2245,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_assess_technical_debt",
              "line_start": 2247,
              "line_end": 2248,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_maintainability_factors",
              "line_start": 2250,
              "line_end": 2251,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_reliability_indicators",
              "line_start": 2253,
              "line_end": 2254,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_performance_indicators",
              "line_start": 2256,
              "line_end": 2257,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_portability_metrics",
              "line_start": 2259,
              "line_end": 2260,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_usability_metrics",
              "line_start": 2262,
              "line_end": 2263,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_testability_metrics",
              "line_start": 2265,
              "line_end": 2266,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_analyze_reusability_metrics",
              "line_start": 2268,
              "line_end": 2269,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_detailed_cyclomatic_analysis",
              "line_start": 2272,
              "line_end": 2273,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_calculate_cognitive_complexity",
              "line_start": 2275,
              "line_end": 2276,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_npath_complexity",
              "line_start": 2278,
              "line_end": 2279,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_essential_complexity",
              "line_start": 2281,
              "line_end": 2282,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_data_complexity",
              "line_start": 2284,
              "line_end": 2285,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_system_complexity",
              "line_start": 2287,
              "line_end": 2288,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_interface_complexity",
              "line_start": 2290,
              "line_end": 2291,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_temporal_complexity",
              "line_start": 2293,
              "line_end": 2294,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_calculate_structural_complexity",
              "line_start": 2296,
              "line_end": 2297,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            }
          ],
          "docstring": "Comprehensive classical codebase analysis using every low-cost technique available.\n\nImplements:\n- Software metrics (Halstead, McCabe, SLOC, etc.)\n- Graph theory analysis (call graphs, control flow, dependency graphs)\n- Code clone detection and similarity analysis  \n- Security vulnerability patterns and code smells\n- Linguistic analysis and identifier analysis\n- Evolution and change pattern analysis\n- Statistical code analysis\n- Structural analysis and design pattern detection",
          "decorators": []
        },
        {
          "name": "AdvancedDependencyMapper",
          "line_start": 2304,
          "line_end": 2530,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 2310,
              "line_end": 2314,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            },
            {
              "name": "perform_dependency_analysis",
              "line_start": 2316,
              "line_end": 2326,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive dependency analysis using multiple techniques.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_analyze_import_dependencies",
              "line_start": 2328,
              "line_end": 2353,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Advanced import dependency analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "_analyze_function_signatures",
              "line_start": 2355,
              "line_end": 2385,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Advanced function signature analysis using AST.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 229
            },
            {
              "name": "_analyze_cross_module_references",
              "line_start": 2387,
              "line_end": 2413,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze references between modules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_find_orphaned_modules",
              "line_start": 2415,
              "line_end": 2438,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Find modules that aren't imported by any other module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_detect_circular_dependencies",
              "line_start": 2440,
              "line_end": 2497,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect circular dependencies between modules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 338
            },
            {
              "name": "_analyze_dependency_depth",
              "line_start": 2499,
              "line_end": 2520,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze dependency depth for each module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "_should_analyze_file",
              "line_start": 2522,
              "line_end": 2530,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Check if file should be analyzed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            }
          ],
          "docstring": "Advanced dependency mapping using multi-angle analysis techniques.\nIntegrates the sophisticated techniques used in archive analysis.",
          "decorators": []
        },
        {
          "name": "CodebaseHealthAssessment",
          "line_start": 2533,
          "line_end": 2698,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 2538,
              "line_end": 2539,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "assess_codebase_health",
              "line_start": 2541,
              "line_end": 2564,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive codebase health assessment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_assess_code_quality",
              "line_start": 2566,
              "line_end": 2604,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess code quality using multiple metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 207
            },
            {
              "name": "_assess_architectural_integrity",
              "line_start": 2606,
              "line_end": 2617,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess architectural integrity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_assess_test_coverage_health",
              "line_start": 2619,
              "line_end": 2626,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess test coverage health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_assess_dependency_health",
              "line_start": 2628,
              "line_end": 2641,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess dependency health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_assess_documentation_health",
              "line_start": 2643,
              "line_end": 2661,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess documentation health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_analyze_health_trends",
              "line_start": 2663,
              "line_end": 2672,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze health trends over time.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 25
            },
            {
              "name": "_generate_health_recommendations",
              "line_start": 2674,
              "line_end": 2690,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Generate health improvement recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 126
            },
            {
              "name": "_should_analyze_file",
              "line_start": 2692,
              "line_end": 2698,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Check if file should be analyzed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            }
          ],
          "docstring": "Comprehensive codebase health assessment using multiple analysis techniques.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 96,
          "line_end": 115,
          "args": [
            "self",
            "source_dir",
            "test_dir"
          ],
          "returns": null,
          "docstring": "Initialize the coverage analyzer.\n\nArgs:\n    source_dir: Directory containing source code\n    test_dir: Directory containing tests",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "run_full_analysis",
          "line_start": 117,
          "line_end": 165,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Run comprehensive coverage analysis.\n\nReturns:\n    Complete coverage report with all metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 186
        },
        {
          "name": "_run_tests_with_coverage",
          "line_start": 167,
          "line_end": 193,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Run tests with coverage measurement.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_analyze_modules",
          "line_start": 195,
          "line_end": 205,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze coverage for all source modules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_should_analyze_file",
          "line_start": 207,
          "line_end": 217,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Check if file should be analyzed for coverage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_analyze_module",
          "line_start": 219,
          "line_end": 256,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Analyze coverage for a single module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 177
        },
        {
          "name": "_analyze_functions",
          "line_start": 258,
          "line_end": 279,
          "args": [
            "self",
            "file_path",
            "executable_lines",
            "missing_lines"
          ],
          "returns": null,
          "docstring": "Analyze coverage for functions in a module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "_analyze_function",
          "line_start": 281,
          "line_end": 322,
          "args": [
            "self",
            "func_node",
            "executable_lines",
            "missing_lines"
          ],
          "returns": null,
          "docstring": "Analyze coverage for a single function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "_calculate_complexity",
          "line_start": 324,
          "line_end": 337,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate cyclomatic complexity of a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_find_test_files",
          "line_start": 339,
          "line_end": 356,
          "args": [
            "self",
            "source_file"
          ],
          "returns": null,
          "docstring": "Find test files related to a source module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_categorize_tests",
          "line_start": 358,
          "line_end": 391,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Categorize tests by type (from measure_final_coverage.py logic).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "_calculate_branch_coverage",
          "line_start": 393,
          "line_end": 408,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate branch coverage from coverage data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_calculate_function_coverage",
          "line_start": 410,
          "line_end": 421,
          "args": [
            "self",
            "modules"
          ],
          "returns": null,
          "docstring": "Calculate function-level coverage percentage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_print_summary",
          "line_start": 423,
          "line_end": 451,
          "args": [
            "self",
            "report"
          ],
          "returns": null,
          "docstring": "Print coverage summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 254
        },
        {
          "name": "get_uncovered_functions",
          "line_start": 453,
          "line_end": 462,
          "args": [
            "self",
            "report"
          ],
          "returns": null,
          "docstring": "Get list of uncovered functions for test generation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "save_report",
          "line_start": 464,
          "line_end": 507,
          "args": [
            "self",
            "report",
            "output_path"
          ],
          "returns": null,
          "docstring": "Save coverage report to JSON file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "__init__",
          "line_start": 529,
          "line_end": 535,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "perform_comprehensive_analysis",
          "line_start": 537,
          "line_end": 559,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform complete classical codebase analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_analyze_software_metrics",
          "line_start": 561,
          "line_end": 579,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Comprehensive software metrics analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        },
        {
          "name": "_analyze_graph_structures",
          "line_start": 581,
          "line_end": 606,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Graph theory analysis of code structures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_detect_code_clones",
          "line_start": 608,
          "line_end": 624,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Comprehensive code clone detection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "_analyze_security_patterns",
          "line_start": 626,
          "line_end": 645,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Security vulnerability and code smell analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "_analyze_linguistic_features",
          "line_start": 647,
          "line_end": 664,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Linguistic and identifier analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_evolution_patterns",
          "line_start": 666,
          "line_end": 683,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Evolution and change pattern analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_perform_statistical_analysis",
          "line_start": 685,
          "line_end": 702,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Statistical analysis of code properties.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_structural_patterns",
          "line_start": 704,
          "line_end": 721,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Structural and architectural pattern analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_comprehensive_complexity_analysis",
          "line_start": 723,
          "line_end": 740,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Comprehensive complexity analysis beyond McCabe.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_comprehensive_quality_analysis",
          "line_start": 742,
          "line_end": 759,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Comprehensive quality analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_calculate_halstead_metrics",
          "line_start": 765,
          "line_end": 827,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate Halstead software science metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 371
        },
        {
          "name": "_calculate_mccabe_complexity",
          "line_start": 829,
          "line_end": 863,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate McCabe cyclomatic complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "_calculate_function_complexity",
          "line_start": 865,
          "line_end": 878,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate cyclomatic complexity for a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_calculate_sloc_metrics",
          "line_start": 880,
          "line_end": 956,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate comprehensive Source Lines of Code metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 539
        },
        {
          "name": "_detect_exact_clones",
          "line_start": 958,
          "line_end": 996,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect exact code clones using hash comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "_detect_vulnerability_patterns",
          "line_start": 998,
          "line_end": 1047,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect basic security vulnerability patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 228
        },
        {
          "name": "_analyze_identifiers",
          "line_start": 1049,
          "line_end": 1098,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze identifier patterns and naming conventions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 316
        },
        {
          "name": "_generate_comprehensive_summary",
          "line_start": 1100,
          "line_end": 1158,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "docstring": "Generate a comprehensive summary of all analysis results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 450
        },
        {
          "name": "_should_analyze_file",
          "line_start": 1160,
          "line_end": 1165,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Check if file should be analyzed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "_calculate_maintainability_index",
          "line_start": 1171,
          "line_end": 1188,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate maintainability index - simplified implementation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "_calculate_coupling_metrics",
          "line_start": 1190,
          "line_end": 1275,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate comprehensive coupling metrics (fan-in, fan-out, CBO).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 641
        },
        {
          "name": "_calculate_cohesion_metrics",
          "line_start": 1277,
          "line_end": 1320,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cohesion metrics using LCOM (Lack of Cohesion of Methods).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 257
        },
        {
          "name": "_calculate_lcom",
          "line_start": 1322,
          "line_end": 1373,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Calculate LCOM (Lack of Cohesion of Methods) for a class.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 346
        },
        {
          "name": "_calculate_distribution",
          "line_start": 1375,
          "line_end": 1397,
          "args": [
            "self",
            "values"
          ],
          "returns": null,
          "docstring": "Calculate distribution of values into ranges.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_calculate_inheritance_metrics",
          "line_start": 1399,
          "line_end": 1524,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate comprehensive inheritance metrics (DIT, NOC, etc.).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 682
        },
        {
          "name": "_calculate_polymorphism_metrics",
          "line_start": 1526,
          "line_end": 1624,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate polymorphism metrics (method overriding, interface usage).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 563
        },
        {
          "name": "_calculate_encapsulation_metrics",
          "line_start": 1626,
          "line_end": 1628,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Simplified encapsulation metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_abstraction_metrics",
          "line_start": 1630,
          "line_end": 1632,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Simplified abstraction metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_build_call_graph",
          "line_start": 1634,
          "line_end": 1636,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Build simplified call graph.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 7
        },
        {
          "name": "_build_control_flow_graphs",
          "line_start": 1638,
          "line_end": 1640,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Build simplified control flow graphs.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 7
        },
        {
          "name": "_build_dependency_graph",
          "line_start": 1642,
          "line_end": 1644,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Build simplified dependency graph.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_call_graph",
          "line_start": 1646,
          "line_end": 1648,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze call graph - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_analyze_control_flows",
          "line_start": 1650,
          "line_end": 1652,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze control flows - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_analyze_dependency_graph",
          "line_start": 1654,
          "line_end": 1656,
          "args": [
            "self",
            "graph"
          ],
          "returns": null,
          "docstring": "Analyze dependency graph - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "_calculate_centrality_measures",
          "line_start": 1658,
          "line_end": 1660,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate graph centrality measures - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_graph_clustering",
          "line_start": 1662,
          "line_end": 1664,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze graph clustering - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_graph_connectivity",
          "line_start": 1666,
          "line_end": 1668,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze graph connectivity - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_detect_graph_cycles",
          "line_start": 1670,
          "line_end": 1672,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect graph cycles - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_critical_paths",
          "line_start": 1674,
          "line_end": 1676,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze critical paths - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_detect_near_clones",
          "line_start": 1678,
          "line_end": 1762,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect near clones using sequence similarity analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 493
        },
        {
          "name": "_calculate_line_similarity",
          "line_start": 1764,
          "line_end": 1771,
          "args": [
            "self",
            "lines1",
            "lines2"
          ],
          "returns": null,
          "docstring": "Calculate similarity between two sets of code lines.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_calculate_structural_similarity",
          "line_start": 1773,
          "line_end": 1787,
          "args": [
            "self",
            "lines1",
            "lines2"
          ],
          "returns": null,
          "docstring": "Calculate structural similarity based on code patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "_extract_code_structure",
          "line_start": 1789,
          "line_end": 1824,
          "args": [
            "self",
            "lines"
          ],
          "returns": null,
          "docstring": "Extract structural elements from code lines.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 234
        },
        {
          "name": "_detect_structural_clones",
          "line_start": 1826,
          "line_end": 1828,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect structural clones - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_detect_semantic_clones",
          "line_start": 1830,
          "line_end": 1832,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect semantic clones - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_group_clone_families",
          "line_start": 1834,
          "line_end": 1836,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Group clone families - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_analyze_clone_evolution",
          "line_start": 1838,
          "line_end": 1840,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze clone evolution - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_clone_metrics",
          "line_start": 1842,
          "line_end": 1844,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate clone metrics - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_detect_code_smells",
          "line_start": 1846,
          "line_end": 1851,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect code smells - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_detect_antipatterns",
          "line_start": 1853,
          "line_end": 1855,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect antipatterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_identify_security_hotspots",
          "line_start": 1857,
          "line_end": 1859,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify security hotspots - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_analyze_input_validation",
          "line_start": 1861,
          "line_end": 1863,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze input validation - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_authentication",
          "line_start": 1865,
          "line_end": 1867,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze authentication patterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_authorization",
          "line_start": 1869,
          "line_end": 1871,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze authorization patterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_cryptography_usage",
          "line_start": 1873,
          "line_end": 1875,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze cryptography usage - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_sql_injection_risks",
          "line_start": 1877,
          "line_end": 1879,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze SQL injection risks - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_analyze_xss_vulnerabilities",
          "line_start": 1881,
          "line_end": 1883,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze XSS vulnerabilities - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_analyze_naming_conventions",
          "line_start": 1885,
          "line_end": 1887,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze naming conventions - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_vocabulary_metrics",
          "line_start": 1889,
          "line_end": 1891,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate vocabulary metrics - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_analyze_comments",
          "line_start": 1893,
          "line_end": 1895,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze comments - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_assess_documentation_quality",
          "line_start": 1897,
          "line_end": 1899,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess documentation quality - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_readability_metrics",
          "line_start": 1901,
          "line_end": 1903,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate readability metrics - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_abbreviations",
          "line_start": 1905,
          "line_end": 1907,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze abbreviation usage - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_extract_domain_terms",
          "line_start": 1909,
          "line_end": 1911,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Extract domain terminology - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_nl_patterns",
          "line_start": 1913,
          "line_end": 1915,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze natural language patterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_file_ages",
          "line_start": 1918,
          "line_end": 1920,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze file ages - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_growth_patterns",
          "line_start": 1922,
          "line_end": 1924,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze growth patterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_detect_refactoring_patterns",
          "line_start": 1926,
          "line_end": 1928,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect refactoring patterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_identify_change_hotspots",
          "line_start": 1930,
          "line_end": 1932,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify change hotspots - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_calculate_stability_metrics",
          "line_start": 1934,
          "line_end": 1936,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate stability metrics - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_change_frequency",
          "line_start": 1938,
          "line_end": 1940,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze change frequency - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_code_churn",
          "line_start": 1942,
          "line_end": 1944,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate code churn - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_developer_patterns",
          "line_start": 1946,
          "line_end": 1948,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze developer patterns - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_temporal_coupling",
          "line_start": 1950,
          "line_end": 1952,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze temporal coupling - simplified.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_distributions",
          "line_start": 1955,
          "line_end": 1956,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_correlations",
          "line_start": 1958,
          "line_end": 1959,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_detect_outliers",
          "line_start": 1961,
          "line_end": 1962,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "_perform_clustering",
          "line_start": 1964,
          "line_end": 1965,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_trends",
          "line_start": 1967,
          "line_end": 1968,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_variance",
          "line_start": 1970,
          "line_end": 1971,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_entropy_measures",
          "line_start": 1973,
          "line_end": 1974,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_apply_information_theory",
          "line_start": 1976,
          "line_end": 1977,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_perform_statistical_tests",
          "line_start": 1979,
          "line_end": 1980,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_detect_design_patterns",
          "line_start": 1983,
          "line_end": 2112,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect common design patterns in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 473
        },
        {
          "name": "_is_singleton_pattern",
          "line_start": 2114,
          "line_end": 2129,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect singleton pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_is_factory_pattern",
          "line_start": 2131,
          "line_end": 2146,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect factory pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_is_observer_pattern",
          "line_start": 2148,
          "line_end": 2161,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect observer pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_is_decorator_pattern",
          "line_start": 2163,
          "line_end": 2186,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect decorator pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_is_strategy_pattern",
          "line_start": 2188,
          "line_end": 2202,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect strategy pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_is_command_pattern",
          "line_start": 2204,
          "line_end": 2217,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect command pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_detect_architectural_patterns",
          "line_start": 2219,
          "line_end": 2220,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_analyze_layered_architecture",
          "line_start": 2222,
          "line_end": 2223,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_modular_structure",
          "line_start": 2225,
          "line_end": 2226,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_package_structure",
          "line_start": 2228,
          "line_end": 2229,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_interfaces",
          "line_start": 2231,
          "line_end": 2232,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_abstract_coupling",
          "line_start": 2234,
          "line_end": 2235,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_concrete_coupling",
          "line_start": 2237,
          "line_end": 2238,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_fan_metrics",
          "line_start": 2240,
          "line_end": 2241,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_quality_metrics",
          "line_start": 2244,
          "line_end": 2245,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_assess_technical_debt",
          "line_start": 2247,
          "line_end": 2248,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_maintainability_factors",
          "line_start": 2250,
          "line_end": 2251,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_reliability_indicators",
          "line_start": 2253,
          "line_end": 2254,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_performance_indicators",
          "line_start": 2256,
          "line_end": 2257,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_portability_metrics",
          "line_start": 2259,
          "line_end": 2260,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_usability_metrics",
          "line_start": 2262,
          "line_end": 2263,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_testability_metrics",
          "line_start": 2265,
          "line_end": 2266,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_analyze_reusability_metrics",
          "line_start": 2268,
          "line_end": 2269,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_detailed_cyclomatic_analysis",
          "line_start": 2272,
          "line_end": 2273,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_calculate_cognitive_complexity",
          "line_start": 2275,
          "line_end": 2276,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_npath_complexity",
          "line_start": 2278,
          "line_end": 2279,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_essential_complexity",
          "line_start": 2281,
          "line_end": 2282,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_data_complexity",
          "line_start": 2284,
          "line_end": 2285,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_system_complexity",
          "line_start": 2287,
          "line_end": 2288,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_interface_complexity",
          "line_start": 2290,
          "line_end": 2291,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_temporal_complexity",
          "line_start": 2293,
          "line_end": 2294,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_calculate_structural_complexity",
          "line_start": 2296,
          "line_end": 2297,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "__init__",
          "line_start": 2310,
          "line_end": 2314,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "perform_dependency_analysis",
          "line_start": 2316,
          "line_end": 2326,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive dependency analysis using multiple techniques.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_analyze_import_dependencies",
          "line_start": 2328,
          "line_end": 2353,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Advanced import dependency analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "_analyze_function_signatures",
          "line_start": 2355,
          "line_end": 2385,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Advanced function signature analysis using AST.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 229
        },
        {
          "name": "_analyze_cross_module_references",
          "line_start": 2387,
          "line_end": 2413,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze references between modules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_find_orphaned_modules",
          "line_start": 2415,
          "line_end": 2438,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Find modules that aren't imported by any other module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_detect_circular_dependencies",
          "line_start": 2440,
          "line_end": 2497,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect circular dependencies between modules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 338
        },
        {
          "name": "_analyze_dependency_depth",
          "line_start": 2499,
          "line_end": 2520,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze dependency depth for each module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "_should_analyze_file",
          "line_start": 2522,
          "line_end": 2530,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Check if file should be analyzed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "__init__",
          "line_start": 2538,
          "line_end": 2539,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "assess_codebase_health",
          "line_start": 2541,
          "line_end": 2564,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive codebase health assessment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_assess_code_quality",
          "line_start": 2566,
          "line_end": 2604,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess code quality using multiple metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 207
        },
        {
          "name": "_assess_architectural_integrity",
          "line_start": 2606,
          "line_end": 2617,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess architectural integrity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_assess_test_coverage_health",
          "line_start": 2619,
          "line_end": 2626,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess test coverage health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_assess_dependency_health",
          "line_start": 2628,
          "line_end": 2641,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess dependency health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_assess_documentation_health",
          "line_start": 2643,
          "line_end": 2661,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess documentation health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_analyze_health_trends",
          "line_start": 2663,
          "line_end": 2672,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze health trends over time.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 25
        },
        {
          "name": "_generate_health_recommendations",
          "line_start": 2674,
          "line_end": 2690,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Generate health improvement recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "_should_analyze_file",
          "line_start": 2692,
          "line_end": 2698,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Check if file should be analyzed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "calculate_depth",
          "line_start": 1460,
          "line_end": 1489,
          "args": [
            "class_name"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "has_cycle",
          "line_start": 2467,
          "line_end": 2491,
          "args": [
            "node",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "coverage",
          "names": [
            "coverage"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "subprocess",
          "names": [
            "subprocess"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "networkx",
          "names": [
            "networkx"
          ],
          "alias": "nx",
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Set",
            "Tuple",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "xml.etree.ElementTree",
          "names": [
            "xml.etree.ElementTree"
          ],
          "alias": "ET",
          "is_from_import": false,
          "line_number": 26
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 28
        },
        {
          "module": "itertools",
          "names": [
            "itertools"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 29
        },
        {
          "module": "difflib",
          "names": [
            "SequenceMatcher"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 2398
        }
      ],
      "external_dependencies": "{'coverage', 'pathlib', 'subprocess', 'typing', 'dataclasses', 'networkx', 'xml.etree.ElementTree', 'sys', 'json', 'datetime', 're', 'difflib', 'hashlib', 'math', 'statistics', 'ast', 'itertools', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 2698,
      "complexity_score": 29062,
      "api_surface_area": 14,
      "docstring": "Unified Coverage Analysis System\n\nConsolidates functionality from:\n- measure_final_coverage.py\n- coverage_analysis.py  \n- branch_coverage_analyzer.py\n- coverage_baseline.py\n\nProvides comprehensive coverage measurement, analysis, and reporting.",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "{'networkx'}",
      "documentation_coverage": 0.7592592592592593,
      "estimated_migration_complexity": "high"
    },
    "testmaster\\analysis\\comprehensive_analysis\\api_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "component_name": "api_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.826631",
      "classes": [
        {
          "name": "APIAnalyzer",
          "line_start": 25,
          "line_end": 880,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 28,
              "line_end": 44,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive API and interface analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_analyze_rest_apis",
              "line_start": 46,
              "line_end": 94,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze REST API implementations and contracts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 246
            },
            {
              "name": "_detect_rest_endpoints",
              "line_start": 96,
              "line_end": 123,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect REST API endpoints in the code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 200
            },
            {
              "name": "_parse_flask_route",
              "line_start": 125,
              "line_end": 156,
              "args": [
                "self",
                "decorator",
                "func"
              ],
              "returns": null,
              "docstring": "Parse Flask route decorator.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "_parse_fastapi_route",
              "line_start": 158,
              "line_end": 184,
              "args": [
                "self",
                "decorator",
                "func"
              ],
              "returns": null,
              "docstring": "Parse FastAPI route decorator.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_parse_django_route",
              "line_start": 186,
              "line_end": 194,
              "args": [
                "self",
                "func",
                "content"
              ],
              "returns": null,
              "docstring": "Parse Django REST framework route.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_analyze_graphql_schemas",
              "line_start": 196,
              "line_end": 239,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze GraphQL schema and resolver patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 207
            },
            {
              "name": "_detect_graphql_schemas",
              "line_start": 241,
              "line_end": 258,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect GraphQL schema definitions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_detect_graphql_resolvers",
              "line_start": 260,
              "line_end": 274,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect GraphQL resolver methods.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_has_n_plus_one_risk",
              "line_start": 276,
              "line_end": 288,
              "args": [
                "self",
                "resolver_node"
              ],
              "returns": null,
              "docstring": "Check if resolver has N+1 query risk.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            },
            {
              "name": "_analyze_function_signatures",
              "line_start": 290,
              "line_end": 339,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze function signature complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 231
            },
            {
              "name": "_analyze_single_signature",
              "line_start": 341,
              "line_end": 377,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Analyze a single function signature.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 217
            },
            {
              "name": "_analyze_interface_segregation",
              "line_start": 379,
              "line_end": 417,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze interface segregation and cohesion.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 185
            },
            {
              "name": "_is_interface",
              "line_start": 419,
              "line_end": 436,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Check if a class is an interface (ABC or Protocol).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_analyze_interface",
              "line_start": 438,
              "line_end": 464,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Analyze an interface definition.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 155
            },
            {
              "name": "_calculate_interface_cohesion",
              "line_start": 466,
              "line_end": 498,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Calculate interface cohesion score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "_track_api_evolution",
              "line_start": 500,
              "line_end": 532,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Track API evolution and versioning patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "_detect_deprecated_apis",
              "line_start": 534,
              "line_end": 560,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect deprecated API markers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_detect_versioning_patterns",
              "line_start": 562,
              "line_end": 576,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Detect API versioning patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_detect_versioning_strategy",
              "line_start": 578,
              "line_end": 589,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Detect overall versioning strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_detect_authentication_patterns",
              "line_start": 591,
              "line_end": 611,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect authentication patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "_detect_rate_limiting",
              "line_start": 613,
              "line_end": 624,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect rate limiting implementations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_analyze_endpoint_consistency",
              "line_start": 626,
              "line_end": 669,
              "args": [
                "self",
                "endpoints"
              ],
              "returns": null,
              "docstring": "Analyze consistency across endpoints.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 258
            },
            {
              "name": "_check_openapi_compliance",
              "line_start": 671,
              "line_end": 701,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for OpenAPI/Swagger specification compliance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 130
            },
            {
              "name": "_analyze_websocket_patterns",
              "line_start": 703,
              "line_end": 741,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze WebSocket implementation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "_assess_sdk_generation_readiness",
              "line_start": 743,
              "line_end": 791,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess readiness for SDK generation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 236
            },
            {
              "name": "_extract_function_parameters",
              "line_start": 793,
              "line_end": 795,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Extract function parameter names.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            },
            {
              "name": "_extract_function_parameters_with_types",
              "line_start": 797,
              "line_end": 809,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Extract function parameters with type hints.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_extract_graphql_fields",
              "line_start": 811,
              "line_end": 818,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Extract GraphQL field definitions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_calculate_resolver_complexity",
              "line_start": 820,
              "line_end": 830,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate complexity of a GraphQL resolver.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "_calculate_graphql_complexity",
              "line_start": 832,
              "line_end": 848,
              "args": [
                "self",
                "graphql_data"
              ],
              "returns": null,
              "docstring": "Calculate overall GraphQL query complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_calculate_api_metrics",
              "line_start": 850,
              "line_end": 880,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall API metrics and recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 200
            }
          ],
          "docstring": "Analyzer for API and interface patterns.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 28,
          "line_end": 44,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive API and interface analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_analyze_rest_apis",
          "line_start": 46,
          "line_end": 94,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze REST API implementations and contracts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 246
        },
        {
          "name": "_detect_rest_endpoints",
          "line_start": 96,
          "line_end": 123,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect REST API endpoints in the code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 200
        },
        {
          "name": "_parse_flask_route",
          "line_start": 125,
          "line_end": 156,
          "args": [
            "self",
            "decorator",
            "func"
          ],
          "returns": null,
          "docstring": "Parse Flask route decorator.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "_parse_fastapi_route",
          "line_start": 158,
          "line_end": 184,
          "args": [
            "self",
            "decorator",
            "func"
          ],
          "returns": null,
          "docstring": "Parse FastAPI route decorator.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_parse_django_route",
          "line_start": 186,
          "line_end": 194,
          "args": [
            "self",
            "func",
            "content"
          ],
          "returns": null,
          "docstring": "Parse Django REST framework route.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_analyze_graphql_schemas",
          "line_start": 196,
          "line_end": 239,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze GraphQL schema and resolver patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 207
        },
        {
          "name": "_detect_graphql_schemas",
          "line_start": 241,
          "line_end": 258,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect GraphQL schema definitions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_detect_graphql_resolvers",
          "line_start": 260,
          "line_end": 274,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect GraphQL resolver methods.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_has_n_plus_one_risk",
          "line_start": 276,
          "line_end": 288,
          "args": [
            "self",
            "resolver_node"
          ],
          "returns": null,
          "docstring": "Check if resolver has N+1 query risk.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "_analyze_function_signatures",
          "line_start": 290,
          "line_end": 339,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze function signature complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 231
        },
        {
          "name": "_analyze_single_signature",
          "line_start": 341,
          "line_end": 377,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Analyze a single function signature.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 217
        },
        {
          "name": "_analyze_interface_segregation",
          "line_start": 379,
          "line_end": 417,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze interface segregation and cohesion.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 185
        },
        {
          "name": "_is_interface",
          "line_start": 419,
          "line_end": 436,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Check if a class is an interface (ABC or Protocol).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_analyze_interface",
          "line_start": 438,
          "line_end": 464,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Analyze an interface definition.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 155
        },
        {
          "name": "_calculate_interface_cohesion",
          "line_start": 466,
          "line_end": 498,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Calculate interface cohesion score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "_track_api_evolution",
          "line_start": 500,
          "line_end": 532,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Track API evolution and versioning patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "_detect_deprecated_apis",
          "line_start": 534,
          "line_end": 560,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect deprecated API markers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_detect_versioning_patterns",
          "line_start": 562,
          "line_end": 576,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Detect API versioning patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_detect_versioning_strategy",
          "line_start": 578,
          "line_end": 589,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Detect overall versioning strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_detect_authentication_patterns",
          "line_start": 591,
          "line_end": 611,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect authentication patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "_detect_rate_limiting",
          "line_start": 613,
          "line_end": 624,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect rate limiting implementations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_analyze_endpoint_consistency",
          "line_start": 626,
          "line_end": 669,
          "args": [
            "self",
            "endpoints"
          ],
          "returns": null,
          "docstring": "Analyze consistency across endpoints.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 258
        },
        {
          "name": "_check_openapi_compliance",
          "line_start": 671,
          "line_end": 701,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for OpenAPI/Swagger specification compliance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 130
        },
        {
          "name": "_analyze_websocket_patterns",
          "line_start": 703,
          "line_end": 741,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze WebSocket implementation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "_assess_sdk_generation_readiness",
          "line_start": 743,
          "line_end": 791,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess readiness for SDK generation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 236
        },
        {
          "name": "_extract_function_parameters",
          "line_start": 793,
          "line_end": 795,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Extract function parameter names.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "_extract_function_parameters_with_types",
          "line_start": 797,
          "line_end": 809,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Extract function parameters with type hints.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_extract_graphql_fields",
          "line_start": 811,
          "line_end": 818,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Extract GraphQL field definitions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_calculate_resolver_complexity",
          "line_start": 820,
          "line_end": 830,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate complexity of a GraphQL resolver.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "_calculate_graphql_complexity",
          "line_start": 832,
          "line_end": 848,
          "args": [
            "self",
            "graphql_data"
          ],
          "returns": null,
          "docstring": "Calculate overall GraphQL query complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_calculate_api_metrics",
          "line_start": 850,
          "line_end": 880,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall API metrics and recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 200
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'json', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 880,
      "complexity_score": 9432,
      "api_surface_area": 2,
      "docstring": "API and Interface Analysis Module\n==================================\n\nImplements comprehensive API and interface analysis:\n- REST API contract analysis with OpenAPI validation\n- GraphQL schema analysis with N+1 detection\n- Function signature complexity assessment\n- Interface segregation and cohesion analysis\n- API evolution tracking and versioning\n- WebSocket pattern analysis\n- SDK generation readiness",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0303030303030303,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\base_analyzer.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "component_name": "base_analyzer",
      "analysis_timestamp": "2025-08-20 21:46:39.838773",
      "classes": [
        {
          "name": "BaseAnalyzer",
          "line_start": 17,
          "line_end": 108,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 20,
              "line_end": 23,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "_get_file_content",
              "line_start": 25,
              "line_end": 33,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Get file content with caching.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_get_ast",
              "line_start": 35,
              "line_end": 43,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Get AST with caching.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_should_analyze_file",
              "line_start": 45,
              "line_end": 50,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Check if file should be analyzed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "_get_python_files",
              "line_start": 52,
              "line_end": 54,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get all Python files to analyze.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_calculate_distribution",
              "line_start": 56,
              "line_end": 78,
              "args": [
                "self",
                "values"
              ],
              "returns": null,
              "docstring": "Calculate distribution of values into ranges.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_calculate_function_complexity",
              "line_start": 80,
              "line_end": 93,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate cyclomatic complexity for a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_extract_identifiers",
              "line_start": 95,
              "line_end": 101,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Extract all identifiers from AST.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "_calculate_similarity",
              "line_start": 103,
              "line_end": 108,
              "args": [
                "self",
                "seq1",
                "seq2"
              ],
              "returns": null,
              "docstring": "Calculate similarity between two sequences.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Base class for all analysis modules.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 20,
          "line_end": 23,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "_get_file_content",
          "line_start": 25,
          "line_end": 33,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Get file content with caching.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_get_ast",
          "line_start": 35,
          "line_end": 43,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Get AST with caching.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_should_analyze_file",
          "line_start": 45,
          "line_end": 50,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Check if file should be analyzed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "_get_python_files",
          "line_start": 52,
          "line_end": 54,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get all Python files to analyze.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_calculate_distribution",
          "line_start": 56,
          "line_end": 78,
          "args": [
            "self",
            "values"
          ],
          "returns": null,
          "docstring": "Calculate distribution of values into ranges.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_calculate_function_complexity",
          "line_start": 80,
          "line_end": 93,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate cyclomatic complexity for a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_extract_identifiers",
          "line_start": 95,
          "line_end": 101,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Extract all identifiers from AST.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "_calculate_similarity",
          "line_start": 103,
          "line_end": 108,
          "args": [
            "self",
            "seq1",
            "seq2"
          ],
          "returns": null,
          "docstring": "Calculate similarity between two sequences.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 8
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 9
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 10
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 11
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 12
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "difflib",
          "names": [
            "SequenceMatcher"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'difflib', 'statistics', 'ast', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 108,
      "complexity_score": 1148,
      "api_surface_area": 0,
      "docstring": "Base Analyzer Class\n==================\n\nCommon functionality for all analysis modules.",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\clone_detection.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "component_name": "clone_detection",
      "analysis_timestamp": "2025-08-20 21:46:39.841996",
      "classes": [
        {
          "name": "CloneDetectionAnalyzer",
          "line_start": 23,
          "line_end": 420,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 26,
              "line_end": 29,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "analyze",
              "line_start": 31,
              "line_end": 45,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive clone detection analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_detect_exact_clones",
              "line_start": 47,
              "line_end": 103,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect exact code clones (Type 1 - identical code).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 354
            },
            {
              "name": "_detect_near_clones",
              "line_start": 105,
              "line_end": 193,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect near clones (Type 2 - similar with whitespace/comment differences).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 508
            },
            {
              "name": "_detect_structural_clones",
              "line_start": 195,
              "line_end": 235,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect structural clones (Type 3 - same structure, different identifiers).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 237
            },
            {
              "name": "_extract_structural_signature",
              "line_start": 237,
              "line_end": 257,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Extract structural signature from a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 153
            },
            {
              "name": "_detect_semantic_clones",
              "line_start": 259,
              "line_end": 302,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect semantic clones (Type 4 - same functionality, different implementation).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "_extract_behavior_pattern",
              "line_start": 304,
              "line_end": 335,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Extract behavioral pattern from a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 197
            },
            {
              "name": "_is_validation_check",
              "line_start": 337,
              "line_end": 349,
              "args": [
                "self",
                "if_node"
              ],
              "returns": null,
              "docstring": "Check if an if statement is likely a validation check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            },
            {
              "name": "_group_clone_families",
              "line_start": 351,
              "line_end": 372,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Group related clones into families.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_calculate_clone_metrics",
              "line_start": 374,
              "line_end": 412,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall clone metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 248
            },
            {
              "name": "_extract_function_name",
              "line_start": 414,
              "line_end": 420,
              "args": [
                "self",
                "call_node"
              ],
              "returns": null,
              "docstring": "Extract function name from a call node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            }
          ],
          "docstring": "Analyzer for code clone detection.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 26,
          "line_end": 29,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "analyze",
          "line_start": 31,
          "line_end": 45,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive clone detection analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_detect_exact_clones",
          "line_start": 47,
          "line_end": 103,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect exact code clones (Type 1 - identical code).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 354
        },
        {
          "name": "_detect_near_clones",
          "line_start": 105,
          "line_end": 193,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect near clones (Type 2 - similar with whitespace/comment differences).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 508
        },
        {
          "name": "_detect_structural_clones",
          "line_start": 195,
          "line_end": 235,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect structural clones (Type 3 - same structure, different identifiers).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 237
        },
        {
          "name": "_extract_structural_signature",
          "line_start": 237,
          "line_end": 257,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Extract structural signature from a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 153
        },
        {
          "name": "_detect_semantic_clones",
          "line_start": 259,
          "line_end": 302,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect semantic clones (Type 4 - same functionality, different implementation).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "_extract_behavior_pattern",
          "line_start": 304,
          "line_end": 335,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Extract behavioral pattern from a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 197
        },
        {
          "name": "_is_validation_check",
          "line_start": 337,
          "line_end": 349,
          "args": [
            "self",
            "if_node"
          ],
          "returns": null,
          "docstring": "Check if an if statement is likely a validation check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "_group_clone_families",
          "line_start": 351,
          "line_end": 372,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Group related clones into families.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_calculate_clone_metrics",
          "line_start": 374,
          "line_end": 412,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall clone metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 248
        },
        {
          "name": "_extract_function_name",
          "line_start": 414,
          "line_end": 420,
          "args": [
            "self",
            "call_node"
          ],
          "returns": null,
          "docstring": "Extract function name from a call node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "difflib",
          "names": [
            "SequenceMatcher"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'difflib', 'hashlib', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 420,
      "complexity_score": 4388,
      "api_surface_area": 2,
      "docstring": "Clone Detection Analyzer\n========================\n\nImplements comprehensive code clone detection:\n- Exact clones (Type 1)\n- Near clones with whitespace/comment differences (Type 2)  \n- Structural clones with identifier changes (Type 3)\n- Semantic clones with different implementations (Type 4)",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\complexity_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "component_name": "complexity_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.851412",
      "classes": [
        {
          "name": "ComplexityAnalyzer",
          "line_start": 21,
          "line_end": 698,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 24,
              "line_end": 40,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive complexity analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_analyze_cyclomatic_complexity",
              "line_start": 42,
              "line_end": 98,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze cyclomatic complexity across the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 330
            },
            {
              "name": "_calculate_detailed_cyclomatic_complexity",
              "line_start": 100,
              "line_end": 157,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate detailed cyclomatic complexity with breakdown.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 337
            },
            {
              "name": "_categorize_complexities",
              "line_start": 159,
              "line_end": 181,
              "args": [
                "self",
                "complexities"
              ],
              "returns": null,
              "docstring": "Categorize complexities into risk levels.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            },
            {
              "name": "_analyze_cognitive_complexity",
              "line_start": 183,
              "line_end": 228,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze cognitive complexity (human comprehension difficulty).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "_calculate_cognitive_complexity",
              "line_start": 230,
              "line_end": 302,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate cognitive complexity score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 362
            },
            {
              "name": "_analyze_structural_complexity",
              "line_start": 304,
              "line_end": 336,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze structural complexity of the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "_calculate_module_complexity",
              "line_start": 338,
              "line_end": 366,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Calculate complexity at module level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_categorize_module_complexity",
              "line_start": 368,
              "line_end": 377,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Categorize module complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_calculate_class_complexity",
              "line_start": 379,
              "line_end": 420,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Calculate complexity of a class.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 207
            },
            {
              "name": "_categorize_class_complexity",
              "line_start": 422,
              "line_end": 431,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Categorize class complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_calculate_inheritance_complexity",
              "line_start": 433,
              "line_end": 451,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Calculate inheritance complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "_analyze_computational_complexity",
              "line_start": 453,
              "line_end": 522,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze computational complexity patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 309
            },
            {
              "name": "_detect_nested_loops",
              "line_start": 524,
              "line_end": 542,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Detect nested loops and return maximum nesting depth.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_is_recursive_function",
              "line_start": 544,
              "line_end": 553,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is recursive.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_classify_recursion_type",
              "line_start": 555,
              "line_end": 558,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Classify type of recursion.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "_has_sorting_pattern",
              "line_start": 560,
              "line_end": 574,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check for sorting algorithm patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_has_search_pattern",
              "line_start": 576,
              "line_end": 590,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check for search algorithm patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_analyze_interface_complexity",
              "line_start": 592,
              "line_end": 654,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze interface complexity (parameters, return types, etc.).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 350
            },
            {
              "name": "_categorize_interface_complexity",
              "line_start": 656,
              "line_end": 665,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Categorize interface complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_analyze_complexity_distribution",
              "line_start": 667,
              "line_end": 673,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze distribution of complexity across the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "_identify_complexity_hotspots",
              "line_start": 675,
              "line_end": 688,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify complexity hotspots in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_analyze_complexity_trends",
              "line_start": 690,
              "line_end": 698,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze complexity trends and patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            }
          ],
          "docstring": "Analyzer for code complexity in multiple dimensions.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 24,
          "line_end": 40,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive complexity analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_analyze_cyclomatic_complexity",
          "line_start": 42,
          "line_end": 98,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze cyclomatic complexity across the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 330
        },
        {
          "name": "_calculate_detailed_cyclomatic_complexity",
          "line_start": 100,
          "line_end": 157,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate detailed cyclomatic complexity with breakdown.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 337
        },
        {
          "name": "_categorize_complexities",
          "line_start": 159,
          "line_end": 181,
          "args": [
            "self",
            "complexities"
          ],
          "returns": null,
          "docstring": "Categorize complexities into risk levels.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "_analyze_cognitive_complexity",
          "line_start": 183,
          "line_end": 228,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze cognitive complexity (human comprehension difficulty).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "_calculate_cognitive_complexity",
          "line_start": 230,
          "line_end": 302,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate cognitive complexity score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 362
        },
        {
          "name": "_analyze_structural_complexity",
          "line_start": 304,
          "line_end": 336,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze structural complexity of the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "_calculate_module_complexity",
          "line_start": 338,
          "line_end": 366,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Calculate complexity at module level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_categorize_module_complexity",
          "line_start": 368,
          "line_end": 377,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Categorize module complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_calculate_class_complexity",
          "line_start": 379,
          "line_end": 420,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Calculate complexity of a class.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 207
        },
        {
          "name": "_categorize_class_complexity",
          "line_start": 422,
          "line_end": 431,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Categorize class complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_calculate_inheritance_complexity",
          "line_start": 433,
          "line_end": 451,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Calculate inheritance complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "_analyze_computational_complexity",
          "line_start": 453,
          "line_end": 522,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze computational complexity patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 309
        },
        {
          "name": "_detect_nested_loops",
          "line_start": 524,
          "line_end": 542,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Detect nested loops and return maximum nesting depth.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_is_recursive_function",
          "line_start": 544,
          "line_end": 553,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is recursive.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_classify_recursion_type",
          "line_start": 555,
          "line_end": 558,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Classify type of recursion.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "_has_sorting_pattern",
          "line_start": 560,
          "line_end": 574,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check for sorting algorithm patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_has_search_pattern",
          "line_start": 576,
          "line_end": 590,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check for search algorithm patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_analyze_interface_complexity",
          "line_start": 592,
          "line_end": 654,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze interface complexity (parameters, return types, etc.).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 350
        },
        {
          "name": "_categorize_interface_complexity",
          "line_start": 656,
          "line_end": 665,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Categorize interface complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_analyze_complexity_distribution",
          "line_start": 667,
          "line_end": 673,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze distribution of complexity across the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "_identify_complexity_hotspots",
          "line_start": 675,
          "line_end": 688,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify complexity hotspots in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_analyze_complexity_trends",
          "line_start": 690,
          "line_end": 698,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze complexity trends and patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "analyze_node",
          "line_start": 239,
          "line_end": 290,
          "args": [
            "node",
            "nesting_level"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 292
        },
        {
          "name": "count_loop_depth",
          "line_start": 528,
          "line_end": 539,
          "args": [
            "node",
            "current_depth"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 698,
      "complexity_score": 7249,
      "api_surface_area": 4,
      "docstring": "Complexity Analysis Module\n==========================\n\nImplements comprehensive complexity analysis:\n- Multiple complexity dimensions and metrics\n- Cognitive complexity analysis\n- Structural complexity assessment\n- Complexity distribution and patterns",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9615384615384616,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "component_name": "concurrency_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.866946",
      "classes": [
        {
          "name": "ConcurrencyAnalyzer",
          "line_start": 25,
          "line_end": 1397,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 28,
              "line_end": 56,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "analyze",
              "line_start": 58,
              "line_end": 75,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive concurrency analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_gil_bottlenecks",
              "line_start": 77,
              "line_end": 121,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze potential GIL bottlenecks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_detect_cpu_bound_operations",
              "line_start": 123,
              "line_end": 173,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect CPU-bound operations that might cause GIL contention.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 216
            },
            {
              "name": "_analyze_thread_safety",
              "line_start": 175,
              "line_end": 219,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze thread safety issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 226
            },
            {
              "name": "_detect_shared_state",
              "line_start": 221,
              "line_end": 260,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect shared state that might be accessed by multiple threads.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 228
            },
            {
              "name": "_detect_unprotected_mutations",
              "line_start": 262,
              "line_end": 292,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect mutations of shared state without proper synchronization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 170
            },
            {
              "name": "_detect_race_conditions",
              "line_start": 294,
              "line_end": 339,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect potential race conditions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 221
            },
            {
              "name": "_detect_check_then_act",
              "line_start": 341,
              "line_end": 375,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect check-then-act race condition patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 177
            },
            {
              "name": "_detect_read_modify_write",
              "line_start": 377,
              "line_end": 397,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect read-modify-write patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_detect_deadlock_potential",
              "line_start": 399,
              "line_end": 437,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect potential deadlock situations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 186
            },
            {
              "name": "_detect_nested_locks",
              "line_start": 439,
              "line_end": 460,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect nested lock acquisitions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_analyze_async_await_patterns",
              "line_start": 462,
              "line_end": 513,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze async/await patterns and coroutines.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 259
            },
            {
              "name": "_detect_coroutines",
              "line_start": 515,
              "line_end": 532,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect async function definitions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_detect_blocking_in_async",
              "line_start": 534,
              "line_end": 578,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect blocking operations in async functions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 223
            },
            {
              "name": "_analyze_lock_contention",
              "line_start": 580,
              "line_end": 618,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze lock contention patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 197
            },
            {
              "name": "_analyze_concurrent_data_structures",
              "line_start": 620,
              "line_end": 662,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze usage of concurrent data structures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 214
            },
            {
              "name": "_identify_parallelization_opportunities",
              "line_start": 664,
              "line_end": 706,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify opportunities for parallelization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 208
            },
            {
              "name": "_find_parallel_loops",
              "line_start": 708,
              "line_end": 732,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Find loops that can be parallelized.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_calculate_concurrency_metrics",
              "line_start": 734,
              "line_end": 779,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall concurrency metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 283
            },
            {
              "name": "_count_math_operations",
              "line_start": 782,
              "line_end": 793,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Count mathematical operations in a node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_analyze_comprehension_complexity",
              "line_start": 795,
              "line_end": 811,
              "args": [
                "self",
                "comp"
              ],
              "returns": null,
              "docstring": "Analyze complexity of list comprehension.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_is_recursive_function",
              "line_start": 813,
              "line_end": 820,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Check if function is recursive.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_has_string_operations",
              "line_start": 822,
              "line_end": 829,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node contains string operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_detect_gil_contentious_patterns",
              "line_start": 831,
              "line_end": 854,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect patterns that cause GIL contention.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "_identify_multiprocessing_candidates",
              "line_start": 856,
              "line_end": 872,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Identify code that would benefit from multiprocessing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_find_gil_bypass_opportunities",
              "line_start": 874,
              "line_end": 896,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Find opportunities to bypass GIL using C extensions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_calculate_gil_impact",
              "line_start": 898,
              "line_end": 903,
              "args": [
                "self",
                "gil_analysis"
              ],
              "returns": null,
              "docstring": "Calculate GIL impact score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_has_synchronization",
              "line_start": 905,
              "line_end": 911,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Check if class has synchronization mechanisms.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_is_protected_by_lock",
              "line_start": 913,
              "line_end": 921,
              "args": [
                "self",
                "tree",
                "mutation"
              ],
              "returns": null,
              "docstring": "Check if mutation is protected by a lock.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_is_lock_acquisition",
              "line_start": 923,
              "line_end": 933,
              "args": [
                "self",
                "with_node"
              ],
              "returns": null,
              "docstring": "Check if with statement acquires a lock.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_identify_thread_safe_patterns",
              "line_start": 935,
              "line_end": 945,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Identify thread-safe patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_identify_unsafe_patterns",
              "line_start": 947,
              "line_end": 961,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Identify thread-unsafe patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_analyze_synchronization_coverage",
              "line_start": 963,
              "line_end": 975,
              "args": [
                "self",
                "thread_safety"
              ],
              "returns": null,
              "docstring": "Analyze synchronization coverage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_performs_state_change",
              "line_start": 977,
              "line_end": 979,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node performs a state change.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "_is_existence_check",
              "line_start": 981,
              "line_end": 985,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if call is an existence check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_creates_resource",
              "line_start": 987,
              "line_end": 992,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node creates a resource.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_detect_test_and_set",
              "line_start": 994,
              "line_end": 1010,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect test-and-set patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_detect_double_checked_locking",
              "line_start": 1012,
              "line_end": 1030,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect double-checked locking patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_calculate_race_condition_score",
              "line_start": 1032,
              "line_end": 1038,
              "args": [
                "self",
                "race_conditions"
              ],
              "returns": null,
              "docstring": "Calculate race condition risk score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_detect_lock_ordering_issues",
              "line_start": 1040,
              "line_end": 1069,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect potential lock ordering issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            },
            {
              "name": "_detect_circular_lock_dependencies",
              "line_start": 1071,
              "line_end": 1074,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect circular lock dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_calculate_deadlock_risk",
              "line_start": 1076,
              "line_end": 1082,
              "args": [
                "self",
                "deadlock_analysis"
              ],
              "returns": null,
              "docstring": "Calculate deadlock risk score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_detect_async_context_managers",
              "line_start": 1084,
              "line_end": 1095,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect async context managers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_detect_concurrent_tasks",
              "line_start": 1097,
              "line_end": 1110,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect concurrent task patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "_detect_async_antipatterns",
              "line_start": 1112,
              "line_end": 1131,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect async antipatterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "_calculate_async_complexity",
              "line_start": 1133,
              "line_end": 1145,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Calculate async function complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_has_async_error_handling",
              "line_start": 1147,
              "line_end": 1152,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Check if async function has error handling.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_check_async_best_practices",
              "line_start": 1154,
              "line_end": 1173,
              "args": [
                "self",
                "async_analysis"
              ],
              "returns": null,
              "docstring": "Check async best practices compliance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_analyze_lock_usage",
              "line_start": 1175,
              "line_end": 1188,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Analyze lock usage patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_estimate_lock_duration",
              "line_start": 1190,
              "line_end": 1208,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Estimate lock hold duration.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_classify_lock_granularity",
              "line_start": 1210,
              "line_end": 1224,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Classify locks as fine or coarse grained.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_suggest_lock_free_alternatives",
              "line_start": 1226,
              "line_end": 1242,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Suggest lock-free alternatives.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_detect_thread_safe_structures",
              "line_start": 1244,
              "line_end": 1260,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect thread-safe data structures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_detect_unsafe_structures",
              "line_start": 1262,
              "line_end": 1279,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect unsafe data structure usage in concurrent context.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_analyze_queue_usage",
              "line_start": 1281,
              "line_end": 1291,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Analyze queue usage patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_detect_atomic_operations",
              "line_start": 1293,
              "line_end": 1301,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect atomic operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "_generate_structure_recommendations",
              "line_start": 1303,
              "line_end": 1313,
              "args": [
                "self",
                "structure_analysis"
              ],
              "returns": null,
              "docstring": "Generate data structure recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_has_loop_independence",
              "line_start": 1315,
              "line_end": 1321,
              "args": [
                "self",
                "loop"
              ],
              "returns": null,
              "docstring": "Check if loop iterations are independent.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_is_map_pattern",
              "line_start": 1323,
              "line_end": 1331,
              "args": [
                "self",
                "loop"
              ],
              "returns": null,
              "docstring": "Check if loop follows a map pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_estimate_speedup",
              "line_start": 1333,
              "line_end": 1340,
              "args": [
                "self",
                "loop"
              ],
              "returns": null,
              "docstring": "Estimate potential speedup from parallelization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_find_map_reduce_patterns",
              "line_start": 1342,
              "line_end": 1356,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Find map-reduce patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_find_pipeline_opportunities",
              "line_start": 1358,
              "line_end": 1361,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Find pipeline parallelization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "_find_vectorization_candidates",
              "line_start": 1363,
              "line_end": 1374,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Find vectorization candidates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_generate_parallelization_recommendations",
              "line_start": 1376,
              "line_end": 1389,
              "args": [
                "self",
                "parallelization"
              ],
              "returns": null,
              "docstring": "Generate parallelization recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_get_parent",
              "line_start": 1391,
              "line_end": 1397,
              "args": [
                "self",
                "tree",
                "node"
              ],
              "returns": null,
              "docstring": "Get parent node of a given node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            }
          ],
          "docstring": "Analyzer for concurrency patterns and thread safety.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 28,
          "line_end": 56,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "analyze",
          "line_start": 58,
          "line_end": 75,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive concurrency analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_gil_bottlenecks",
          "line_start": 77,
          "line_end": 121,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze potential GIL bottlenecks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_detect_cpu_bound_operations",
          "line_start": 123,
          "line_end": 173,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect CPU-bound operations that might cause GIL contention.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 216
        },
        {
          "name": "_analyze_thread_safety",
          "line_start": 175,
          "line_end": 219,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze thread safety issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 226
        },
        {
          "name": "_detect_shared_state",
          "line_start": 221,
          "line_end": 260,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect shared state that might be accessed by multiple threads.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 228
        },
        {
          "name": "_detect_unprotected_mutations",
          "line_start": 262,
          "line_end": 292,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect mutations of shared state without proper synchronization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 170
        },
        {
          "name": "_detect_race_conditions",
          "line_start": 294,
          "line_end": 339,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect potential race conditions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 221
        },
        {
          "name": "_detect_check_then_act",
          "line_start": 341,
          "line_end": 375,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect check-then-act race condition patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 177
        },
        {
          "name": "_detect_read_modify_write",
          "line_start": 377,
          "line_end": 397,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect read-modify-write patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_detect_deadlock_potential",
          "line_start": 399,
          "line_end": 437,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect potential deadlock situations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 186
        },
        {
          "name": "_detect_nested_locks",
          "line_start": 439,
          "line_end": 460,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect nested lock acquisitions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_analyze_async_await_patterns",
          "line_start": 462,
          "line_end": 513,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze async/await patterns and coroutines.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 259
        },
        {
          "name": "_detect_coroutines",
          "line_start": 515,
          "line_end": 532,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect async function definitions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_detect_blocking_in_async",
          "line_start": 534,
          "line_end": 578,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect blocking operations in async functions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 223
        },
        {
          "name": "_analyze_lock_contention",
          "line_start": 580,
          "line_end": 618,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze lock contention patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 197
        },
        {
          "name": "_analyze_concurrent_data_structures",
          "line_start": 620,
          "line_end": 662,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze usage of concurrent data structures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 214
        },
        {
          "name": "_identify_parallelization_opportunities",
          "line_start": 664,
          "line_end": 706,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify opportunities for parallelization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 208
        },
        {
          "name": "_find_parallel_loops",
          "line_start": 708,
          "line_end": 732,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Find loops that can be parallelized.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_calculate_concurrency_metrics",
          "line_start": 734,
          "line_end": 779,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall concurrency metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 283
        },
        {
          "name": "_count_math_operations",
          "line_start": 782,
          "line_end": 793,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Count mathematical operations in a node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_analyze_comprehension_complexity",
          "line_start": 795,
          "line_end": 811,
          "args": [
            "self",
            "comp"
          ],
          "returns": null,
          "docstring": "Analyze complexity of list comprehension.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_is_recursive_function",
          "line_start": 813,
          "line_end": 820,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Check if function is recursive.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_has_string_operations",
          "line_start": 822,
          "line_end": 829,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node contains string operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_detect_gil_contentious_patterns",
          "line_start": 831,
          "line_end": 854,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect patterns that cause GIL contention.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "_identify_multiprocessing_candidates",
          "line_start": 856,
          "line_end": 872,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Identify code that would benefit from multiprocessing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_find_gil_bypass_opportunities",
          "line_start": 874,
          "line_end": 896,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Find opportunities to bypass GIL using C extensions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_calculate_gil_impact",
          "line_start": 898,
          "line_end": 903,
          "args": [
            "self",
            "gil_analysis"
          ],
          "returns": null,
          "docstring": "Calculate GIL impact score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_has_synchronization",
          "line_start": 905,
          "line_end": 911,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Check if class has synchronization mechanisms.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_is_protected_by_lock",
          "line_start": 913,
          "line_end": 921,
          "args": [
            "self",
            "tree",
            "mutation"
          ],
          "returns": null,
          "docstring": "Check if mutation is protected by a lock.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_is_lock_acquisition",
          "line_start": 923,
          "line_end": 933,
          "args": [
            "self",
            "with_node"
          ],
          "returns": null,
          "docstring": "Check if with statement acquires a lock.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_identify_thread_safe_patterns",
          "line_start": 935,
          "line_end": 945,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Identify thread-safe patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_identify_unsafe_patterns",
          "line_start": 947,
          "line_end": 961,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Identify thread-unsafe patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_analyze_synchronization_coverage",
          "line_start": 963,
          "line_end": 975,
          "args": [
            "self",
            "thread_safety"
          ],
          "returns": null,
          "docstring": "Analyze synchronization coverage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_performs_state_change",
          "line_start": 977,
          "line_end": 979,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node performs a state change.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "_is_existence_check",
          "line_start": 981,
          "line_end": 985,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if call is an existence check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_creates_resource",
          "line_start": 987,
          "line_end": 992,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node creates a resource.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_detect_test_and_set",
          "line_start": 994,
          "line_end": 1010,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect test-and-set patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_detect_double_checked_locking",
          "line_start": 1012,
          "line_end": 1030,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect double-checked locking patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_calculate_race_condition_score",
          "line_start": 1032,
          "line_end": 1038,
          "args": [
            "self",
            "race_conditions"
          ],
          "returns": null,
          "docstring": "Calculate race condition risk score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_detect_lock_ordering_issues",
          "line_start": 1040,
          "line_end": 1069,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect potential lock ordering issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        },
        {
          "name": "_detect_circular_lock_dependencies",
          "line_start": 1071,
          "line_end": 1074,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect circular lock dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_calculate_deadlock_risk",
          "line_start": 1076,
          "line_end": 1082,
          "args": [
            "self",
            "deadlock_analysis"
          ],
          "returns": null,
          "docstring": "Calculate deadlock risk score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_detect_async_context_managers",
          "line_start": 1084,
          "line_end": 1095,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect async context managers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_detect_concurrent_tasks",
          "line_start": 1097,
          "line_end": 1110,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect concurrent task patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "_detect_async_antipatterns",
          "line_start": 1112,
          "line_end": 1131,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect async antipatterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "_calculate_async_complexity",
          "line_start": 1133,
          "line_end": 1145,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Calculate async function complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_has_async_error_handling",
          "line_start": 1147,
          "line_end": 1152,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Check if async function has error handling.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_check_async_best_practices",
          "line_start": 1154,
          "line_end": 1173,
          "args": [
            "self",
            "async_analysis"
          ],
          "returns": null,
          "docstring": "Check async best practices compliance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_analyze_lock_usage",
          "line_start": 1175,
          "line_end": 1188,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Analyze lock usage patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_estimate_lock_duration",
          "line_start": 1190,
          "line_end": 1208,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Estimate lock hold duration.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_classify_lock_granularity",
          "line_start": 1210,
          "line_end": 1224,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Classify locks as fine or coarse grained.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_suggest_lock_free_alternatives",
          "line_start": 1226,
          "line_end": 1242,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Suggest lock-free alternatives.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_detect_thread_safe_structures",
          "line_start": 1244,
          "line_end": 1260,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect thread-safe data structures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_detect_unsafe_structures",
          "line_start": 1262,
          "line_end": 1279,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect unsafe data structure usage in concurrent context.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_analyze_queue_usage",
          "line_start": 1281,
          "line_end": 1291,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Analyze queue usage patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_detect_atomic_operations",
          "line_start": 1293,
          "line_end": 1301,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect atomic operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "_generate_structure_recommendations",
          "line_start": 1303,
          "line_end": 1313,
          "args": [
            "self",
            "structure_analysis"
          ],
          "returns": null,
          "docstring": "Generate data structure recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_has_loop_independence",
          "line_start": 1315,
          "line_end": 1321,
          "args": [
            "self",
            "loop"
          ],
          "returns": null,
          "docstring": "Check if loop iterations are independent.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_is_map_pattern",
          "line_start": 1323,
          "line_end": 1331,
          "args": [
            "self",
            "loop"
          ],
          "returns": null,
          "docstring": "Check if loop follows a map pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_estimate_speedup",
          "line_start": 1333,
          "line_end": 1340,
          "args": [
            "self",
            "loop"
          ],
          "returns": null,
          "docstring": "Estimate potential speedup from parallelization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_find_map_reduce_patterns",
          "line_start": 1342,
          "line_end": 1356,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Find map-reduce patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_find_pipeline_opportunities",
          "line_start": 1358,
          "line_end": 1361,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Find pipeline parallelization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "_find_vectorization_candidates",
          "line_start": 1363,
          "line_end": 1374,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Find vectorization candidates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_generate_parallelization_recommendations",
          "line_start": 1376,
          "line_end": 1389,
          "args": [
            "self",
            "parallelization"
          ],
          "returns": null,
          "docstring": "Generate parallelization recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_get_parent",
          "line_start": 1391,
          "line_end": 1397,
          "args": [
            "self",
            "tree",
            "node"
          ],
          "returns": null,
          "docstring": "Get parent node of a given node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1397,
      "complexity_score": 14384,
      "api_surface_area": 2,
      "docstring": "Concurrency Analysis for GIL, Async/Await, and Thread Safety\n=============================================================\n\nImplements comprehensive concurrency analysis:\n- GIL bottleneck detection\n- Thread safety analysis\n- Race condition detection\n- Deadlock potential identification\n- Async/await pattern analysis\n- Lock contention analysis\n- Concurrent data structure usage\n- Parallelization opportunities",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "{'pandas', 'numpy'}",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "high"
    },
    "testmaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "component_name": "coupling_cohesion",
      "analysis_timestamp": "2025-08-20 21:46:39.882950",
      "classes": [
        {
          "name": "CouplingCohesionAnalyzer",
          "line_start": 21,
          "line_end": 207,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 24,
              "line_end": 29,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive coupling and cohesion analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_calculate_coupling_metrics",
              "line_start": 31,
              "line_end": 114,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate comprehensive coupling metrics (fan-in, fan-out, CBO).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 618
            },
            {
              "name": "_calculate_cohesion_metrics",
              "line_start": 116,
              "line_end": 157,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cohesion metrics using LCOM (Lack of Cohesion of Methods).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 229
            },
            {
              "name": "_calculate_lcom",
              "line_start": 159,
              "line_end": 207,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Calculate LCOM (Lack of Cohesion of Methods) for a class.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 346
            }
          ],
          "docstring": "Analyzer for coupling and cohesion metrics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 24,
          "line_end": 29,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive coupling and cohesion analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_calculate_coupling_metrics",
          "line_start": 31,
          "line_end": 114,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate comprehensive coupling metrics (fan-in, fan-out, CBO).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 618
        },
        {
          "name": "_calculate_cohesion_metrics",
          "line_start": 116,
          "line_end": 157,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cohesion metrics using LCOM (Lack of Cohesion of Methods).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 229
        },
        {
          "name": "_calculate_lcom",
          "line_start": 159,
          "line_end": 207,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Calculate LCOM (Lack of Cohesion of Methods) for a class.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 346
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 207,
      "complexity_score": 2444,
      "api_surface_area": 2,
      "docstring": "Coupling and Cohesion Analyzer\n==============================\n\nImplements comprehensive coupling and cohesion metrics:\n- Efferent/Afferent Coupling (fan-out/fan-in)\n- Instability metrics\n- LCOM (Lack of Cohesion of Methods)\n- Class cohesion analysis",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.2,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\crypto_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "component_name": "crypto_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.888961",
      "classes": [
        {
          "name": "CryptographicIssue",
          "line_start": 25,
          "line_end": 33,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a cryptographic security issue.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CryptographicAlgorithm",
          "line_start": 37,
          "line_end": 43,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents usage of a cryptographic algorithm.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CryptographicAnalyzer",
          "line_start": 46,
          "line_end": 808,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 49,
              "line_end": 51,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_init_crypto_patterns",
              "line_start": 53,
              "line_end": 242,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize cryptographic analysis patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 304
            },
            {
              "name": "analyze",
              "line_start": 244,
              "line_end": 260,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive cryptographic analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_analyze_crypto_libraries",
              "line_start": 262,
              "line_end": 294,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze usage of cryptographic libraries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 191
            },
            {
              "name": "_assess_algorithms",
              "line_start": 296,
              "line_end": 333,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess cryptographic algorithms used in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 201
            },
            {
              "name": "_identify_crypto_issues",
              "line_start": 335,
              "line_end": 366,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify cryptographic security issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 189
            },
            {
              "name": "_analyze_key_management",
              "line_start": 368,
              "line_end": 401,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze key management practices.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 196
            },
            {
              "name": "_analyze_ssl_tls",
              "line_start": 403,
              "line_end": 443,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze SSL/TLS configuration and usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "_analyze_random_generation",
              "line_start": 445,
              "line_end": 484,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze random number generation security.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 196
            },
            {
              "name": "_analyze_certificates",
              "line_start": 486,
              "line_end": 524,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze certificate handling and validation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 214
            },
            {
              "name": "_calculate_crypto_metrics",
              "line_start": 526,
              "line_end": 566,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall cryptographic security metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 252
            },
            {
              "name": "_extract_algorithm_from_line",
              "line_start": 570,
              "line_end": 577,
              "args": [
                "self",
                "line"
              ],
              "returns": null,
              "docstring": "Extract algorithm name from code line.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_get_algorithm_strength",
              "line_start": 579,
              "line_end": 581,
              "args": [
                "self",
                "algorithm"
              ],
              "returns": null,
              "docstring": "Get strength assessment for algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_get_crypto_issue_severity",
              "line_start": 583,
              "line_end": 592,
              "args": [
                "self",
                "issue_type"
              ],
              "returns": null,
              "docstring": "Get severity for crypto issue type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_get_crypto_issue_description",
              "line_start": 594,
              "line_end": 603,
              "args": [
                "self",
                "issue_type"
              ],
              "returns": null,
              "docstring": "Get description for crypto issue type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_get_crypto_issue_recommendation",
              "line_start": 605,
              "line_end": 614,
              "args": [
                "self",
                "issue_type"
              ],
              "returns": null,
              "docstring": "Get recommendation for crypto issue type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_calculate_issue_confidence",
              "line_start": 616,
              "line_end": 624,
              "args": [
                "self",
                "pattern",
                "line"
              ],
              "returns": null,
              "docstring": "Calculate confidence level for detected issue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "_assess_library_security",
              "line_start": 626,
              "line_end": 642,
              "args": [
                "self",
                "usage"
              ],
              "returns": null,
              "docstring": "Assess overall security of crypto libraries used.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_summarize_algorithm_strength",
              "line_start": 644,
              "line_end": 658,
              "args": [
                "self",
                "algorithms"
              ],
              "returns": null,
              "docstring": "Summarize strength distribution of algorithms.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_get_key_issue_severity",
              "line_start": 660,
              "line_end": 667,
              "args": [
                "self",
                "category"
              ],
              "returns": null,
              "docstring": "Get severity for key management issue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_get_key_issue_description",
              "line_start": 669,
              "line_end": 676,
              "args": [
                "self",
                "category"
              ],
              "returns": null,
              "docstring": "Get description for key management issue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_calculate_key_security_score",
              "line_start": 678,
              "line_end": 692,
              "args": [
                "self",
                "issues"
              ],
              "returns": null,
              "docstring": "Calculate key management security score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "_analyze_ssl_config",
              "line_start": 694,
              "line_end": 714,
              "args": [
                "self",
                "line"
              ],
              "returns": null,
              "docstring": "Analyze SSL configuration from code line.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_summarize_ssl_security",
              "line_start": 716,
              "line_end": 726,
              "args": [
                "self",
                "usage",
                "issues"
              ],
              "returns": null,
              "docstring": "Summarize SSL security status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "_assess_random_security",
              "line_start": 728,
              "line_end": 735,
              "args": [
                "self",
                "line"
              ],
              "returns": null,
              "docstring": "Assess security of random number generation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_extract_random_function",
              "line_start": 737,
              "line_end": 746,
              "args": [
                "self",
                "line"
              ],
              "returns": null,
              "docstring": "Extract random function name from line.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_calculate_randomness_score",
              "line_start": 748,
              "line_end": 756,
              "args": [
                "self",
                "usage"
              ],
              "returns": null,
              "docstring": "Calculate randomness security score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_analyze_certificate_usage",
              "line_start": 758,
              "line_end": 763,
              "args": [
                "self",
                "line"
              ],
              "returns": null,
              "docstring": "Analyze certificate usage from code line.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "_get_crypto_grade",
              "line_start": 765,
              "line_end": 778,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Get crypto security grade based on score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "_get_improvement_priorities",
              "line_start": 780,
              "line_end": 808,
              "args": [
                "self",
                "issues",
                "key_mgmt",
                "ssl_analysis",
                "random_analysis"
              ],
              "returns": null,
              "docstring": "Get prioritized list of improvements needed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            }
          ],
          "docstring": "Analyzer for cryptographic security assessment.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 49,
          "line_end": 51,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_init_crypto_patterns",
          "line_start": 53,
          "line_end": 242,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize cryptographic analysis patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 304
        },
        {
          "name": "analyze",
          "line_start": 244,
          "line_end": 260,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive cryptographic analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_analyze_crypto_libraries",
          "line_start": 262,
          "line_end": 294,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze usage of cryptographic libraries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "_assess_algorithms",
          "line_start": 296,
          "line_end": 333,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess cryptographic algorithms used in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 201
        },
        {
          "name": "_identify_crypto_issues",
          "line_start": 335,
          "line_end": 366,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify cryptographic security issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 189
        },
        {
          "name": "_analyze_key_management",
          "line_start": 368,
          "line_end": 401,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze key management practices.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 196
        },
        {
          "name": "_analyze_ssl_tls",
          "line_start": 403,
          "line_end": 443,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze SSL/TLS configuration and usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "_analyze_random_generation",
          "line_start": 445,
          "line_end": 484,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze random number generation security.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 196
        },
        {
          "name": "_analyze_certificates",
          "line_start": 486,
          "line_end": 524,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze certificate handling and validation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 214
        },
        {
          "name": "_calculate_crypto_metrics",
          "line_start": 526,
          "line_end": 566,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall cryptographic security metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 252
        },
        {
          "name": "_extract_algorithm_from_line",
          "line_start": 570,
          "line_end": 577,
          "args": [
            "self",
            "line"
          ],
          "returns": null,
          "docstring": "Extract algorithm name from code line.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_get_algorithm_strength",
          "line_start": 579,
          "line_end": 581,
          "args": [
            "self",
            "algorithm"
          ],
          "returns": null,
          "docstring": "Get strength assessment for algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_get_crypto_issue_severity",
          "line_start": 583,
          "line_end": 592,
          "args": [
            "self",
            "issue_type"
          ],
          "returns": null,
          "docstring": "Get severity for crypto issue type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_get_crypto_issue_description",
          "line_start": 594,
          "line_end": 603,
          "args": [
            "self",
            "issue_type"
          ],
          "returns": null,
          "docstring": "Get description for crypto issue type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_get_crypto_issue_recommendation",
          "line_start": 605,
          "line_end": 614,
          "args": [
            "self",
            "issue_type"
          ],
          "returns": null,
          "docstring": "Get recommendation for crypto issue type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_calculate_issue_confidence",
          "line_start": 616,
          "line_end": 624,
          "args": [
            "self",
            "pattern",
            "line"
          ],
          "returns": null,
          "docstring": "Calculate confidence level for detected issue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "_assess_library_security",
          "line_start": 626,
          "line_end": 642,
          "args": [
            "self",
            "usage"
          ],
          "returns": null,
          "docstring": "Assess overall security of crypto libraries used.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_summarize_algorithm_strength",
          "line_start": 644,
          "line_end": 658,
          "args": [
            "self",
            "algorithms"
          ],
          "returns": null,
          "docstring": "Summarize strength distribution of algorithms.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_get_key_issue_severity",
          "line_start": 660,
          "line_end": 667,
          "args": [
            "self",
            "category"
          ],
          "returns": null,
          "docstring": "Get severity for key management issue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_get_key_issue_description",
          "line_start": 669,
          "line_end": 676,
          "args": [
            "self",
            "category"
          ],
          "returns": null,
          "docstring": "Get description for key management issue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_calculate_key_security_score",
          "line_start": 678,
          "line_end": 692,
          "args": [
            "self",
            "issues"
          ],
          "returns": null,
          "docstring": "Calculate key management security score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "_analyze_ssl_config",
          "line_start": 694,
          "line_end": 714,
          "args": [
            "self",
            "line"
          ],
          "returns": null,
          "docstring": "Analyze SSL configuration from code line.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_summarize_ssl_security",
          "line_start": 716,
          "line_end": 726,
          "args": [
            "self",
            "usage",
            "issues"
          ],
          "returns": null,
          "docstring": "Summarize SSL security status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "_assess_random_security",
          "line_start": 728,
          "line_end": 735,
          "args": [
            "self",
            "line"
          ],
          "returns": null,
          "docstring": "Assess security of random number generation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_extract_random_function",
          "line_start": 737,
          "line_end": 746,
          "args": [
            "self",
            "line"
          ],
          "returns": null,
          "docstring": "Extract random function name from line.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_calculate_randomness_score",
          "line_start": 748,
          "line_end": 756,
          "args": [
            "self",
            "usage"
          ],
          "returns": null,
          "docstring": "Calculate randomness security score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_analyze_certificate_usage",
          "line_start": 758,
          "line_end": 763,
          "args": [
            "self",
            "line"
          ],
          "returns": null,
          "docstring": "Analyze certificate usage from code line.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "_get_crypto_grade",
          "line_start": 765,
          "line_end": 778,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Get crypto security grade based on score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "_get_improvement_priorities",
          "line_start": 780,
          "line_end": 808,
          "args": [
            "self",
            "issues",
            "key_mgmt",
            "ssl_analysis",
            "random_analysis"
          ],
          "returns": null,
          "docstring": "Get prioritized list of improvements needed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'dataclasses', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 808,
      "complexity_score": 6472,
      "api_surface_area": 2,
      "docstring": "Advanced Cryptographic Analysis Module\n=====================================\n\nImplements comprehensive cryptographic assessment for Python:\n- Cryptographic library usage analysis\n- Algorithm strength assessment\n- Key management security analysis\n- Cryptographic implementation patterns\n- SSL/TLS configuration analysis\n- Random number generation security",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\database_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "component_name": "database_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.902945",
      "classes": [
        {
          "name": "DatabaseAnalyzer",
          "line_start": 24,
          "line_end": 1246,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 27,
              "line_end": 57,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "analyze",
              "line_start": 59,
              "line_end": 76,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive database query analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_detect_n_plus_one_queries",
              "line_start": 78,
              "line_end": 115,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect N+1 query problems in the code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_detect_queries_in_loops",
              "line_start": 117,
              "line_end": 137,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect database queries inside loops.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 143
            },
            {
              "name": "_is_database_query",
              "line_start": 139,
              "line_end": 159,
              "args": [
                "self",
                "node",
                "content"
              ],
              "returns": null,
              "docstring": "Check if a call is a database query.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "_detect_sqlalchemy_n_plus_one",
              "line_start": 161,
              "line_end": 182,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect SQLAlchemy-specific N+1 patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_detect_django_n_plus_one",
              "line_start": 184,
              "line_end": 206,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect Django ORM-specific N+1 patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_analyze_query_complexity",
              "line_start": 208,
              "line_end": 258,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze complexity of database queries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 274
            },
            {
              "name": "_extract_sql_queries",
              "line_start": 260,
              "line_end": 279,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Extract SQL queries from code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_calculate_sql_complexity",
              "line_start": 281,
              "line_end": 313,
              "args": [
                "self",
                "query"
              ],
              "returns": null,
              "docstring": "Calculate complexity score for SQL query.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_analyze_index_usage",
              "line_start": 315,
              "line_end": 365,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze index usage patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 215
            },
            {
              "name": "_detect_queries_without_where",
              "line_start": 367,
              "line_end": 379,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Detect SELECT queries without WHERE clause.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_detect_filter_patterns",
              "line_start": 381,
              "line_end": 397,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect filtering patterns in ORM queries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_analyze_transaction_patterns",
              "line_start": 399,
              "line_end": 449,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze database transaction patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 254
            },
            {
              "name": "_detect_transaction_blocks",
              "line_start": 451,
              "line_end": 478,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect transaction block patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 185
            },
            {
              "name": "_analyze_connection_pooling",
              "line_start": 480,
              "line_end": 521,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze database connection pooling patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_detect_pool_configurations",
              "line_start": 523,
              "line_end": 554,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect connection pool configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_detect_connection_leaks",
              "line_start": 556,
              "line_end": 574,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect potential connection leaks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            },
            {
              "name": "_analyze_orm_patterns",
              "line_start": 576,
              "line_end": 620,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze ORM-specific patterns and practices.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 239
            },
            {
              "name": "_detect_orm_usage",
              "line_start": 622,
              "line_end": 635,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Detect which ORMs are being used.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_analyze_raw_sql",
              "line_start": 637,
              "line_end": 679,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze raw SQL usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 220
            },
            {
              "name": "_detect_sql_injection_risks",
              "line_start": 681,
              "line_end": 717,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect potential SQL injection vulnerabilities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 212
            },
            {
              "name": "_identify_optimization_opportunities",
              "line_start": 719,
              "line_end": 761,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify database optimization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "_identify_caching_opportunities",
              "line_start": 763,
              "line_end": 779,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify queries that could benefit from caching.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_identify_batch_opportunities",
              "line_start": 781,
              "line_end": 795,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify opportunities for batch processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_calculate_database_metrics",
              "line_start": 797,
              "line_end": 838,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall database metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 270
            },
            {
              "name": "_assess_query_severity",
              "line_start": 841,
              "line_end": 852,
              "args": [
                "self",
                "loop_node",
                "query_node"
              ],
              "returns": null,
              "docstring": "Assess severity of query in loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_identify_query_pattern",
              "line_start": 854,
              "line_end": 858,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Identify the pattern of database query.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_get_n_plus_one_fix",
              "line_start": 860,
              "line_end": 866,
              "args": [
                "self",
                "node",
                "content"
              ],
              "returns": null,
              "docstring": "Get recommended fix for N+1 query.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_is_relationship_access",
              "line_start": 868,
              "line_end": 872,
              "args": [
                "self",
                "node",
                "content"
              ],
              "returns": null,
              "docstring": "Check if accessing a database relationship.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_has_eager_loading",
              "line_start": 874,
              "line_end": 882,
              "args": [
                "self",
                "tree",
                "loop_node"
              ],
              "returns": null,
              "docstring": "Check if query has eager loading configured.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_is_django_queryset",
              "line_start": 884,
              "line_end": 888,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node is a Django queryset.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "_is_foreign_key_access",
              "line_start": 890,
              "line_end": 894,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if accessing a foreign key relationship.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "_has_django_optimization",
              "line_start": 896,
              "line_end": 903,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if Django query has optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_identify_query_issues",
              "line_start": 905,
              "line_end": 922,
              "args": [
                "self",
                "query"
              ],
              "returns": null,
              "docstring": "Identify issues in SQL query.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_analyze_orm_query_chains",
              "line_start": 924,
              "line_end": 945,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Analyze chained ORM query methods.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_detect_join_patterns",
              "line_start": 947,
              "line_end": 966,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect JOIN patterns in queries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_detect_subqueries",
              "line_start": 968,
              "line_end": 991,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect subquery patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "_needs_index",
              "line_start": 993,
              "line_end": 997,
              "args": [
                "self",
                "pattern"
              ],
              "returns": null,
              "docstring": "Check if a field pattern needs an index.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_generate_index_recommendations",
              "line_start": 999,
              "line_end": 1009,
              "args": [
                "self",
                "index_analysis"
              ],
              "returns": null,
              "docstring": "Generate index recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_detect_nested_transactions",
              "line_start": 1011,
              "line_end": 1027,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect nested transaction patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_analyze_commit_patterns",
              "line_start": 1029,
              "line_end": 1041,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Analyze commit patterns in code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_detect_rollback_patterns",
              "line_start": 1043,
              "line_end": 1050,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect rollback patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_count_statements_until_commit",
              "line_start": 1052,
              "line_end": 1055,
              "args": [
                "self",
                "tree",
                "begin_node"
              ],
              "returns": null,
              "docstring": "Count statements between begin and commit.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_detect_pool_exhaustion_risks",
              "line_start": 1057,
              "line_end": 1075,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect connection pool exhaustion risks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_analyze_connection_patterns",
              "line_start": 1077,
              "line_end": 1089,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Analyze database connection patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_analyze_pool_config",
              "line_start": 1091,
              "line_end": 1101,
              "args": [
                "self",
                "config"
              ],
              "returns": null,
              "docstring": "Analyze pool configuration for issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_has_connection_cleanup",
              "line_start": 1103,
              "line_end": 1113,
              "args": [
                "self",
                "tree",
                "connect_node"
              ],
              "returns": null,
              "docstring": "Check if connection has proper cleanup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_analyze_query_patterns",
              "line_start": 1115,
              "line_end": 1129,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Analyze general query patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_detect_bulk_operations",
              "line_start": 1131,
              "line_end": 1143,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect bulk operation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_detect_loading_strategies",
              "line_start": 1145,
              "line_end": 1160,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect lazy and eager loading strategies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_check_orm_best_practices",
              "line_start": 1162,
              "line_end": 1179,
              "args": [
                "self",
                "orm_analysis"
              ],
              "returns": null,
              "docstring": "Check ORM best practices compliance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_check_query_parameterization",
              "line_start": 1181,
              "line_end": 1193,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Check query parameterization usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_check_sql_quality",
              "line_start": 1195,
              "line_end": 1207,
              "args": [
                "self",
                "queries"
              ],
              "returns": null,
              "docstring": "Check SQL query quality issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_identify_n_plus_one_hotspots",
              "line_start": 1209,
              "line_end": 1228,
              "args": [
                "self",
                "n_plus_one_data"
              ],
              "returns": null,
              "docstring": "Identify hotspots with high N+1 query risk.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_generate_db_recommendations",
              "line_start": 1230,
              "line_end": 1246,
              "args": [
                "self",
                "optimizations"
              ],
              "returns": null,
              "docstring": "Generate database optimization recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            }
          ],
          "docstring": "Analyzer for database query patterns and performance issues.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 27,
          "line_end": 57,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "analyze",
          "line_start": 59,
          "line_end": 76,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive database query analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_detect_n_plus_one_queries",
          "line_start": 78,
          "line_end": 115,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect N+1 query problems in the code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_detect_queries_in_loops",
          "line_start": 117,
          "line_end": 137,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect database queries inside loops.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 143
        },
        {
          "name": "_is_database_query",
          "line_start": 139,
          "line_end": 159,
          "args": [
            "self",
            "node",
            "content"
          ],
          "returns": null,
          "docstring": "Check if a call is a database query.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "_detect_sqlalchemy_n_plus_one",
          "line_start": 161,
          "line_end": 182,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect SQLAlchemy-specific N+1 patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_detect_django_n_plus_one",
          "line_start": 184,
          "line_end": 206,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect Django ORM-specific N+1 patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_analyze_query_complexity",
          "line_start": 208,
          "line_end": 258,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze complexity of database queries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 274
        },
        {
          "name": "_extract_sql_queries",
          "line_start": 260,
          "line_end": 279,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Extract SQL queries from code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_calculate_sql_complexity",
          "line_start": 281,
          "line_end": 313,
          "args": [
            "self",
            "query"
          ],
          "returns": null,
          "docstring": "Calculate complexity score for SQL query.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_analyze_index_usage",
          "line_start": 315,
          "line_end": 365,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze index usage patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 215
        },
        {
          "name": "_detect_queries_without_where",
          "line_start": 367,
          "line_end": 379,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Detect SELECT queries without WHERE clause.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_detect_filter_patterns",
          "line_start": 381,
          "line_end": 397,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect filtering patterns in ORM queries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_analyze_transaction_patterns",
          "line_start": 399,
          "line_end": 449,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze database transaction patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 254
        },
        {
          "name": "_detect_transaction_blocks",
          "line_start": 451,
          "line_end": 478,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect transaction block patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 185
        },
        {
          "name": "_analyze_connection_pooling",
          "line_start": 480,
          "line_end": 521,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze database connection pooling patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_detect_pool_configurations",
          "line_start": 523,
          "line_end": 554,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect connection pool configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_detect_connection_leaks",
          "line_start": 556,
          "line_end": 574,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect potential connection leaks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "_analyze_orm_patterns",
          "line_start": 576,
          "line_end": 620,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze ORM-specific patterns and practices.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 239
        },
        {
          "name": "_detect_orm_usage",
          "line_start": 622,
          "line_end": 635,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Detect which ORMs are being used.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_analyze_raw_sql",
          "line_start": 637,
          "line_end": 679,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze raw SQL usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 220
        },
        {
          "name": "_detect_sql_injection_risks",
          "line_start": 681,
          "line_end": 717,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect potential SQL injection vulnerabilities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 212
        },
        {
          "name": "_identify_optimization_opportunities",
          "line_start": 719,
          "line_end": 761,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify database optimization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "_identify_caching_opportunities",
          "line_start": 763,
          "line_end": 779,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify queries that could benefit from caching.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_identify_batch_opportunities",
          "line_start": 781,
          "line_end": 795,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify opportunities for batch processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_calculate_database_metrics",
          "line_start": 797,
          "line_end": 838,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall database metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 270
        },
        {
          "name": "_assess_query_severity",
          "line_start": 841,
          "line_end": 852,
          "args": [
            "self",
            "loop_node",
            "query_node"
          ],
          "returns": null,
          "docstring": "Assess severity of query in loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_identify_query_pattern",
          "line_start": 854,
          "line_end": 858,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Identify the pattern of database query.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_get_n_plus_one_fix",
          "line_start": 860,
          "line_end": 866,
          "args": [
            "self",
            "node",
            "content"
          ],
          "returns": null,
          "docstring": "Get recommended fix for N+1 query.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_is_relationship_access",
          "line_start": 868,
          "line_end": 872,
          "args": [
            "self",
            "node",
            "content"
          ],
          "returns": null,
          "docstring": "Check if accessing a database relationship.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_has_eager_loading",
          "line_start": 874,
          "line_end": 882,
          "args": [
            "self",
            "tree",
            "loop_node"
          ],
          "returns": null,
          "docstring": "Check if query has eager loading configured.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_is_django_queryset",
          "line_start": 884,
          "line_end": 888,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node is a Django queryset.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "_is_foreign_key_access",
          "line_start": 890,
          "line_end": 894,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if accessing a foreign key relationship.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "_has_django_optimization",
          "line_start": 896,
          "line_end": 903,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if Django query has optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_identify_query_issues",
          "line_start": 905,
          "line_end": 922,
          "args": [
            "self",
            "query"
          ],
          "returns": null,
          "docstring": "Identify issues in SQL query.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_analyze_orm_query_chains",
          "line_start": 924,
          "line_end": 945,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Analyze chained ORM query methods.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_detect_join_patterns",
          "line_start": 947,
          "line_end": 966,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect JOIN patterns in queries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_detect_subqueries",
          "line_start": 968,
          "line_end": 991,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect subquery patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "_needs_index",
          "line_start": 993,
          "line_end": 997,
          "args": [
            "self",
            "pattern"
          ],
          "returns": null,
          "docstring": "Check if a field pattern needs an index.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_generate_index_recommendations",
          "line_start": 999,
          "line_end": 1009,
          "args": [
            "self",
            "index_analysis"
          ],
          "returns": null,
          "docstring": "Generate index recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_detect_nested_transactions",
          "line_start": 1011,
          "line_end": 1027,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect nested transaction patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_analyze_commit_patterns",
          "line_start": 1029,
          "line_end": 1041,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Analyze commit patterns in code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_detect_rollback_patterns",
          "line_start": 1043,
          "line_end": 1050,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect rollback patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_count_statements_until_commit",
          "line_start": 1052,
          "line_end": 1055,
          "args": [
            "self",
            "tree",
            "begin_node"
          ],
          "returns": null,
          "docstring": "Count statements between begin and commit.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_detect_pool_exhaustion_risks",
          "line_start": 1057,
          "line_end": 1075,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect connection pool exhaustion risks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_analyze_connection_patterns",
          "line_start": 1077,
          "line_end": 1089,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Analyze database connection patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_analyze_pool_config",
          "line_start": 1091,
          "line_end": 1101,
          "args": [
            "self",
            "config"
          ],
          "returns": null,
          "docstring": "Analyze pool configuration for issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_has_connection_cleanup",
          "line_start": 1103,
          "line_end": 1113,
          "args": [
            "self",
            "tree",
            "connect_node"
          ],
          "returns": null,
          "docstring": "Check if connection has proper cleanup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_analyze_query_patterns",
          "line_start": 1115,
          "line_end": 1129,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Analyze general query patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_detect_bulk_operations",
          "line_start": 1131,
          "line_end": 1143,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect bulk operation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_detect_loading_strategies",
          "line_start": 1145,
          "line_end": 1160,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect lazy and eager loading strategies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_check_orm_best_practices",
          "line_start": 1162,
          "line_end": 1179,
          "args": [
            "self",
            "orm_analysis"
          ],
          "returns": null,
          "docstring": "Check ORM best practices compliance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_check_query_parameterization",
          "line_start": 1181,
          "line_end": 1193,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Check query parameterization usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_check_sql_quality",
          "line_start": 1195,
          "line_end": 1207,
          "args": [
            "self",
            "queries"
          ],
          "returns": null,
          "docstring": "Check SQL query quality issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_identify_n_plus_one_hotspots",
          "line_start": 1209,
          "line_end": 1228,
          "args": [
            "self",
            "n_plus_one_data"
          ],
          "returns": null,
          "docstring": "Identify hotspots with high N+1 query risk.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_generate_db_recommendations",
          "line_start": 1230,
          "line_end": 1246,
          "args": [
            "self",
            "optimizations"
          ],
          "returns": null,
          "docstring": "Generate database optimization recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1246,
      "complexity_score": 12850,
      "api_surface_area": 2,
      "docstring": "Database Query Analyzer for N+1 and Performance Issues\n=======================================================\n\nImplements comprehensive database query analysis:\n- N+1 query problem detection\n- Query complexity analysis\n- Index usage assessment\n- Transaction pattern analysis\n- Connection pooling detection\n- Query optimization recommendations\n- ORM-specific pattern detection (SQLAlchemy, Django ORM)",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "component_name": "error_handling_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.927418",
      "classes": [
        {
          "name": "ErrorHandlingAnalyzer",
          "line_start": 25,
          "line_end": 1279,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 28,
              "line_end": 56,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "analyze",
              "line_start": 58,
              "line_end": 75,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive error handling analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_retry_patterns",
              "line_start": 77,
              "line_end": 124,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze retry logic implementations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 249
            },
            {
              "name": "_detect_retry_decorators",
              "line_start": 126,
              "line_end": 153,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect retry decorator usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_detect_manual_retry_loops",
              "line_start": 155,
              "line_end": 174,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect manual retry loop implementations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 130
            },
            {
              "name": "_is_retry_loop",
              "line_start": 176,
              "line_end": 193,
              "args": [
                "self",
                "loop_node"
              ],
              "returns": null,
              "docstring": "Check if a loop implements retry logic.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "_analyze_circuit_breakers",
              "line_start": 195,
              "line_end": 234,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze circuit breaker implementations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "_detect_circuit_breakers",
              "line_start": 236,
              "line_end": 263,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect circuit breaker implementations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 162
            },
            {
              "name": "_analyze_exception_handling",
              "line_start": 265,
              "line_end": 328,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze exception handling completeness.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 334
            },
            {
              "name": "_analyze_error_propagation",
              "line_start": 330,
              "line_end": 365,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze how errors propagate through the system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "_detect_error_bubbling",
              "line_start": 367,
              "line_end": 389,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect error re-raising patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_detect_error_transformation",
              "line_start": 391,
              "line_end": 409,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect error transformation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "_detect_error_suppression",
              "line_start": 411,
              "line_end": 436,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect error suppression patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_analyze_logging_completeness",
              "line_start": 438,
              "line_end": 484,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze logging completeness in error handling.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 228
            },
            {
              "name": "_detect_error_logging",
              "line_start": 486,
              "line_end": 519,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect error logging patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "_analyze_validation_logic",
              "line_start": 521,
              "line_end": 567,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze input validation and sanitization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "_detect_input_validation",
              "line_start": 569,
              "line_end": 598,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect input validation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_is_validation_check",
              "line_start": 600,
              "line_end": 613,
              "args": [
                "self",
                "if_node"
              ],
              "returns": null,
              "docstring": "Check if an if statement is a validation check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_analyze_graceful_degradation",
              "line_start": 615,
              "line_end": 652,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze graceful degradation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "_detect_fallback_values",
              "line_start": 654,
              "line_end": 686,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect fallback value patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "_analyze_recovery_strategies",
              "line_start": 688,
              "line_end": 727,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze error recovery strategies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 198
            },
            {
              "name": "_detect_recovery_patterns",
              "line_start": 729,
              "line_end": 758,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect error recovery patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_calculate_error_handling_metrics",
              "line_start": 760,
              "line_end": 805,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall error handling metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 279
            },
            {
              "name": "_extract_retry_config",
              "line_start": 808,
              "line_end": 824,
              "args": [
                "self",
                "decorator"
              ],
              "returns": null,
              "docstring": "Extract retry configuration from decorator.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "_has_try_except",
              "line_start": 826,
              "line_end": 831,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node contains try-except.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_has_break",
              "line_start": 833,
              "line_end": 838,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node contains break statement.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_has_sleep_call",
              "line_start": 840,
              "line_end": 850,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if node contains sleep call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_assess_retry_risk",
              "line_start": 852,
              "line_end": 858,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Assess risk level of retry implementation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            },
            {
              "name": "_analyze_backoff_strategies",
              "line_start": 860,
              "line_end": 876,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Analyze backoff strategies used.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_detect_retry_conditions",
              "line_start": 878,
              "line_end": 893,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect conditions that trigger retries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_extract_max_retry_configs",
              "line_start": 895,
              "line_end": 912,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Extract max retry configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_check_retry_best_practices",
              "line_start": 914,
              "line_end": 933,
              "args": [
                "self",
                "retry_analysis"
              ],
              "returns": null,
              "docstring": "Check retry best practices compliance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "_has_circuit_states",
              "line_start": 935,
              "line_end": 943,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Check if class has circuit breaker states.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_has_threshold_logic",
              "line_start": 945,
              "line_end": 951,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Check if class has threshold logic.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_has_timeout_logic",
              "line_start": 953,
              "line_end": 959,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Check if class has timeout logic.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_analyze_circuit_states",
              "line_start": 961,
              "line_end": 978,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Analyze circuit breaker state management.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_extract_threshold_configs",
              "line_start": 980,
              "line_end": 997,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Extract threshold configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "_detect_fallback_mechanisms",
              "line_start": 999,
              "line_end": 1012,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect fallback mechanisms.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_detect_exception_chains",
              "line_start": 1014,
              "line_end": 1027,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect exception chaining patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_calculate_exception_coverage",
              "line_start": 1029,
              "line_end": 1038,
              "args": [
                "self",
                "exception_analysis"
              ],
              "returns": null,
              "docstring": "Calculate exception handling coverage score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_get_exception_name",
              "line_start": 1040,
              "line_end": 1047,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Get exception name from AST node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_analyze_log_levels",
              "line_start": 1049,
              "line_end": 1059,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Analyze log levels used.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_detect_unlogged_errors",
              "line_start": 1061,
              "line_end": 1084,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect errors that are not logged.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_uses_structured_logging",
              "line_start": 1086,
              "line_end": 1088,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Check if code uses structured logging.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_calculate_logging_coverage",
              "line_start": 1090,
              "line_end": 1099,
              "args": [
                "self",
                "logging_analysis"
              ],
              "returns": null,
              "docstring": "Calculate logging coverage score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "_detect_type_checking",
              "line_start": 1101,
              "line_end": 1121,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect type checking patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_detect_boundary_checking",
              "line_start": 1123,
              "line_end": 1138,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect boundary checking patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "_detect_sanitization",
              "line_start": 1140,
              "line_end": 1164,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect input sanitization patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_calculate_validation_coverage",
              "line_start": 1166,
              "line_end": 1180,
              "args": [
                "self",
                "validation_analysis"
              ],
              "returns": null,
              "docstring": "Calculate validation coverage metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_has_validation_error_handling",
              "line_start": 1182,
              "line_end": 1190,
              "args": [
                "self",
                "if_node"
              ],
              "returns": null,
              "docstring": "Check if validation has error handling.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_detect_default_behaviors",
              "line_start": 1192,
              "line_end": 1216,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect default behavior patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            },
            {
              "name": "_has_feature_flags",
              "line_start": 1218,
              "line_end": 1220,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Check if code uses feature flags.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_detect_compensation_logic",
              "line_start": 1222,
              "line_end": 1235,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect compensation logic patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_detect_rollback_mechanisms",
              "line_start": 1237,
              "line_end": 1258,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect rollback mechanisms.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_assess_recovery_effectiveness",
              "line_start": 1260,
              "line_end": 1279,
              "args": [
                "self",
                "recovery_analysis"
              ],
              "returns": null,
              "docstring": "Assess effectiveness of recovery strategies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            }
          ],
          "docstring": "Analyzer for error handling and recovery patterns.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 28,
          "line_end": 56,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "analyze",
          "line_start": 58,
          "line_end": 75,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive error handling analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_retry_patterns",
          "line_start": 77,
          "line_end": 124,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze retry logic implementations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 249
        },
        {
          "name": "_detect_retry_decorators",
          "line_start": 126,
          "line_end": 153,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect retry decorator usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_detect_manual_retry_loops",
          "line_start": 155,
          "line_end": 174,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect manual retry loop implementations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 130
        },
        {
          "name": "_is_retry_loop",
          "line_start": 176,
          "line_end": 193,
          "args": [
            "self",
            "loop_node"
          ],
          "returns": null,
          "docstring": "Check if a loop implements retry logic.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "_analyze_circuit_breakers",
          "line_start": 195,
          "line_end": 234,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze circuit breaker implementations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "_detect_circuit_breakers",
          "line_start": 236,
          "line_end": 263,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect circuit breaker implementations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 162
        },
        {
          "name": "_analyze_exception_handling",
          "line_start": 265,
          "line_end": 328,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze exception handling completeness.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 334
        },
        {
          "name": "_analyze_error_propagation",
          "line_start": 330,
          "line_end": 365,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze how errors propagate through the system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "_detect_error_bubbling",
          "line_start": 367,
          "line_end": 389,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect error re-raising patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_detect_error_transformation",
          "line_start": 391,
          "line_end": 409,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect error transformation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "_detect_error_suppression",
          "line_start": 411,
          "line_end": 436,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect error suppression patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_analyze_logging_completeness",
          "line_start": 438,
          "line_end": 484,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze logging completeness in error handling.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 228
        },
        {
          "name": "_detect_error_logging",
          "line_start": 486,
          "line_end": 519,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect error logging patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "_analyze_validation_logic",
          "line_start": 521,
          "line_end": 567,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze input validation and sanitization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "_detect_input_validation",
          "line_start": 569,
          "line_end": 598,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect input validation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_is_validation_check",
          "line_start": 600,
          "line_end": 613,
          "args": [
            "self",
            "if_node"
          ],
          "returns": null,
          "docstring": "Check if an if statement is a validation check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_analyze_graceful_degradation",
          "line_start": 615,
          "line_end": 652,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze graceful degradation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "_detect_fallback_values",
          "line_start": 654,
          "line_end": 686,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect fallback value patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "_analyze_recovery_strategies",
          "line_start": 688,
          "line_end": 727,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze error recovery strategies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 198
        },
        {
          "name": "_detect_recovery_patterns",
          "line_start": 729,
          "line_end": 758,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect error recovery patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_calculate_error_handling_metrics",
          "line_start": 760,
          "line_end": 805,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall error handling metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 279
        },
        {
          "name": "_extract_retry_config",
          "line_start": 808,
          "line_end": 824,
          "args": [
            "self",
            "decorator"
          ],
          "returns": null,
          "docstring": "Extract retry configuration from decorator.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "_has_try_except",
          "line_start": 826,
          "line_end": 831,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node contains try-except.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_has_break",
          "line_start": 833,
          "line_end": 838,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node contains break statement.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_has_sleep_call",
          "line_start": 840,
          "line_end": 850,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if node contains sleep call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_assess_retry_risk",
          "line_start": 852,
          "line_end": 858,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Assess risk level of retry implementation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "_analyze_backoff_strategies",
          "line_start": 860,
          "line_end": 876,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Analyze backoff strategies used.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_detect_retry_conditions",
          "line_start": 878,
          "line_end": 893,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect conditions that trigger retries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_extract_max_retry_configs",
          "line_start": 895,
          "line_end": 912,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Extract max retry configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_check_retry_best_practices",
          "line_start": 914,
          "line_end": 933,
          "args": [
            "self",
            "retry_analysis"
          ],
          "returns": null,
          "docstring": "Check retry best practices compliance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "_has_circuit_states",
          "line_start": 935,
          "line_end": 943,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Check if class has circuit breaker states.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_has_threshold_logic",
          "line_start": 945,
          "line_end": 951,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Check if class has threshold logic.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_has_timeout_logic",
          "line_start": 953,
          "line_end": 959,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Check if class has timeout logic.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_analyze_circuit_states",
          "line_start": 961,
          "line_end": 978,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Analyze circuit breaker state management.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_extract_threshold_configs",
          "line_start": 980,
          "line_end": 997,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Extract threshold configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "_detect_fallback_mechanisms",
          "line_start": 999,
          "line_end": 1012,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect fallback mechanisms.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_detect_exception_chains",
          "line_start": 1014,
          "line_end": 1027,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect exception chaining patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_calculate_exception_coverage",
          "line_start": 1029,
          "line_end": 1038,
          "args": [
            "self",
            "exception_analysis"
          ],
          "returns": null,
          "docstring": "Calculate exception handling coverage score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_get_exception_name",
          "line_start": 1040,
          "line_end": 1047,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Get exception name from AST node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_analyze_log_levels",
          "line_start": 1049,
          "line_end": 1059,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Analyze log levels used.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_detect_unlogged_errors",
          "line_start": 1061,
          "line_end": 1084,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect errors that are not logged.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_uses_structured_logging",
          "line_start": 1086,
          "line_end": 1088,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Check if code uses structured logging.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_calculate_logging_coverage",
          "line_start": 1090,
          "line_end": 1099,
          "args": [
            "self",
            "logging_analysis"
          ],
          "returns": null,
          "docstring": "Calculate logging coverage score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "_detect_type_checking",
          "line_start": 1101,
          "line_end": 1121,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect type checking patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_detect_boundary_checking",
          "line_start": 1123,
          "line_end": 1138,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect boundary checking patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "_detect_sanitization",
          "line_start": 1140,
          "line_end": 1164,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect input sanitization patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_calculate_validation_coverage",
          "line_start": 1166,
          "line_end": 1180,
          "args": [
            "self",
            "validation_analysis"
          ],
          "returns": null,
          "docstring": "Calculate validation coverage metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_has_validation_error_handling",
          "line_start": 1182,
          "line_end": 1190,
          "args": [
            "self",
            "if_node"
          ],
          "returns": null,
          "docstring": "Check if validation has error handling.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_detect_default_behaviors",
          "line_start": 1192,
          "line_end": 1216,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect default behavior patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        },
        {
          "name": "_has_feature_flags",
          "line_start": 1218,
          "line_end": 1220,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Check if code uses feature flags.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_detect_compensation_logic",
          "line_start": 1222,
          "line_end": 1235,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect compensation logic patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_detect_rollback_mechanisms",
          "line_start": 1237,
          "line_end": 1258,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect rollback mechanisms.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_assess_recovery_effectiveness",
          "line_start": 1260,
          "line_end": 1279,
          "args": [
            "self",
            "recovery_analysis"
          ],
          "returns": null,
          "docstring": "Assess effectiveness of recovery strategies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1279,
      "complexity_score": 13626,
      "api_surface_area": 2,
      "docstring": "Error Handling and Recovery Pattern Analysis\n=============================================\n\nImplements comprehensive error handling analysis:\n- Retry logic pattern detection\n- Circuit breaker implementation analysis\n- Exception handling completeness\n- Error propagation tracking\n- Logging completeness assessment\n- Input validation analysis\n- Graceful degradation patterns\n- Error recovery strategies",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\evolution_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "component_name": "evolution_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.948682",
      "classes": [
        {
          "name": "EvolutionAnalyzer",
          "line_start": 25,
          "line_end": 689,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 28,
              "line_end": 30,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 25
            },
            {
              "name": "_check_git_availability",
              "line_start": 32,
              "line_end": 44,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if git is available and this is a git repository.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "analyze",
              "line_start": 46,
              "line_end": 66,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive evolution analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "_analyze_without_git",
              "line_start": 68,
              "line_end": 104,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Fallback analysis without git history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "_analyze_file_ages",
              "line_start": 106,
              "line_end": 158,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze file ages using git history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 307
            },
            {
              "name": "_categorize_age",
              "line_start": 160,
              "line_end": 171,
              "args": [
                "self",
                "age_days"
              ],
              "returns": null,
              "docstring": "Categorize file age.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_calculate_age_distribution",
              "line_start": 173,
              "line_end": 181,
              "args": [
                "self",
                "ages"
              ],
              "returns": null,
              "docstring": "Calculate age distribution.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_analyze_growth_patterns",
              "line_start": 183,
              "line_end": 255,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze codebase growth patterns over time.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 416
            },
            {
              "name": "_identify_change_hotspots",
              "line_start": 257,
              "line_end": 293,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify files that change frequently (hotspots).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 230
            },
            {
              "name": "_categorize_hotness",
              "line_start": 295,
              "line_end": 306,
              "args": [
                "self",
                "change_count"
              ],
              "returns": null,
              "docstring": "Categorize file hotness level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_detect_refactoring_patterns",
              "line_start": 308,
              "line_end": 355,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect refactoring patterns in commit history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 230
            },
            {
              "name": "_classify_refactoring_type",
              "line_start": 357,
              "line_end": 372,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": "Classify the type of refactoring based on commit message.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_analyze_developer_patterns",
              "line_start": 374,
              "line_end": 439,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze developer contribution patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 332
            },
            {
              "name": "_classify_development_model",
              "line_start": 441,
              "line_end": 455,
              "args": [
                "self",
                "ownership_distribution"
              ],
              "returns": null,
              "docstring": "Classify the development model based on ownership distribution.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_analyze_temporal_coupling",
              "line_start": 457,
              "line_end": 511,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze temporal coupling between files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 408
            },
            {
              "name": "_categorize_coupling_strength",
              "line_start": 513,
              "line_end": 522,
              "args": [
                "self",
                "strength"
              ],
              "returns": null,
              "docstring": "Categorize temporal coupling strength.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_calculate_stability_metrics",
              "line_start": 524,
              "line_end": 572,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate code stability metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 322
            },
            {
              "name": "_grade_stability",
              "line_start": 574,
              "line_end": 585,
              "args": [
                "self",
                "stability_index"
              ],
              "returns": null,
              "docstring": "Grade stability based on index.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_analyze_evolution_trends",
              "line_start": 587,
              "line_end": 642,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze overall evolution trends.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 364
            },
            {
              "name": "_assess_maturity",
              "line_start": 644,
              "line_end": 655,
              "args": [
                "self",
                "age_days",
                "commits_per_year"
              ],
              "returns": null,
              "docstring": "Assess repository maturity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_classify_activity_level",
              "line_start": 657,
              "line_end": 668,
              "args": [
                "self",
                "commits_per_month"
              ],
              "returns": null,
              "docstring": "Classify activity level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_calculate_size_distribution",
              "line_start": 670,
              "line_end": 689,
              "args": [
                "self",
                "sizes"
              ],
              "returns": null,
              "docstring": "Calculate file size distribution.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            }
          ],
          "docstring": "Analyzer for code evolution patterns.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 28,
          "line_end": 30,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 25
        },
        {
          "name": "_check_git_availability",
          "line_start": 32,
          "line_end": 44,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if git is available and this is a git repository.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "analyze",
          "line_start": 46,
          "line_end": 66,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive evolution analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "_analyze_without_git",
          "line_start": 68,
          "line_end": 104,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Fallback analysis without git history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "_analyze_file_ages",
          "line_start": 106,
          "line_end": 158,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze file ages using git history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 307
        },
        {
          "name": "_categorize_age",
          "line_start": 160,
          "line_end": 171,
          "args": [
            "self",
            "age_days"
          ],
          "returns": null,
          "docstring": "Categorize file age.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_calculate_age_distribution",
          "line_start": 173,
          "line_end": 181,
          "args": [
            "self",
            "ages"
          ],
          "returns": null,
          "docstring": "Calculate age distribution.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_analyze_growth_patterns",
          "line_start": 183,
          "line_end": 255,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze codebase growth patterns over time.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 416
        },
        {
          "name": "_identify_change_hotspots",
          "line_start": 257,
          "line_end": 293,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify files that change frequently (hotspots).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 230
        },
        {
          "name": "_categorize_hotness",
          "line_start": 295,
          "line_end": 306,
          "args": [
            "self",
            "change_count"
          ],
          "returns": null,
          "docstring": "Categorize file hotness level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_detect_refactoring_patterns",
          "line_start": 308,
          "line_end": 355,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect refactoring patterns in commit history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 230
        },
        {
          "name": "_classify_refactoring_type",
          "line_start": 357,
          "line_end": 372,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": "Classify the type of refactoring based on commit message.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_analyze_developer_patterns",
          "line_start": 374,
          "line_end": 439,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze developer contribution patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 332
        },
        {
          "name": "_classify_development_model",
          "line_start": 441,
          "line_end": 455,
          "args": [
            "self",
            "ownership_distribution"
          ],
          "returns": null,
          "docstring": "Classify the development model based on ownership distribution.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_analyze_temporal_coupling",
          "line_start": 457,
          "line_end": 511,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze temporal coupling between files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 408
        },
        {
          "name": "_categorize_coupling_strength",
          "line_start": 513,
          "line_end": 522,
          "args": [
            "self",
            "strength"
          ],
          "returns": null,
          "docstring": "Categorize temporal coupling strength.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_calculate_stability_metrics",
          "line_start": 524,
          "line_end": 572,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate code stability metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 322
        },
        {
          "name": "_grade_stability",
          "line_start": 574,
          "line_end": 585,
          "args": [
            "self",
            "stability_index"
          ],
          "returns": null,
          "docstring": "Grade stability based on index.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_analyze_evolution_trends",
          "line_start": 587,
          "line_end": 642,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze overall evolution trends.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 364
        },
        {
          "name": "_assess_maturity",
          "line_start": 644,
          "line_end": 655,
          "args": [
            "self",
            "age_days",
            "commits_per_year"
          ],
          "returns": null,
          "docstring": "Assess repository maturity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_classify_activity_level",
          "line_start": 657,
          "line_end": 668,
          "args": [
            "self",
            "commits_per_month"
          ],
          "returns": null,
          "docstring": "Classify activity level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_calculate_size_distribution",
          "line_start": 670,
          "line_end": 689,
          "args": [
            "self",
            "sizes"
          ],
          "returns": null,
          "docstring": "Calculate file size distribution.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "subprocess",
          "names": [
            "subprocess"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 213
        }
      ],
      "external_dependencies": "{'pathlib', 'subprocess', 'typing', 'datetime', 're', 'os', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 689,
      "complexity_score": 7246,
      "api_surface_area": 2,
      "docstring": "Evolution Analysis Module\n=========================\n\nImplements comprehensive code evolution analysis:\n- Git history analysis and change patterns\n- File age and growth pattern analysis  \n- Refactoring detection and change hotspots\n- Developer pattern analysis\n- Temporal coupling and stability metrics",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\graph_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "component_name": "graph_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.959200",
      "classes": [
        {
          "name": "GraphAnalyzer",
          "line_start": 27,
          "line_end": 375,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 30,
              "line_end": 42,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive graph analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_analyze_call_graphs",
              "line_start": 44,
              "line_end": 109,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze function call relationships.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 424
            },
            {
              "name": "_extract_function_name",
              "line_start": 111,
              "line_end": 117,
              "args": [
                "self",
                "call_node"
              ],
              "returns": null,
              "docstring": "Extract function name from a call node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_analyze_dependency_graphs",
              "line_start": 119,
              "line_end": 163,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze module dependency relationships.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 335
            },
            {
              "name": "_detect_cycles",
              "line_start": 165,
              "line_end": 194,
              "args": [
                "self",
                "graph"
              ],
              "returns": null,
              "docstring": "Detect cycles in a directed graph using DFS.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_analyze_control_flow",
              "line_start": 196,
              "line_end": 236,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze control flow complexity in functions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 234
            },
            {
              "name": "_analyze_function_control_flow",
              "line_start": 238,
              "line_end": 268,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Analyze control flow for a single function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 221
            },
            {
              "name": "_calculate_nesting_depth",
              "line_start": 270,
              "line_end": 288,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate maximum nesting depth in a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_calculate_graph_metrics",
              "line_start": 290,
              "line_end": 302,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall graph metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            },
            {
              "name": "_calculate_networkx_metrics",
              "line_start": 304,
              "line_end": 339,
              "args": [
                "self",
                "graph_dict",
                "graph_type"
              ],
              "returns": null,
              "docstring": "Calculate advanced metrics using NetworkX.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 216
            },
            {
              "name": "_calculate_basic_graph_metrics",
              "line_start": 341,
              "line_end": 358,
              "args": [
                "self",
                "forward_graph",
                "reverse_graph"
              ],
              "returns": null,
              "docstring": "Calculate basic graph metrics without NetworkX.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 180
            },
            {
              "name": "_calculate_basic_dependency_metrics",
              "line_start": 360,
              "line_end": 369,
              "args": [
                "self",
                "dependency_graph"
              ],
              "returns": null,
              "docstring": "Calculate basic dependency metrics without NetworkX.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_get_most_connected_nodes",
              "line_start": 371,
              "line_end": 375,
              "args": [
                "self",
                "graph",
                "top_n"
              ],
              "returns": null,
              "docstring": "Get the most connected nodes in a graph.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            }
          ],
          "docstring": "Analyzer for graph-based code analysis.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 30,
          "line_end": 42,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive graph analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_analyze_call_graphs",
          "line_start": 44,
          "line_end": 109,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze function call relationships.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 424
        },
        {
          "name": "_extract_function_name",
          "line_start": 111,
          "line_end": 117,
          "args": [
            "self",
            "call_node"
          ],
          "returns": null,
          "docstring": "Extract function name from a call node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_analyze_dependency_graphs",
          "line_start": 119,
          "line_end": 163,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze module dependency relationships.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 335
        },
        {
          "name": "_detect_cycles",
          "line_start": 165,
          "line_end": 194,
          "args": [
            "self",
            "graph"
          ],
          "returns": null,
          "docstring": "Detect cycles in a directed graph using DFS.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_analyze_control_flow",
          "line_start": 196,
          "line_end": 236,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze control flow complexity in functions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 234
        },
        {
          "name": "_analyze_function_control_flow",
          "line_start": 238,
          "line_end": 268,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Analyze control flow for a single function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 221
        },
        {
          "name": "_calculate_nesting_depth",
          "line_start": 270,
          "line_end": 288,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate maximum nesting depth in a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_calculate_graph_metrics",
          "line_start": 290,
          "line_end": 302,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall graph metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "_calculate_networkx_metrics",
          "line_start": 304,
          "line_end": 339,
          "args": [
            "self",
            "graph_dict",
            "graph_type"
          ],
          "returns": null,
          "docstring": "Calculate advanced metrics using NetworkX.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 216
        },
        {
          "name": "_calculate_basic_graph_metrics",
          "line_start": 341,
          "line_end": 358,
          "args": [
            "self",
            "forward_graph",
            "reverse_graph"
          ],
          "returns": null,
          "docstring": "Calculate basic graph metrics without NetworkX.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 180
        },
        {
          "name": "_calculate_basic_dependency_metrics",
          "line_start": 360,
          "line_end": 369,
          "args": [
            "self",
            "dependency_graph"
          ],
          "returns": null,
          "docstring": "Calculate basic dependency metrics without NetworkX.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_get_most_connected_nodes",
          "line_start": 371,
          "line_end": 375,
          "args": [
            "self",
            "graph",
            "top_n"
          ],
          "returns": null,
          "docstring": "Get the most connected nodes in a graph.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "dfs",
          "line_start": 171,
          "line_end": 188,
          "args": [
            "node",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "calculate_depth",
          "line_start": 274,
          "line_end": 283,
          "args": [
            "node",
            "current_depth"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "networkx",
          "names": [
            "networkx"
          ],
          "alias": "nx",
          "is_from_import": false,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'networkx', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 375,
      "complexity_score": 4655,
      "api_surface_area": 4,
      "docstring": "Graph Analysis Module\n====================\n\nImplements comprehensive graph-based analysis:\n- Call graphs and control flow analysis\n- Dependency graphs and cycles\n- Network analysis with NetworkX (with fallbacks)\n- Graph metrics and centrality measures",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "{'networkx'}",
      "documentation_coverage": 0.9375,
      "estimated_migration_complexity": "high"
    },
    "testmaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "component_name": "inheritance_polymorphism",
      "analysis_timestamp": "2025-08-20 21:46:39.966066",
      "classes": [
        {
          "name": "InheritancePolymorphismAnalyzer",
          "line_start": 21,
          "line_end": 246,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 24,
              "line_end": 29,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive inheritance and polymorphism analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_calculate_inheritance_metrics",
              "line_start": 31,
              "line_end": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate comprehensive inheritance metrics (DIT, NOC).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 446
            },
            {
              "name": "_resolve_class_name",
              "line_start": 109,
              "line_end": 121,
              "args": [
                "self",
                "class_name",
                "current_file",
                "all_classes"
              ],
              "returns": null,
              "docstring": "Try to resolve a class name to its full key.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_calculate_dit",
              "line_start": 123,
              "line_end": 136,
              "args": [
                "self",
                "class_key",
                "class_parents"
              ],
              "returns": null,
              "docstring": "Calculate Depth of Inheritance Tree for a class.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_calculate_polymorphism_metrics",
              "line_start": 138,
              "line_end": 224,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate polymorphism metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 490
            },
            {
              "name": "_is_abstract_method",
              "line_start": 226,
              "line_end": 246,
              "args": [
                "self",
                "method_node"
              ],
              "returns": null,
              "docstring": "Check if a method is abstract (simplified detection).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            }
          ],
          "docstring": "Analyzer for inheritance and polymorphism metrics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 24,
          "line_end": 29,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive inheritance and polymorphism analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_calculate_inheritance_metrics",
          "line_start": 31,
          "line_end": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate comprehensive inheritance metrics (DIT, NOC).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 446
        },
        {
          "name": "_resolve_class_name",
          "line_start": 109,
          "line_end": 121,
          "args": [
            "self",
            "class_name",
            "current_file",
            "all_classes"
          ],
          "returns": null,
          "docstring": "Try to resolve a class name to its full key.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_calculate_dit",
          "line_start": 123,
          "line_end": 136,
          "args": [
            "self",
            "class_key",
            "class_parents"
          ],
          "returns": null,
          "docstring": "Calculate Depth of Inheritance Tree for a class.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_calculate_polymorphism_metrics",
          "line_start": 138,
          "line_end": 224,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate polymorphism metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 490
        },
        {
          "name": "_is_abstract_method",
          "line_start": 226,
          "line_end": 246,
          "args": [
            "self",
            "method_node"
          ],
          "returns": null,
          "docstring": "Check if a method is abstract (simplified detection).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 246,
      "complexity_score": 2520,
      "api_surface_area": 2,
      "docstring": "Inheritance and Polymorphism Analyzer\n====================================\n\nImplements inheritance and polymorphism metrics:\n- Depth of Inheritance Tree (DIT)\n- Number of Children (NOC)\n- Polymorphism analysis\n- Interface usage analysis",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.1428571428571428,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "component_name": "linguistic_analysis",
      "analysis_timestamp": "2025-08-20 21:46:39.979062",
      "classes": [
        {
          "name": "LinguisticAnalyzer",
          "line_start": 24,
          "line_end": 911,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 27,
              "line_end": 29,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_init_linguistic_patterns",
              "line_start": 31,
              "line_end": 58,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize linguistic analysis patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "analyze",
              "line_start": 60,
              "line_end": 76,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive linguistic analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_analyze_naming_conventions",
              "line_start": 78,
              "line_end": 206,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze identifier naming conventions and consistency.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 569
            },
            {
              "name": "_get_expected_convention",
              "line_start": 208,
              "line_end": 217,
              "args": [
                "self",
                "identifier_type"
              ],
              "returns": null,
              "docstring": "Get expected naming convention for identifier type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_calculate_abbreviation_ratio",
              "line_start": 219,
              "line_end": 223,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Calculate ratio of abbreviations in an identifier.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_get_most_common_violation",
              "line_start": 225,
              "line_end": 232,
              "args": [
                "self",
                "violations"
              ],
              "returns": null,
              "docstring": "Get most common naming convention violation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_calculate_identifier_length_stats",
              "line_start": 234,
              "line_end": 246,
              "args": [
                "self",
                "identifiers"
              ],
              "returns": null,
              "docstring": "Calculate identifier length statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_calculate_vocabulary_metrics",
              "line_start": 248,
              "line_end": 315,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate vocabulary richness and diversity metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 403
            },
            {
              "name": "_extract_words_from_content",
              "line_start": 317,
              "line_end": 350,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Extract words from code content.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 257
            },
            {
              "name": "_calculate_vocabulary_diversity",
              "line_start": 352,
              "line_end": 364,
              "args": [
                "self",
                "word_frequencies"
              ],
              "returns": null,
              "docstring": "Calculate vocabulary diversity using Shannon entropy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "_analyze_comments",
              "line_start": 366,
              "line_end": 440,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze comment quality and patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 457
            },
            {
              "name": "_calculate_comment_quality_score",
              "line_start": 442,
              "line_end": 488,
              "args": [
                "self",
                "comments"
              ],
              "returns": null,
              "docstring": "Calculate quality score for comments.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 257
            },
            {
              "name": "_assess_documentation_quality",
              "line_start": 490,
              "line_end": 585,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess documentation quality (docstrings, README, etc.).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 458
            },
            {
              "name": "_analyze_docstring_quality",
              "line_start": 587,
              "line_end": 624,
              "args": [
                "self",
                "docstring"
              ],
              "returns": null,
              "docstring": "Analyze the quality of a docstring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 180
            },
            {
              "name": "_calculate_readability_metrics",
              "line_start": 626,
              "line_end": 674,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate code readability metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 285
            },
            {
              "name": "_calculate_max_nesting_depth",
              "line_start": 676,
              "line_end": 693,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate maximum nesting depth in a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_calculate_line_length_distribution",
              "line_start": 695,
              "line_end": 714,
              "args": [
                "self",
                "line_lengths"
              ],
              "returns": null,
              "docstring": "Calculate distribution of line lengths.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "_calculate_readability_score",
              "line_start": 716,
              "line_end": 736,
              "args": [
                "self",
                "readability_data"
              ],
              "returns": null,
              "docstring": "Calculate overall readability score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "_analyze_abbreviations",
              "line_start": 738,
              "line_end": 794,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze abbreviation usage patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 324
            },
            {
              "name": "_extract_domain_terms",
              "line_start": 796,
              "line_end": 843,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Extract domain-specific terminology.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 334
            },
            {
              "name": "_analyze_nl_patterns",
              "line_start": 845,
              "line_end": 886,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze natural language patterns in code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 255
            },
            {
              "name": "_analyze_text_patterns",
              "line_start": 888,
              "line_end": 911,
              "args": [
                "self",
                "text",
                "nl_data"
              ],
              "returns": null,
              "docstring": "Analyze patterns in natural language text.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            }
          ],
          "docstring": "Analyzer for linguistic patterns in code.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 27,
          "line_end": 29,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_init_linguistic_patterns",
          "line_start": 31,
          "line_end": 58,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize linguistic analysis patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "analyze",
          "line_start": 60,
          "line_end": 76,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive linguistic analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_analyze_naming_conventions",
          "line_start": 78,
          "line_end": 206,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze identifier naming conventions and consistency.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 569
        },
        {
          "name": "_get_expected_convention",
          "line_start": 208,
          "line_end": 217,
          "args": [
            "self",
            "identifier_type"
          ],
          "returns": null,
          "docstring": "Get expected naming convention for identifier type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_calculate_abbreviation_ratio",
          "line_start": 219,
          "line_end": 223,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Calculate ratio of abbreviations in an identifier.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_get_most_common_violation",
          "line_start": 225,
          "line_end": 232,
          "args": [
            "self",
            "violations"
          ],
          "returns": null,
          "docstring": "Get most common naming convention violation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_calculate_identifier_length_stats",
          "line_start": 234,
          "line_end": 246,
          "args": [
            "self",
            "identifiers"
          ],
          "returns": null,
          "docstring": "Calculate identifier length statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_calculate_vocabulary_metrics",
          "line_start": 248,
          "line_end": 315,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate vocabulary richness and diversity metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 403
        },
        {
          "name": "_extract_words_from_content",
          "line_start": 317,
          "line_end": 350,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Extract words from code content.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 257
        },
        {
          "name": "_calculate_vocabulary_diversity",
          "line_start": 352,
          "line_end": 364,
          "args": [
            "self",
            "word_frequencies"
          ],
          "returns": null,
          "docstring": "Calculate vocabulary diversity using Shannon entropy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "_analyze_comments",
          "line_start": 366,
          "line_end": 440,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze comment quality and patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 457
        },
        {
          "name": "_calculate_comment_quality_score",
          "line_start": 442,
          "line_end": 488,
          "args": [
            "self",
            "comments"
          ],
          "returns": null,
          "docstring": "Calculate quality score for comments.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 257
        },
        {
          "name": "_assess_documentation_quality",
          "line_start": 490,
          "line_end": 585,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess documentation quality (docstrings, README, etc.).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 458
        },
        {
          "name": "_analyze_docstring_quality",
          "line_start": 587,
          "line_end": 624,
          "args": [
            "self",
            "docstring"
          ],
          "returns": null,
          "docstring": "Analyze the quality of a docstring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 180
        },
        {
          "name": "_calculate_readability_metrics",
          "line_start": 626,
          "line_end": 674,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate code readability metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 285
        },
        {
          "name": "_calculate_max_nesting_depth",
          "line_start": 676,
          "line_end": 693,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate maximum nesting depth in a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_calculate_line_length_distribution",
          "line_start": 695,
          "line_end": 714,
          "args": [
            "self",
            "line_lengths"
          ],
          "returns": null,
          "docstring": "Calculate distribution of line lengths.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "_calculate_readability_score",
          "line_start": 716,
          "line_end": 736,
          "args": [
            "self",
            "readability_data"
          ],
          "returns": null,
          "docstring": "Calculate overall readability score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "_analyze_abbreviations",
          "line_start": 738,
          "line_end": 794,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze abbreviation usage patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 324
        },
        {
          "name": "_extract_domain_terms",
          "line_start": 796,
          "line_end": 843,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Extract domain-specific terminology.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 334
        },
        {
          "name": "_analyze_nl_patterns",
          "line_start": 845,
          "line_end": 886,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze natural language patterns in code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 255
        },
        {
          "name": "_analyze_text_patterns",
          "line_start": 888,
          "line_end": 911,
          "args": [
            "self",
            "text",
            "nl_data"
          ],
          "returns": null,
          "docstring": "Analyze patterns in natural language text.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "get_depth",
          "line_start": 680,
          "line_end": 690,
          "args": [
            "node",
            "current_depth"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "string",
          "names": [
            "string"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'string', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 911,
      "complexity_score": 9870,
      "api_surface_area": 3,
      "docstring": "Linguistic Analysis Module\n==========================\n\nImplements comprehensive linguistic analysis:\n- Identifier naming conventions analysis\n- Vocabulary metrics and diversity\n- Comment and documentation quality\n- Natural language patterns in code\n- Readability and comprehension metrics",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.96,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\main_analyzer.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "component_name": "main_analyzer",
      "analysis_timestamp": "2025-08-20 21:46:39.993576",
      "classes": [
        {
          "name": "ComprehensiveCodebaseAnalyzer",
          "line_start": 38,
          "line_end": 540,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 41,
              "line_end": 69,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "analyze_comprehensive",
              "line_start": 71,
              "line_end": 168,
              "args": [
                "self",
                "selected_categories"
              ],
              "returns": null,
              "docstring": "Perform comprehensive analysis across all categories.\n\nArgs:\n    selected_categories: Optional list of categories to analyze.\n                        If None, analyzes all categories.\n\nReturns:\n    Comprehensive analysis results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 580
            },
            {
              "name": "analyze_category",
              "line_start": 170,
              "line_end": 220,
              "args": [
                "self",
                "category"
              ],
              "returns": null,
              "docstring": "Analyze a specific category.\n\nArgs:\n    category: Name of the analysis category\n    \nReturns:\n    Category-specific analysis results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 198
            },
            {
              "name": "get_available_categories",
              "line_start": 222,
              "line_end": 224,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of available analysis categories.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "_generate_comprehensive_summary",
              "line_start": 226,
              "line_end": 300,
              "args": [
                "self",
                "analysis_results"
              ],
              "returns": null,
              "docstring": "Generate a comprehensive summary across all analysis results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 511
            },
            {
              "name": "_generate_comprehensive_recommendations",
              "line_start": 302,
              "line_end": 396,
              "args": [
                "self",
                "analysis_results"
              ],
              "returns": null,
              "docstring": "Generate comprehensive recommendations based on all analysis results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 457
            },
            {
              "name": "_perform_cross_analysis",
              "line_start": 398,
              "line_end": 459,
              "args": [
                "self",
                "analysis_results"
              ],
              "returns": null,
              "docstring": "Perform cross-analysis between different categories.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 368
            },
            {
              "name": "_extract_key_findings",
              "line_start": 461,
              "line_end": 496,
              "args": [
                "self",
                "analysis_results"
              ],
              "returns": null,
              "docstring": "Extract key findings from analysis results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 215
            },
            {
              "name": "_extract_critical_issues",
              "line_start": 498,
              "line_end": 533,
              "args": [
                "self",
                "analysis_results"
              ],
              "returns": null,
              "docstring": "Extract critical issues from analysis results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 183
            },
            {
              "name": "_count_python_files",
              "line_start": 535,
              "line_end": 540,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Count total Python files in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 26
            }
          ],
          "docstring": "Main orchestrator for comprehensive codebase analysis.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 41,
          "line_end": 69,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "analyze_comprehensive",
          "line_start": 71,
          "line_end": 168,
          "args": [
            "self",
            "selected_categories"
          ],
          "returns": null,
          "docstring": "Perform comprehensive analysis across all categories.\n\nArgs:\n    selected_categories: Optional list of categories to analyze.\n                        If None, analyzes all categories.\n\nReturns:\n    Comprehensive analysis results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 580
        },
        {
          "name": "analyze_category",
          "line_start": 170,
          "line_end": 220,
          "args": [
            "self",
            "category"
          ],
          "returns": null,
          "docstring": "Analyze a specific category.\n\nArgs:\n    category: Name of the analysis category\n    \nReturns:\n    Category-specific analysis results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 198
        },
        {
          "name": "get_available_categories",
          "line_start": 222,
          "line_end": 224,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of available analysis categories.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "_generate_comprehensive_summary",
          "line_start": 226,
          "line_end": 300,
          "args": [
            "self",
            "analysis_results"
          ],
          "returns": null,
          "docstring": "Generate a comprehensive summary across all analysis results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 511
        },
        {
          "name": "_generate_comprehensive_recommendations",
          "line_start": 302,
          "line_end": 396,
          "args": [
            "self",
            "analysis_results"
          ],
          "returns": null,
          "docstring": "Generate comprehensive recommendations based on all analysis results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 457
        },
        {
          "name": "_perform_cross_analysis",
          "line_start": 398,
          "line_end": 459,
          "args": [
            "self",
            "analysis_results"
          ],
          "returns": null,
          "docstring": "Perform cross-analysis between different categories.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 368
        },
        {
          "name": "_extract_key_findings",
          "line_start": 461,
          "line_end": 496,
          "args": [
            "self",
            "analysis_results"
          ],
          "returns": null,
          "docstring": "Extract key findings from analysis results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 215
        },
        {
          "name": "_extract_critical_issues",
          "line_start": 498,
          "line_end": 533,
          "args": [
            "self",
            "analysis_results"
          ],
          "returns": null,
          "docstring": "Extract critical issues from analysis results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 183
        },
        {
          "name": "_count_python_files",
          "line_start": 535,
          "line_end": 540,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Count total Python files in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        }
      ],
      "imports": [
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 9
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 10
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 11
        },
        {
          "module": "software_metrics",
          "names": [
            "SoftwareMetricsAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "coupling_cohesion",
          "names": [
            "CouplingCohesionAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "inheritance_polymorphism",
          "names": [
            "InheritancePolymorphismAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "graph_analysis",
          "names": [
            "GraphAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "clone_detection",
          "names": [
            "CloneDetectionAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "security_analysis",
          "names": [
            "SecurityAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "taint_analysis",
          "names": [
            "TaintAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "crypto_analysis",
          "names": [
            "CryptographicAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "linguistic_analysis",
          "names": [
            "LinguisticAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "evolution_analysis",
          "names": [
            "EvolutionAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "statistical_analysis",
          "names": [
            "StatisticalAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "structural_analysis",
          "names": [
            "StructuralAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "complexity_analysis",
          "names": [
            "ComplexityAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "quality_analysis",
          "names": [
            "QualityAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "supply_chain_security",
          "names": [
            "SupplyChainSecurityAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "api_analysis",
          "names": [
            "APIAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "testing_analysis",
          "names": [
            "TestingAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "performance_analysis",
          "names": [
            "PerformanceAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "resource_io_analysis",
          "names": [
            "ResourceIOAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 31
        },
        {
          "module": "memory_analysis",
          "names": [
            "MemoryAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 32
        },
        {
          "module": "database_analysis",
          "names": [
            "DatabaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 33
        },
        {
          "module": "concurrency_analysis",
          "names": [
            "ConcurrencyAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 34
        },
        {
          "module": "error_handling_analysis",
          "names": [
            "ErrorHandlingAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 35
        }
      ],
      "external_dependencies": "{'performance_analysis', 'linguistic_analysis', 'typing', 'taint_analysis', 'graph_analysis', 'structural_analysis', 'resource_io_analysis', 'inheritance_polymorphism', 'security_analysis', 'error_handling_analysis', 'complexity_analysis', 'pathlib', 'clone_detection', 'concurrency_analysis', 'statistical_analysis', 'supply_chain_security', 'database_analysis', 'memory_analysis', 'quality_analysis', 'coupling_cohesion', 'time', 'crypto_analysis', 'api_analysis', 'testing_analysis', 'software_metrics', 'evolution_analysis'}",
      "internal_dependencies": "set()",
      "lines_of_code": 540,
      "complexity_score": 5440,
      "api_surface_area": 6,
      "docstring": "Main Comprehensive Codebase Analyzer\n====================================\n\nOrchestrates all analysis modules to provide comprehensive codebase insights.\nThis is the main entry point that coordinates all specialized analyzers.",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\memory_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "component_name": "memory_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.008091",
      "classes": [
        {
          "name": "MemoryAnalyzer",
          "line_start": 24,
          "line_end": 1141,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 27,
              "line_end": 61,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "analyze",
              "line_start": 63,
              "line_end": 79,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive memory usage analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_analyze_memory_allocations",
              "line_start": 81,
              "line_end": 118,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze memory allocation patterns in the code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 200
            },
            {
              "name": "_detect_large_allocations",
              "line_start": 120,
              "line_end": 168,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect potentially large memory allocations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 245
            },
            {
              "name": "_detect_memory_leaks",
              "line_start": 170,
              "line_end": 216,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect potential memory leaks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "_detect_resource_leaks",
              "line_start": 218,
              "line_end": 276,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect resource leaks (files, sockets, etc.).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 314
            },
            {
              "name": "_detect_reference_cycles",
              "line_start": 278,
              "line_end": 319,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect potential reference cycles.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 228
            },
            {
              "name": "_detect_self_references",
              "line_start": 321,
              "line_end": 350,
              "args": [
                "self",
                "init_method"
              ],
              "returns": null,
              "docstring": "Detect self-references that might cause cycles.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 203
            },
            {
              "name": "_detect_circular_relationships",
              "line_start": 352,
              "line_end": 377,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Detect circular parent-child relationships.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "_detect_event_listener_cycles",
              "line_start": 379,
              "line_end": 409,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect event listener patterns that might cause cycles.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 234
            },
            {
              "name": "_detect_cache_leaks",
              "line_start": 411,
              "line_end": 460,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect unbounded cache growth.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 288
            },
            {
              "name": "_detect_global_accumulation",
              "line_start": 462,
              "line_end": 497,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect global variable accumulation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 238
            },
            {
              "name": "_analyze_memory_growth_patterns",
              "line_start": 499,
              "line_end": 534,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze patterns that lead to memory growth.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "_detect_unbounded_growth",
              "line_start": 536,
              "line_end": 569,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect unbounded collection growth patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "_detect_quadratic_growth",
              "line_start": 571,
              "line_end": 593,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect O(n\u00b2) memory growth patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "_detect_recursive_allocations",
              "line_start": 595,
              "line_end": 615,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect recursive functions with allocations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_analyze_object_lifetime",
              "line_start": 617,
              "line_end": 650,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze object lifetime and scope.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 181
            },
            {
              "name": "_detect_short_lived_large_objects",
              "line_start": 652,
              "line_end": 691,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Detect large objects created and discarded quickly.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 233
            },
            {
              "name": "_detect_unnecessary_temporaries",
              "line_start": 693,
              "line_end": 714,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Detect unnecessary temporary variables.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "_analyze_gc_pressure",
              "line_start": 716,
              "line_end": 758,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze garbage collection pressure indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 185
            },
            {
              "name": "_detect_high_allocation_rate",
              "line_start": 760,
              "line_end": 785,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect patterns causing high allocation rate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "_detect_reference_counting_issues",
              "line_start": 787,
              "line_end": 812,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect patterns that complicate reference counting.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 162
            },
            {
              "name": "_identify_memory_optimizations",
              "line_start": 814,
              "line_end": 853,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify memory optimization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 188
            },
            {
              "name": "_find_generator_opportunities",
              "line_start": 855,
              "line_end": 885,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Find opportunities to use generators instead of lists.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 154
            },
            {
              "name": "_find_string_optimizations",
              "line_start": 887,
              "line_end": 906,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Find string operation optimization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_find_collection_optimizations",
              "line_start": 908,
              "line_end": 929,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Find collection usage optimization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_calculate_memory_metrics",
              "line_start": 931,
              "line_end": 970,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall memory metrics and risk assessment.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 241
            },
            {
              "name": "_extract_array_size",
              "line_start": 973,
              "line_end": 998,
              "args": [
                "self",
                "call_node"
              ],
              "returns": null,
              "docstring": "Extract size information from array allocation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            },
            {
              "name": "_is_large_comprehension",
              "line_start": 1000,
              "line_end": 1010,
              "args": [
                "self",
                "comp_node"
              ],
              "returns": null,
              "docstring": "Check if a list comprehension is potentially large.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            },
            {
              "name": "_has_string_concatenation_in_loop",
              "line_start": 1012,
              "line_end": 1018,
              "args": [
                "self",
                "loop_node"
              ],
              "returns": null,
              "docstring": "Check if loop contains string concatenation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_is_in_with_statement",
              "line_start": 1020,
              "line_end": 1027,
              "args": [
                "self",
                "tree",
                "node"
              ],
              "returns": null,
              "docstring": "Check if a call is within a with statement.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_has_matching_close",
              "line_start": 1029,
              "line_end": 1037,
              "args": [
                "self",
                "tree",
                "open_node"
              ],
              "returns": null,
              "docstring": "Check if a resource has a matching close call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_has_thread_join",
              "line_start": 1039,
              "line_end": 1046,
              "args": [
                "self",
                "tree",
                "start_node"
              ],
              "returns": null,
              "docstring": "Check if a thread has a join call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_get_init_method",
              "line_start": 1048,
              "line_end": 1054,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Get the __init__ method of a class.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_has_cache_eviction",
              "line_start": 1056,
              "line_end": 1062,
              "args": [
                "self",
                "class_node"
              ],
              "returns": null,
              "docstring": "Check if a class implements cache eviction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_is_module_level",
              "line_start": 1064,
              "line_end": 1066,
              "args": [
                "self",
                "tree",
                "node"
              ],
              "returns": null,
              "docstring": "Check if a node is at module level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_is_infinite_loop",
              "line_start": 1068,
              "line_end": 1074,
              "args": [
                "self",
                "while_node"
              ],
              "returns": null,
              "docstring": "Check if a while loop is infinite.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_has_large_range",
              "line_start": 1076,
              "line_end": 1084,
              "args": [
                "self",
                "for_node"
              ],
              "returns": null,
              "docstring": "Check if a for loop has a large range.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_is_recursive_function",
              "line_start": 1086,
              "line_end": 1093,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if a function is recursive.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_is_large_allocation",
              "line_start": 1095,
              "line_end": 1101,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Check if a call represents a large allocation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_get_parent_node",
              "line_start": 1103,
              "line_end": 1109,
              "args": [
                "self",
                "tree",
                "target"
              ],
              "returns": null,
              "docstring": "Get the parent node of a target node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_calculate_leak_risk_score",
              "line_start": 1111,
              "line_end": 1118,
              "args": [
                "self",
                "leaks"
              ],
              "returns": null,
              "docstring": "Calculate overall memory leak risk score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_calculate_gc_pressure_score",
              "line_start": 1120,
              "line_end": 1126,
              "args": [
                "self",
                "gc_analysis"
              ],
              "returns": null,
              "docstring": "Calculate GC pressure score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_generate_memory_recommendations",
              "line_start": 1128,
              "line_end": 1141,
              "args": [
                "self",
                "optimizations"
              ],
              "returns": null,
              "docstring": "Generate memory optimization recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            }
          ],
          "docstring": "Analyzer for memory usage patterns and leak detection.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 27,
          "line_end": 61,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "analyze",
          "line_start": 63,
          "line_end": 79,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive memory usage analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_analyze_memory_allocations",
          "line_start": 81,
          "line_end": 118,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze memory allocation patterns in the code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 200
        },
        {
          "name": "_detect_large_allocations",
          "line_start": 120,
          "line_end": 168,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect potentially large memory allocations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 245
        },
        {
          "name": "_detect_memory_leaks",
          "line_start": 170,
          "line_end": 216,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect potential memory leaks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "_detect_resource_leaks",
          "line_start": 218,
          "line_end": 276,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect resource leaks (files, sockets, etc.).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 314
        },
        {
          "name": "_detect_reference_cycles",
          "line_start": 278,
          "line_end": 319,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect potential reference cycles.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 228
        },
        {
          "name": "_detect_self_references",
          "line_start": 321,
          "line_end": 350,
          "args": [
            "self",
            "init_method"
          ],
          "returns": null,
          "docstring": "Detect self-references that might cause cycles.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 203
        },
        {
          "name": "_detect_circular_relationships",
          "line_start": 352,
          "line_end": 377,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Detect circular parent-child relationships.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "_detect_event_listener_cycles",
          "line_start": 379,
          "line_end": 409,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect event listener patterns that might cause cycles.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 234
        },
        {
          "name": "_detect_cache_leaks",
          "line_start": 411,
          "line_end": 460,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect unbounded cache growth.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 288
        },
        {
          "name": "_detect_global_accumulation",
          "line_start": 462,
          "line_end": 497,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect global variable accumulation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 238
        },
        {
          "name": "_analyze_memory_growth_patterns",
          "line_start": 499,
          "line_end": 534,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze patterns that lead to memory growth.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "_detect_unbounded_growth",
          "line_start": 536,
          "line_end": 569,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect unbounded collection growth patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "_detect_quadratic_growth",
          "line_start": 571,
          "line_end": 593,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect O(n\u00b2) memory growth patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "_detect_recursive_allocations",
          "line_start": 595,
          "line_end": 615,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect recursive functions with allocations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_analyze_object_lifetime",
          "line_start": 617,
          "line_end": 650,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze object lifetime and scope.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 181
        },
        {
          "name": "_detect_short_lived_large_objects",
          "line_start": 652,
          "line_end": 691,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Detect large objects created and discarded quickly.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 233
        },
        {
          "name": "_detect_unnecessary_temporaries",
          "line_start": 693,
          "line_end": 714,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Detect unnecessary temporary variables.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "_analyze_gc_pressure",
          "line_start": 716,
          "line_end": 758,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze garbage collection pressure indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 185
        },
        {
          "name": "_detect_high_allocation_rate",
          "line_start": 760,
          "line_end": 785,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect patterns causing high allocation rate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "_detect_reference_counting_issues",
          "line_start": 787,
          "line_end": 812,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect patterns that complicate reference counting.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 162
        },
        {
          "name": "_identify_memory_optimizations",
          "line_start": 814,
          "line_end": 853,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify memory optimization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 188
        },
        {
          "name": "_find_generator_opportunities",
          "line_start": 855,
          "line_end": 885,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Find opportunities to use generators instead of lists.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 154
        },
        {
          "name": "_find_string_optimizations",
          "line_start": 887,
          "line_end": 906,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Find string operation optimization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_find_collection_optimizations",
          "line_start": 908,
          "line_end": 929,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Find collection usage optimization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_calculate_memory_metrics",
          "line_start": 931,
          "line_end": 970,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall memory metrics and risk assessment.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 241
        },
        {
          "name": "_extract_array_size",
          "line_start": 973,
          "line_end": 998,
          "args": [
            "self",
            "call_node"
          ],
          "returns": null,
          "docstring": "Extract size information from array allocation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        },
        {
          "name": "_is_large_comprehension",
          "line_start": 1000,
          "line_end": 1010,
          "args": [
            "self",
            "comp_node"
          ],
          "returns": null,
          "docstring": "Check if a list comprehension is potentially large.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        },
        {
          "name": "_has_string_concatenation_in_loop",
          "line_start": 1012,
          "line_end": 1018,
          "args": [
            "self",
            "loop_node"
          ],
          "returns": null,
          "docstring": "Check if loop contains string concatenation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_is_in_with_statement",
          "line_start": 1020,
          "line_end": 1027,
          "args": [
            "self",
            "tree",
            "node"
          ],
          "returns": null,
          "docstring": "Check if a call is within a with statement.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_has_matching_close",
          "line_start": 1029,
          "line_end": 1037,
          "args": [
            "self",
            "tree",
            "open_node"
          ],
          "returns": null,
          "docstring": "Check if a resource has a matching close call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_has_thread_join",
          "line_start": 1039,
          "line_end": 1046,
          "args": [
            "self",
            "tree",
            "start_node"
          ],
          "returns": null,
          "docstring": "Check if a thread has a join call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_get_init_method",
          "line_start": 1048,
          "line_end": 1054,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Get the __init__ method of a class.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_has_cache_eviction",
          "line_start": 1056,
          "line_end": 1062,
          "args": [
            "self",
            "class_node"
          ],
          "returns": null,
          "docstring": "Check if a class implements cache eviction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_is_module_level",
          "line_start": 1064,
          "line_end": 1066,
          "args": [
            "self",
            "tree",
            "node"
          ],
          "returns": null,
          "docstring": "Check if a node is at module level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_is_infinite_loop",
          "line_start": 1068,
          "line_end": 1074,
          "args": [
            "self",
            "while_node"
          ],
          "returns": null,
          "docstring": "Check if a while loop is infinite.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_has_large_range",
          "line_start": 1076,
          "line_end": 1084,
          "args": [
            "self",
            "for_node"
          ],
          "returns": null,
          "docstring": "Check if a for loop has a large range.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_is_recursive_function",
          "line_start": 1086,
          "line_end": 1093,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if a function is recursive.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_is_large_allocation",
          "line_start": 1095,
          "line_end": 1101,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Check if a call represents a large allocation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_get_parent_node",
          "line_start": 1103,
          "line_end": 1109,
          "args": [
            "self",
            "tree",
            "target"
          ],
          "returns": null,
          "docstring": "Get the parent node of a target node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_calculate_leak_risk_score",
          "line_start": 1111,
          "line_end": 1118,
          "args": [
            "self",
            "leaks"
          ],
          "returns": null,
          "docstring": "Calculate overall memory leak risk score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_calculate_gc_pressure_score",
          "line_start": 1120,
          "line_end": 1126,
          "args": [
            "self",
            "gc_analysis"
          ],
          "returns": null,
          "docstring": "Calculate GC pressure score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_generate_memory_recommendations",
          "line_start": 1128,
          "line_end": 1141,
          "args": [
            "self",
            "optimizations"
          ],
          "returns": null,
          "docstring": "Generate memory optimization recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1141,
      "complexity_score": 12564,
      "api_surface_area": 2,
      "docstring": "Memory Usage Pattern Analysis and Leak Detection Module\n========================================================\n\nImplements comprehensive memory analysis capabilities:\n- Memory allocation pattern detection\n- Leak detection in common scenarios\n- Reference cycle identification\n- Memory growth pattern analysis\n- Object lifetime analysis\n- Memory optimization recommendations\n- GC pressure analysis",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "{'pandas', 'numpy'}",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "high"
    },
    "testmaster\\analysis\\comprehensive_analysis\\performance_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "component_name": "performance_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.030317",
      "classes": [
        {
          "name": "PerformanceAnalyzer",
          "line_start": 23,
          "line_end": 1287,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 26,
              "line_end": 42,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive performance analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_analyze_algorithmic_complexity",
              "line_start": 44,
              "line_end": 132,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze algorithmic complexity and Big-O notation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 422
            },
            {
              "name": "_calculate_big_o_complexity",
              "line_start": 134,
              "line_end": 207,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate Big-O complexity for a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 417
            },
            {
              "name": "_analyze_loops",
              "line_start": 209,
              "line_end": 252,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Analyze loop patterns in a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 318
            },
            {
              "name": "_is_recursive",
              "line_start": 254,
              "line_end": 261,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is recursive.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_classify_recursion",
              "line_start": 263,
              "line_end": 285,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Classify type of recursion.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_has_memoization",
              "line_start": 287,
              "line_end": 304,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function uses memoization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_has_binary_search_pattern",
              "line_start": 306,
              "line_end": 327,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check for binary search pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "_has_divide_and_conquer_pattern",
              "line_start": 329,
              "line_end": 347,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check for divide and conquer pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "_has_factorial_pattern",
              "line_start": 349,
              "line_end": 362,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check for factorial/permutation pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_is_sorting_algorithm",
              "line_start": 364,
              "line_end": 385,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is a sorting algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "_classify_sorting_algorithm",
              "line_start": 387,
              "line_end": 413,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Classify type of sorting algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_is_search_algorithm",
              "line_start": 415,
              "line_end": 417,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is a search algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 37
            },
            {
              "name": "_classify_search_algorithm",
              "line_start": 419,
              "line_end": 433,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Classify type of search algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "_uses_dynamic_programming",
              "line_start": 435,
              "line_end": 451,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function uses dynamic programming.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "_estimate_space_complexity",
              "line_start": 453,
              "line_end": 473,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Estimate space complexity of a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_is_graph_algorithm",
              "line_start": 475,
              "line_end": 478,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is a graph algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_classify_graph_algorithm",
              "line_start": 480,
              "line_end": 497,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Classify type of graph algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "_analyze_memory_patterns",
              "line_start": 499,
              "line_end": 552,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze memory usage patterns and potential leaks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "_detect_memory_allocations",
              "line_start": 554,
              "line_end": 597,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect memory allocation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 278
            },
            {
              "name": "_detect_memory_leaks",
              "line_start": 599,
              "line_end": 637,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect potential memory leaks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 206
            },
            {
              "name": "_is_in_with_statement",
              "line_start": 639,
              "line_end": 647,
              "args": [
                "self",
                "node",
                "tree"
              ],
              "returns": null,
              "docstring": "Check if a node is within a with statement.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_detect_large_objects",
              "line_start": 649,
              "line_end": 677,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect large object allocations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "_detect_circular_references",
              "line_start": 679,
              "line_end": 703,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect potential circular references.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_identify_pooling_opportunities",
              "line_start": 705,
              "line_end": 725,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Identify object pooling opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "_generate_memory_optimization_suggestions",
              "line_start": 727,
              "line_end": 753,
              "args": [
                "self",
                "memory_data"
              ],
              "returns": null,
              "docstring": "Generate memory optimization suggestions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_analyze_database_performance",
              "line_start": 755,
              "line_end": 799,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze database query patterns and performance issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 226
            },
            {
              "name": "_detect_n_plus_one_queries",
              "line_start": 801,
              "line_end": 820,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect N+1 query problems.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "_detect_missing_indexes",
              "line_start": 822,
              "line_end": 850,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect potential missing database indexes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 187
            },
            {
              "name": "_detect_inefficient_queries",
              "line_start": 852,
              "line_end": 896,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect inefficient database queries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 249
            },
            {
              "name": "_detect_transaction_issues",
              "line_start": 898,
              "line_end": 920,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect database transaction issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_analyze_concurrency_performance",
              "line_start": 922,
              "line_end": 964,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze concurrency and GIL impact.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 216
            },
            {
              "name": "_detect_gil_bottlenecks",
              "line_start": 966,
              "line_end": 995,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect potential GIL bottlenecks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 156
            },
            {
              "name": "_identify_async_opportunities",
              "line_start": 997,
              "line_end": 1024,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Identify opportunities for async/await.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_detect_thread_safety_issues",
              "line_start": 1026,
              "line_end": 1041,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect thread safety issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_identify_parallelization_opportunities",
              "line_start": 1043,
              "line_end": 1070,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Identify parallelization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_identify_cpu_intensive_operations",
              "line_start": 1072,
              "line_end": 1121,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify CPU-intensive operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 280
            },
            {
              "name": "_detect_performance_anti_patterns",
              "line_start": 1123,
              "line_end": 1163,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect common performance anti-patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "_identify_optimization_opportunities",
              "line_start": 1165,
              "line_end": 1202,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify optimization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 156
            },
            {
              "name": "_is_pure_function",
              "line_start": 1204,
              "line_end": 1223,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is pure (no side effects).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_has_vectorization_opportunity",
              "line_start": 1225,
              "line_end": 1235,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function has vectorization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_calculate_performance_metrics",
              "line_start": 1237,
              "line_end": 1287,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 237
            }
          ],
          "docstring": "Analyzer for performance patterns and optimization opportunities.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 26,
          "line_end": 42,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive performance analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_analyze_algorithmic_complexity",
          "line_start": 44,
          "line_end": 132,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze algorithmic complexity and Big-O notation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 422
        },
        {
          "name": "_calculate_big_o_complexity",
          "line_start": 134,
          "line_end": 207,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate Big-O complexity for a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 417
        },
        {
          "name": "_analyze_loops",
          "line_start": 209,
          "line_end": 252,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Analyze loop patterns in a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 318
        },
        {
          "name": "_is_recursive",
          "line_start": 254,
          "line_end": 261,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is recursive.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_classify_recursion",
          "line_start": 263,
          "line_end": 285,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Classify type of recursion.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_has_memoization",
          "line_start": 287,
          "line_end": 304,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function uses memoization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_has_binary_search_pattern",
          "line_start": 306,
          "line_end": 327,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check for binary search pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "_has_divide_and_conquer_pattern",
          "line_start": 329,
          "line_end": 347,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check for divide and conquer pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "_has_factorial_pattern",
          "line_start": 349,
          "line_end": 362,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check for factorial/permutation pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_is_sorting_algorithm",
          "line_start": 364,
          "line_end": 385,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is a sorting algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "_classify_sorting_algorithm",
          "line_start": 387,
          "line_end": 413,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Classify type of sorting algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_is_search_algorithm",
          "line_start": 415,
          "line_end": 417,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is a search algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 37
        },
        {
          "name": "_classify_search_algorithm",
          "line_start": 419,
          "line_end": 433,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Classify type of search algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "_uses_dynamic_programming",
          "line_start": 435,
          "line_end": 451,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function uses dynamic programming.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "_estimate_space_complexity",
          "line_start": 453,
          "line_end": 473,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Estimate space complexity of a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_is_graph_algorithm",
          "line_start": 475,
          "line_end": 478,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is a graph algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_classify_graph_algorithm",
          "line_start": 480,
          "line_end": 497,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Classify type of graph algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "_analyze_memory_patterns",
          "line_start": 499,
          "line_end": 552,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze memory usage patterns and potential leaks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "_detect_memory_allocations",
          "line_start": 554,
          "line_end": 597,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect memory allocation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 278
        },
        {
          "name": "_detect_memory_leaks",
          "line_start": 599,
          "line_end": 637,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect potential memory leaks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 206
        },
        {
          "name": "_is_in_with_statement",
          "line_start": 639,
          "line_end": 647,
          "args": [
            "self",
            "node",
            "tree"
          ],
          "returns": null,
          "docstring": "Check if a node is within a with statement.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_detect_large_objects",
          "line_start": 649,
          "line_end": 677,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect large object allocations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "_detect_circular_references",
          "line_start": 679,
          "line_end": 703,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect potential circular references.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_identify_pooling_opportunities",
          "line_start": 705,
          "line_end": 725,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Identify object pooling opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "_generate_memory_optimization_suggestions",
          "line_start": 727,
          "line_end": 753,
          "args": [
            "self",
            "memory_data"
          ],
          "returns": null,
          "docstring": "Generate memory optimization suggestions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_analyze_database_performance",
          "line_start": 755,
          "line_end": 799,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze database query patterns and performance issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 226
        },
        {
          "name": "_detect_n_plus_one_queries",
          "line_start": 801,
          "line_end": 820,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect N+1 query problems.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "_detect_missing_indexes",
          "line_start": 822,
          "line_end": 850,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect potential missing database indexes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 187
        },
        {
          "name": "_detect_inefficient_queries",
          "line_start": 852,
          "line_end": 896,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect inefficient database queries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 249
        },
        {
          "name": "_detect_transaction_issues",
          "line_start": 898,
          "line_end": 920,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect database transaction issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_analyze_concurrency_performance",
          "line_start": 922,
          "line_end": 964,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze concurrency and GIL impact.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 216
        },
        {
          "name": "_detect_gil_bottlenecks",
          "line_start": 966,
          "line_end": 995,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect potential GIL bottlenecks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 156
        },
        {
          "name": "_identify_async_opportunities",
          "line_start": 997,
          "line_end": 1024,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Identify opportunities for async/await.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_detect_thread_safety_issues",
          "line_start": 1026,
          "line_end": 1041,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect thread safety issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_identify_parallelization_opportunities",
          "line_start": 1043,
          "line_end": 1070,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Identify parallelization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_identify_cpu_intensive_operations",
          "line_start": 1072,
          "line_end": 1121,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify CPU-intensive operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 280
        },
        {
          "name": "_detect_performance_anti_patterns",
          "line_start": 1123,
          "line_end": 1163,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect common performance anti-patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "_identify_optimization_opportunities",
          "line_start": 1165,
          "line_end": 1202,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify optimization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 156
        },
        {
          "name": "_is_pure_function",
          "line_start": 1204,
          "line_end": 1223,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is pure (no side effects).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_has_vectorization_opportunity",
          "line_start": 1225,
          "line_end": 1235,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function has vectorization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_calculate_performance_metrics",
          "line_start": 1237,
          "line_end": 1287,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 237
        },
        {
          "name": "analyze_node",
          "line_start": 217,
          "line_end": 247,
          "args": [
            "node",
            "depth"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'math', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1287,
      "complexity_score": 13985,
      "api_surface_area": 3,
      "docstring": "Performance Analysis Engine\n============================\n\nImplements comprehensive performance analysis:\n- Algorithmic complexity detection (Big-O notation)\n- Memory usage patterns and leak detection\n- Database query analysis (N+1, inefficient queries)\n- Concurrency and GIL impact analysis\n- Performance benchmarking and profiling points",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "{'numpy'}",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "high"
    },
    "testmaster\\analysis\\comprehensive_analysis\\quality_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "component_name": "quality_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.048908",
      "classes": [
        {
          "name": "QualityAnalyzer",
          "line_start": 21,
          "line_end": 802,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 24,
              "line_end": 38,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive quality analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_analyze_quality_factors",
              "line_start": 40,
              "line_end": 63,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze various quality factors.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 130
            },
            {
              "name": "_assess_readability",
              "line_start": 65,
              "line_end": 142,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess code readability.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 512
            },
            {
              "name": "_calculate_max_nesting_depth",
              "line_start": 144,
              "line_end": 158,
              "args": [
                "self",
                "node",
                "current_depth"
              ],
              "returns": null,
              "docstring": "Calculate maximum nesting depth in a node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_assess_testability",
              "line_start": 160,
              "line_end": 220,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess code testability.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 296
            },
            {
              "name": "_has_side_effects",
              "line_start": 222,
              "line_end": 240,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function has side effects (simplified).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_uses_global_state",
              "line_start": 242,
              "line_end": 250,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function uses global state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_assess_modularity",
              "line_start": 252,
              "line_end": 301,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess code modularity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 306
            },
            {
              "name": "_assess_reusability",
              "line_start": 303,
              "line_end": 368,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess code reusability.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 343
            },
            {
              "name": "_is_utility_function",
              "line_start": 370,
              "line_end": 380,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function appears to be a utility function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_has_generic_name",
              "line_start": 382,
              "line_end": 385,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Check if name is generic/reusable.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_assess_reliability",
              "line_start": 387,
              "line_end": 443,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess code reliability.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 268
            },
            {
              "name": "_is_validation_check",
              "line_start": 445,
              "line_end": 460,
              "args": [
                "self",
                "if_node"
              ],
              "returns": null,
              "docstring": "Check if an if statement is a validation check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_is_potentially_unsafe_call",
              "line_start": 462,
              "line_end": 468,
              "args": [
                "self",
                "call_node"
              ],
              "returns": null,
              "docstring": "Check if a call is potentially unsafe.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_assess_performance_indicators",
              "line_start": 470,
              "line_end": 479,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess performance indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_assess_security_quality",
              "line_start": 481,
              "line_end": 490,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess security quality indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_assess_documentation_quality",
              "line_start": 492,
              "line_end": 527,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess documentation quality.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_calculate_quality_grade",
              "line_start": 529,
              "line_end": 540,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Calculate quality grade based on score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_identify_quality_strengths",
              "line_start": 542,
              "line_end": 550,
              "args": [
                "self",
                "quality_factors"
              ],
              "returns": null,
              "docstring": "Identify quality strengths.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "_identify_quality_weaknesses",
              "line_start": 552,
              "line_end": 560,
              "args": [
                "self",
                "quality_factors"
              ],
              "returns": null,
              "docstring": "Identify quality weaknesses.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "_assess_technical_debt",
              "line_start": 562,
              "line_end": 586,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess technical debt in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 132
            },
            {
              "name": "_detect_code_smells",
              "line_start": 588,
              "line_end": 649,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect various code smells.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 302
            },
            {
              "name": "_calculate_complexity_debt",
              "line_start": 651,
              "line_end": 674,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate debt from high complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_calculate_maintainability_debt",
              "line_start": 676,
              "line_end": 685,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate maintainability debt.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_calculate_test_debt",
              "line_start": 687,
              "line_end": 696,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate test debt.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_calculate_documentation_debt",
              "line_start": 698,
              "line_end": 706,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate documentation debt.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_categorize_debt_level",
              "line_start": 708,
              "line_end": 717,
              "args": [
                "self",
                "debt_score"
              ],
              "returns": null,
              "docstring": "Categorize technical debt level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_identify_priority_debt_areas",
              "line_start": 719,
              "line_end": 727,
              "args": [
                "self",
                "debt_indicators"
              ],
              "returns": null,
              "docstring": "Identify priority areas for debt reduction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_calculate_maintainability_metrics",
              "line_start": 729,
              "line_end": 742,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate maintainability metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "_analyze_code_health",
              "line_start": 744,
              "line_end": 757,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze overall code health indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "_analyze_quality_trends",
              "line_start": 759,
              "line_end": 767,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze quality trends over time.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "_generate_improvement_suggestions",
              "line_start": 769,
              "line_end": 802,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate improvement suggestions based on analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            }
          ],
          "docstring": "Analyzer for code quality metrics and technical debt.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 24,
          "line_end": 38,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive quality analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_analyze_quality_factors",
          "line_start": 40,
          "line_end": 63,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze various quality factors.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 130
        },
        {
          "name": "_assess_readability",
          "line_start": 65,
          "line_end": 142,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess code readability.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 512
        },
        {
          "name": "_calculate_max_nesting_depth",
          "line_start": 144,
          "line_end": 158,
          "args": [
            "self",
            "node",
            "current_depth"
          ],
          "returns": null,
          "docstring": "Calculate maximum nesting depth in a node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_assess_testability",
          "line_start": 160,
          "line_end": 220,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess code testability.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 296
        },
        {
          "name": "_has_side_effects",
          "line_start": 222,
          "line_end": 240,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function has side effects (simplified).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_uses_global_state",
          "line_start": 242,
          "line_end": 250,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function uses global state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_assess_modularity",
          "line_start": 252,
          "line_end": 301,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess code modularity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 306
        },
        {
          "name": "_assess_reusability",
          "line_start": 303,
          "line_end": 368,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess code reusability.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 343
        },
        {
          "name": "_is_utility_function",
          "line_start": 370,
          "line_end": 380,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function appears to be a utility function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_has_generic_name",
          "line_start": 382,
          "line_end": 385,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Check if name is generic/reusable.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_assess_reliability",
          "line_start": 387,
          "line_end": 443,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess code reliability.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 268
        },
        {
          "name": "_is_validation_check",
          "line_start": 445,
          "line_end": 460,
          "args": [
            "self",
            "if_node"
          ],
          "returns": null,
          "docstring": "Check if an if statement is a validation check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_is_potentially_unsafe_call",
          "line_start": 462,
          "line_end": 468,
          "args": [
            "self",
            "call_node"
          ],
          "returns": null,
          "docstring": "Check if a call is potentially unsafe.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_assess_performance_indicators",
          "line_start": 470,
          "line_end": 479,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess performance indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_assess_security_quality",
          "line_start": 481,
          "line_end": 490,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess security quality indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_assess_documentation_quality",
          "line_start": 492,
          "line_end": 527,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess documentation quality.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_calculate_quality_grade",
          "line_start": 529,
          "line_end": 540,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Calculate quality grade based on score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_identify_quality_strengths",
          "line_start": 542,
          "line_end": 550,
          "args": [
            "self",
            "quality_factors"
          ],
          "returns": null,
          "docstring": "Identify quality strengths.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "_identify_quality_weaknesses",
          "line_start": 552,
          "line_end": 560,
          "args": [
            "self",
            "quality_factors"
          ],
          "returns": null,
          "docstring": "Identify quality weaknesses.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "_assess_technical_debt",
          "line_start": 562,
          "line_end": 586,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess technical debt in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 132
        },
        {
          "name": "_detect_code_smells",
          "line_start": 588,
          "line_end": 649,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect various code smells.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 302
        },
        {
          "name": "_calculate_complexity_debt",
          "line_start": 651,
          "line_end": 674,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate debt from high complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_calculate_maintainability_debt",
          "line_start": 676,
          "line_end": 685,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate maintainability debt.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_calculate_test_debt",
          "line_start": 687,
          "line_end": 696,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate test debt.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_calculate_documentation_debt",
          "line_start": 698,
          "line_end": 706,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate documentation debt.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_categorize_debt_level",
          "line_start": 708,
          "line_end": 717,
          "args": [
            "self",
            "debt_score"
          ],
          "returns": null,
          "docstring": "Categorize technical debt level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_identify_priority_debt_areas",
          "line_start": 719,
          "line_end": 727,
          "args": [
            "self",
            "debt_indicators"
          ],
          "returns": null,
          "docstring": "Identify priority areas for debt reduction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_calculate_maintainability_metrics",
          "line_start": 729,
          "line_end": 742,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate maintainability metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "_analyze_code_health",
          "line_start": 744,
          "line_end": 757,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze overall code health indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "_analyze_quality_trends",
          "line_start": 759,
          "line_end": 767,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze quality trends over time.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "_generate_improvement_suggestions",
          "line_start": 769,
          "line_end": 802,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate improvement suggestions based on analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 802,
      "complexity_score": 7610,
      "api_surface_area": 2,
      "docstring": "Quality Analysis Module\n=======================\n\nImplements comprehensive code quality analysis:\n- Technical debt assessment\n- Quality factors analysis\n- Maintainability metrics\n- Code health indicators",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0303030303030303,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "component_name": "resource_io_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.062417",
      "classes": [
        {
          "name": "ResourceIOAnalyzer",
          "line_start": 25,
          "line_end": 1350,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 28,
              "line_end": 45,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive resource and I/O analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_file_io_patterns",
              "line_start": 47,
              "line_end": 114,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze file I/O patterns and potential issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 337
            },
            {
              "name": "_detect_file_operations",
              "line_start": 116,
              "line_end": 187,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect file I/O operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 445
            },
            {
              "name": "_detect_inefficient_file_ops",
              "line_start": 189,
              "line_end": 224,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect inefficient file operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 156
            },
            {
              "name": "_detect_large_file_handling",
              "line_start": 226,
              "line_end": 258,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect large file handling patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "_detect_file_locking",
              "line_start": 260,
              "line_end": 287,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect file locking patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_detect_temp_file_usage",
              "line_start": 289,
              "line_end": 313,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect temporary file usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "_check_path_safety",
              "line_start": 315,
              "line_end": 353,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Check for path traversal and safety issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 281
            },
            {
              "name": "_analyze_network_patterns",
              "line_start": 355,
              "line_end": 418,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze network call patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 339
            },
            {
              "name": "_detect_http_calls",
              "line_start": 420,
              "line_end": 468,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect HTTP calls.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_check_timeout_configuration",
              "line_start": 470,
              "line_end": 503,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Check timeout configuration in network calls.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_detect_retry_logic",
              "line_start": 505,
              "line_end": 552,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect retry logic implementation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 281
            },
            {
              "name": "_check_connection_pooling",
              "line_start": 554,
              "line_end": 581,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Check for connection pooling usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 113
            },
            {
              "name": "_detect_rate_limiting",
              "line_start": 583,
              "line_end": 606,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect rate limiting implementation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_detect_circuit_breakers",
              "line_start": 608,
              "line_end": 626,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect circuit breaker patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_identify_batch_opportunities",
              "line_start": 628,
              "line_end": 646,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Identify opportunities for batch API calls.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_analyze_database_connections",
              "line_start": 648,
              "line_end": 691,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze database connection patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 227
            },
            {
              "name": "_detect_db_connections",
              "line_start": 693,
              "line_end": 737,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect database connections.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_check_db_connection_pooling",
              "line_start": 739,
              "line_end": 759,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Check database connection pooling.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_check_transaction_management",
              "line_start": 761,
              "line_end": 796,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Check transaction management patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "_check_cursor_management",
              "line_start": 798,
              "line_end": 824,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Check cursor management patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "_analyze_memory_allocations",
              "line_start": 826,
              "line_end": 861,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze memory allocation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "_detect_memory_allocations",
              "line_start": 863,
              "line_end": 895,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect memory allocation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "_detect_large_allocations",
              "line_start": 897,
              "line_end": 930,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Detect large memory allocations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 215
            },
            {
              "name": "_check_object_reuse",
              "line_start": 932,
              "line_end": 949,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Check for object reuse patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_analyze_cache_effectiveness",
              "line_start": 951,
              "line_end": 993,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze cache effectiveness and patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 222
            },
            {
              "name": "_detect_cache_implementations",
              "line_start": 995,
              "line_end": 1044,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect cache implementations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 249
            },
            {
              "name": "_detect_cache_strategies",
              "line_start": 1046,
              "line_end": 1078,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect caching strategies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "_detect_cache_invalidation",
              "line_start": 1080,
              "line_end": 1098,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect cache invalidation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_identify_cache_opportunities",
              "line_start": 1100,
              "line_end": 1130,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Identify caching opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 153
            },
            {
              "name": "_analyze_stream_processing",
              "line_start": 1132,
              "line_end": 1169,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze stream processing patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_analyze_resource_cleanup",
              "line_start": 1171,
              "line_end": 1219,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze resource cleanup patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 214
            },
            {
              "name": "_analyze_external_services",
              "line_start": 1221,
              "line_end": 1257,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze external service dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_detect_external_services",
              "line_start": 1259,
              "line_end": 1304,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "docstring": "Detect external service dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 164
            },
            {
              "name": "_calculate_resource_metrics",
              "line_start": 1306,
              "line_end": 1350,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall resource usage metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            }
          ],
          "docstring": "Analyzer for resource usage and I/O patterns.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 28,
          "line_end": 45,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive resource and I/O analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_file_io_patterns",
          "line_start": 47,
          "line_end": 114,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze file I/O patterns and potential issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 337
        },
        {
          "name": "_detect_file_operations",
          "line_start": 116,
          "line_end": 187,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect file I/O operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 445
        },
        {
          "name": "_detect_inefficient_file_ops",
          "line_start": 189,
          "line_end": 224,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect inefficient file operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 156
        },
        {
          "name": "_detect_large_file_handling",
          "line_start": 226,
          "line_end": 258,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect large file handling patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "_detect_file_locking",
          "line_start": 260,
          "line_end": 287,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect file locking patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_detect_temp_file_usage",
          "line_start": 289,
          "line_end": 313,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect temporary file usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "_check_path_safety",
          "line_start": 315,
          "line_end": 353,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Check for path traversal and safety issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 281
        },
        {
          "name": "_analyze_network_patterns",
          "line_start": 355,
          "line_end": 418,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze network call patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 339
        },
        {
          "name": "_detect_http_calls",
          "line_start": 420,
          "line_end": 468,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect HTTP calls.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_check_timeout_configuration",
          "line_start": 470,
          "line_end": 503,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Check timeout configuration in network calls.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_detect_retry_logic",
          "line_start": 505,
          "line_end": 552,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect retry logic implementation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 281
        },
        {
          "name": "_check_connection_pooling",
          "line_start": 554,
          "line_end": 581,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Check for connection pooling usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 113
        },
        {
          "name": "_detect_rate_limiting",
          "line_start": 583,
          "line_end": 606,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect rate limiting implementation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_detect_circuit_breakers",
          "line_start": 608,
          "line_end": 626,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect circuit breaker patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_identify_batch_opportunities",
          "line_start": 628,
          "line_end": 646,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Identify opportunities for batch API calls.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_analyze_database_connections",
          "line_start": 648,
          "line_end": 691,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze database connection patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 227
        },
        {
          "name": "_detect_db_connections",
          "line_start": 693,
          "line_end": 737,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect database connections.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_check_db_connection_pooling",
          "line_start": 739,
          "line_end": 759,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Check database connection pooling.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_check_transaction_management",
          "line_start": 761,
          "line_end": 796,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Check transaction management patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "_check_cursor_management",
          "line_start": 798,
          "line_end": 824,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Check cursor management patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "_analyze_memory_allocations",
          "line_start": 826,
          "line_end": 861,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze memory allocation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "_detect_memory_allocations",
          "line_start": 863,
          "line_end": 895,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect memory allocation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "_detect_large_allocations",
          "line_start": 897,
          "line_end": 930,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Detect large memory allocations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 215
        },
        {
          "name": "_check_object_reuse",
          "line_start": 932,
          "line_end": 949,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Check for object reuse patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_analyze_cache_effectiveness",
          "line_start": 951,
          "line_end": 993,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze cache effectiveness and patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 222
        },
        {
          "name": "_detect_cache_implementations",
          "line_start": 995,
          "line_end": 1044,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect cache implementations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 249
        },
        {
          "name": "_detect_cache_strategies",
          "line_start": 1046,
          "line_end": 1078,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect caching strategies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "_detect_cache_invalidation",
          "line_start": 1080,
          "line_end": 1098,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect cache invalidation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_identify_cache_opportunities",
          "line_start": 1100,
          "line_end": 1130,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Identify caching opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 153
        },
        {
          "name": "_analyze_stream_processing",
          "line_start": 1132,
          "line_end": 1169,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze stream processing patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_analyze_resource_cleanup",
          "line_start": 1171,
          "line_end": 1219,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze resource cleanup patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 214
        },
        {
          "name": "_analyze_external_services",
          "line_start": 1221,
          "line_end": 1257,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze external service dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_detect_external_services",
          "line_start": 1259,
          "line_end": 1304,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "docstring": "Detect external service dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 164
        },
        {
          "name": "_calculate_resource_metrics",
          "line_start": 1306,
          "line_end": 1350,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall resource usage metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1350,
      "complexity_score": 12850,
      "api_surface_area": 2,
      "docstring": "Resource and I/O Analysis Module\n=================================\n\nImplements comprehensive resource and I/O analysis:\n- File I/O pattern analysis and leak detection\n- Network call pattern analysis with retry and timeout\n- Database connection analysis and pooling\n- Memory allocation patterns\n- Cache effectiveness analysis\n- Stream processing analysis\n- Resource cleanup patterns\n- External service dependency analysis",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0277777777777777,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\security_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "component_name": "security_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.080247",
      "classes": [
        {
          "name": "SecurityAnalyzer",
          "line_start": 23,
          "line_end": 911,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 26,
              "line_end": 28,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "_init_security_patterns",
              "line_start": 30,
              "line_end": 213,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize security vulnerability patterns including OWASP Top 10 2021.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 242
            },
            {
              "name": "analyze",
              "line_start": 215,
              "line_end": 231,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive security analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_detect_vulnerability_patterns",
              "line_start": 233,
              "line_end": 293,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect known vulnerability patterns in code.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 253
            },
            {
              "name": "_get_severity",
              "line_start": 295,
              "line_end": 327,
              "args": [
                "self",
                "vuln_type"
              ],
              "returns": null,
              "docstring": "Get severity level for vulnerability type based on OWASP Top 10 2021.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_get_vulnerability_description",
              "line_start": 329,
              "line_end": 350,
              "args": [
                "self",
                "vuln_type"
              ],
              "returns": null,
              "docstring": "Get description for vulnerability type based on OWASP Top 10 2021.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_get_vulnerability_recommendation",
              "line_start": 352,
              "line_end": 373,
              "args": [
                "self",
                "vuln_type"
              ],
              "returns": null,
              "docstring": "Get recommendation for vulnerability type based on OWASP Top 10 2021.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_analyze_input_validation",
              "line_start": 375,
              "line_end": 462,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze input validation patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 396
            },
            {
              "name": "_analyze_authentication",
              "line_start": 464,
              "line_end": 547,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze authentication security patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 312
            },
            {
              "name": "_analyze_authorization",
              "line_start": 549,
              "line_end": 633,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze authorization security patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 342
            },
            {
              "name": "_analyze_cryptography_usage",
              "line_start": 635,
              "line_end": 735,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze cryptographic usage patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 425
            },
            {
              "name": "_analyze_injection_vulnerabilities",
              "line_start": 737,
              "line_end": 825,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze injection vulnerability patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 410
            },
            {
              "name": "_identify_security_hotspots",
              "line_start": 827,
              "line_end": 851,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify security hotspots - files/functions with multiple security issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "_calculate_security_metrics",
              "line_start": 853,
              "line_end": 894,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall security metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 412
            },
            {
              "name": "_get_security_grade",
              "line_start": 896,
              "line_end": 911,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Get security grade based on score with OWASP Top 10 considerations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            }
          ],
          "docstring": "Analyzer for security vulnerabilities and patterns.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 26,
          "line_end": 28,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "_init_security_patterns",
          "line_start": 30,
          "line_end": 213,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize security vulnerability patterns including OWASP Top 10 2021.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 242
        },
        {
          "name": "analyze",
          "line_start": 215,
          "line_end": 231,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive security analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_detect_vulnerability_patterns",
          "line_start": 233,
          "line_end": 293,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect known vulnerability patterns in code.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 253
        },
        {
          "name": "_get_severity",
          "line_start": 295,
          "line_end": 327,
          "args": [
            "self",
            "vuln_type"
          ],
          "returns": null,
          "docstring": "Get severity level for vulnerability type based on OWASP Top 10 2021.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_get_vulnerability_description",
          "line_start": 329,
          "line_end": 350,
          "args": [
            "self",
            "vuln_type"
          ],
          "returns": null,
          "docstring": "Get description for vulnerability type based on OWASP Top 10 2021.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_get_vulnerability_recommendation",
          "line_start": 352,
          "line_end": 373,
          "args": [
            "self",
            "vuln_type"
          ],
          "returns": null,
          "docstring": "Get recommendation for vulnerability type based on OWASP Top 10 2021.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_analyze_input_validation",
          "line_start": 375,
          "line_end": 462,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze input validation patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 396
        },
        {
          "name": "_analyze_authentication",
          "line_start": 464,
          "line_end": 547,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze authentication security patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 312
        },
        {
          "name": "_analyze_authorization",
          "line_start": 549,
          "line_end": 633,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze authorization security patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 342
        },
        {
          "name": "_analyze_cryptography_usage",
          "line_start": 635,
          "line_end": 735,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze cryptographic usage patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 425
        },
        {
          "name": "_analyze_injection_vulnerabilities",
          "line_start": 737,
          "line_end": 825,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze injection vulnerability patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 410
        },
        {
          "name": "_identify_security_hotspots",
          "line_start": 827,
          "line_end": 851,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify security hotspots - files/functions with multiple security issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "_calculate_security_metrics",
          "line_start": 853,
          "line_end": 894,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall security metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 412
        },
        {
          "name": "_get_security_grade",
          "line_start": 896,
          "line_end": 911,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Get security grade based on score with OWASP Top 10 considerations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 911,
      "complexity_score": 6588,
      "api_surface_area": 2,
      "docstring": "Security Analysis Module\n========================\n\nImplements comprehensive security analysis:\n- Vulnerability pattern detection\n- Input validation analysis\n- Authentication and authorization checks\n- Cryptography usage analysis\n- SQL injection and XSS detection\n- Security code smells and hotspots",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\software_metrics.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "component_name": "software_metrics",
      "analysis_timestamp": "2025-08-20 21:46:40.089239",
      "classes": [
        {
          "name": "SoftwareMetricsAnalyzer",
          "line_start": 23,
          "line_end": 234,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 26,
              "line_end": 38,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive software metrics analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_calculate_halstead_metrics",
              "line_start": 40,
              "line_end": 100,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate Halstead software science metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 348
            },
            {
              "name": "_calculate_mccabe_complexity",
              "line_start": 102,
              "line_end": 133,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate McCabe cyclomatic complexity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_calculate_sloc_metrics",
              "line_start": 135,
              "line_end": 192,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate comprehensive Source Lines of Code metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 323
            },
            {
              "name": "_find_docstring_lines",
              "line_start": 194,
              "line_end": 215,
              "args": [
                "self",
                "tree",
                "lines"
              ],
              "returns": null,
              "docstring": "Find line numbers that contain docstrings.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 227
            },
            {
              "name": "_calculate_maintainability_index",
              "line_start": 217,
              "line_end": 234,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate maintainability index.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            }
          ],
          "docstring": "Analyzer for software metrics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 26,
          "line_end": 38,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive software metrics analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_calculate_halstead_metrics",
          "line_start": 40,
          "line_end": 100,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate Halstead software science metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 348
        },
        {
          "name": "_calculate_mccabe_complexity",
          "line_start": 102,
          "line_end": 133,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate McCabe cyclomatic complexity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_calculate_sloc_metrics",
          "line_start": 135,
          "line_end": 192,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate comprehensive Source Lines of Code metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 323
        },
        {
          "name": "_find_docstring_lines",
          "line_start": 194,
          "line_end": 215,
          "args": [
            "self",
            "tree",
            "lines"
          ],
          "returns": null,
          "docstring": "Find line numbers that contain docstrings.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 227
        },
        {
          "name": "_calculate_maintainability_index",
          "line_start": 217,
          "line_end": 234,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate maintainability index.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'math', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 234,
      "complexity_score": 2568,
      "api_surface_area": 2,
      "docstring": "Software Metrics Analyzer\n=========================\n\nImplements comprehensive software metrics:\n- Halstead Metrics (Volume, Difficulty, Effort, etc.)\n- McCabe Cyclomatic Complexity\n- Source Lines of Code (SLOC) Analysis\n- Maintainability Index",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.1428571428571428,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\statistical_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "component_name": "statistical_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.098735",
      "classes": [
        {
          "name": "StatisticalAnalyzer",
          "line_start": 25,
          "line_end": 881,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 28,
              "line_end": 48,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive statistical analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "_collect_code_metrics",
              "line_start": 50,
              "line_end": 127,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect various code metrics for statistical analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 437
            },
            {
              "name": "_calculate_max_nesting_depth",
              "line_start": 129,
              "line_end": 143,
              "args": [
                "self",
                "node",
                "current_depth"
              ],
              "returns": null,
              "docstring": "Calculate maximum nesting depth recursively.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_analyze_distributions",
              "line_start": 145,
              "line_end": 207,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Analyze statistical distributions of metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 432
            },
            {
              "name": "_classify_distribution_shape",
              "line_start": 209,
              "line_end": 226,
              "args": [
                "self",
                "skewness",
                "kurtosis"
              ],
              "returns": null,
              "docstring": "Classify distribution shape based on skewness and kurtosis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_analyze_correlations",
              "line_start": 228,
              "line_end": 280,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Analyze correlations between different metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 336
            },
            {
              "name": "_calculate_pearson_correlation",
              "line_start": 282,
              "line_end": 303,
              "args": [
                "self",
                "values1",
                "values2"
              ],
              "returns": null,
              "docstring": "Calculate Pearson correlation coefficient.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 213
            },
            {
              "name": "_classify_correlation_strength",
              "line_start": 305,
              "line_end": 317,
              "args": [
                "self",
                "correlation"
              ],
              "returns": null,
              "docstring": "Classify correlation strength.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "_detect_outliers",
              "line_start": 319,
              "line_end": 366,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Detect outliers in metrics using IQR and Z-score methods.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 330
            },
            {
              "name": "_classify_outlier_severity",
              "line_start": 368,
              "line_end": 377,
              "args": [
                "self",
                "z_score"
              ],
              "returns": null,
              "docstring": "Classify outlier severity based on Z-score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_calculate_percentile",
              "line_start": 379,
              "line_end": 386,
              "args": [
                "self",
                "value",
                "sorted_values"
              ],
              "returns": null,
              "docstring": "Calculate percentile of a value in a sorted list.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_perform_clustering",
              "line_start": 388,
              "line_end": 417,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Perform simple clustering analysis on metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "_simple_kmeans",
              "line_start": 419,
              "line_end": 467,
              "args": [
                "self",
                "values",
                "k",
                "max_iterations"
              ],
              "returns": null,
              "docstring": "Simple k-means clustering implementation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 325
            },
            {
              "name": "_evaluate_cluster_quality",
              "line_start": 469,
              "line_end": 491,
              "args": [
                "self",
                "clusters"
              ],
              "returns": null,
              "docstring": "Evaluate clustering quality using silhouette-like measure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 178
            },
            {
              "name": "_calculate_within_cluster_variance",
              "line_start": 493,
              "line_end": 499,
              "args": [
                "self",
                "clusters"
              ],
              "returns": null,
              "docstring": "Calculate average within-cluster variance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_calculate_between_cluster_variance",
              "line_start": 501,
              "line_end": 510,
              "args": [
                "self",
                "clusters"
              ],
              "returns": null,
              "docstring": "Calculate between-cluster variance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_analyze_trends",
              "line_start": 512,
              "line_end": 558,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Analyze trends in metrics (simplified trend detection).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 393
            },
            {
              "name": "_analyze_variance",
              "line_start": 560,
              "line_end": 604,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Analyze variance patterns in metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 370
            },
            {
              "name": "_classify_variability",
              "line_start": 606,
              "line_end": 619,
              "args": [
                "self",
                "cv"
              ],
              "returns": null,
              "docstring": "Classify variability level based on coefficient of variation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_calculate_entropy_measures",
              "line_start": 621,
              "line_end": 664,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Calculate entropy and information measures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 287
            },
            {
              "name": "_create_bins",
              "line_start": 666,
              "line_end": 684,
              "args": [
                "self",
                "values",
                "num_bins"
              ],
              "returns": null,
              "docstring": "Create bins for discretizing continuous values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_apply_information_theory",
              "line_start": 686,
              "line_end": 723,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Apply information theory concepts to code metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "_calculate_mutual_information",
              "line_start": 725,
              "line_end": 750,
              "args": [
                "self",
                "values1",
                "values2"
              ],
              "returns": null,
              "docstring": "Calculate simplified mutual information between two variables.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 206
            },
            {
              "name": "_classify_dependency",
              "line_start": 752,
              "line_end": 763,
              "args": [
                "self",
                "mutual_info"
              ],
              "returns": null,
              "docstring": "Classify dependency strength based on mutual information.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_calculate_information_redundancy",
              "line_start": 765,
              "line_end": 780,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Calculate information redundancy across metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "_calculate_information_density",
              "line_start": 782,
              "line_end": 790,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Calculate information density of the metric set.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_calculate_information_efficiency",
              "line_start": 792,
              "line_end": 800,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Calculate information efficiency of the metric set.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_perform_statistical_tests",
              "line_start": 802,
              "line_end": 853,
              "args": [
                "self",
                "metrics_data"
              ],
              "returns": null,
              "docstring": "Perform basic statistical tests on metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 285
            },
            {
              "name": "_approximate_normality_test",
              "line_start": 855,
              "line_end": 881,
              "args": [
                "self",
                "values"
              ],
              "returns": null,
              "docstring": "Approximate normality test (simplified Anderson-Darling).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            }
          ],
          "docstring": "Analyzer for statistical patterns in code metrics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 28,
          "line_end": 48,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive statistical analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "_collect_code_metrics",
          "line_start": 50,
          "line_end": 127,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect various code metrics for statistical analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 437
        },
        {
          "name": "_calculate_max_nesting_depth",
          "line_start": 129,
          "line_end": 143,
          "args": [
            "self",
            "node",
            "current_depth"
          ],
          "returns": null,
          "docstring": "Calculate maximum nesting depth recursively.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_analyze_distributions",
          "line_start": 145,
          "line_end": 207,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Analyze statistical distributions of metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 432
        },
        {
          "name": "_classify_distribution_shape",
          "line_start": 209,
          "line_end": 226,
          "args": [
            "self",
            "skewness",
            "kurtosis"
          ],
          "returns": null,
          "docstring": "Classify distribution shape based on skewness and kurtosis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_analyze_correlations",
          "line_start": 228,
          "line_end": 280,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Analyze correlations between different metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 336
        },
        {
          "name": "_calculate_pearson_correlation",
          "line_start": 282,
          "line_end": 303,
          "args": [
            "self",
            "values1",
            "values2"
          ],
          "returns": null,
          "docstring": "Calculate Pearson correlation coefficient.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 213
        },
        {
          "name": "_classify_correlation_strength",
          "line_start": 305,
          "line_end": 317,
          "args": [
            "self",
            "correlation"
          ],
          "returns": null,
          "docstring": "Classify correlation strength.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "_detect_outliers",
          "line_start": 319,
          "line_end": 366,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Detect outliers in metrics using IQR and Z-score methods.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 330
        },
        {
          "name": "_classify_outlier_severity",
          "line_start": 368,
          "line_end": 377,
          "args": [
            "self",
            "z_score"
          ],
          "returns": null,
          "docstring": "Classify outlier severity based on Z-score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_calculate_percentile",
          "line_start": 379,
          "line_end": 386,
          "args": [
            "self",
            "value",
            "sorted_values"
          ],
          "returns": null,
          "docstring": "Calculate percentile of a value in a sorted list.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_perform_clustering",
          "line_start": 388,
          "line_end": 417,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Perform simple clustering analysis on metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "_simple_kmeans",
          "line_start": 419,
          "line_end": 467,
          "args": [
            "self",
            "values",
            "k",
            "max_iterations"
          ],
          "returns": null,
          "docstring": "Simple k-means clustering implementation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 325
        },
        {
          "name": "_evaluate_cluster_quality",
          "line_start": 469,
          "line_end": 491,
          "args": [
            "self",
            "clusters"
          ],
          "returns": null,
          "docstring": "Evaluate clustering quality using silhouette-like measure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 178
        },
        {
          "name": "_calculate_within_cluster_variance",
          "line_start": 493,
          "line_end": 499,
          "args": [
            "self",
            "clusters"
          ],
          "returns": null,
          "docstring": "Calculate average within-cluster variance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_calculate_between_cluster_variance",
          "line_start": 501,
          "line_end": 510,
          "args": [
            "self",
            "clusters"
          ],
          "returns": null,
          "docstring": "Calculate between-cluster variance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_analyze_trends",
          "line_start": 512,
          "line_end": 558,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Analyze trends in metrics (simplified trend detection).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 393
        },
        {
          "name": "_analyze_variance",
          "line_start": 560,
          "line_end": 604,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Analyze variance patterns in metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 370
        },
        {
          "name": "_classify_variability",
          "line_start": 606,
          "line_end": 619,
          "args": [
            "self",
            "cv"
          ],
          "returns": null,
          "docstring": "Classify variability level based on coefficient of variation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_calculate_entropy_measures",
          "line_start": 621,
          "line_end": 664,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Calculate entropy and information measures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 287
        },
        {
          "name": "_create_bins",
          "line_start": 666,
          "line_end": 684,
          "args": [
            "self",
            "values",
            "num_bins"
          ],
          "returns": null,
          "docstring": "Create bins for discretizing continuous values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_apply_information_theory",
          "line_start": 686,
          "line_end": 723,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Apply information theory concepts to code metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "_calculate_mutual_information",
          "line_start": 725,
          "line_end": 750,
          "args": [
            "self",
            "values1",
            "values2"
          ],
          "returns": null,
          "docstring": "Calculate simplified mutual information between two variables.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 206
        },
        {
          "name": "_classify_dependency",
          "line_start": 752,
          "line_end": 763,
          "args": [
            "self",
            "mutual_info"
          ],
          "returns": null,
          "docstring": "Classify dependency strength based on mutual information.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_calculate_information_redundancy",
          "line_start": 765,
          "line_end": 780,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Calculate information redundancy across metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "_calculate_information_density",
          "line_start": 782,
          "line_end": 790,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Calculate information density of the metric set.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_calculate_information_efficiency",
          "line_start": 792,
          "line_end": 800,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Calculate information efficiency of the metric set.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_perform_statistical_tests",
          "line_start": 802,
          "line_end": 853,
          "args": [
            "self",
            "metrics_data"
          ],
          "returns": null,
          "docstring": "Perform basic statistical tests on metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 285
        },
        {
          "name": "_approximate_normality_test",
          "line_start": 855,
          "line_end": 881,
          "args": [
            "self",
            "values"
          ],
          "returns": null,
          "docstring": "Approximate normality test (simplified Anderson-Darling).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "itertools",
          "names": [
            "itertools"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'itertools', 'math', 'statistics', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 881,
      "complexity_score": 11000,
      "api_surface_area": 2,
      "docstring": "Statistical Analysis Module\n===========================\n\nImplements comprehensive statistical analysis:\n- Distribution analysis and normality testing\n- Correlation analysis between metrics\n- Outlier detection and anomaly identification\n- Clustering and pattern recognition\n- Trend analysis and forecasting\n- Information theory measures",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0333333333333334,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\structural_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "component_name": "structural_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.118250",
      "classes": [
        {
          "name": "StructuralAnalyzer",
          "line_start": 21,
          "line_end": 814,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 24,
              "line_end": 36,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive structural analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_detect_design_patterns",
              "line_start": 38,
              "line_end": 227,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect common design patterns in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 689
            },
            {
              "name": "_is_singleton_pattern",
              "line_start": 229,
              "line_end": 253,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect singleton pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_get_singleton_evidence",
              "line_start": 255,
              "line_end": 268,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for singleton pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_is_factory_pattern",
              "line_start": 270,
              "line_end": 284,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect factory pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_get_factory_evidence",
              "line_start": 286,
              "line_end": 300,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for factory pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 113
            },
            {
              "name": "_is_observer_pattern",
              "line_start": 302,
              "line_end": 316,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect observer pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_get_observer_evidence",
              "line_start": 318,
              "line_end": 334,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for observer pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_is_decorator_pattern",
              "line_start": 336,
              "line_end": 360,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect decorator pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_get_decorator_evidence",
              "line_start": 362,
              "line_end": 378,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for decorator pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_is_strategy_pattern",
              "line_start": 380,
              "line_end": 392,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect strategy pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "_get_strategy_evidence",
              "line_start": 394,
              "line_end": 410,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for strategy pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "_is_command_pattern",
              "line_start": 412,
              "line_end": 426,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect command pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_get_command_evidence",
              "line_start": 428,
              "line_end": 442,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for command pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_is_builder_pattern",
              "line_start": 444,
              "line_end": 462,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect builder pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_get_builder_evidence",
              "line_start": 464,
              "line_end": 481,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for builder pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_is_adapter_pattern",
              "line_start": 483,
              "line_end": 507,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Detect adapter pattern indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_get_adapter_evidence",
              "line_start": 509,
              "line_end": 522,
              "args": [
                "self",
                "class_node",
                "content"
              ],
              "returns": null,
              "docstring": "Get evidence for adapter pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_analyze_architectural_patterns",
              "line_start": 524,
              "line_end": 537,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze architectural patterns in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_detect_mvc_pattern",
              "line_start": 539,
              "line_end": 575,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect MVC (Model-View-Controller) pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 262
            },
            {
              "name": "_detect_layered_architecture",
              "line_start": 577,
              "line_end": 610,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect layered architecture pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 189
            },
            {
              "name": "_detect_repository_pattern",
              "line_start": 612,
              "line_end": 647,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect repository pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_detect_dependency_injection",
              "line_start": 649,
              "line_end": 681,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect dependency injection pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_calculate_architecture_score",
              "line_start": 683,
              "line_end": 692,
              "args": [
                "self",
                "patterns"
              ],
              "returns": null,
              "docstring": "Calculate overall architecture score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_generate_architecture_recommendations",
              "line_start": 694,
              "line_end": 710,
              "args": [
                "self",
                "patterns"
              ],
              "returns": null,
              "docstring": "Generate architecture recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_analyze_module_organization",
              "line_start": 712,
              "line_end": 764,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze module organization and structure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 338
            },
            {
              "name": "_analyze_code_structure",
              "line_start": 766,
              "line_end": 814,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze overall code structure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 256
            }
          ],
          "docstring": "Analyzer for structural patterns in code.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 24,
          "line_end": 36,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive structural analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_detect_design_patterns",
          "line_start": 38,
          "line_end": 227,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect common design patterns in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 689
        },
        {
          "name": "_is_singleton_pattern",
          "line_start": 229,
          "line_end": 253,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect singleton pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_get_singleton_evidence",
          "line_start": 255,
          "line_end": 268,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for singleton pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_is_factory_pattern",
          "line_start": 270,
          "line_end": 284,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect factory pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_get_factory_evidence",
          "line_start": 286,
          "line_end": 300,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for factory pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 113
        },
        {
          "name": "_is_observer_pattern",
          "line_start": 302,
          "line_end": 316,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect observer pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_get_observer_evidence",
          "line_start": 318,
          "line_end": 334,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for observer pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_is_decorator_pattern",
          "line_start": 336,
          "line_end": 360,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect decorator pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_get_decorator_evidence",
          "line_start": 362,
          "line_end": 378,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for decorator pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_is_strategy_pattern",
          "line_start": 380,
          "line_end": 392,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect strategy pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "_get_strategy_evidence",
          "line_start": 394,
          "line_end": 410,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for strategy pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "_is_command_pattern",
          "line_start": 412,
          "line_end": 426,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect command pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_get_command_evidence",
          "line_start": 428,
          "line_end": 442,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for command pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_is_builder_pattern",
          "line_start": 444,
          "line_end": 462,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect builder pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_get_builder_evidence",
          "line_start": 464,
          "line_end": 481,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for builder pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_is_adapter_pattern",
          "line_start": 483,
          "line_end": 507,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Detect adapter pattern indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_get_adapter_evidence",
          "line_start": 509,
          "line_end": 522,
          "args": [
            "self",
            "class_node",
            "content"
          ],
          "returns": null,
          "docstring": "Get evidence for adapter pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_analyze_architectural_patterns",
          "line_start": 524,
          "line_end": 537,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze architectural patterns in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_detect_mvc_pattern",
          "line_start": 539,
          "line_end": 575,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect MVC (Model-View-Controller) pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 262
        },
        {
          "name": "_detect_layered_architecture",
          "line_start": 577,
          "line_end": 610,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect layered architecture pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 189
        },
        {
          "name": "_detect_repository_pattern",
          "line_start": 612,
          "line_end": 647,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect repository pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_detect_dependency_injection",
          "line_start": 649,
          "line_end": 681,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect dependency injection pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_calculate_architecture_score",
          "line_start": 683,
          "line_end": 692,
          "args": [
            "self",
            "patterns"
          ],
          "returns": null,
          "docstring": "Calculate overall architecture score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_generate_architecture_recommendations",
          "line_start": 694,
          "line_end": 710,
          "args": [
            "self",
            "patterns"
          ],
          "returns": null,
          "docstring": "Generate architecture recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_analyze_module_organization",
          "line_start": 712,
          "line_end": 764,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze module organization and structure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 338
        },
        {
          "name": "_analyze_code_structure",
          "line_start": 766,
          "line_end": 814,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze overall code structure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 256
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 814,
      "complexity_score": 8530,
      "api_surface_area": 2,
      "docstring": "Structural Analysis Module\n==========================\n\nImplements comprehensive structural analysis:\n- Design pattern detection (Singleton, Factory, Observer, etc.)\n- Architectural pattern analysis\n- Code structure assessment\n- Module organization analysis",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0357142857142858,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\supply_chain_security.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "component_name": "supply_chain_security",
      "analysis_timestamp": "2025-08-20 21:46:40.135527",
      "classes": [
        {
          "name": "SupplyChainSecurityAnalyzer",
          "line_start": 30,
          "line_end": 755,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 33,
              "line_end": 37,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "analyze",
              "line_start": 39,
              "line_end": 56,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive supply chain security analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_dependencies",
              "line_start": 58,
              "line_end": 78,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze all project dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "_analyze_pip_dependencies",
              "line_start": 80,
              "line_end": 140,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze pip dependencies from requirements files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 298
            },
            {
              "name": "_analyze_conda_dependencies",
              "line_start": 142,
              "line_end": 186,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze conda dependencies from environment files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 242
            },
            {
              "name": "_analyze_poetry_dependencies",
              "line_start": 188,
              "line_end": 232,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze poetry dependencies from pyproject.toml.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "_analyze_direct_imports",
              "line_start": 234,
              "line_end": 258,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze direct imports from Python files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "_scan_vulnerabilities",
              "line_start": 260,
              "line_end": 299,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Scan for known vulnerabilities in dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "_check_license_compliance",
              "line_start": 301,
              "line_end": 342,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check license compliance of dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 190
            },
            {
              "name": "_identify_outdated_packages",
              "line_start": 344,
              "line_end": 375,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify outdated packages that need updates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 215
            },
            {
              "name": "_analyze_transitive_dependencies",
              "line_start": 377,
              "line_end": 389,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze transitive (indirect) dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "_assess_package_reputation",
              "line_start": 391,
              "line_end": 413,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess reputation of packages.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 126
            },
            {
              "name": "_detect_typosquatting",
              "line_start": 415,
              "line_end": 446,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect potential typosquatting attacks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_detect_dependency_confusion",
              "line_start": 448,
              "line_end": 484,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect potential dependency confusion attacks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_calculate_supply_chain_metrics",
              "line_start": 486,
              "line_end": 527,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall supply chain security metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 267
            },
            {
              "name": "_load_vulnerability_database",
              "line_start": 531,
              "line_end": 555,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load vulnerability database (simulated).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_load_typosquatting_list",
              "line_start": 557,
              "line_end": 564,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load known typosquatting packages.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 25
            },
            {
              "name": "_load_trusted_packages",
              "line_start": 566,
              "line_end": 572,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load list of trusted/popular packages.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "_get_stdlib_modules",
              "line_start": 574,
              "line_end": 580,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get Python standard library modules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "_parse_setup_py",
              "line_start": 582,
              "line_end": 610,
              "args": [
                "self",
                "setup_path"
              ],
              "returns": null,
              "docstring": "Parse dependencies from setup.py.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_parse_pipfile",
              "line_start": 612,
              "line_end": 616,
              "args": [
                "self",
                "pipfile_path"
              ],
              "returns": null,
              "docstring": "Parse dependencies from Pipfile.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 25
            },
            {
              "name": "_build_dependency_tree",
              "line_start": 618,
              "line_end": 621,
              "args": [
                "self",
                "dependencies"
              ],
              "returns": null,
              "docstring": "Build dependency tree structure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "_get_package_license",
              "line_start": 623,
              "line_end": 633,
              "args": [
                "self",
                "package"
              ],
              "returns": null,
              "docstring": "Get license for a package (simulated).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_get_latest_version",
              "line_start": 635,
              "line_end": 645,
              "args": [
                "self",
                "package"
              ],
              "returns": null,
              "docstring": "Get latest version of a package (simulated).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_calculate_update_priority",
              "line_start": 647,
              "line_end": 661,
              "args": [
                "self",
                "package",
                "current",
                "latest"
              ],
              "returns": null,
              "docstring": "Calculate update priority based on version difference.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_calculate_reputation_score",
              "line_start": 663,
              "line_end": 688,
              "args": [
                "self",
                "package"
              ],
              "returns": null,
              "docstring": "Calculate reputation score for a package.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "_get_reputation_issues",
              "line_start": 690,
              "line_end": 704,
              "args": [
                "self",
                "package",
                "score"
              ],
              "returns": null,
              "docstring": "Get reputation issues for a package.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_calculate_string_similarity",
              "line_start": 706,
              "line_end": 717,
              "args": [
                "self",
                "str1",
                "str2"
              ],
              "returns": null,
              "docstring": "Calculate string similarity using Levenshtein distance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_get_risk_level",
              "line_start": 719,
              "line_end": 730,
              "args": [
                "self",
                "risk_score"
              ],
              "returns": null,
              "docstring": "Get risk level from score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_generate_recommendations",
              "line_start": 732,
              "line_end": 755,
              "args": [
                "self",
                "risk_score",
                "risk_factors"
              ],
              "returns": null,
              "docstring": "Generate recommendations based on risk analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 132
            }
          ],
          "docstring": "Analyzer for supply chain security vulnerabilities.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 33,
          "line_end": 37,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "analyze",
          "line_start": 39,
          "line_end": 56,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive supply chain security analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_dependencies",
          "line_start": 58,
          "line_end": 78,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze all project dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "_analyze_pip_dependencies",
          "line_start": 80,
          "line_end": 140,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze pip dependencies from requirements files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 298
        },
        {
          "name": "_analyze_conda_dependencies",
          "line_start": 142,
          "line_end": 186,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze conda dependencies from environment files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 242
        },
        {
          "name": "_analyze_poetry_dependencies",
          "line_start": 188,
          "line_end": 232,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze poetry dependencies from pyproject.toml.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "_analyze_direct_imports",
          "line_start": 234,
          "line_end": 258,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze direct imports from Python files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "_scan_vulnerabilities",
          "line_start": 260,
          "line_end": 299,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Scan for known vulnerabilities in dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "_check_license_compliance",
          "line_start": 301,
          "line_end": 342,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check license compliance of dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 190
        },
        {
          "name": "_identify_outdated_packages",
          "line_start": 344,
          "line_end": 375,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify outdated packages that need updates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 215
        },
        {
          "name": "_analyze_transitive_dependencies",
          "line_start": 377,
          "line_end": 389,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze transitive (indirect) dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "_assess_package_reputation",
          "line_start": 391,
          "line_end": 413,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess reputation of packages.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "_detect_typosquatting",
          "line_start": 415,
          "line_end": 446,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect potential typosquatting attacks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_detect_dependency_confusion",
          "line_start": 448,
          "line_end": 484,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect potential dependency confusion attacks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_calculate_supply_chain_metrics",
          "line_start": 486,
          "line_end": 527,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall supply chain security metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 267
        },
        {
          "name": "_load_vulnerability_database",
          "line_start": 531,
          "line_end": 555,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load vulnerability database (simulated).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_load_typosquatting_list",
          "line_start": 557,
          "line_end": 564,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load known typosquatting packages.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 25
        },
        {
          "name": "_load_trusted_packages",
          "line_start": 566,
          "line_end": 572,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load list of trusted/popular packages.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "_get_stdlib_modules",
          "line_start": 574,
          "line_end": 580,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get Python standard library modules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "_parse_setup_py",
          "line_start": 582,
          "line_end": 610,
          "args": [
            "self",
            "setup_path"
          ],
          "returns": null,
          "docstring": "Parse dependencies from setup.py.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_parse_pipfile",
          "line_start": 612,
          "line_end": 616,
          "args": [
            "self",
            "pipfile_path"
          ],
          "returns": null,
          "docstring": "Parse dependencies from Pipfile.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 25
        },
        {
          "name": "_build_dependency_tree",
          "line_start": 618,
          "line_end": 621,
          "args": [
            "self",
            "dependencies"
          ],
          "returns": null,
          "docstring": "Build dependency tree structure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "_get_package_license",
          "line_start": 623,
          "line_end": 633,
          "args": [
            "self",
            "package"
          ],
          "returns": null,
          "docstring": "Get license for a package (simulated).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_get_latest_version",
          "line_start": 635,
          "line_end": 645,
          "args": [
            "self",
            "package"
          ],
          "returns": null,
          "docstring": "Get latest version of a package (simulated).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_calculate_update_priority",
          "line_start": 647,
          "line_end": 661,
          "args": [
            "self",
            "package",
            "current",
            "latest"
          ],
          "returns": null,
          "docstring": "Calculate update priority based on version difference.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_calculate_reputation_score",
          "line_start": 663,
          "line_end": 688,
          "args": [
            "self",
            "package"
          ],
          "returns": null,
          "docstring": "Calculate reputation score for a package.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "_get_reputation_issues",
          "line_start": 690,
          "line_end": 704,
          "args": [
            "self",
            "package",
            "score"
          ],
          "returns": null,
          "docstring": "Get reputation issues for a package.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_calculate_string_similarity",
          "line_start": 706,
          "line_end": 717,
          "args": [
            "self",
            "str1",
            "str2"
          ],
          "returns": null,
          "docstring": "Calculate string similarity using Levenshtein distance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_get_risk_level",
          "line_start": 719,
          "line_end": 730,
          "args": [
            "self",
            "risk_score"
          ],
          "returns": null,
          "docstring": "Get risk level from score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_generate_recommendations",
          "line_start": 732,
          "line_end": 755,
          "args": [
            "self",
            "risk_score",
            "risk_factors"
          ],
          "returns": null,
          "docstring": "Generate recommendations based on risk analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 132
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "subprocess",
          "names": [
            "subprocess"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "requests",
          "names": [
            "requests"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "packaging",
          "names": [
            "version"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "toml",
          "names": [
            "toml"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 195
        },
        {
          "module": "yaml",
          "names": [
            "yaml"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 153
        }
      ],
      "external_dependencies": "{'requests', 'pathlib', 'packaging', 'subprocess', 'typing', 'toml', 'json', 're', 'yaml', 'hashlib', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 755,
      "complexity_score": 6924,
      "api_surface_area": 2,
      "docstring": "Supply Chain Security Analysis Module\n======================================\n\nImplements comprehensive supply chain security analysis:\n- Python package vulnerability scanning (pip, conda, poetry)\n- Known CVE detection in dependencies\n- License compliance checking\n- Dependency confusion attack detection\n- Outdated package identification\n- Transitive dependency analysis\n- Package reputation scoring\n- Typosquatting detection",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "{'numpy', 'tensorflow', 'torch', 'scipy', 'pandas'}",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "high"
    },
    "testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\taint_analysis.py",
      "component_name": "taint_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.147721",
      "classes": [
        {
          "name": "TaintSource",
          "line_start": 24,
          "line_end": 29,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a source of tainted data.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TaintSink",
          "line_start": 33,
          "line_end": 38,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a sink where tainted data can cause damage.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TaintPath",
          "line_start": 42,
          "line_end": 50,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a data flow path from source to sink.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TaintAnalyzer",
          "line_start": 53,
          "line_end": 647,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 56,
              "line_end": 60,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "_init_taint_patterns",
              "line_start": 62,
              "line_end": 198,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize taint analysis patterns for Python.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 162
            },
            {
              "name": "analyze",
              "line_start": 200,
              "line_end": 230,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive taint analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "_identify_taint_sources",
              "line_start": 232,
              "line_end": 258,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify all taint sources in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 156
            },
            {
              "name": "_identify_taint_sinks",
              "line_start": 260,
              "line_end": 286,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify all taint sinks in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 154
            },
            {
              "name": "_build_data_flow_graph",
              "line_start": 288,
              "line_end": 299,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Build a data flow graph for the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_track_data_flow",
              "line_start": 301,
              "line_end": 327,
              "args": [
                "self",
                "tree",
                "file_key"
              ],
              "returns": null,
              "docstring": "Track data flow within an AST.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_extract_names_from_node",
              "line_start": 329,
              "line_end": 335,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Extract variable names from an AST node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "_add_data_flow",
              "line_start": 337,
              "line_end": 342,
              "args": [
                "self",
                "sources",
                "targets",
                "file_key",
                "line_num"
              ],
              "returns": null,
              "docstring": "Add data flow edges to the graph.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "_track_function_call_flow",
              "line_start": 344,
              "line_end": 367,
              "args": [
                "self",
                "node",
                "file_key"
              ],
              "returns": null,
              "docstring": "Track data flow through function calls.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "_trace_taint_paths",
              "line_start": 369,
              "line_end": 397,
              "args": [
                "self",
                "sources",
                "sinks"
              ],
              "returns": null,
              "docstring": "Trace paths from sources to sinks using data flow graph.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "_find_paths_between",
              "line_start": 399,
              "line_end": 426,
              "args": [
                "self",
                "start",
                "end",
                "max_depth"
              ],
              "returns": null,
              "docstring": "Find paths between two nodes in the data flow graph using BFS.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 256
            },
            {
              "name": "_analyze_sanitization",
              "line_start": 428,
              "line_end": 462,
              "args": [
                "self",
                "taint_paths"
              ],
              "returns": null,
              "docstring": "Analyze sanitization in taint paths.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 191
            },
            {
              "name": "_generate_vulnerability_report",
              "line_start": 464,
              "line_end": 488,
              "args": [
                "self",
                "paths"
              ],
              "returns": null,
              "docstring": "Generate vulnerability report from analyzed paths.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 154
            },
            {
              "name": "_calculate_source_confidence",
              "line_start": 490,
              "line_end": 500,
              "args": [
                "self",
                "pattern",
                "line"
              ],
              "returns": null,
              "docstring": "Calculate confidence for a taint source.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_get_sink_danger_level",
              "line_start": 502,
              "line_end": 512,
              "args": [
                "self",
                "sink_type"
              ],
              "returns": null,
              "docstring": "Get danger level for sink type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "_determine_vulnerability_type",
              "line_start": 514,
              "line_end": 529,
              "args": [
                "self",
                "source",
                "sink"
              ],
              "returns": null,
              "docstring": "Determine vulnerability type from source and sink.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_get_vulnerability_severity",
              "line_start": 531,
              "line_end": 542,
              "args": [
                "self",
                "path"
              ],
              "returns": null,
              "docstring": "Get vulnerability severity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_get_vulnerability_description",
              "line_start": 544,
              "line_end": 546,
              "args": [
                "self",
                "path"
              ],
              "returns": null,
              "docstring": "Get vulnerability description.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "_get_vulnerability_recommendation",
              "line_start": 548,
              "line_end": 561,
              "args": [
                "self",
                "path"
              ],
              "returns": null,
              "docstring": "Get vulnerability recommendation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_generate_flow_summary",
              "line_start": 563,
              "line_end": 584,
              "args": [
                "self",
                "paths"
              ],
              "returns": null,
              "docstring": "Generate summary of data flows.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 202
            },
            {
              "name": "_analyze_sanitization_coverage",
              "line_start": 586,
              "line_end": 604,
              "args": [
                "self",
                "paths"
              ],
              "returns": null,
              "docstring": "Analyze sanitization coverage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_get_sanitization_grade",
              "line_start": 606,
              "line_end": 617,
              "args": [
                "self",
                "rate"
              ],
              "returns": null,
              "docstring": "Get sanitization coverage grade.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_source_to_dict",
              "line_start": 619,
              "line_end": 626,
              "args": [
                "self",
                "source"
              ],
              "returns": null,
              "docstring": "Convert TaintSource to dictionary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_sink_to_dict",
              "line_start": 628,
              "line_end": 635,
              "args": [
                "self",
                "sink"
              ],
              "returns": null,
              "docstring": "Convert TaintSink to dictionary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_path_to_dict",
              "line_start": 637,
              "line_end": 647,
              "args": [
                "self",
                "path"
              ],
              "returns": null,
              "docstring": "Convert TaintPath to dictionary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            }
          ],
          "docstring": "Analyzer for taint analysis and data flow tracking.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 56,
          "line_end": 60,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "_init_taint_patterns",
          "line_start": 62,
          "line_end": 198,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize taint analysis patterns for Python.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 162
        },
        {
          "name": "analyze",
          "line_start": 200,
          "line_end": 230,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive taint analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "_identify_taint_sources",
          "line_start": 232,
          "line_end": 258,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify all taint sources in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 156
        },
        {
          "name": "_identify_taint_sinks",
          "line_start": 260,
          "line_end": 286,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify all taint sinks in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 154
        },
        {
          "name": "_build_data_flow_graph",
          "line_start": 288,
          "line_end": 299,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Build a data flow graph for the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_track_data_flow",
          "line_start": 301,
          "line_end": 327,
          "args": [
            "self",
            "tree",
            "file_key"
          ],
          "returns": null,
          "docstring": "Track data flow within an AST.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_extract_names_from_node",
          "line_start": 329,
          "line_end": 335,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Extract variable names from an AST node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "_add_data_flow",
          "line_start": 337,
          "line_end": 342,
          "args": [
            "self",
            "sources",
            "targets",
            "file_key",
            "line_num"
          ],
          "returns": null,
          "docstring": "Add data flow edges to the graph.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "_track_function_call_flow",
          "line_start": 344,
          "line_end": 367,
          "args": [
            "self",
            "node",
            "file_key"
          ],
          "returns": null,
          "docstring": "Track data flow through function calls.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "_trace_taint_paths",
          "line_start": 369,
          "line_end": 397,
          "args": [
            "self",
            "sources",
            "sinks"
          ],
          "returns": null,
          "docstring": "Trace paths from sources to sinks using data flow graph.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "_find_paths_between",
          "line_start": 399,
          "line_end": 426,
          "args": [
            "self",
            "start",
            "end",
            "max_depth"
          ],
          "returns": null,
          "docstring": "Find paths between two nodes in the data flow graph using BFS.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 256
        },
        {
          "name": "_analyze_sanitization",
          "line_start": 428,
          "line_end": 462,
          "args": [
            "self",
            "taint_paths"
          ],
          "returns": null,
          "docstring": "Analyze sanitization in taint paths.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "_generate_vulnerability_report",
          "line_start": 464,
          "line_end": 488,
          "args": [
            "self",
            "paths"
          ],
          "returns": null,
          "docstring": "Generate vulnerability report from analyzed paths.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 154
        },
        {
          "name": "_calculate_source_confidence",
          "line_start": 490,
          "line_end": 500,
          "args": [
            "self",
            "pattern",
            "line"
          ],
          "returns": null,
          "docstring": "Calculate confidence for a taint source.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_get_sink_danger_level",
          "line_start": 502,
          "line_end": 512,
          "args": [
            "self",
            "sink_type"
          ],
          "returns": null,
          "docstring": "Get danger level for sink type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "_determine_vulnerability_type",
          "line_start": 514,
          "line_end": 529,
          "args": [
            "self",
            "source",
            "sink"
          ],
          "returns": null,
          "docstring": "Determine vulnerability type from source and sink.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_get_vulnerability_severity",
          "line_start": 531,
          "line_end": 542,
          "args": [
            "self",
            "path"
          ],
          "returns": null,
          "docstring": "Get vulnerability severity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_get_vulnerability_description",
          "line_start": 544,
          "line_end": 546,
          "args": [
            "self",
            "path"
          ],
          "returns": null,
          "docstring": "Get vulnerability description.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "_get_vulnerability_recommendation",
          "line_start": 548,
          "line_end": 561,
          "args": [
            "self",
            "path"
          ],
          "returns": null,
          "docstring": "Get vulnerability recommendation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_generate_flow_summary",
          "line_start": 563,
          "line_end": 584,
          "args": [
            "self",
            "paths"
          ],
          "returns": null,
          "docstring": "Generate summary of data flows.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 202
        },
        {
          "name": "_analyze_sanitization_coverage",
          "line_start": 586,
          "line_end": 604,
          "args": [
            "self",
            "paths"
          ],
          "returns": null,
          "docstring": "Analyze sanitization coverage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_get_sanitization_grade",
          "line_start": 606,
          "line_end": 617,
          "args": [
            "self",
            "rate"
          ],
          "returns": null,
          "docstring": "Get sanitization coverage grade.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_source_to_dict",
          "line_start": 619,
          "line_end": 626,
          "args": [
            "self",
            "source"
          ],
          "returns": null,
          "docstring": "Convert TaintSource to dictionary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_sink_to_dict",
          "line_start": 628,
          "line_end": 635,
          "args": [
            "self",
            "sink"
          ],
          "returns": null,
          "docstring": "Convert TaintSink to dictionary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_path_to_dict",
          "line_start": 637,
          "line_end": 647,
          "args": [
            "self",
            "path"
          ],
          "returns": null,
          "docstring": "Convert TaintPath to dictionary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 'dataclasses', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 647,
      "complexity_score": 5570,
      "api_surface_area": 2,
      "docstring": "Taint Analysis Module\n====================\n\nImplements static taint analysis for Python data flow:\n- Source identification (user inputs, external data)\n- Sink detection (dangerous operations, sensitive outputs)\n- Data flow path tracking through code\n- Vulnerability identification in data paths\n- Sanitization detection and validation",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "testmaster\\analysis\\comprehensive_analysis\\testing_analysis.py": {
      "file_path": "testmaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "component_name": "testing_analysis",
      "analysis_timestamp": "2025-08-20 21:46:40.160245",
      "classes": [
        {
          "name": "TestingAnalyzer",
          "line_start": 25,
          "line_end": 1342,
          "base_classes": [
            "BaseAnalyzer"
          ],
          "methods": [
            {
              "name": "analyze",
              "line_start": 28,
              "line_end": 45,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform comprehensive testing and testability analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_analyze_test_coverage_potential",
              "line_start": 47,
              "line_end": 122,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify untested code paths and edge cases.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 402
            },
            {
              "name": "_get_test_files",
              "line_start": 124,
              "line_end": 142,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get all test files in the project.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_is_test_file",
              "line_start": 144,
              "line_end": 147,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Check if a file is a test file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "_get_tested_functions",
              "line_start": 149,
              "line_end": 182,
              "args": [
                "self",
                "test_files"
              ],
              "returns": null,
              "docstring": "Extract functions that are being tested.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "_analyze_branches",
              "line_start": 184,
              "line_end": 209,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Analyze branch coverage opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 130
            },
            {
              "name": "_count_conditions",
              "line_start": 211,
              "line_end": 217,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Count logical conditions in a test expression.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_analyze_exception_paths",
              "line_start": 219,
              "line_end": 246,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Analyze exception handling paths.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "_identify_edge_cases",
              "line_start": 248,
              "line_end": 274,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Identify potential edge cases.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 189
            },
            {
              "name": "_identify_boundary_conditions",
              "line_start": 276,
              "line_end": 308,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Identify boundary condition test opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_identify_integration_points",
              "line_start": 310,
              "line_end": 343,
              "args": [
                "self",
                "tree"
              ],
              "returns": null,
              "docstring": "Identify integration test opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 208
            },
            {
              "name": "_calculate_test_priority",
              "line_start": 345,
              "line_end": 367,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Calculate testing priority based on complexity and risk.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "_analyze_test_pyramid",
              "line_start": 369,
              "line_end": 440,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze test distribution across unit/integration/e2e.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 419
            },
            {
              "name": "_classify_test_type",
              "line_start": 442,
              "line_end": 475,
              "args": [
                "self",
                "test_node",
                "content"
              ],
              "returns": null,
              "docstring": "Classify test as unit, integration, or e2e.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 248
            },
            {
              "name": "_estimate_test_execution_time",
              "line_start": 477,
              "line_end": 502,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Estimate test execution time.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 201
            },
            {
              "name": "_analyze_mock_dependencies",
              "line_start": 504,
              "line_end": 567,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze mock and stub usage patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 333
            },
            {
              "name": "_count_mocks_in_test",
              "line_start": 569,
              "line_end": 582,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Count mock objects in a test.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_classify_test_doubles",
              "line_start": 584,
              "line_end": 603,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Classify types of test doubles used.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "_detect_mock_smells",
              "line_start": 605,
              "line_end": 631,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Detect mock-related test smells.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 204
            },
            {
              "name": "_detect_test_smells",
              "line_start": 633,
              "line_end": 718,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect various test smells.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 396
            },
            {
              "name": "_count_assertions",
              "line_start": 720,
              "line_end": 739,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Count assertions in a test.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_has_file_dependencies",
              "line_start": 741,
              "line_end": 751,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test depends on external files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_has_conditional_logic",
              "line_start": 753,
              "line_end": 758,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test has conditional logic.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_get_test_signature",
              "line_start": 760,
              "line_end": 770,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Get test signature for duplicate detection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_is_ignored_test",
              "line_start": 772,
              "line_end": 781,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test is ignored/skipped.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "_assess_mutation_testing_readiness",
              "line_start": 783,
              "line_end": 840,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess readiness for mutation testing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 220
            },
            {
              "name": "_count_mutation_opportunities",
              "line_start": 842,
              "line_end": 876,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Count mutation testing opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "_identify_property_testing_opportunities",
              "line_start": 878,
              "line_end": 919,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify functions suitable for property-based testing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 195
            },
            {
              "name": "_is_pure_function",
              "line_start": 921,
              "line_end": 941,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Check if function is pure (no side effects).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_identify_function_properties",
              "line_start": 943,
              "line_end": 964,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Identify testable properties of a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_suggest_hypothesis_strategies",
              "line_start": 966,
              "line_end": 990,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Suggest Hypothesis strategies for property testing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_identify_invariants",
              "line_start": 992,
              "line_end": 1019,
              "args": [
                "self",
                "func_node"
              ],
              "returns": null,
              "docstring": "Identify function invariants.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "_analyze_test_data_patterns",
              "line_start": 1021,
              "line_end": 1089,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze test data and fixture patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 358
            },
            {
              "name": "_detect_fixtures",
              "line_start": 1091,
              "line_end": 1116,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": null,
              "docstring": "Detect test fixtures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_analyze_fixture_complexity",
              "line_start": 1118,
              "line_end": 1120,
              "args": [
                "self",
                "fixture_node"
              ],
              "returns": null,
              "docstring": "Analyze complexity of a fixture.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "_predict_flaky_tests",
              "line_start": 1122,
              "line_end": 1201,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Predict tests likely to be flaky.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 358
            },
            {
              "name": "_has_time_dependency",
              "line_start": 1203,
              "line_end": 1213,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test has time dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_has_network_operations",
              "line_start": 1215,
              "line_end": 1222,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test has network operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_uses_random_data",
              "line_start": 1224,
              "line_end": 1234,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test uses random data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_has_threading",
              "line_start": 1236,
              "line_end": 1245,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test uses threading or async.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_has_external_dependencies",
              "line_start": 1247,
              "line_end": 1261,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test has external dependencies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_has_order_dependency",
              "line_start": 1263,
              "line_end": 1273,
              "args": [
                "self",
                "test_node",
                "tree"
              ],
              "returns": null,
              "docstring": "Check if test depends on execution order.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            },
            {
              "name": "_has_float_comparisons",
              "line_start": 1275,
              "line_end": 1287,
              "args": [
                "self",
                "test_node"
              ],
              "returns": null,
              "docstring": "Check if test has floating point comparisons.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "_calculate_testability_metrics",
              "line_start": 1289,
              "line_end": 1342,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall testability metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 314
            }
          ],
          "docstring": "Analyzer for testing patterns and testability.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "analyze",
          "line_start": 28,
          "line_end": 45,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform comprehensive testing and testability analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_analyze_test_coverage_potential",
          "line_start": 47,
          "line_end": 122,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify untested code paths and edge cases.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 402
        },
        {
          "name": "_get_test_files",
          "line_start": 124,
          "line_end": 142,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get all test files in the project.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_is_test_file",
          "line_start": 144,
          "line_end": 147,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Check if a file is a test file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "_get_tested_functions",
          "line_start": 149,
          "line_end": 182,
          "args": [
            "self",
            "test_files"
          ],
          "returns": null,
          "docstring": "Extract functions that are being tested.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "_analyze_branches",
          "line_start": 184,
          "line_end": 209,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Analyze branch coverage opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 130
        },
        {
          "name": "_count_conditions",
          "line_start": 211,
          "line_end": 217,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Count logical conditions in a test expression.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_analyze_exception_paths",
          "line_start": 219,
          "line_end": 246,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Analyze exception handling paths.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "_identify_edge_cases",
          "line_start": 248,
          "line_end": 274,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Identify potential edge cases.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 189
        },
        {
          "name": "_identify_boundary_conditions",
          "line_start": 276,
          "line_end": 308,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Identify boundary condition test opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_identify_integration_points",
          "line_start": 310,
          "line_end": 343,
          "args": [
            "self",
            "tree"
          ],
          "returns": null,
          "docstring": "Identify integration test opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 208
        },
        {
          "name": "_calculate_test_priority",
          "line_start": 345,
          "line_end": 367,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Calculate testing priority based on complexity and risk.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "_analyze_test_pyramid",
          "line_start": 369,
          "line_end": 440,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze test distribution across unit/integration/e2e.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 419
        },
        {
          "name": "_classify_test_type",
          "line_start": 442,
          "line_end": 475,
          "args": [
            "self",
            "test_node",
            "content"
          ],
          "returns": null,
          "docstring": "Classify test as unit, integration, or e2e.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 248
        },
        {
          "name": "_estimate_test_execution_time",
          "line_start": 477,
          "line_end": 502,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Estimate test execution time.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 201
        },
        {
          "name": "_analyze_mock_dependencies",
          "line_start": 504,
          "line_end": 567,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze mock and stub usage patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 333
        },
        {
          "name": "_count_mocks_in_test",
          "line_start": 569,
          "line_end": 582,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Count mock objects in a test.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_classify_test_doubles",
          "line_start": 584,
          "line_end": 603,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Classify types of test doubles used.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "_detect_mock_smells",
          "line_start": 605,
          "line_end": 631,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Detect mock-related test smells.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 204
        },
        {
          "name": "_detect_test_smells",
          "line_start": 633,
          "line_end": 718,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect various test smells.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 396
        },
        {
          "name": "_count_assertions",
          "line_start": 720,
          "line_end": 739,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Count assertions in a test.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_has_file_dependencies",
          "line_start": 741,
          "line_end": 751,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test depends on external files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_has_conditional_logic",
          "line_start": 753,
          "line_end": 758,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test has conditional logic.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_get_test_signature",
          "line_start": 760,
          "line_end": 770,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Get test signature for duplicate detection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_is_ignored_test",
          "line_start": 772,
          "line_end": 781,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test is ignored/skipped.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "_assess_mutation_testing_readiness",
          "line_start": 783,
          "line_end": 840,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess readiness for mutation testing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 220
        },
        {
          "name": "_count_mutation_opportunities",
          "line_start": 842,
          "line_end": 876,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Count mutation testing opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "_identify_property_testing_opportunities",
          "line_start": 878,
          "line_end": 919,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify functions suitable for property-based testing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 195
        },
        {
          "name": "_is_pure_function",
          "line_start": 921,
          "line_end": 941,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Check if function is pure (no side effects).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_identify_function_properties",
          "line_start": 943,
          "line_end": 964,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Identify testable properties of a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_suggest_hypothesis_strategies",
          "line_start": 966,
          "line_end": 990,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Suggest Hypothesis strategies for property testing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_identify_invariants",
          "line_start": 992,
          "line_end": 1019,
          "args": [
            "self",
            "func_node"
          ],
          "returns": null,
          "docstring": "Identify function invariants.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "_analyze_test_data_patterns",
          "line_start": 1021,
          "line_end": 1089,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze test data and fixture patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 358
        },
        {
          "name": "_detect_fixtures",
          "line_start": 1091,
          "line_end": 1116,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": null,
          "docstring": "Detect test fixtures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_analyze_fixture_complexity",
          "line_start": 1118,
          "line_end": 1120,
          "args": [
            "self",
            "fixture_node"
          ],
          "returns": null,
          "docstring": "Analyze complexity of a fixture.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "_predict_flaky_tests",
          "line_start": 1122,
          "line_end": 1201,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Predict tests likely to be flaky.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 358
        },
        {
          "name": "_has_time_dependency",
          "line_start": 1203,
          "line_end": 1213,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test has time dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_has_network_operations",
          "line_start": 1215,
          "line_end": 1222,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test has network operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_uses_random_data",
          "line_start": 1224,
          "line_end": 1234,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test uses random data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_has_threading",
          "line_start": 1236,
          "line_end": 1245,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test uses threading or async.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_has_external_dependencies",
          "line_start": 1247,
          "line_end": 1261,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test has external dependencies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_has_order_dependency",
          "line_start": 1263,
          "line_end": 1273,
          "args": [
            "self",
            "test_node",
            "tree"
          ],
          "returns": null,
          "docstring": "Check if test depends on execution order.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "_has_float_comparisons",
          "line_start": 1275,
          "line_end": 1287,
          "args": [
            "self",
            "test_node"
          ],
          "returns": null,
          "docstring": "Check if test has floating point comparisons.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "_calculate_testability_metrics",
          "line_start": 1289,
          "line_end": 1342,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall testability metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 314
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Set",
            "Tuple",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "base_analyzer",
          "names": [
            "BaseAnalyzer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'pathlib', 'typing', 're', 'ast', 'base_analyzer', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1342,
      "complexity_score": 14804,
      "api_surface_area": 2,
      "docstring": "Testing and Testability Analysis Module\n========================================\n\nImplements comprehensive testing and testability analysis:\n- Test coverage potential identification\n- Test pyramid analysis (unit/integration/e2e)\n- Mock/stub dependency analysis\n- Test smell detection\n- Mutation testing readiness\n- Property-based testing opportunities\n- Test data pattern analysis\n- Flaky test prediction",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0222222222222221,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_aggregator.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_aggregator.py",
      "component_name": "analytics_aggregator",
      "analysis_timestamp": "2025-08-20 21:46:40.185245",
      "classes": [
        {
          "name": "AnalyticsAggregator",
          "line_start": 26,
          "line_end": 434,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 31,
              "line_end": 307,
              "args": [
                "self",
                "cache_ttl"
              ],
              "returns": null,
              "docstring": "Initialize the analytics aggregator.\n\nArgs:\n    cache_ttl: Cache time-to-live in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 1262
            },
            {
              "name": "aggregate_metrics",
              "line_start": 310,
              "line_end": 335,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Aggregate multiple metrics into summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 187
            },
            {
              "name": "_misplaced_init_code",
              "line_start": 337,
              "line_end": 406,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "This code was misplaced in aggregate_metrics - moved here temporarily.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 336
            },
            {
              "name": "_fallback_init",
              "line_start": 409,
              "line_end": 412,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Fallback initialization for missing components.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 6
            },
            {
              "name": "_init_components",
              "line_start": 414,
              "line_end": 422,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize connections to TestMaster components.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "get_comprehensive_analytics",
              "line_start": 424,
              "line_end": 430,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive analytics data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_process_analytics_batch",
              "line_start": 432,
              "line_end": 434,
              "args": [
                "self",
                "batch"
              ],
              "returns": null,
              "docstring": "Process a batch of analytics data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 9
            }
          ],
          "docstring": "Central analytics aggregator that collects metrics from all TestMaster components.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 31,
          "line_end": 307,
          "args": [
            "self",
            "cache_ttl"
          ],
          "returns": null,
          "docstring": "Initialize the analytics aggregator.\n\nArgs:\n    cache_ttl: Cache time-to-live in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 1262
        },
        {
          "name": "aggregate_metrics",
          "line_start": 310,
          "line_end": 335,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Aggregate multiple metrics into summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 187
        },
        {
          "name": "_misplaced_init_code",
          "line_start": 337,
          "line_end": 406,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "This code was misplaced in aggregate_metrics - moved here temporarily.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 336
        },
        {
          "name": "_fallback_init",
          "line_start": 409,
          "line_end": 412,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Fallback initialization for missing components.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 6
        },
        {
          "name": "_init_components",
          "line_start": 414,
          "line_end": 422,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize connections to TestMaster components.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "get_comprehensive_analytics",
          "line_start": 424,
          "line_end": 430,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive analytics data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_process_analytics_batch",
          "line_start": 432,
          "line_end": 434,
          "args": [
            "self",
            "batch"
          ],
          "returns": null,
          "docstring": "Process a batch of analytics data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 9
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "test_collector",
          "names": [
            "TestResultsCollector"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 56
        },
        {
          "module": "data_store",
          "names": [
            "MetricsDataStore"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 57
        },
        {
          "module": "analytics_validator",
          "names": [
            "AnalyticsValidator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 58
        },
        {
          "module": "analytics_correlator",
          "names": [
            "AnalyticsCorrelator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 59
        },
        {
          "module": "analytics_performance_monitor",
          "names": [
            "AnalyticsPerformanceMonitor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 60
        },
        {
          "module": "analytics_performance_booster",
          "names": [
            "AnalyticsPerformanceBooster"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 61
        },
        {
          "module": "analytics_streaming",
          "names": [
            "AnalyticsStreamManager",
            "AnalyticsStreamIntegrator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 62
        },
        {
          "module": "analytics_event_queue",
          "names": [
            "AnalyticsEventQueue",
            "EventPriority"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 63
        },
        {
          "module": "analytics_anomaly_detector",
          "names": [
            "AnalyticsAnomalyDetector"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 64
        },
        {
          "module": "analytics_export_manager",
          "names": [
            "AnalyticsExportManager",
            "ExportFormat"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 65
        },
        {
          "module": "analytics_persistence",
          "names": [
            "AnalyticsPersistenceEngine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 66
        },
        {
          "module": "analytics_pipeline",
          "names": [
            "AnalyticsPipeline"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 67
        },
        {
          "module": "analytics_health_monitor",
          "names": [
            "AnalyticsHealthMonitor",
            "ComponentType"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 68
        },
        {
          "module": "analytics_smart_cache",
          "names": [
            "SmartAnalyticsCache"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 69
        },
        {
          "module": "analytics_normalizer",
          "names": [
            "AnalyticsDataNormalizer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 70
        },
        {
          "module": "analytics_quality_assurance",
          "names": [
            "AnalyticsQualityAssurance"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 71
        },
        {
          "module": "analytics_circuit_breaker",
          "names": [
            "AnalyticsCircuitBreakerManager"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 72
        },
        {
          "module": "analytics_metrics_collector",
          "names": [
            "AnalyticsMetricsCollector"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 73
        },
        {
          "module": "analytics_redundancy",
          "names": [
            "AnalyticsRedundancyManager"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 74
        },
        {
          "module": "analytics_watchdog",
          "names": [
            "AnalyticsWatchdog"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 75
        },
        {
          "module": "analytics_telemetry",
          "names": [
            "AnalyticsTelemetryCollector",
            "TelemetryLevel",
            "traced_operation"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 76
        },
        {
          "module": "analytics_performance_optimizer",
          "names": [
            "AnalyticsPerformanceOptimizer",
            "OptimizationLevel"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 77
        },
        {
          "module": "analytics_retry_manager",
          "names": [
            "AnalyticsRetryManager"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 141
        },
        {
          "module": "analytics_flow_monitor",
          "names": [
            "AnalyticsFlowMonitor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 142
        },
        {
          "module": "analytics_heartbeat_monitor",
          "names": [
            "DashboardHeartbeatMonitor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 143
        },
        {
          "module": "analytics_fallback_system",
          "names": [
            "AnalyticsFallbackSystem"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 144
        },
        {
          "module": "analytics_compressor",
          "names": [
            "AnalyticsCompressor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 145
        },
        {
          "module": "analytics_dead_letter_queue",
          "names": [
            "AnalyticsDeadLetterQueue"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 146
        },
        {
          "module": "analytics_batch_processor",
          "names": [
            "AnalyticsBatchProcessor",
            "BatchPriority"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 147
        },
        {
          "module": "analytics_data_sanitizer",
          "names": [
            "AnalyticsDataSanitizer",
            "ValidationLevel"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 80
        },
        {
          "module": "analytics_deduplication_engine",
          "names": [
            "AnalyticsDeduplicationEngine",
            "ConflictResolutionStrategy"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 87
        },
        {
          "module": "analytics_rate_limiter",
          "names": [
            "AnalyticsRateLimiter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 94
        },
        {
          "module": "analytics_integrity_verifier",
          "names": [
            "AnalyticsIntegrityVerifier",
            "IntegrityLevel"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 101
        },
        {
          "module": "analytics_error_recovery",
          "names": [
            "AnalyticsErrorRecovery",
            "ErrorSeverity"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 108
        },
        {
          "module": "analytics_connectivity_monitor",
          "names": [
            "AnalyticsConnectivityMonitor",
            "DashboardEndpoint",
            "MonitoringLevel"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 115
        }
      ],
      "external_dependencies": "{'analytics_error_recovery', 'analytics_metrics_collector', 'typing', 'analytics_anomaly_detector', 'analytics_circuit_breaker', 'analytics_event_queue', 'json', 'analytics_performance_monitor', 'analytics_compressor', 'analytics_watchdog', 'psutil', 'analytics_fallback_system', 'analytics_health_monitor', 'analytics_dead_letter_queue', 'test_collector', 'analytics_flow_monitor', 'analytics_integrity_verifier', 'analytics_data_sanitizer', 'analytics_export_manager', 'analytics_quality_assurance', 'analytics_deduplication_engine', 'data_store', 'analytics_performance_optimizer', 'analytics_redundancy', 'analytics_smart_cache', 'logging', 'analytics_heartbeat_monitor', 'analytics_performance_booster', 'analytics_connectivity_monitor', 'datetime', 'collections', 'analytics_retry_manager', 'analytics_rate_limiter', 'analytics_correlator', 'time', 'analytics_streaming', 'analytics_persistence', 'analytics_pipeline', 'analytics_normalizer', 'analytics_batch_processor', 'os', 'analytics_telemetry', 'analytics_validator', 'sys'}",
      "internal_dependencies": "set()",
      "lines_of_code": 434,
      "complexity_score": 3702,
      "api_surface_area": 4,
      "docstring": "Enhanced Analytics Aggregator\n==============================\n\nAggregates analytics from all TestMaster intelligence systems for the dashboard.\nProvides comprehensive metrics collection and real-time insights.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.125,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_anomaly_detector.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_anomaly_detector.py",
      "component_name": "analytics_anomaly_detector",
      "analysis_timestamp": "2025-08-20 21:46:40.193246",
      "classes": [
        {
          "name": "AnomalyType",
          "line_start": 25,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of anomalies.",
          "decorators": []
        },
        {
          "name": "AnomalySeverity",
          "line_start": 35,
          "line_end": 39,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Anomaly severity levels.",
          "decorators": []
        },
        {
          "name": "Anomaly",
          "line_start": 42,
          "line_end": 56,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a detected anomaly.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsAnomalyDetector",
          "line_start": 58,
          "line_end": 622,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 63,
              "line_end": 120,
              "args": [
                "self",
                "window_size",
                "sensitivity",
                "min_data_points"
              ],
              "returns": null,
              "docstring": "Initialize anomaly detector.\n\nArgs:\n    window_size: Size of sliding window for analysis\n    sensitivity: Sensitivity factor (lower = more sensitive)\n    min_data_points: Minimum data points before detection starts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "add_data_point",
              "line_start": 122,
              "line_end": 147,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Add a data point for a metric.\n\nArgs:\n    metric_name: Name of the metric\n    value: Metric value\n    timestamp: Optional timestamp (defaults to now)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "_update_statistics",
              "line_start": 149,
              "line_end": 170,
              "args": [
                "self",
                "metric_name"
              ],
              "returns": null,
              "docstring": "Update statistical models for a metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "_update_baseline_model",
              "line_start": 172,
              "line_end": 198,
              "args": [
                "self",
                "metric_name",
                "values"
              ],
              "returns": null,
              "docstring": "Update baseline model for expected values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 178
            },
            {
              "name": "_detect_seasonality",
              "line_start": 200,
              "line_end": 215,
              "args": [
                "self",
                "values"
              ],
              "returns": null,
              "docstring": "Detect seasonal patterns in data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_detect_anomalies",
              "line_start": 217,
              "line_end": 227,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect anomalies for a metric value.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_detect_zscore_anomaly",
              "line_start": 229,
              "line_end": 256,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect anomalies using Z-score method.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 183
            },
            {
              "name": "_detect_iqr_anomaly",
              "line_start": 258,
              "line_end": 287,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect anomalies using Interquartile Range method.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 213
            },
            {
              "name": "_detect_isolation_forest_anomaly",
              "line_start": 289,
              "line_end": 322,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect anomalies using Isolation Forest algorithm (simplified).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_detect_trend_anomaly",
              "line_start": 324,
              "line_end": 357,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect trend changes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 188
            },
            {
              "name": "_detect_missing_data",
              "line_start": 359,
              "line_end": 394,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect missing data patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 206
            },
            {
              "name": "_detect_correlation_anomaly",
              "line_start": 396,
              "line_end": 425,
              "args": [
                "self",
                "metric_name",
                "value",
                "timestamp"
              ],
              "returns": null,
              "docstring": "Detect correlation breaks between related metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "_calculate_trend",
              "line_start": 427,
              "line_end": 446,
              "args": [
                "self",
                "values"
              ],
              "returns": null,
              "docstring": "Calculate trend using linear regression.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 164
            },
            {
              "name": "_calculate_correlation",
              "line_start": 448,
              "line_end": 473,
              "args": [
                "self",
                "metric1",
                "metric2"
              ],
              "returns": null,
              "docstring": "Calculate correlation between two metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 229
            },
            {
              "name": "_calculate_severity",
              "line_start": 475,
              "line_end": 483,
              "args": [
                "self",
                "value",
                "info_threshold",
                "warning_threshold",
                "critical_threshold"
              ],
              "returns": null,
              "docstring": "Calculate anomaly severity based on thresholds.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_handle_anomaly",
              "line_start": 485,
              "line_end": 504,
              "args": [
                "self",
                "anomaly"
              ],
              "returns": null,
              "docstring": "Handle detected anomaly.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "set_threshold",
              "line_start": 506,
              "line_end": 512,
              "args": [
                "self",
                "metric_name",
                "min_value",
                "max_value"
              ],
              "returns": null,
              "docstring": "Set static thresholds for a metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "add_correlation_pair",
              "line_start": 514,
              "line_end": 516,
              "args": [
                "self",
                "metric1",
                "metric2"
              ],
              "returns": null,
              "docstring": "Add a pair of metrics that should be correlated.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 25
            },
            {
              "name": "get_anomalies",
              "line_start": 518,
              "line_end": 558,
              "args": [
                "self",
                "metric_name",
                "anomaly_type",
                "severity",
                "hours"
              ],
              "returns": null,
              "docstring": "Get detected anomalies with filters.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "resolve_anomaly",
              "line_start": 560,
              "line_end": 575,
              "args": [
                "self",
                "anomaly_id"
              ],
              "returns": null,
              "docstring": "Mark an anomaly as resolved.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "get_statistics",
              "line_start": 577,
              "line_end": 588,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get anomaly detection statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "export_anomalies",
              "line_start": 590,
              "line_end": 613,
              "args": [
                "self",
                "format"
              ],
              "returns": null,
              "docstring": "Export anomalies in specified format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "shutdown",
              "line_start": 615,
              "line_end": 622,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown anomaly detector.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            }
          ],
          "docstring": "Advanced anomaly detection for analytics data.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 63,
          "line_end": 120,
          "args": [
            "self",
            "window_size",
            "sensitivity",
            "min_data_points"
          ],
          "returns": null,
          "docstring": "Initialize anomaly detector.\n\nArgs:\n    window_size: Size of sliding window for analysis\n    sensitivity: Sensitivity factor (lower = more sensitive)\n    min_data_points: Minimum data points before detection starts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "add_data_point",
          "line_start": 122,
          "line_end": 147,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Add a data point for a metric.\n\nArgs:\n    metric_name: Name of the metric\n    value: Metric value\n    timestamp: Optional timestamp (defaults to now)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "_update_statistics",
          "line_start": 149,
          "line_end": 170,
          "args": [
            "self",
            "metric_name"
          ],
          "returns": null,
          "docstring": "Update statistical models for a metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "_update_baseline_model",
          "line_start": 172,
          "line_end": 198,
          "args": [
            "self",
            "metric_name",
            "values"
          ],
          "returns": null,
          "docstring": "Update baseline model for expected values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 178
        },
        {
          "name": "_detect_seasonality",
          "line_start": 200,
          "line_end": 215,
          "args": [
            "self",
            "values"
          ],
          "returns": null,
          "docstring": "Detect seasonal patterns in data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_detect_anomalies",
          "line_start": 217,
          "line_end": 227,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect anomalies for a metric value.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_detect_zscore_anomaly",
          "line_start": 229,
          "line_end": 256,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect anomalies using Z-score method.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 183
        },
        {
          "name": "_detect_iqr_anomaly",
          "line_start": 258,
          "line_end": 287,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect anomalies using Interquartile Range method.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 213
        },
        {
          "name": "_detect_isolation_forest_anomaly",
          "line_start": 289,
          "line_end": 322,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect anomalies using Isolation Forest algorithm (simplified).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_detect_trend_anomaly",
          "line_start": 324,
          "line_end": 357,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect trend changes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 188
        },
        {
          "name": "_detect_missing_data",
          "line_start": 359,
          "line_end": 394,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect missing data patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 206
        },
        {
          "name": "_detect_correlation_anomaly",
          "line_start": 396,
          "line_end": 425,
          "args": [
            "self",
            "metric_name",
            "value",
            "timestamp"
          ],
          "returns": null,
          "docstring": "Detect correlation breaks between related metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "_calculate_trend",
          "line_start": 427,
          "line_end": 446,
          "args": [
            "self",
            "values"
          ],
          "returns": null,
          "docstring": "Calculate trend using linear regression.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 164
        },
        {
          "name": "_calculate_correlation",
          "line_start": 448,
          "line_end": 473,
          "args": [
            "self",
            "metric1",
            "metric2"
          ],
          "returns": null,
          "docstring": "Calculate correlation between two metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 229
        },
        {
          "name": "_calculate_severity",
          "line_start": 475,
          "line_end": 483,
          "args": [
            "self",
            "value",
            "info_threshold",
            "warning_threshold",
            "critical_threshold"
          ],
          "returns": null,
          "docstring": "Calculate anomaly severity based on thresholds.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_handle_anomaly",
          "line_start": 485,
          "line_end": 504,
          "args": [
            "self",
            "anomaly"
          ],
          "returns": null,
          "docstring": "Handle detected anomaly.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "set_threshold",
          "line_start": 506,
          "line_end": 512,
          "args": [
            "self",
            "metric_name",
            "min_value",
            "max_value"
          ],
          "returns": null,
          "docstring": "Set static thresholds for a metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "add_correlation_pair",
          "line_start": 514,
          "line_end": 516,
          "args": [
            "self",
            "metric1",
            "metric2"
          ],
          "returns": null,
          "docstring": "Add a pair of metrics that should be correlated.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 25
        },
        {
          "name": "get_anomalies",
          "line_start": 518,
          "line_end": 558,
          "args": [
            "self",
            "metric_name",
            "anomaly_type",
            "severity",
            "hours"
          ],
          "returns": null,
          "docstring": "Get detected anomalies with filters.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "resolve_anomaly",
          "line_start": 560,
          "line_end": 575,
          "args": [
            "self",
            "anomaly_id"
          ],
          "returns": null,
          "docstring": "Mark an anomaly as resolved.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "get_statistics",
          "line_start": 577,
          "line_end": 588,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get anomaly detection statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "export_anomalies",
          "line_start": 590,
          "line_end": 613,
          "args": [
            "self",
            "format"
          ],
          "returns": null,
          "docstring": "Export anomalies in specified format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "shutdown",
          "line_start": 615,
          "line_end": 622,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown anomaly detector.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "numpy",
          "names": [
            "numpy"
          ],
          "alias": "np",
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'numpy', 'typing', 'dataclasses', 'time', 'json', 'logging', 'enum', 'threading', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 622,
      "complexity_score": 6304,
      "api_surface_area": 16,
      "docstring": "Analytics Anomaly Detection System\n===================================\n\nDetects anomalies in analytics data using statistical methods and machine learning.\nProvides real-time alerts for unusual patterns and outliers.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "{'sklearn', 'numpy'}",
      "documentation_coverage": 1.037037037037037,
      "estimated_migration_complexity": "high"
    },
    "dashboard\\dashboard_core\\analytics_backup.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_backup.py",
      "component_name": "analytics_backup",
      "analysis_timestamp": "2025-08-20 21:46:40.206245",
      "classes": [
        {
          "name": "AnalyticsBackupManager",
          "line_start": 24,
          "line_end": 449,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 29,
              "line_end": 56,
              "args": [
                "self",
                "backup_dir",
                "retention_days",
                "auto_backup_hours"
              ],
              "returns": null,
              "docstring": "Initialize the backup manager.\n\nArgs:\n    backup_dir: Directory to store backups\n    retention_days: Days to retain backups\n    auto_backup_hours: Hours between automatic backups",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "create_backup",
              "line_start": 58,
              "line_end": 126,
              "args": [
                "self",
                "data_store_path",
                "backup_name"
              ],
              "returns": null,
              "docstring": "Create a backup of the analytics database.\n\nArgs:\n    data_store_path: Path to the SQLite database\n    backup_name: Optional backup name\n    \nReturns:\n    Backup metadata",
              "is_async": false,
              "decorators": [],
              "complexity_score": 306
            },
            {
              "name": "restore_backup",
              "line_start": 128,
              "line_end": 186,
              "args": [
                "self",
                "backup_name",
                "restore_path"
              ],
              "returns": null,
              "docstring": "Restore a backup to the specified path.\n\nArgs:\n    backup_name: Name of the backup to restore\n    restore_path: Path to restore the database to\n    \nReturns:\n    True if restore successful, False otherwise",
              "is_async": false,
              "decorators": [],
              "complexity_score": 294
            },
            {
              "name": "list_backups",
              "line_start": 188,
              "line_end": 196,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "List all available backups.\n\nReturns:\n    List of backup metadata",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "cleanup_old_backups",
              "line_start": 198,
              "line_end": 221,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Remove backups older than retention period.\n\nReturns:\n    Number of backups removed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "get_backup_status",
              "line_start": 223,
              "line_end": 252,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get backup system status.\n\nReturns:\n    Backup system status information",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "start_auto_backup",
              "line_start": 254,
              "line_end": 284,
              "args": [
                "self",
                "data_store_path"
              ],
              "returns": null,
              "docstring": "Start automatic backup scheduling.\n\nArgs:\n    data_store_path: Path to the database to backup",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "stop_auto_backup",
              "line_start": 286,
              "line_end": 291,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop automatic backup scheduling.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "export_analytics_data",
              "line_start": 293,
              "line_end": 322,
              "args": [
                "self",
                "data_store_path",
                "export_format"
              ],
              "returns": null,
              "docstring": "Export analytics data to a portable format.\n\nArgs:\n    data_store_path: Path to the SQLite database\n    export_format: Export format ('json', 'csv')\n    \nReturns:\n    Path to exported file",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "_calculate_file_checksum",
              "line_start": 324,
              "line_end": 330,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Calculate SHA-256 checksum of a file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_verify_backup_integrity",
              "line_start": 332,
              "line_end": 339,
              "args": [
                "self",
                "backup_path",
                "expected_checksum"
              ],
              "returns": null,
              "docstring": "Verify backup file integrity using checksum.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_verify_database_integrity",
              "line_start": 341,
              "line_end": 351,
              "args": [
                "self",
                "db_path"
              ],
              "returns": null,
              "docstring": "Verify SQLite database integrity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_save_backup_metadata",
              "line_start": 353,
              "line_end": 360,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Save backup metadata to file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_load_backup_metadata",
              "line_start": 362,
              "line_end": 371,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load backup metadata from file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_remove_backup",
              "line_start": 373,
              "line_end": 393,
              "args": [
                "self",
                "backup_name"
              ],
              "returns": null,
              "docstring": "Remove a backup and its metadata.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            },
            {
              "name": "_calculate_next_backup_time",
              "line_start": 395,
              "line_end": 401,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate when the next auto backup will occur.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_export_to_json",
              "line_start": 403,
              "line_end": 422,
              "args": [
                "self",
                "conn",
                "export_path"
              ],
              "returns": null,
              "docstring": "Export database to JSON format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_export_to_csv",
              "line_start": 424,
              "line_end": 445,
              "args": [
                "self",
                "conn",
                "export_path"
              ],
              "returns": null,
              "docstring": "Export database to CSV format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 162
            },
            {
              "name": "__del__",
              "line_start": 447,
              "line_end": 449,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Cleanup on destruction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            }
          ],
          "docstring": "Manages backup and recovery operations for analytics data.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 29,
          "line_end": 56,
          "args": [
            "self",
            "backup_dir",
            "retention_days",
            "auto_backup_hours"
          ],
          "returns": null,
          "docstring": "Initialize the backup manager.\n\nArgs:\n    backup_dir: Directory to store backups\n    retention_days: Days to retain backups\n    auto_backup_hours: Hours between automatic backups",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "create_backup",
          "line_start": 58,
          "line_end": 126,
          "args": [
            "self",
            "data_store_path",
            "backup_name"
          ],
          "returns": null,
          "docstring": "Create a backup of the analytics database.\n\nArgs:\n    data_store_path: Path to the SQLite database\n    backup_name: Optional backup name\n    \nReturns:\n    Backup metadata",
          "is_async": false,
          "decorators": [],
          "complexity_score": 306
        },
        {
          "name": "restore_backup",
          "line_start": 128,
          "line_end": 186,
          "args": [
            "self",
            "backup_name",
            "restore_path"
          ],
          "returns": null,
          "docstring": "Restore a backup to the specified path.\n\nArgs:\n    backup_name: Name of the backup to restore\n    restore_path: Path to restore the database to\n    \nReturns:\n    True if restore successful, False otherwise",
          "is_async": false,
          "decorators": [],
          "complexity_score": 294
        },
        {
          "name": "list_backups",
          "line_start": 188,
          "line_end": 196,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "List all available backups.\n\nReturns:\n    List of backup metadata",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "cleanup_old_backups",
          "line_start": 198,
          "line_end": 221,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Remove backups older than retention period.\n\nReturns:\n    Number of backups removed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "get_backup_status",
          "line_start": 223,
          "line_end": 252,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get backup system status.\n\nReturns:\n    Backup system status information",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "start_auto_backup",
          "line_start": 254,
          "line_end": 284,
          "args": [
            "self",
            "data_store_path"
          ],
          "returns": null,
          "docstring": "Start automatic backup scheduling.\n\nArgs:\n    data_store_path: Path to the database to backup",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "stop_auto_backup",
          "line_start": 286,
          "line_end": 291,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop automatic backup scheduling.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "export_analytics_data",
          "line_start": 293,
          "line_end": 322,
          "args": [
            "self",
            "data_store_path",
            "export_format"
          ],
          "returns": null,
          "docstring": "Export analytics data to a portable format.\n\nArgs:\n    data_store_path: Path to the SQLite database\n    export_format: Export format ('json', 'csv')\n    \nReturns:\n    Path to exported file",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "_calculate_file_checksum",
          "line_start": 324,
          "line_end": 330,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Calculate SHA-256 checksum of a file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_verify_backup_integrity",
          "line_start": 332,
          "line_end": 339,
          "args": [
            "self",
            "backup_path",
            "expected_checksum"
          ],
          "returns": null,
          "docstring": "Verify backup file integrity using checksum.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_verify_database_integrity",
          "line_start": 341,
          "line_end": 351,
          "args": [
            "self",
            "db_path"
          ],
          "returns": null,
          "docstring": "Verify SQLite database integrity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_save_backup_metadata",
          "line_start": 353,
          "line_end": 360,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Save backup metadata to file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_load_backup_metadata",
          "line_start": 362,
          "line_end": 371,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load backup metadata from file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_remove_backup",
          "line_start": 373,
          "line_end": 393,
          "args": [
            "self",
            "backup_name"
          ],
          "returns": null,
          "docstring": "Remove a backup and its metadata.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "_calculate_next_backup_time",
          "line_start": 395,
          "line_end": 401,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate when the next auto backup will occur.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_export_to_json",
          "line_start": 403,
          "line_end": 422,
          "args": [
            "self",
            "conn",
            "export_path"
          ],
          "returns": null,
          "docstring": "Export database to JSON format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_export_to_csv",
          "line_start": 424,
          "line_end": 445,
          "args": [
            "self",
            "conn",
            "export_path"
          ],
          "returns": null,
          "docstring": "Export database to CSV format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 162
        },
        {
          "name": "__del__",
          "line_start": 447,
          "line_end": 449,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Cleanup on destruction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        },
        {
          "name": "auto_backup_task",
          "line_start": 263,
          "line_end": 277,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "shutil",
          "names": [
            "shutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "gzip",
          "names": [
            "gzip"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "csv",
          "names": [
            "csv"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 426
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'json', 'logging', 'gzip', 'datetime', 'threading', 'shutil', 'hashlib', 'csv', 'os'}",
      "internal_dependencies": "set()",
      "lines_of_code": 449,
      "complexity_score": 4269,
      "api_surface_area": 17,
      "docstring": "Analytics Backup and Recovery System\n====================================\n\nProvides backup, recovery, and data integrity features for analytics data.\nEnsures data durability and disaster recovery capabilities.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_batch_processor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_batch_processor.py",
      "component_name": "analytics_batch_processor",
      "analysis_timestamp": "2025-08-20 21:46:40.214719",
      "classes": [
        {
          "name": "BatchPriority",
          "line_start": 24,
          "line_end": 29,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Batch processing priority.",
          "decorators": []
        },
        {
          "name": "FlushReason",
          "line_start": 31,
          "line_end": 38,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Reasons for batch flush.",
          "decorators": []
        },
        {
          "name": "AnalyticsBatch",
          "line_start": 41,
          "line_end": 49,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a batch of analytics.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsBatchProcessor",
          "line_start": 51,
          "line_end": 492,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 56,
              "line_end": 139,
              "args": [
                "self",
                "batch_size",
                "batch_bytes",
                "flush_interval",
                "processor_func"
              ],
              "returns": null,
              "docstring": "Initialize batch processor.\n\nArgs:\n    batch_size: Maximum items per batch\n    batch_bytes: Maximum bytes per batch\n    flush_interval: Seconds between automatic flushes\n    processor_func: Function to process batches",
              "is_async": false,
              "decorators": [],
              "complexity_score": 293
            },
            {
              "name": "add_item",
              "line_start": 141,
              "line_end": 187,
              "args": [
                "self",
                "item",
                "priority"
              ],
              "returns": null,
              "docstring": "Add item to batch.\n\nArgs:\n    item: Analytics item to batch\n    priority: Processing priority\n    \nReturns:\n    True if added, False if duplicate",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "add_batch",
              "line_start": 189,
              "line_end": 198,
              "args": [
                "self",
                "items",
                "priority"
              ],
              "returns": null,
              "docstring": "Add multiple items as batch.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "flush_all",
              "line_start": 200,
              "line_end": 205,
              "args": [
                "self",
                "reason"
              ],
              "returns": null,
              "docstring": "Flush all pending batches.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "_should_flush",
              "line_start": 207,
              "line_end": 225,
              "args": [
                "self",
                "priority"
              ],
              "returns": null,
              "docstring": "Determine if batch should be flushed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_flush_batch",
              "line_start": 227,
              "line_end": 268,
              "args": [
                "self",
                "priority",
                "reason"
              ],
              "returns": null,
              "docstring": "Flush current batch to processing queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 231
            },
            {
              "name": "_flush_loop",
              "line_start": 270,
              "line_end": 283,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background flush loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_process_loop",
              "line_start": 285,
              "line_end": 303,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background batch processing loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_process_batch",
              "line_start": 305,
              "line_end": 332,
              "args": [
                "self",
                "batch"
              ],
              "returns": null,
              "docstring": "Process a batch of analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 126
            },
            {
              "name": "_calculate_hash",
              "line_start": 334,
              "line_end": 352,
              "args": [
                "self",
                "item"
              ],
              "returns": null,
              "docstring": "Calculate item hash for deduplication.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "_update_averages",
              "line_start": 354,
              "line_end": 371,
              "args": [
                "self",
                "batch"
              ],
              "returns": null,
              "docstring": "Update running averages.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "adjust_strategy",
              "line_start": 373,
              "line_end": 389,
              "args": [
                "self",
                "strategy"
              ],
              "returns": null,
              "docstring": "Adjust batching strategy.\n\nArgs:\n    strategy: One of 'aggressive', 'balanced', 'conservative'",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "auto_adjust_strategy",
              "line_start": 391,
              "line_end": 411,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Automatically adjust strategy based on performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "get_status",
              "line_start": 413,
              "line_end": 439,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get batch processor status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "set_processor",
              "line_start": 441,
              "line_end": 443,
              "args": [
                "self",
                "processor_func"
              ],
              "returns": null,
              "docstring": "Set batch processor function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "wait_for_completion",
              "line_start": 445,
              "line_end": 468,
              "args": [
                "self",
                "timeout"
              ],
              "returns": null,
              "docstring": "Wait for all batches to be processed.\n\nArgs:\n    timeout: Maximum wait time in seconds\n    \nReturns:\n    True if completed, False if timeout",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "shutdown",
              "line_start": 470,
              "line_end": 492,
              "args": [
                "self",
                "wait"
              ],
              "returns": null,
              "docstring": "Shutdown batch processor.\n\nArgs:\n    wait: Wait for pending batches to complete",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            }
          ],
          "docstring": "Intelligent batch processing for analytics delivery.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 56,
          "line_end": 139,
          "args": [
            "self",
            "batch_size",
            "batch_bytes",
            "flush_interval",
            "processor_func"
          ],
          "returns": null,
          "docstring": "Initialize batch processor.\n\nArgs:\n    batch_size: Maximum items per batch\n    batch_bytes: Maximum bytes per batch\n    flush_interval: Seconds between automatic flushes\n    processor_func: Function to process batches",
          "is_async": false,
          "decorators": [],
          "complexity_score": 293
        },
        {
          "name": "add_item",
          "line_start": 141,
          "line_end": 187,
          "args": [
            "self",
            "item",
            "priority"
          ],
          "returns": null,
          "docstring": "Add item to batch.\n\nArgs:\n    item: Analytics item to batch\n    priority: Processing priority\n    \nReturns:\n    True if added, False if duplicate",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "add_batch",
          "line_start": 189,
          "line_end": 198,
          "args": [
            "self",
            "items",
            "priority"
          ],
          "returns": null,
          "docstring": "Add multiple items as batch.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "flush_all",
          "line_start": 200,
          "line_end": 205,
          "args": [
            "self",
            "reason"
          ],
          "returns": null,
          "docstring": "Flush all pending batches.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "_should_flush",
          "line_start": 207,
          "line_end": 225,
          "args": [
            "self",
            "priority"
          ],
          "returns": null,
          "docstring": "Determine if batch should be flushed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_flush_batch",
          "line_start": 227,
          "line_end": 268,
          "args": [
            "self",
            "priority",
            "reason"
          ],
          "returns": null,
          "docstring": "Flush current batch to processing queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 231
        },
        {
          "name": "_flush_loop",
          "line_start": 270,
          "line_end": 283,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background flush loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_process_loop",
          "line_start": 285,
          "line_end": 303,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background batch processing loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_process_batch",
          "line_start": 305,
          "line_end": 332,
          "args": [
            "self",
            "batch"
          ],
          "returns": null,
          "docstring": "Process a batch of analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "_calculate_hash",
          "line_start": 334,
          "line_end": 352,
          "args": [
            "self",
            "item"
          ],
          "returns": null,
          "docstring": "Calculate item hash for deduplication.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "_update_averages",
          "line_start": 354,
          "line_end": 371,
          "args": [
            "self",
            "batch"
          ],
          "returns": null,
          "docstring": "Update running averages.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "adjust_strategy",
          "line_start": 373,
          "line_end": 389,
          "args": [
            "self",
            "strategy"
          ],
          "returns": null,
          "docstring": "Adjust batching strategy.\n\nArgs:\n    strategy: One of 'aggressive', 'balanced', 'conservative'",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "auto_adjust_strategy",
          "line_start": 391,
          "line_end": 411,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Automatically adjust strategy based on performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "get_status",
          "line_start": 413,
          "line_end": 439,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get batch processor status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "set_processor",
          "line_start": 441,
          "line_end": 443,
          "args": [
            "self",
            "processor_func"
          ],
          "returns": null,
          "docstring": "Set batch processor function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "wait_for_completion",
          "line_start": 445,
          "line_end": 468,
          "args": [
            "self",
            "timeout"
          ],
          "returns": null,
          "docstring": "Wait for all batches to be processed.\n\nArgs:\n    timeout: Maximum wait time in seconds\n    \nReturns:\n    True if completed, False if timeout",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "shutdown",
          "line_start": 470,
          "line_end": 492,
          "args": [
            "self",
            "wait"
          ],
          "returns": null,
          "docstring": "Shutdown batch processor.\n\nArgs:\n    wait: Wait for pending batches to complete",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'hashlib', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 495,
      "complexity_score": 3932,
      "api_surface_area": 18,
      "docstring": "Analytics Batch Processing System\n==================================\n\nIntelligent batching with automatic flush, size/time thresholds,\nand priority-based processing for optimal throughput.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0476190476190477,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_circuit_breaker.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_circuit_breaker.py",
      "component_name": "analytics_circuit_breaker",
      "analysis_timestamp": "2025-08-20 21:46:40.221716",
      "classes": [
        {
          "name": "CircuitState",
          "line_start": 23,
          "line_end": 26,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "FailureType",
          "line_start": 28,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "CircuitBreakerConfig",
          "line_start": 36,
          "line_end": 42,
          "base_classes": [],
          "methods": [],
          "docstring": "Configuration for a circuit breaker.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "FailureRecord",
          "line_start": 44,
          "line_end": 49,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 46,
              "line_end": 49,
              "args": [
                "self",
                "failure_type",
                "error",
                "timestamp"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            }
          ],
          "docstring": "Records failure information.",
          "decorators": []
        },
        {
          "name": "CircuitBreaker",
          "line_start": 51,
          "line_end": 331,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 56,
              "line_end": 96,
              "args": [
                "self",
                "name",
                "config"
              ],
              "returns": null,
              "docstring": "Initialize circuit breaker.\n\nArgs:\n    name: Component name\n    config: Circuit breaker configuration",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "__call__",
              "line_start": 98,
              "line_end": 103,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Decorator to wrap functions with circuit breaker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "execute",
              "line_start": 105,
              "line_end": 175,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Execute a function with circuit breaker protection.\n\nArgs:\n    func: Function to execute\n    *args: Function arguments\n    **kwargs: Function keyword arguments\n\nReturns:\n    Function result\n\nRaises:\n    CircuitBreakerOpenException: When circuit is open\n    Exception: Original function exceptions when circuit is closed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 265
            },
            {
              "name": "_execute_with_timeout",
              "line_start": 177,
              "line_end": 205,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Execute function with timeout.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "_record_success",
              "line_start": 207,
              "line_end": 218,
              "args": [
                "self",
                "call_start"
              ],
              "returns": null,
              "docstring": "Record successful call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_record_failure",
              "line_start": 220,
              "line_end": 243,
              "args": [
                "self",
                "failure_type",
                "error",
                "call_start"
              ],
              "returns": null,
              "docstring": "Record failed call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "_should_attempt_reset",
              "line_start": 245,
              "line_end": 251,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if should attempt to reset from open state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_transition_to_open",
              "line_start": 253,
              "line_end": 260,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Transition to open state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_transition_to_half_open",
              "line_start": 262,
              "line_end": 270,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Transition to half-open state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_transition_to_closed",
              "line_start": 272,
              "line_end": 281,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Transition to closed state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "_notify_state_change",
              "line_start": 283,
              "line_end": 289,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Notify state change callbacks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 37
            },
            {
              "name": "add_state_change_callback",
              "line_start": 291,
              "line_end": 293,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add state change callback.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "add_failure_callback",
              "line_start": 295,
              "line_end": 297,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add failure callback.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "reset",
              "line_start": 299,
              "line_end": 306,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Manually reset circuit breaker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "get_status",
              "line_start": 308,
              "line_end": 331,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get circuit breaker status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            }
          ],
          "docstring": "Circuit breaker implementation for individual components.",
          "decorators": []
        },
        {
          "name": "CircuitBreakerOpenException",
          "line_start": 333,
          "line_end": 335,
          "base_classes": [
            "Exception"
          ],
          "methods": [],
          "docstring": "Exception raised when circuit breaker is open.",
          "decorators": []
        },
        {
          "name": "AnalyticsCircuitBreakerManager",
          "line_start": 337,
          "line_end": 574,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 342,
              "line_end": 390,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize circuit breaker manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "create_circuit_breaker",
              "line_start": 392,
              "line_end": 423,
              "args": [
                "self",
                "name",
                "component_type",
                "config"
              ],
              "returns": null,
              "docstring": "Create a new circuit breaker.\n\nArgs:\n    name: Circuit breaker name\n    component_type: Type of component (data_source, processor, storage, external_service)\n    config: Custom configuration\n\nReturns:\n    Circuit breaker instance",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "get_circuit_breaker",
              "line_start": 425,
              "line_end": 427,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Get existing circuit breaker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            },
            {
              "name": "protect",
              "line_start": 429,
              "line_end": 442,
              "args": [
                "self",
                "name",
                "component_type",
                "config"
              ],
              "returns": null,
              "docstring": "Decorator to protect a function with circuit breaker.\n\nArgs:\n    name: Circuit breaker name\n    component_type: Component type\n    config: Custom configuration",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "start_monitoring",
              "line_start": 444,
              "line_end": 452,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start circuit breaker monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_monitoring",
              "line_start": 454,
              "line_end": 459,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop circuit breaker monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_monitoring_loop",
              "line_start": 461,
              "line_end": 474,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "_update_global_stats",
              "line_start": 476,
              "line_end": 492,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update global statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "_check_system_health",
              "line_start": 494,
              "line_end": 505,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check overall system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "_on_state_change",
              "line_start": 507,
              "line_end": 509,
              "args": [
                "self",
                "circuit_breaker",
                "new_state"
              ],
              "returns": null,
              "docstring": "Handle circuit breaker state changes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_on_failure",
              "line_start": 511,
              "line_end": 516,
              "args": [
                "self",
                "circuit_breaker",
                "failure"
              ],
              "returns": null,
              "docstring": "Handle circuit breaker failures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            },
            {
              "name": "get_system_status",
              "line_start": 518,
              "line_end": 532,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get overall system status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "_calculate_system_health",
              "line_start": 534,
              "line_end": 563,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "reset_all",
              "line_start": 565,
              "line_end": 569,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Reset all circuit breakers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "shutdown",
              "line_start": 571,
              "line_end": 574,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown circuit breaker manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Manages circuit breakers for all analytics components.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 46,
          "line_end": 49,
          "args": [
            "self",
            "failure_type",
            "error",
            "timestamp"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "__init__",
          "line_start": 56,
          "line_end": 96,
          "args": [
            "self",
            "name",
            "config"
          ],
          "returns": null,
          "docstring": "Initialize circuit breaker.\n\nArgs:\n    name: Component name\n    config: Circuit breaker configuration",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "__call__",
          "line_start": 98,
          "line_end": 103,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Decorator to wrap functions with circuit breaker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "execute",
          "line_start": 105,
          "line_end": 175,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Execute a function with circuit breaker protection.\n\nArgs:\n    func: Function to execute\n    *args: Function arguments\n    **kwargs: Function keyword arguments\n\nReturns:\n    Function result\n\nRaises:\n    CircuitBreakerOpenException: When circuit is open\n    Exception: Original function exceptions when circuit is closed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 265
        },
        {
          "name": "_execute_with_timeout",
          "line_start": 177,
          "line_end": 205,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Execute function with timeout.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "_record_success",
          "line_start": 207,
          "line_end": 218,
          "args": [
            "self",
            "call_start"
          ],
          "returns": null,
          "docstring": "Record successful call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_record_failure",
          "line_start": 220,
          "line_end": 243,
          "args": [
            "self",
            "failure_type",
            "error",
            "call_start"
          ],
          "returns": null,
          "docstring": "Record failed call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "_should_attempt_reset",
          "line_start": 245,
          "line_end": 251,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if should attempt to reset from open state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_transition_to_open",
          "line_start": 253,
          "line_end": 260,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Transition to open state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_transition_to_half_open",
          "line_start": 262,
          "line_end": 270,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Transition to half-open state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_transition_to_closed",
          "line_start": 272,
          "line_end": 281,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Transition to closed state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "_notify_state_change",
          "line_start": 283,
          "line_end": 289,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Notify state change callbacks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 37
        },
        {
          "name": "add_state_change_callback",
          "line_start": 291,
          "line_end": 293,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add state change callback.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "add_failure_callback",
          "line_start": 295,
          "line_end": 297,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add failure callback.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "reset",
          "line_start": 299,
          "line_end": 306,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Manually reset circuit breaker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "get_status",
          "line_start": 308,
          "line_end": 331,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get circuit breaker status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "__init__",
          "line_start": 342,
          "line_end": 390,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize circuit breaker manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "create_circuit_breaker",
          "line_start": 392,
          "line_end": 423,
          "args": [
            "self",
            "name",
            "component_type",
            "config"
          ],
          "returns": null,
          "docstring": "Create a new circuit breaker.\n\nArgs:\n    name: Circuit breaker name\n    component_type: Type of component (data_source, processor, storage, external_service)\n    config: Custom configuration\n\nReturns:\n    Circuit breaker instance",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "get_circuit_breaker",
          "line_start": 425,
          "line_end": 427,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Get existing circuit breaker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "protect",
          "line_start": 429,
          "line_end": 442,
          "args": [
            "self",
            "name",
            "component_type",
            "config"
          ],
          "returns": null,
          "docstring": "Decorator to protect a function with circuit breaker.\n\nArgs:\n    name: Circuit breaker name\n    component_type: Component type\n    config: Custom configuration",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "start_monitoring",
          "line_start": 444,
          "line_end": 452,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start circuit breaker monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_monitoring",
          "line_start": 454,
          "line_end": 459,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop circuit breaker monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_monitoring_loop",
          "line_start": 461,
          "line_end": 474,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "_update_global_stats",
          "line_start": 476,
          "line_end": 492,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update global statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "_check_system_health",
          "line_start": 494,
          "line_end": 505,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check overall system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "_on_state_change",
          "line_start": 507,
          "line_end": 509,
          "args": [
            "self",
            "circuit_breaker",
            "new_state"
          ],
          "returns": null,
          "docstring": "Handle circuit breaker state changes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_on_failure",
          "line_start": 511,
          "line_end": 516,
          "args": [
            "self",
            "circuit_breaker",
            "failure"
          ],
          "returns": null,
          "docstring": "Handle circuit breaker failures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "get_system_status",
          "line_start": 518,
          "line_end": 532,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get overall system status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "_calculate_system_health",
          "line_start": 534,
          "line_end": 563,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "reset_all",
          "line_start": 565,
          "line_end": 569,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Reset all circuit breakers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "shutdown",
          "line_start": 571,
          "line_end": 574,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown circuit breaker manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "wrapper",
          "line_start": 101,
          "line_end": 102,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [
            "<ast.Call object at 0x0000019D29B2B4F0>"
          ],
          "complexity_score": 26
        },
        {
          "name": "target",
          "line_start": 186,
          "line_end": 193,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "decorator",
          "line_start": 439,
          "line_end": 441,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "functools",
          "names": [
            "functools"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'functools', 'logging', 'enum', 'threading', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 577,
      "complexity_score": 4916,
      "api_surface_area": 29,
      "docstring": "Analytics Circuit Breaker System\n================================\n\nImplements circuit breaker pattern for analytics components to provide\nfault tolerance, graceful degradation, and automatic recovery.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.8780487804878049,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_compressor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_compressor.py",
      "component_name": "analytics_compressor",
      "analysis_timestamp": "2025-08-20 21:46:40.230238",
      "classes": [
        {
          "name": "CompressionAlgorithm",
          "line_start": 27,
          "line_end": 34,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Available compression algorithms.",
          "decorators": []
        },
        {
          "name": "CompressionResult",
          "line_start": 37,
          "line_end": 45,
          "base_classes": [],
          "methods": [],
          "docstring": "Result of compression operation.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsCompressor",
          "line_start": 47,
          "line_end": 468,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 52,
              "line_end": 108,
              "args": [
                "self",
                "threshold_bytes",
                "adaptive",
                "compression_level"
              ],
              "returns": null,
              "docstring": "Initialize compressor.\n\nArgs:\n    threshold_bytes: Minimum size for compression\n    adaptive: Enable adaptive algorithm selection\n    compression_level: Compression level (1-9)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "compress",
              "line_start": 110,
              "line_end": 218,
              "args": [
                "self",
                "data",
                "algorithm",
                "metadata"
              ],
              "returns": null,
              "docstring": "Compress analytics data.\n\nArgs:\n    data: Data to compress\n    algorithm: Optional algorithm override\n    metadata: Optional metadata\n    \nReturns:\n    Compression result",
              "is_async": false,
              "decorators": [],
              "complexity_score": 512
            },
            {
              "name": "decompress",
              "line_start": 220,
              "line_end": 266,
              "args": [
                "self",
                "compressed_result"
              ],
              "returns": null,
              "docstring": "Decompress data.\n\nArgs:\n    compressed_result: Compression result to decompress\n    \nReturns:\n    Original data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 210
            },
            {
              "name": "_compress_adaptive",
              "line_start": 268,
              "line_end": 319,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Adaptive compression with best algorithm selection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 245
            },
            {
              "name": "_select_adaptive_algorithm",
              "line_start": 321,
              "line_end": 338,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Select best algorithm based on data characteristics and history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_estimate_entropy",
              "line_start": 340,
              "line_end": 359,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Estimate data entropy (0-1, higher = more random).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "_select_from_history",
              "line_start": 361,
              "line_end": 386,
              "args": [
                "self",
                "data_size"
              ],
              "returns": null,
              "docstring": "Select algorithm based on historical performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "compress_stream",
              "line_start": 388,
              "line_end": 411,
              "args": [
                "self",
                "data_stream",
                "chunk_size"
              ],
              "returns": null,
              "docstring": "Compress data stream in chunks.\n\nArgs:\n    data_stream: Input stream\n    chunk_size: Chunk size in bytes\n    \nReturns:\n    List of compression results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "get_compression_stats",
              "line_start": 413,
              "line_end": 425,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get compression statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "encode_for_transport",
              "line_start": 427,
              "line_end": 446,
              "args": [
                "self",
                "compressed_result"
              ],
              "returns": null,
              "docstring": "Encode compressed data for network transport.\n\nArgs:\n    compressed_result: Compression result\n    \nReturns:\n    Base64 encoded string",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "decode_from_transport",
              "line_start": 448,
              "line_end": 468,
              "args": [
                "self",
                "encoded"
              ],
              "returns": null,
              "docstring": "Decode transported data.\n\nArgs:\n    encoded: Base64 encoded transport string\n    \nReturns:\n    Compression result",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            }
          ],
          "docstring": "Intelligent compression system for analytics data.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 52,
          "line_end": 108,
          "args": [
            "self",
            "threshold_bytes",
            "adaptive",
            "compression_level"
          ],
          "returns": null,
          "docstring": "Initialize compressor.\n\nArgs:\n    threshold_bytes: Minimum size for compression\n    adaptive: Enable adaptive algorithm selection\n    compression_level: Compression level (1-9)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "compress",
          "line_start": 110,
          "line_end": 218,
          "args": [
            "self",
            "data",
            "algorithm",
            "metadata"
          ],
          "returns": null,
          "docstring": "Compress analytics data.\n\nArgs:\n    data: Data to compress\n    algorithm: Optional algorithm override\n    metadata: Optional metadata\n    \nReturns:\n    Compression result",
          "is_async": false,
          "decorators": [],
          "complexity_score": 512
        },
        {
          "name": "decompress",
          "line_start": 220,
          "line_end": 266,
          "args": [
            "self",
            "compressed_result"
          ],
          "returns": null,
          "docstring": "Decompress data.\n\nArgs:\n    compressed_result: Compression result to decompress\n    \nReturns:\n    Original data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 210
        },
        {
          "name": "_compress_adaptive",
          "line_start": 268,
          "line_end": 319,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Adaptive compression with best algorithm selection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 245
        },
        {
          "name": "_select_adaptive_algorithm",
          "line_start": 321,
          "line_end": 338,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Select best algorithm based on data characteristics and history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_estimate_entropy",
          "line_start": 340,
          "line_end": 359,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Estimate data entropy (0-1, higher = more random).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "_select_from_history",
          "line_start": 361,
          "line_end": 386,
          "args": [
            "self",
            "data_size"
          ],
          "returns": null,
          "docstring": "Select algorithm based on historical performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "compress_stream",
          "line_start": 388,
          "line_end": 411,
          "args": [
            "self",
            "data_stream",
            "chunk_size"
          ],
          "returns": null,
          "docstring": "Compress data stream in chunks.\n\nArgs:\n    data_stream: Input stream\n    chunk_size: Chunk size in bytes\n    \nReturns:\n    List of compression results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "get_compression_stats",
          "line_start": 413,
          "line_end": 425,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get compression statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "encode_for_transport",
          "line_start": 427,
          "line_end": 446,
          "args": [
            "self",
            "compressed_result"
          ],
          "returns": null,
          "docstring": "Encode compressed data for network transport.\n\nArgs:\n    compressed_result: Compression result\n    \nReturns:\n    Base64 encoded string",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "decode_from_transport",
          "line_start": 448,
          "line_end": 468,
          "args": [
            "self",
            "encoded"
          ],
          "returns": null,
          "docstring": "Decode transported data.\n\nArgs:\n    encoded: Base64 encoded transport string\n    \nReturns:\n    Compression result",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "gzip",
          "names": [
            "gzip"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "bz2",
          "names": [
            "bz2"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "lzma",
          "names": [
            "lzma"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "base64",
          "names": [
            "base64"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "Tuple",
            "List"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "io",
          "names": [
            "io"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        }
      ],
      "external_dependencies": "{'io', 'base64', 'typing', 'dataclasses', 'time', 'zlib', 'json', 'logging', 'gzip', 'bz2', 'enum', 'pickle', 'lzma'}",
      "internal_dependencies": "set()",
      "lines_of_code": 471,
      "complexity_score": 3638,
      "api_surface_area": 12,
      "docstring": "Analytics Data Compression System\n==================================\n\nIntelligent compression for large analytics payloads with multiple\nalgorithms, adaptive selection, and streaming support.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0714285714285714,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_connectivity_monitor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_connectivity_monitor.py",
      "component_name": "analytics_connectivity_monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.238315",
      "classes": [
        {
          "name": "ConnectionStatus",
          "line_start": 29,
          "line_end": 34,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "DataFlowStatus",
          "line_start": 36,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "MonitoringLevel",
          "line_start": 43,
          "line_end": 47,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "ConnectionMetrics",
          "line_start": 50,
          "line_end": 58,
          "base_classes": [],
          "methods": [],
          "docstring": "Connection quality metrics.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DataFlowMetrics",
          "line_start": 61,
          "line_end": 69,
          "base_classes": [],
          "methods": [],
          "docstring": "Data flow quality metrics.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DashboardEndpoint",
          "line_start": 72,
          "line_end": 81,
          "base_classes": [],
          "methods": [],
          "docstring": "Dashboard endpoint configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ConnectivityEvent",
          "line_start": 84,
          "line_end": 93,
          "base_classes": [],
          "methods": [],
          "docstring": "Connectivity event record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsConnectivityMonitor",
          "line_start": 95,
          "line_end": 818,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 100,
              "line_end": 164,
              "args": [
                "self",
                "monitoring_level",
                "check_interval",
                "data_flow_timeout"
              ],
              "returns": null,
              "docstring": "Initialize analytics connectivity monitor.\n\nArgs:\n    monitoring_level: Level of monitoring detail\n    check_interval: Interval between connectivity checks\n    data_flow_timeout: Timeout for data flow verification",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "start_monitoring",
              "line_start": 166,
              "line_end": 184,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start connectivity and data flow monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "stop_monitoring",
              "line_start": 186,
              "line_end": 202,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop connectivity monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "register_dashboard_endpoint",
              "line_start": 204,
              "line_end": 231,
              "args": [
                "self",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Register a dashboard endpoint for monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "verify_data_delivery",
              "line_start": 233,
              "line_end": 268,
              "args": [
                "self",
                "data",
                "endpoint_id",
                "expected_arrival_time"
              ],
              "returns": null,
              "docstring": "Verify that data reaches the dashboard endpoint.\n\nArgs:\n    data: Data to track\n    endpoint_id: Target endpoint\n    expected_arrival_time: When data should arrive\n\nReturns:\n    Tracking ID for verification",
              "is_async": false,
              "decorators": [],
              "complexity_score": 143
            },
            {
              "name": "confirm_data_arrival",
              "line_start": 270,
              "line_end": 326,
              "args": [
                "self",
                "tracking_id",
                "received_data"
              ],
              "returns": null,
              "docstring": "Confirm that data arrived at dashboard endpoint.\n\nArgs:\n    tracking_id: Data tracking ID\n    received_data: Data received at endpoint\n\nReturns:\n    True if data matches and is confirmed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 328
            },
            {
              "name": "check_endpoint_connectivity",
              "line_start": 328,
              "line_end": 379,
              "args": [
                "self",
                "endpoint_id"
              ],
              "returns": null,
              "docstring": "Check connectivity to a specific endpoint.\n\nArgs:\n    endpoint_id: Endpoint to check\n\nReturns:\n    Tuple of (connection_status, metrics)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 269
            },
            {
              "name": "get_connectivity_summary",
              "line_start": 381,
              "line_end": 442,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive connectivity monitoring summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 362
            },
            {
              "name": "add_alert_handler",
              "line_start": 444,
              "line_end": 447,
              "args": [
                "self",
                "handler"
              ],
              "returns": null,
              "docstring": "Add alert handler for connectivity events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "_connectivity_monitoring_loop",
              "line_start": 449,
              "line_end": 462,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background connectivity monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_data_flow_monitoring_loop",
              "line_start": 464,
              "line_end": 502,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background data flow monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_websocket_monitoring_loop",
              "line_start": 504,
              "line_end": 515,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background WebSocket monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_check_http_endpoint",
              "line_start": 517,
              "line_end": 545,
              "args": [
                "self",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Check HTTP endpoint connectivity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 236
            },
            {
              "name": "_check_websocket_endpoint",
              "line_start": 547,
              "line_end": 566,
              "args": [
                "self",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Check WebSocket endpoint connectivity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_check_sse_endpoint",
              "line_start": 568,
              "line_end": 598,
              "args": [
                "self",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Check Server-Sent Events endpoint connectivity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "_estimate_bandwidth",
              "line_start": 600,
              "line_end": 619,
              "args": [
                "self",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Estimate bandwidth to endpoint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_maintain_websocket_connection",
              "line_start": 621,
              "line_end": 665,
              "args": [
                "self",
                "endpoint_id",
                "endpoint"
              ],
              "returns": null,
              "docstring": "Maintain persistent WebSocket connection for real-time monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 205
            },
            {
              "name": "_record_connectivity_event",
              "line_start": 667,
              "line_end": 693,
              "args": [
                "self",
                "endpoint_id",
                "status",
                "metrics"
              ],
              "returns": null,
              "docstring": "Record connectivity event if status changed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "_check_alert_conditions",
              "line_start": 695,
              "line_end": 732,
              "args": [
                "self",
                "endpoint_id",
                "status",
                "metrics"
              ],
              "returns": null,
              "docstring": "Check if alert conditions are met.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 219
            },
            {
              "name": "_trigger_alerts",
              "line_start": 734,
              "line_end": 740,
              "args": [
                "self",
                "event"
              ],
              "returns": null,
              "docstring": "Trigger alert handlers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_update_data_flow_metrics",
              "line_start": 742,
              "line_end": 767,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update data flow metrics based on recent confirmations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_generate_tracking_id",
              "line_start": 769,
              "line_end": 774,
              "args": [
                "self",
                "data",
                "endpoint_id"
              ],
              "returns": null,
              "docstring": "Generate unique tracking ID for data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "_calculate_data_checksum",
              "line_start": 776,
              "line_end": 782,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate checksum for data integrity verification.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "get_recent_events",
              "line_start": 784,
              "line_end": 800,
              "args": [
                "self",
                "hours",
                "endpoint_id",
                "severity"
              ],
              "returns": null,
              "docstring": "Get recent connectivity events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "get_endpoint_performance_history",
              "line_start": 802,
              "line_end": 813,
              "args": [
                "self",
                "endpoint_id",
                "hours"
              ],
              "returns": null,
              "docstring": "Get performance history for an endpoint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 118
            },
            {
              "name": "shutdown",
              "line_start": 815,
              "line_end": 818,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown connectivity monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Comprehensive dashboard connectivity and data flow monitoring system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 100,
          "line_end": 164,
          "args": [
            "self",
            "monitoring_level",
            "check_interval",
            "data_flow_timeout"
          ],
          "returns": null,
          "docstring": "Initialize analytics connectivity monitor.\n\nArgs:\n    monitoring_level: Level of monitoring detail\n    check_interval: Interval between connectivity checks\n    data_flow_timeout: Timeout for data flow verification",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "start_monitoring",
          "line_start": 166,
          "line_end": 184,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start connectivity and data flow monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "stop_monitoring",
          "line_start": 186,
          "line_end": 202,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop connectivity monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "register_dashboard_endpoint",
          "line_start": 204,
          "line_end": 231,
          "args": [
            "self",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Register a dashboard endpoint for monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "verify_data_delivery",
          "line_start": 233,
          "line_end": 268,
          "args": [
            "self",
            "data",
            "endpoint_id",
            "expected_arrival_time"
          ],
          "returns": null,
          "docstring": "Verify that data reaches the dashboard endpoint.\n\nArgs:\n    data: Data to track\n    endpoint_id: Target endpoint\n    expected_arrival_time: When data should arrive\n\nReturns:\n    Tracking ID for verification",
          "is_async": false,
          "decorators": [],
          "complexity_score": 143
        },
        {
          "name": "confirm_data_arrival",
          "line_start": 270,
          "line_end": 326,
          "args": [
            "self",
            "tracking_id",
            "received_data"
          ],
          "returns": null,
          "docstring": "Confirm that data arrived at dashboard endpoint.\n\nArgs:\n    tracking_id: Data tracking ID\n    received_data: Data received at endpoint\n\nReturns:\n    True if data matches and is confirmed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 328
        },
        {
          "name": "check_endpoint_connectivity",
          "line_start": 328,
          "line_end": 379,
          "args": [
            "self",
            "endpoint_id"
          ],
          "returns": null,
          "docstring": "Check connectivity to a specific endpoint.\n\nArgs:\n    endpoint_id: Endpoint to check\n\nReturns:\n    Tuple of (connection_status, metrics)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 269
        },
        {
          "name": "get_connectivity_summary",
          "line_start": 381,
          "line_end": 442,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive connectivity monitoring summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 362
        },
        {
          "name": "add_alert_handler",
          "line_start": 444,
          "line_end": 447,
          "args": [
            "self",
            "handler"
          ],
          "returns": null,
          "docstring": "Add alert handler for connectivity events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "_connectivity_monitoring_loop",
          "line_start": 449,
          "line_end": 462,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background connectivity monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_data_flow_monitoring_loop",
          "line_start": 464,
          "line_end": 502,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background data flow monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_websocket_monitoring_loop",
          "line_start": 504,
          "line_end": 515,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background WebSocket monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_check_http_endpoint",
          "line_start": 517,
          "line_end": 545,
          "args": [
            "self",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Check HTTP endpoint connectivity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 236
        },
        {
          "name": "_check_websocket_endpoint",
          "line_start": 547,
          "line_end": 566,
          "args": [
            "self",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Check WebSocket endpoint connectivity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_check_sse_endpoint",
          "line_start": 568,
          "line_end": 598,
          "args": [
            "self",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Check Server-Sent Events endpoint connectivity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "_estimate_bandwidth",
          "line_start": 600,
          "line_end": 619,
          "args": [
            "self",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Estimate bandwidth to endpoint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_maintain_websocket_connection",
          "line_start": 621,
          "line_end": 665,
          "args": [
            "self",
            "endpoint_id",
            "endpoint"
          ],
          "returns": null,
          "docstring": "Maintain persistent WebSocket connection for real-time monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        },
        {
          "name": "_record_connectivity_event",
          "line_start": 667,
          "line_end": 693,
          "args": [
            "self",
            "endpoint_id",
            "status",
            "metrics"
          ],
          "returns": null,
          "docstring": "Record connectivity event if status changed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "_check_alert_conditions",
          "line_start": 695,
          "line_end": 732,
          "args": [
            "self",
            "endpoint_id",
            "status",
            "metrics"
          ],
          "returns": null,
          "docstring": "Check if alert conditions are met.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 219
        },
        {
          "name": "_trigger_alerts",
          "line_start": 734,
          "line_end": 740,
          "args": [
            "self",
            "event"
          ],
          "returns": null,
          "docstring": "Trigger alert handlers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_update_data_flow_metrics",
          "line_start": 742,
          "line_end": 767,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update data flow metrics based on recent confirmations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_generate_tracking_id",
          "line_start": 769,
          "line_end": 774,
          "args": [
            "self",
            "data",
            "endpoint_id"
          ],
          "returns": null,
          "docstring": "Generate unique tracking ID for data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "_calculate_data_checksum",
          "line_start": 776,
          "line_end": 782,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate checksum for data integrity verification.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "get_recent_events",
          "line_start": 784,
          "line_end": 800,
          "args": [
            "self",
            "hours",
            "endpoint_id",
            "severity"
          ],
          "returns": null,
          "docstring": "Get recent connectivity events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "get_endpoint_performance_history",
          "line_start": 802,
          "line_end": 813,
          "args": [
            "self",
            "endpoint_id",
            "hours"
          ],
          "returns": null,
          "docstring": "Get performance history for an endpoint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 118
        },
        {
          "name": "shutdown",
          "line_start": 815,
          "line_end": 818,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown connectivity monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "on_message",
          "line_start": 635,
          "line_end": 642,
          "args": [
            "ws",
            "message"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "on_error",
          "line_start": 644,
          "line_end": 645,
          "args": [
            "ws",
            "error"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "on_close",
          "line_start": 647,
          "line_end": 650,
          "args": [
            "ws",
            "close_status_code",
            "close_msg"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "requests",
          "names": [
            "requests"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "websocket",
          "names": [
            "websocket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "socket",
          "names": [
            "socket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        }
      ],
      "external_dependencies": "{'requests', 'psutil', 'dataclasses', 'time', 'typing', 'websocket', 'json', 'logging', 'socket', 'enum', 'threading', 'hashlib', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 818,
      "complexity_score": 7803,
      "api_surface_area": 25,
      "docstring": "Analytics Dashboard Connectivity and Data Flow Monitor\n=====================================================\n\nComprehensive monitoring system for dashboard connectivity, data flow,\nreal-time updates, and end-to-end data delivery verification.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.8648648648648649,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_correlator.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_correlator.py",
      "component_name": "analytics_correlator",
      "analysis_timestamp": "2025-08-20 21:46:40.249393",
      "classes": [
        {
          "name": "AnalyticsCorrelator",
          "line_start": 21,
          "line_end": 440,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 26,
              "line_end": 46,
              "args": [
                "self",
                "history_window",
                "correlation_threshold"
              ],
              "returns": null,
              "docstring": "Initialize the analytics correlator.\n\nArgs:\n    history_window: Number of data points to keep for correlation analysis\n    correlation_threshold: Minimum correlation coefficient to flag relationships",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "add_metrics_sample",
              "line_start": 48,
              "line_end": 63,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Add a metrics sample for correlation analysis.\n\nArgs:\n    metrics: Dictionary of metric values with timestamp",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "calculate_correlations",
              "line_start": 65,
              "line_end": 89,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate correlations between all metric pairs.\n\nReturns:\n    Dictionary of correlation coefficients between metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "detect_anomalies",
              "line_start": 91,
              "line_end": 151,
              "args": [
                "self",
                "current_metrics"
              ],
              "returns": null,
              "docstring": "Detect anomalies in current metrics based on historical patterns.\n\nArgs:\n    current_metrics: Current metric values\n    \nReturns:\n    List of detected anomalies with details",
              "is_async": false,
              "decorators": [],
              "complexity_score": 286
            },
            {
              "name": "identify_metric_relationships",
              "line_start": 153,
              "line_end": 179,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify significant relationships between metrics.\n\nReturns:\n    List of metric relationships with correlation strength",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "predict_metric_values",
              "line_start": 181,
              "line_end": 236,
              "args": [
                "self",
                "metric_name",
                "horizon_minutes"
              ],
              "returns": null,
              "docstring": "Predict future metric values based on historical patterns.\n\nArgs:\n    metric_name: Name of the metric to predict\n    horizon_minutes: Prediction horizon in minutes\n    \nReturns:\n    Prediction with confidence intervals",
              "is_async": false,
              "decorators": [],
              "complexity_score": 391
            },
            {
              "name": "get_correlation_insights",
              "line_start": 238,
              "line_end": 271,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive correlation insights.\n\nReturns:\n    Insights about metric correlations and patterns",
              "is_async": false,
              "decorators": [],
              "complexity_score": 238
            },
            {
              "name": "_calculate_pearson_correlation",
              "line_start": 273,
              "line_end": 313,
              "args": [
                "self",
                "metric1",
                "metric2"
              ],
              "returns": null,
              "docstring": "Calculate Pearson correlation coefficient between two metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 337
            },
            {
              "name": "_detect_pattern_anomalies",
              "line_start": 315,
              "line_end": 347,
              "args": [
                "self",
                "metric_name",
                "current_value"
              ],
              "returns": null,
              "docstring": "Detect pattern-based anomalies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "_detect_correlation_anomalies",
              "line_start": 349,
              "line_end": 408,
              "args": [
                "self",
                "current_metrics"
              ],
              "returns": null,
              "docstring": "Detect anomalies based on correlation violations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 397
            },
            {
              "name": "_calculate_anomaly_severity",
              "line_start": 410,
              "line_end": 419,
              "args": [
                "self",
                "z_score"
              ],
              "returns": null,
              "docstring": "Calculate anomaly severity based on z-score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_classify_correlation_strength",
              "line_start": 421,
              "line_end": 433,
              "args": [
                "self",
                "correlation"
              ],
              "returns": null,
              "docstring": "Classify correlation strength.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "clear_history",
              "line_start": 435,
              "line_end": 440,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clear correlation history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            }
          ],
          "docstring": "Correlates analytics data and detects anomalies across multiple metrics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 26,
          "line_end": 46,
          "args": [
            "self",
            "history_window",
            "correlation_threshold"
          ],
          "returns": null,
          "docstring": "Initialize the analytics correlator.\n\nArgs:\n    history_window: Number of data points to keep for correlation analysis\n    correlation_threshold: Minimum correlation coefficient to flag relationships",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "add_metrics_sample",
          "line_start": 48,
          "line_end": 63,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Add a metrics sample for correlation analysis.\n\nArgs:\n    metrics: Dictionary of metric values with timestamp",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "calculate_correlations",
          "line_start": 65,
          "line_end": 89,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate correlations between all metric pairs.\n\nReturns:\n    Dictionary of correlation coefficients between metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "detect_anomalies",
          "line_start": 91,
          "line_end": 151,
          "args": [
            "self",
            "current_metrics"
          ],
          "returns": null,
          "docstring": "Detect anomalies in current metrics based on historical patterns.\n\nArgs:\n    current_metrics: Current metric values\n    \nReturns:\n    List of detected anomalies with details",
          "is_async": false,
          "decorators": [],
          "complexity_score": 286
        },
        {
          "name": "identify_metric_relationships",
          "line_start": 153,
          "line_end": 179,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify significant relationships between metrics.\n\nReturns:\n    List of metric relationships with correlation strength",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "predict_metric_values",
          "line_start": 181,
          "line_end": 236,
          "args": [
            "self",
            "metric_name",
            "horizon_minutes"
          ],
          "returns": null,
          "docstring": "Predict future metric values based on historical patterns.\n\nArgs:\n    metric_name: Name of the metric to predict\n    horizon_minutes: Prediction horizon in minutes\n    \nReturns:\n    Prediction with confidence intervals",
          "is_async": false,
          "decorators": [],
          "complexity_score": 391
        },
        {
          "name": "get_correlation_insights",
          "line_start": 238,
          "line_end": 271,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive correlation insights.\n\nReturns:\n    Insights about metric correlations and patterns",
          "is_async": false,
          "decorators": [],
          "complexity_score": 238
        },
        {
          "name": "_calculate_pearson_correlation",
          "line_start": 273,
          "line_end": 313,
          "args": [
            "self",
            "metric1",
            "metric2"
          ],
          "returns": null,
          "docstring": "Calculate Pearson correlation coefficient between two metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 337
        },
        {
          "name": "_detect_pattern_anomalies",
          "line_start": 315,
          "line_end": 347,
          "args": [
            "self",
            "metric_name",
            "current_value"
          ],
          "returns": null,
          "docstring": "Detect pattern-based anomalies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "_detect_correlation_anomalies",
          "line_start": 349,
          "line_end": 408,
          "args": [
            "self",
            "current_metrics"
          ],
          "returns": null,
          "docstring": "Detect anomalies based on correlation violations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 397
        },
        {
          "name": "_calculate_anomaly_severity",
          "line_start": 410,
          "line_end": 419,
          "args": [
            "self",
            "z_score"
          ],
          "returns": null,
          "docstring": "Calculate anomaly severity based on z-score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_classify_correlation_strength",
          "line_start": 421,
          "line_end": 433,
          "args": [
            "self",
            "correlation"
          ],
          "returns": null,
          "docstring": "Classify correlation strength.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "clear_history",
          "line_start": 435,
          "line_end": 440,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clear correlation history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "numpy",
          "names": [
            "numpy"
          ],
          "alias": "np",
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        }
      ],
      "external_dependencies": "{'numpy', 'typing', 'logging', 'math', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 440,
      "complexity_score": 4838,
      "api_surface_area": 14,
      "docstring": "Analytics Correlator\n====================\n\nAdvanced correlation and anomaly detection for analytics data.\nIdentifies patterns, relationships, and anomalies across different metrics.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": true,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "{'numpy'}",
      "documentation_coverage": 1.0714285714285714,
      "estimated_migration_complexity": "high"
    },
    "dashboard\\dashboard_core\\analytics_data_sanitizer.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_data_sanitizer.py",
      "component_name": "analytics_data_sanitizer",
      "analysis_timestamp": "2025-08-20 21:46:40.258905",
      "classes": [
        {
          "name": "ValidationLevel",
          "line_start": 26,
          "line_end": 29,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "DataType",
          "line_start": 31,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "ValidationRule",
          "line_start": 44,
          "line_end": 58,
          "base_classes": [],
          "methods": [],
          "docstring": "Data validation rule definition.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ValidationIssue",
          "line_start": 61,
          "line_end": 70,
          "base_classes": [],
          "methods": [],
          "docstring": "Data validation issue found during processing.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDataSanitizer",
          "line_start": 72,
          "line_end": 893,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 77,
              "line_end": 121,
              "args": [
                "self",
                "validation_level",
                "max_issues_per_batch"
              ],
              "returns": null,
              "docstring": "Initialize analytics data sanitizer.\n\nArgs:\n    validation_level: Level of validation strictness\n    max_issues_per_batch: Maximum validation issues to collect per batch",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "start_background_processing",
              "line_start": 123,
              "line_end": 132,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start background data sanitization processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_background_processing",
              "line_start": 134,
              "line_end": 141,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop background processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "add_validation_rule",
              "line_start": 143,
              "line_end": 146,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add a custom validation rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "add_field_sanitizer",
              "line_start": 148,
              "line_end": 151,
              "args": [
                "self",
                "field_path",
                "sanitizer"
              ],
              "returns": null,
              "docstring": "Add a field-specific sanitizer function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "sanitize_and_validate",
              "line_start": 153,
              "line_end": 223,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Sanitize and validate analytics data.\n\nArgs:\n    data: Raw analytics data\n    source: Data source identifier\n\nReturns:\n    Tuple of (sanitized_data, validation_issues)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 348
            },
            {
              "name": "queue_for_sanitization",
              "line_start": 225,
              "line_end": 231,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Queue data for background sanitization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "get_sanitization_summary",
              "line_start": 233,
              "line_end": 265,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get sanitization system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 208
            },
            {
              "name": "_setup_default_validation_rules",
              "line_start": 267,
              "line_end": 335,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default validation rules for common analytics fields.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 185
            },
            {
              "name": "_setup_default_sanitizers",
              "line_start": 337,
              "line_end": 383,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default field sanitizers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 217
            },
            {
              "name": "_setup_threat_patterns",
              "line_start": 385,
              "line_end": 417,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup threat detection patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "_detect_and_remove_threats",
              "line_start": 419,
              "line_end": 474,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Detect and remove potential security threats.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 356
            },
            {
              "name": "_validate_and_convert_types",
              "line_start": 476,
              "line_end": 507,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Validate and convert data types.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "_apply_field_sanitizers",
              "line_start": 509,
              "line_end": 559,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Apply field-specific sanitizers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 315
            },
            {
              "name": "_validate_business_rules",
              "line_start": 561,
              "line_end": 581,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Validate business logic rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_check_data_consistency",
              "line_start": 583,
              "line_end": 628,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Check data consistency across fields.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 247
            },
            {
              "name": "_final_data_cleanup",
              "line_start": 630,
              "line_end": 651,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Perform final data cleanup operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 144
            },
            {
              "name": "_convert_and_validate_type",
              "line_start": 653,
              "line_end": 793,
              "args": [
                "self",
                "value",
                "rule",
                "source"
              ],
              "returns": null,
              "docstring": "Convert and validate a value according to its rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 851
            },
            {
              "name": "_get_field_value",
              "line_start": 795,
              "line_end": 817,
              "args": [
                "self",
                "data",
                "field_path"
              ],
              "returns": null,
              "docstring": "Get field value using dot notation path.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "_set_field_value",
              "line_start": 819,
              "line_end": 840,
              "args": [
                "self",
                "data",
                "field_path",
                "value"
              ],
              "returns": null,
              "docstring": "Set field value using dot notation path.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_field_matches_pattern",
              "line_start": 842,
              "line_end": 852,
              "args": [
                "self",
                "field_path",
                "pattern"
              ],
              "returns": null,
              "docstring": "Check if field path matches a pattern (supports wildcards).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_background_processing_loop",
              "line_start": 854,
              "line_end": 875,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background processing loop for queued data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "get_validation_issues",
              "line_start": 877,
              "line_end": 888,
              "args": [
                "self",
                "severity",
                "limit"
              ],
              "returns": null,
              "docstring": "Get recent validation issues, optionally filtered by severity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "shutdown",
              "line_start": 890,
              "line_end": 893,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown sanitization engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced data sanitization and validation engine for analytics data.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 77,
          "line_end": 121,
          "args": [
            "self",
            "validation_level",
            "max_issues_per_batch"
          ],
          "returns": null,
          "docstring": "Initialize analytics data sanitizer.\n\nArgs:\n    validation_level: Level of validation strictness\n    max_issues_per_batch: Maximum validation issues to collect per batch",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "start_background_processing",
          "line_start": 123,
          "line_end": 132,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start background data sanitization processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_background_processing",
          "line_start": 134,
          "line_end": 141,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop background processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "add_validation_rule",
          "line_start": 143,
          "line_end": 146,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add a custom validation rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "add_field_sanitizer",
          "line_start": 148,
          "line_end": 151,
          "args": [
            "self",
            "field_path",
            "sanitizer"
          ],
          "returns": null,
          "docstring": "Add a field-specific sanitizer function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "sanitize_and_validate",
          "line_start": 153,
          "line_end": 223,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Sanitize and validate analytics data.\n\nArgs:\n    data: Raw analytics data\n    source: Data source identifier\n\nReturns:\n    Tuple of (sanitized_data, validation_issues)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 348
        },
        {
          "name": "queue_for_sanitization",
          "line_start": 225,
          "line_end": 231,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Queue data for background sanitization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "get_sanitization_summary",
          "line_start": 233,
          "line_end": 265,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get sanitization system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 208
        },
        {
          "name": "_setup_default_validation_rules",
          "line_start": 267,
          "line_end": 335,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default validation rules for common analytics fields.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 185
        },
        {
          "name": "_setup_default_sanitizers",
          "line_start": 337,
          "line_end": 383,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default field sanitizers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 217
        },
        {
          "name": "_setup_threat_patterns",
          "line_start": 385,
          "line_end": 417,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup threat detection patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "_detect_and_remove_threats",
          "line_start": 419,
          "line_end": 474,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Detect and remove potential security threats.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 356
        },
        {
          "name": "_validate_and_convert_types",
          "line_start": 476,
          "line_end": 507,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Validate and convert data types.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "_apply_field_sanitizers",
          "line_start": 509,
          "line_end": 559,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Apply field-specific sanitizers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 315
        },
        {
          "name": "_validate_business_rules",
          "line_start": 561,
          "line_end": 581,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Validate business logic rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_check_data_consistency",
          "line_start": 583,
          "line_end": 628,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Check data consistency across fields.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 247
        },
        {
          "name": "_final_data_cleanup",
          "line_start": 630,
          "line_end": 651,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Perform final data cleanup operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "_convert_and_validate_type",
          "line_start": 653,
          "line_end": 793,
          "args": [
            "self",
            "value",
            "rule",
            "source"
          ],
          "returns": null,
          "docstring": "Convert and validate a value according to its rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 851
        },
        {
          "name": "_get_field_value",
          "line_start": 795,
          "line_end": 817,
          "args": [
            "self",
            "data",
            "field_path"
          ],
          "returns": null,
          "docstring": "Get field value using dot notation path.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "_set_field_value",
          "line_start": 819,
          "line_end": 840,
          "args": [
            "self",
            "data",
            "field_path",
            "value"
          ],
          "returns": null,
          "docstring": "Set field value using dot notation path.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_field_matches_pattern",
          "line_start": 842,
          "line_end": 852,
          "args": [
            "self",
            "field_path",
            "pattern"
          ],
          "returns": null,
          "docstring": "Check if field path matches a pattern (supports wildcards).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_background_processing_loop",
          "line_start": 854,
          "line_end": 875,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background processing loop for queued data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "get_validation_issues",
          "line_start": 877,
          "line_end": 888,
          "args": [
            "self",
            "severity",
            "limit"
          ],
          "returns": null,
          "docstring": "Get recent validation issues, optionally filtered by severity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "shutdown",
          "line_start": 890,
          "line_end": 893,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown sanitization engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "html_sanitizer",
          "line_start": 341,
          "line_end": 344,
          "args": [
            "value"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "sql_sanitizer",
          "line_start": 347,
          "line_end": 358,
          "args": [
            "value"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "numeric_sanitizer",
          "line_start": 361,
          "line_end": 370,
          "args": [
            "value"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "string_length_sanitizer",
          "line_start": 373,
          "line_end": 376,
          "args": [
            "value",
            "max_length"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "check_value",
          "line_start": 423,
          "line_end": 450,
          "args": [
            "value",
            "field_path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "sanitize_dict",
          "line_start": 453,
          "line_end": 471,
          "args": [
            "d",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "apply_sanitizers",
          "line_start": 513,
          "line_end": 556,
          "args": [
            "obj",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 276
        },
        {
          "name": "cleanup_dict",
          "line_start": 633,
          "line_end": 649,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "html",
          "names": [
            "html"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Union",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "copy",
          "names": [
            "copy"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 170
        }
      ],
      "external_dependencies": "{'typing', 'dataclasses', 'time', 'copy', 'json', 'logging', 'enum', 're', 'html', 'threading', 'hashlib', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 893,
      "complexity_score": 9115,
      "api_surface_area": 26,
      "docstring": "Analytics Data Sanitization and Validation Engine\n================================================\n\nAdvanced real-time data sanitization, validation, and cleaning system\nfor analytics data to ensure only clean, validated data reaches the dashboard.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.7567567567567568,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_dead_letter_queue.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_dead_letter_queue.py",
      "component_name": "analytics_dead_letter_queue",
      "analysis_timestamp": "2025-08-20 21:46:40.270904",
      "classes": [
        {
          "name": "FailureReason",
          "line_start": 26,
          "line_end": 35,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Reasons for dead letter queue entry.",
          "decorators": []
        },
        {
          "name": "DeadLetterEntry",
          "line_start": 38,
          "line_end": 50,
          "base_classes": [],
          "methods": [],
          "docstring": "Entry in dead letter queue.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDeadLetterQueue",
          "line_start": 52,
          "line_end": 664,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 57,
              "line_end": 113,
              "args": [
                "self",
                "db_path",
                "max_entries",
                "retention_days"
              ],
              "returns": null,
              "docstring": "Initialize dead letter queue.\n\nArgs:\n    db_path: Database path for persistence\n    max_entries: Maximum entries to retain\n    retention_days: Days to retain entries",
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "add_entry",
              "line_start": 115,
              "line_end": 194,
              "args": [
                "self",
                "analytics_data",
                "failure_reason",
                "error_details",
                "retry_count",
                "endpoint",
                "metadata"
              ],
              "returns": null,
              "docstring": "Add failed analytics to dead letter queue.\n\nArgs:\n    analytics_data: Failed analytics data\n    failure_reason: Reason for failure\n    error_details: Error details\n    retry_count: Number of retries attempted\n    endpoint: Target endpoint\n    metadata: Additional metadata\n    \nReturns:\n    Entry ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 301
            },
            {
              "name": "get_entry",
              "line_start": 196,
              "line_end": 202,
              "args": [
                "self",
                "entry_id"
              ],
              "returns": null,
              "docstring": "Get entry by ID.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "reprocess_entry",
              "line_start": 204,
              "line_end": 248,
              "args": [
                "self",
                "entry_id",
                "processor_func"
              ],
              "returns": null,
              "docstring": "Attempt to reprocess an entry.\n\nArgs:\n    entry_id: Entry ID to reprocess\n    processor_func: Function to process the data\n    \nReturns:\n    Success status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "bulk_reprocess",
              "line_start": 250,
              "line_end": 291,
              "args": [
                "self",
                "processor_func",
                "filter_func",
                "max_entries"
              ],
              "returns": null,
              "docstring": "Bulk reprocess entries.\n\nArgs:\n    processor_func: Processing function\n    filter_func: Optional filter for entries\n    max_entries: Maximum entries to process\n    \nReturns:\n    Processing results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_can_retry",
              "line_start": 293,
              "line_end": 309,
              "args": [
                "self",
                "reason",
                "retry_count"
              ],
              "returns": null,
              "docstring": "Determine if entry can be retried.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_attempt_recovery",
              "line_start": 311,
              "line_end": 324,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Attempt automatic recovery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_recover_validation",
              "line_start": 326,
              "line_end": 344,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Recover from validation errors.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_recover_serialization",
              "line_start": 346,
              "line_end": 352,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Recover from serialization errors.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_recover_timeout",
              "line_start": 354,
              "line_end": 364,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Recover from timeout errors.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_recover_corrupt",
              "line_start": 366,
              "line_end": 374,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Recover from corrupt data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "_calculate_checksum",
              "line_start": 376,
              "line_end": 386,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate data checksum.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_setup_database",
              "line_start": 388,
              "line_end": 424,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup SQLite database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_persist_entry",
              "line_start": 426,
              "line_end": 460,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Persist entry to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "_load_from_database",
              "line_start": 462,
              "line_end": 507,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load entries from database on startup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 240
            },
            {
              "name": "_remove_from_database",
              "line_start": 509,
              "line_end": 519,
              "args": [
                "self",
                "entry_id"
              ],
              "returns": null,
              "docstring": "Remove entry from database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_monitoring_loop",
              "line_start": 521,
              "line_end": 538,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring and cleanup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_cleanup_old_entries",
              "line_start": 540,
              "line_end": 554,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Remove old entries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_analyze_failure_patterns",
              "line_start": 556,
              "line_end": 570,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze failure patterns for insights.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_batch_recovery_attempt",
              "line_start": 572,
              "line_end": 588,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Attempt batch recovery of retryable entries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "get_statistics",
              "line_start": 590,
              "line_end": 619,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get dead letter queue statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 201
            },
            {
              "name": "export_entries",
              "line_start": 621,
              "line_end": 652,
              "args": [
                "self",
                "format",
                "filter_func"
              ],
              "returns": null,
              "docstring": "Export dead letter entries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "shutdown",
              "line_start": 654,
              "line_end": 664,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown dead letter queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            }
          ],
          "docstring": "Manages failed analytics that cannot be delivered.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 57,
          "line_end": 113,
          "args": [
            "self",
            "db_path",
            "max_entries",
            "retention_days"
          ],
          "returns": null,
          "docstring": "Initialize dead letter queue.\n\nArgs:\n    db_path: Database path for persistence\n    max_entries: Maximum entries to retain\n    retention_days: Days to retain entries",
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "add_entry",
          "line_start": 115,
          "line_end": 194,
          "args": [
            "self",
            "analytics_data",
            "failure_reason",
            "error_details",
            "retry_count",
            "endpoint",
            "metadata"
          ],
          "returns": null,
          "docstring": "Add failed analytics to dead letter queue.\n\nArgs:\n    analytics_data: Failed analytics data\n    failure_reason: Reason for failure\n    error_details: Error details\n    retry_count: Number of retries attempted\n    endpoint: Target endpoint\n    metadata: Additional metadata\n    \nReturns:\n    Entry ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 301
        },
        {
          "name": "get_entry",
          "line_start": 196,
          "line_end": 202,
          "args": [
            "self",
            "entry_id"
          ],
          "returns": null,
          "docstring": "Get entry by ID.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "reprocess_entry",
          "line_start": 204,
          "line_end": 248,
          "args": [
            "self",
            "entry_id",
            "processor_func"
          ],
          "returns": null,
          "docstring": "Attempt to reprocess an entry.\n\nArgs:\n    entry_id: Entry ID to reprocess\n    processor_func: Function to process the data\n    \nReturns:\n    Success status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "bulk_reprocess",
          "line_start": 250,
          "line_end": 291,
          "args": [
            "self",
            "processor_func",
            "filter_func",
            "max_entries"
          ],
          "returns": null,
          "docstring": "Bulk reprocess entries.\n\nArgs:\n    processor_func: Processing function\n    filter_func: Optional filter for entries\n    max_entries: Maximum entries to process\n    \nReturns:\n    Processing results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_can_retry",
          "line_start": 293,
          "line_end": 309,
          "args": [
            "self",
            "reason",
            "retry_count"
          ],
          "returns": null,
          "docstring": "Determine if entry can be retried.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_attempt_recovery",
          "line_start": 311,
          "line_end": 324,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Attempt automatic recovery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_recover_validation",
          "line_start": 326,
          "line_end": 344,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Recover from validation errors.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_recover_serialization",
          "line_start": 346,
          "line_end": 352,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Recover from serialization errors.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_recover_timeout",
          "line_start": 354,
          "line_end": 364,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Recover from timeout errors.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_recover_corrupt",
          "line_start": 366,
          "line_end": 374,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Recover from corrupt data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "_calculate_checksum",
          "line_start": 376,
          "line_end": 386,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate data checksum.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_setup_database",
          "line_start": 388,
          "line_end": 424,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup SQLite database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_persist_entry",
          "line_start": 426,
          "line_end": 460,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Persist entry to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "_load_from_database",
          "line_start": 462,
          "line_end": 507,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load entries from database on startup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 240
        },
        {
          "name": "_remove_from_database",
          "line_start": 509,
          "line_end": 519,
          "args": [
            "self",
            "entry_id"
          ],
          "returns": null,
          "docstring": "Remove entry from database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_monitoring_loop",
          "line_start": 521,
          "line_end": 538,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring and cleanup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_cleanup_old_entries",
          "line_start": 540,
          "line_end": 554,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Remove old entries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_analyze_failure_patterns",
          "line_start": 556,
          "line_end": 570,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze failure patterns for insights.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_batch_recovery_attempt",
          "line_start": 572,
          "line_end": 588,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Attempt batch recovery of retryable entries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "get_statistics",
          "line_start": 590,
          "line_end": 619,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get dead letter queue statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 201
        },
        {
          "name": "export_entries",
          "line_start": 621,
          "line_end": 652,
          "args": [
            "self",
            "format",
            "filter_func"
          ],
          "returns": null,
          "docstring": "Export dead letter entries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "shutdown",
          "line_start": 654,
          "line_end": 664,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown dead letter queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'dataclasses', 'json', 'logging', 'pickle', 'enum', 'threading', 'hashlib', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 667,
      "complexity_score": 5186,
      "api_surface_area": 14,
      "docstring": "Analytics Dead Letter Queue System\n===================================\n\nHandles permanently failed analytics with retry exhaustion, providing\nrecovery mechanisms and analysis of failure patterns.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0384615384615385,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_deduplication.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_deduplication.py",
      "component_name": "analytics_deduplication",
      "analysis_timestamp": "2025-08-20 21:46:40.282906",
      "classes": [
        {
          "name": "DuplicateType",
          "line_start": 27,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of duplicate detection.",
          "decorators": []
        },
        {
          "name": "DeduplicationAction",
          "line_start": 35,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Actions to take on duplicates.",
          "decorators": []
        },
        {
          "name": "DuplicateStatus",
          "line_start": 43,
          "line_end": 49,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Status of duplicate processing.",
          "decorators": []
        },
        {
          "name": "DuplicateRecord",
          "line_start": 52,
          "line_end": 78,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 65,
              "line_end": 78,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            }
          ],
          "docstring": "Record of detected duplicates.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsFingerprint",
          "line_start": 81,
          "line_end": 103,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 92,
              "line_end": 103,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            }
          ],
          "docstring": "Fingerprint for analytics identification.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDeduplication",
          "line_start": 105,
          "line_end": 1287,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 110,
              "line_end": 193,
              "args": [
                "self",
                "aggregator",
                "db_path",
                "similarity_threshold",
                "processing_interval"
              ],
              "returns": null,
              "docstring": "Initialize deduplication system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    db_path: Database path for deduplication records\n    similarity_threshold: Minimum similarity for duplicate detection\n    processing_interval: Seconds between deduplication cycles",
              "is_async": false,
              "decorators": [],
              "complexity_score": 377
            },
            {
              "name": "_init_database",
              "line_start": 195,
              "line_end": 251,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize deduplication database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "process_analytics",
              "line_start": 253,
              "line_end": 298,
              "args": [
                "self",
                "analytics_id",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Process analytics for duplication detection.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    analytics_data: Analytics data to process\n    \nReturns:\n    True if analytics is unique/should be kept, False if duplicate",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_generate_fingerprint",
              "line_start": 300,
              "line_end": 348,
              "args": [
                "self",
                "analytics_id",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Generate comprehensive fingerprint for analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "_normalize_data",
              "line_start": 350,
              "line_end": 389,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize data for consistent processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 276
            },
            {
              "name": "_extract_structure",
              "line_start": 391,
              "line_end": 411,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Extract data structure without values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_extract_semantic_elements",
              "line_start": 413,
              "line_end": 447,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Extract key semantic elements for comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 204
            },
            {
              "name": "_get_temporal_bucket",
              "line_start": 449,
              "line_end": 491,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Get temporal bucket for time-based grouping.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_extract_key_fields",
              "line_start": 493,
              "line_end": 513,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Extract key fields for detailed comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_detect_duplicates",
              "line_start": 515,
              "line_end": 571,
              "args": [
                "self",
                "fingerprint"
              ],
              "returns": null,
              "docstring": "Detect duplicates using multiple strategies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 385
            },
            {
              "name": "_calculate_semantic_similarity",
              "line_start": 573,
              "line_end": 594,
              "args": [
                "self",
                "fp1",
                "fp2"
              ],
              "returns": null,
              "docstring": "Calculate semantic similarity between fingerprints.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_calculate_content_similarity",
              "line_start": 596,
              "line_end": 630,
              "args": [
                "self",
                "fp1",
                "fp2"
              ],
              "returns": null,
              "docstring": "Calculate content similarity between fingerprints.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 201
            },
            {
              "name": "_calculate_temporal_similarity",
              "line_start": 632,
              "line_end": 652,
              "args": [
                "self",
                "fp1",
                "fp2"
              ],
              "returns": null,
              "docstring": "Calculate temporal similarity between fingerprints.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_store_fingerprint",
              "line_start": 654,
              "line_end": 674,
              "args": [
                "self",
                "fingerprint"
              ],
              "returns": null,
              "docstring": "Store fingerprint for future comparisons.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "_create_duplicate_record",
              "line_start": 676,
              "line_end": 693,
              "args": [
                "self",
                "original_id",
                "duplicate_id",
                "duplicate_type",
                "similarity"
              ],
              "returns": null,
              "docstring": "Create duplicate record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_update_duplicate_stats",
              "line_start": 695,
              "line_end": 706,
              "args": [
                "self",
                "duplicate_type"
              ],
              "returns": null,
              "docstring": "Update duplicate detection statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_deduplication_loop",
              "line_start": 708,
              "line_end": 731,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background deduplication processing loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "_process_duplicate",
              "line_start": 733,
              "line_end": 763,
              "args": [
                "self",
                "duplicate_id"
              ],
              "returns": null,
              "docstring": "Process a detected duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_handle_exact_duplicate",
              "line_start": 765,
              "line_end": 781,
              "args": [
                "self",
                "record",
                "action"
              ],
              "returns": null,
              "docstring": "Handle exact duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "_handle_near_duplicate",
              "line_start": 783,
              "line_end": 810,
              "args": [
                "self",
                "record",
                "action"
              ],
              "returns": null,
              "docstring": "Handle near duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 158
            },
            {
              "name": "_handle_content_duplicate",
              "line_start": 812,
              "line_end": 844,
              "args": [
                "self",
                "record",
                "action"
              ],
              "returns": null,
              "docstring": "Handle content duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 189
            },
            {
              "name": "_handle_semantic_duplicate",
              "line_start": 846,
              "line_end": 859,
              "args": [
                "self",
                "record",
                "action"
              ],
              "returns": null,
              "docstring": "Handle semantic duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_handle_temporal_duplicate",
              "line_start": 861,
              "line_end": 881,
              "args": [
                "self",
                "record",
                "action"
              ],
              "returns": null,
              "docstring": "Handle temporal duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 106
            },
            {
              "name": "_merge_analytics_data",
              "line_start": 883,
              "line_end": 919,
              "args": [
                "self",
                "original_id",
                "duplicate_id"
              ],
              "returns": null,
              "docstring": "Merge analytics data from two sources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 195
            },
            {
              "name": "_intelligent_merge",
              "line_start": 921,
              "line_end": 990,
              "args": [
                "self",
                "original_id",
                "duplicate_id"
              ],
              "returns": null,
              "docstring": "Intelligent merge with conflict resolution.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 413
            },
            {
              "name": "_temporal_merge",
              "line_start": 992,
              "line_end": 1035,
              "args": [
                "self",
                "original_id",
                "duplicate_id"
              ],
              "returns": null,
              "docstring": "Temporal merge for time-based duplicates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 251
            },
            {
              "name": "_save_fingerprint",
              "line_start": 1037,
              "line_end": 1058,
              "args": [
                "self",
                "fingerprint"
              ],
              "returns": null,
              "docstring": "Save fingerprint to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_save_duplicate_record",
              "line_start": 1060,
              "line_end": 1084,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "docstring": "Save duplicate record to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_save_merged_analytics",
              "line_start": 1086,
              "line_end": 1106,
              "args": [
                "self",
                "merge_id",
                "source_ids",
                "merged_data"
              ],
              "returns": null,
              "docstring": "Save merged analytics to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "_cleanup_loop",
              "line_start": 1108,
              "line_end": 1119,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background cleanup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_cleanup_old_fingerprints",
              "line_start": 1121,
              "line_end": 1154,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old fingerprints to manage memory.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 269
            },
            {
              "name": "_cleanup_old_duplicates",
              "line_start": 1156,
              "line_end": 1183,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old duplicate records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "get_deduplication_statistics",
              "line_start": 1185,
              "line_end": 1224,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive deduplication statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 219
            },
            {
              "name": "force_deduplication",
              "line_start": 1226,
              "line_end": 1244,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Force deduplication check for specific analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "get_duplicate_details",
              "line_start": 1246,
              "line_end": 1276,
              "args": [
                "self",
                "duplicate_id"
              ],
              "returns": null,
              "docstring": "Get detailed information about a duplicate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "shutdown",
              "line_start": 1278,
              "line_end": 1287,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown deduplication system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            }
          ],
          "docstring": "Advanced analytics deduplication system with intelligent detection.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 65,
          "line_end": 78,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "to_dict",
          "line_start": 92,
          "line_end": 103,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "__init__",
          "line_start": 110,
          "line_end": 193,
          "args": [
            "self",
            "aggregator",
            "db_path",
            "similarity_threshold",
            "processing_interval"
          ],
          "returns": null,
          "docstring": "Initialize deduplication system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    db_path: Database path for deduplication records\n    similarity_threshold: Minimum similarity for duplicate detection\n    processing_interval: Seconds between deduplication cycles",
          "is_async": false,
          "decorators": [],
          "complexity_score": 377
        },
        {
          "name": "_init_database",
          "line_start": 195,
          "line_end": 251,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize deduplication database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "process_analytics",
          "line_start": 253,
          "line_end": 298,
          "args": [
            "self",
            "analytics_id",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Process analytics for duplication detection.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    analytics_data: Analytics data to process\n    \nReturns:\n    True if analytics is unique/should be kept, False if duplicate",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_generate_fingerprint",
          "line_start": 300,
          "line_end": 348,
          "args": [
            "self",
            "analytics_id",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Generate comprehensive fingerprint for analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "_normalize_data",
          "line_start": 350,
          "line_end": 389,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize data for consistent processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 276
        },
        {
          "name": "_extract_structure",
          "line_start": 391,
          "line_end": 411,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Extract data structure without values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_extract_semantic_elements",
          "line_start": 413,
          "line_end": 447,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Extract key semantic elements for comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 204
        },
        {
          "name": "_get_temporal_bucket",
          "line_start": 449,
          "line_end": 491,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Get temporal bucket for time-based grouping.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_extract_key_fields",
          "line_start": 493,
          "line_end": 513,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Extract key fields for detailed comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_detect_duplicates",
          "line_start": 515,
          "line_end": 571,
          "args": [
            "self",
            "fingerprint"
          ],
          "returns": null,
          "docstring": "Detect duplicates using multiple strategies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 385
        },
        {
          "name": "_calculate_semantic_similarity",
          "line_start": 573,
          "line_end": 594,
          "args": [
            "self",
            "fp1",
            "fp2"
          ],
          "returns": null,
          "docstring": "Calculate semantic similarity between fingerprints.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_calculate_content_similarity",
          "line_start": 596,
          "line_end": 630,
          "args": [
            "self",
            "fp1",
            "fp2"
          ],
          "returns": null,
          "docstring": "Calculate content similarity between fingerprints.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 201
        },
        {
          "name": "_calculate_temporal_similarity",
          "line_start": 632,
          "line_end": 652,
          "args": [
            "self",
            "fp1",
            "fp2"
          ],
          "returns": null,
          "docstring": "Calculate temporal similarity between fingerprints.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_store_fingerprint",
          "line_start": 654,
          "line_end": 674,
          "args": [
            "self",
            "fingerprint"
          ],
          "returns": null,
          "docstring": "Store fingerprint for future comparisons.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "_create_duplicate_record",
          "line_start": 676,
          "line_end": 693,
          "args": [
            "self",
            "original_id",
            "duplicate_id",
            "duplicate_type",
            "similarity"
          ],
          "returns": null,
          "docstring": "Create duplicate record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_update_duplicate_stats",
          "line_start": 695,
          "line_end": 706,
          "args": [
            "self",
            "duplicate_type"
          ],
          "returns": null,
          "docstring": "Update duplicate detection statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_deduplication_loop",
          "line_start": 708,
          "line_end": 731,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background deduplication processing loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "_process_duplicate",
          "line_start": 733,
          "line_end": 763,
          "args": [
            "self",
            "duplicate_id"
          ],
          "returns": null,
          "docstring": "Process a detected duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_handle_exact_duplicate",
          "line_start": 765,
          "line_end": 781,
          "args": [
            "self",
            "record",
            "action"
          ],
          "returns": null,
          "docstring": "Handle exact duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "_handle_near_duplicate",
          "line_start": 783,
          "line_end": 810,
          "args": [
            "self",
            "record",
            "action"
          ],
          "returns": null,
          "docstring": "Handle near duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "_handle_content_duplicate",
          "line_start": 812,
          "line_end": 844,
          "args": [
            "self",
            "record",
            "action"
          ],
          "returns": null,
          "docstring": "Handle content duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 189
        },
        {
          "name": "_handle_semantic_duplicate",
          "line_start": 846,
          "line_end": 859,
          "args": [
            "self",
            "record",
            "action"
          ],
          "returns": null,
          "docstring": "Handle semantic duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_handle_temporal_duplicate",
          "line_start": 861,
          "line_end": 881,
          "args": [
            "self",
            "record",
            "action"
          ],
          "returns": null,
          "docstring": "Handle temporal duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 106
        },
        {
          "name": "_merge_analytics_data",
          "line_start": 883,
          "line_end": 919,
          "args": [
            "self",
            "original_id",
            "duplicate_id"
          ],
          "returns": null,
          "docstring": "Merge analytics data from two sources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 195
        },
        {
          "name": "_intelligent_merge",
          "line_start": 921,
          "line_end": 990,
          "args": [
            "self",
            "original_id",
            "duplicate_id"
          ],
          "returns": null,
          "docstring": "Intelligent merge with conflict resolution.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 413
        },
        {
          "name": "_temporal_merge",
          "line_start": 992,
          "line_end": 1035,
          "args": [
            "self",
            "original_id",
            "duplicate_id"
          ],
          "returns": null,
          "docstring": "Temporal merge for time-based duplicates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 251
        },
        {
          "name": "_save_fingerprint",
          "line_start": 1037,
          "line_end": 1058,
          "args": [
            "self",
            "fingerprint"
          ],
          "returns": null,
          "docstring": "Save fingerprint to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_save_duplicate_record",
          "line_start": 1060,
          "line_end": 1084,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "docstring": "Save duplicate record to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_save_merged_analytics",
          "line_start": 1086,
          "line_end": 1106,
          "args": [
            "self",
            "merge_id",
            "source_ids",
            "merged_data"
          ],
          "returns": null,
          "docstring": "Save merged analytics to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "_cleanup_loop",
          "line_start": 1108,
          "line_end": 1119,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background cleanup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_cleanup_old_fingerprints",
          "line_start": 1121,
          "line_end": 1154,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old fingerprints to manage memory.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 269
        },
        {
          "name": "_cleanup_old_duplicates",
          "line_start": 1156,
          "line_end": 1183,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old duplicate records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "get_deduplication_statistics",
          "line_start": 1185,
          "line_end": 1224,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive deduplication statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 219
        },
        {
          "name": "force_deduplication",
          "line_start": 1226,
          "line_end": 1244,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Force deduplication check for specific analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "get_duplicate_details",
          "line_start": 1246,
          "line_end": 1276,
          "args": [
            "self",
            "duplicate_id"
          ],
          "returns": null,
          "docstring": "Get detailed information about a duplicate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "shutdown",
          "line_start": 1278,
          "line_end": 1287,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown deduplication system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "difflib",
          "names": [
            "difflib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        }
      ],
      "external_dependencies": "{'sqlite3', 'hashlib', 'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'difflib', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1290,
      "complexity_score": 12404,
      "api_surface_area": 14,
      "docstring": "Analytics Duplication Detection and Deduplication System\n======================================================\n\nAdvanced deduplication system with intelligent duplicate detection,\ncontent-based hashing, and smart merging strategies.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0227272727272727,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_deduplication_engine.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_deduplication_engine.py",
      "component_name": "analytics_deduplication_engine",
      "analysis_timestamp": "2025-08-20 21:46:40.300905",
      "classes": [
        {
          "name": "ConflictResolutionStrategy",
          "line_start": 25,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "DuplicateType",
          "line_start": 32,
          "line_end": 37,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "DeduplicationRule",
          "line_start": 40,
          "line_end": 50,
          "base_classes": [],
          "methods": [],
          "docstring": "Rules for detecting and handling duplicates.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DuplicateRecord",
          "line_start": 53,
          "line_end": 64,
          "base_classes": [],
          "methods": [],
          "docstring": "Information about detected duplicates.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DataFingerprint",
          "line_start": 67,
          "line_end": 75,
          "base_classes": [],
          "methods": [],
          "docstring": "Unique fingerprint for data records.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDeduplicationEngine",
          "line_start": 77,
          "line_end": 775,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 82,
              "line_end": 135,
              "args": [
                "self",
                "max_history_size",
                "cleanup_interval",
                "default_strategy"
              ],
              "returns": null,
              "docstring": "Initialize analytics deduplication engine.\n\nArgs:\n    max_history_size: Maximum number of records to keep in history\n    cleanup_interval: Interval for cleanup operations (seconds)\n    default_strategy: Default conflict resolution strategy",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "start_engine",
              "line_start": 137,
              "line_end": 146,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start deduplication engine background processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_engine",
              "line_start": 148,
              "line_end": 155,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop deduplication engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "add_deduplication_rule",
              "line_start": 157,
              "line_end": 160,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add a custom deduplication rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "process_record",
              "line_start": 162,
              "line_end": 202,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Process a record for deduplication.\n\nArgs:\n    data: Analytics data record\n    source: Data source identifier\n\nReturns:\n    Tuple of (processed_data, is_duplicate, duplicate_info)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 208
            },
            {
              "name": "batch_deduplicate",
              "line_start": 204,
              "line_end": 251,
              "args": [
                "self",
                "records",
                "source"
              ],
              "returns": null,
              "docstring": "Deduplicate a batch of records.\n\nArgs:\n    records: List of analytics records\n    source: Batch source identifier\n\nReturns:\n    Deduplicated list of records",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "get_duplicate_summary",
              "line_start": 253,
              "line_end": 299,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get deduplication system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 258
            },
            {
              "name": "_generate_fingerprint",
              "line_start": 301,
              "line_end": 325,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Generate comprehensive fingerprint for a data record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "_detect_duplicates",
              "line_start": 327,
              "line_end": 385,
              "args": [
                "self",
                "data",
                "fingerprint"
              ],
              "returns": null,
              "docstring": "Detect duplicates for a given record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 338
            },
            {
              "name": "_resolve_conflicts",
              "line_start": 387,
              "line_end": 459,
              "args": [
                "self",
                "data",
                "duplicates_info",
                "source"
              ],
              "returns": null,
              "docstring": "Resolve conflicts between duplicate records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 410
            },
            {
              "name": "_setup_default_rules",
              "line_start": 461,
              "line_end": 506,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default deduplication rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "_setup_default_resolvers",
              "line_start": 508,
              "line_end": 538,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default conflict resolvers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 231
            },
            {
              "name": "_extract_structure",
              "line_start": 540,
              "line_end": 550,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Extract structural representation of data (keys only).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_extract_semantic_fields",
              "line_start": 552,
              "line_end": 572,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Extract key semantic fields for comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "_count_fields",
              "line_start": 574,
              "line_end": 589,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Count total number of fields in nested data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_calculate_structural_similarity",
              "line_start": 591,
              "line_end": 596,
              "args": [
                "self",
                "data",
                "existing_fingerprint"
              ],
              "returns": null,
              "docstring": "Calculate structural similarity between records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_calculate_semantic_similarity",
              "line_start": 598,
              "line_end": 602,
              "args": [
                "self",
                "data",
                "existing_fingerprint"
              ],
              "returns": null,
              "docstring": "Calculate semantic similarity between records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_check_rule_matches",
              "line_start": 604,
              "line_end": 622,
              "args": [
                "self",
                "data",
                "fingerprint",
                "rule"
              ],
              "returns": null,
              "docstring": "Check for matches based on custom rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_records_match_rule",
              "line_start": 624,
              "line_end": 629,
              "args": [
                "self",
                "data",
                "existing_fingerprint",
                "rule"
              ],
              "returns": null,
              "docstring": "Check if records match a specific rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 26
            },
            {
              "name": "_calculate_rule_similarity",
              "line_start": 631,
              "line_end": 635,
              "args": [
                "self",
                "data",
                "existing_fingerprint",
                "rule"
              ],
              "returns": null,
              "docstring": "Calculate similarity based on rule criteria.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 26
            },
            {
              "name": "_records_are_duplicates",
              "line_start": 637,
              "line_end": 640,
              "args": [
                "self",
                "record1",
                "record2",
                "hash1",
                "hash2"
              ],
              "returns": null,
              "docstring": "Check if two records are duplicates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "_store_record_fingerprint",
              "line_start": 642,
              "line_end": 649,
              "args": [
                "self",
                "fingerprint",
                "data"
              ],
              "returns": null,
              "docstring": "Store record fingerprint for future comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_get_record_from_fingerprint",
              "line_start": 651,
              "line_end": 656,
              "args": [
                "self",
                "fingerprint"
              ],
              "returns": null,
              "docstring": "Get original record from fingerprint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_merge_records",
              "line_start": 658,
              "line_end": 685,
              "args": [
                "self",
                "current_data",
                "existing_data",
                "rule"
              ],
              "returns": null,
              "docstring": "Merge two records based on rule specifications.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 272
            },
            {
              "name": "_identify_conflict_fields",
              "line_start": 687,
              "line_end": 700,
              "args": [
                "self",
                "current_data",
                "duplicate_info"
              ],
              "returns": null,
              "docstring": "Identify fields that have conflicts between records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_calculate_avg_processing_time",
              "line_start": 702,
              "line_end": 705,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate average processing time per record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 9
            },
            {
              "name": "_calculate_deduplication_ratio",
              "line_start": 707,
              "line_end": 713,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate deduplication effectiveness ratio.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "_calculate_memory_efficiency",
              "line_start": 715,
              "line_end": 723,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate memory efficiency from deduplication.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_cleanup_loop",
              "line_start": 725,
              "line_end": 758,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background cleanup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            },
            {
              "name": "get_recent_duplicates",
              "line_start": 760,
              "line_end": 770,
              "args": [
                "self",
                "hours",
                "limit"
              ],
              "returns": null,
              "docstring": "Get recent duplicate records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "shutdown",
              "line_start": 772,
              "line_end": 775,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown deduplication engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced deduplication engine for analytics data with conflict resolution.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 82,
          "line_end": 135,
          "args": [
            "self",
            "max_history_size",
            "cleanup_interval",
            "default_strategy"
          ],
          "returns": null,
          "docstring": "Initialize analytics deduplication engine.\n\nArgs:\n    max_history_size: Maximum number of records to keep in history\n    cleanup_interval: Interval for cleanup operations (seconds)\n    default_strategy: Default conflict resolution strategy",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "start_engine",
          "line_start": 137,
          "line_end": 146,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start deduplication engine background processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_engine",
          "line_start": 148,
          "line_end": 155,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop deduplication engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "add_deduplication_rule",
          "line_start": 157,
          "line_end": 160,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add a custom deduplication rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "process_record",
          "line_start": 162,
          "line_end": 202,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Process a record for deduplication.\n\nArgs:\n    data: Analytics data record\n    source: Data source identifier\n\nReturns:\n    Tuple of (processed_data, is_duplicate, duplicate_info)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 208
        },
        {
          "name": "batch_deduplicate",
          "line_start": 204,
          "line_end": 251,
          "args": [
            "self",
            "records",
            "source"
          ],
          "returns": null,
          "docstring": "Deduplicate a batch of records.\n\nArgs:\n    records: List of analytics records\n    source: Batch source identifier\n\nReturns:\n    Deduplicated list of records",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "get_duplicate_summary",
          "line_start": 253,
          "line_end": 299,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get deduplication system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 258
        },
        {
          "name": "_generate_fingerprint",
          "line_start": 301,
          "line_end": 325,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Generate comprehensive fingerprint for a data record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "_detect_duplicates",
          "line_start": 327,
          "line_end": 385,
          "args": [
            "self",
            "data",
            "fingerprint"
          ],
          "returns": null,
          "docstring": "Detect duplicates for a given record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 338
        },
        {
          "name": "_resolve_conflicts",
          "line_start": 387,
          "line_end": 459,
          "args": [
            "self",
            "data",
            "duplicates_info",
            "source"
          ],
          "returns": null,
          "docstring": "Resolve conflicts between duplicate records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 410
        },
        {
          "name": "_setup_default_rules",
          "line_start": 461,
          "line_end": 506,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default deduplication rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "_setup_default_resolvers",
          "line_start": 508,
          "line_end": 538,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default conflict resolvers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 231
        },
        {
          "name": "_extract_structure",
          "line_start": 540,
          "line_end": 550,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Extract structural representation of data (keys only).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_extract_semantic_fields",
          "line_start": 552,
          "line_end": 572,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Extract key semantic fields for comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "_count_fields",
          "line_start": 574,
          "line_end": 589,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Count total number of fields in nested data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_calculate_structural_similarity",
          "line_start": 591,
          "line_end": 596,
          "args": [
            "self",
            "data",
            "existing_fingerprint"
          ],
          "returns": null,
          "docstring": "Calculate structural similarity between records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_calculate_semantic_similarity",
          "line_start": 598,
          "line_end": 602,
          "args": [
            "self",
            "data",
            "existing_fingerprint"
          ],
          "returns": null,
          "docstring": "Calculate semantic similarity between records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_check_rule_matches",
          "line_start": 604,
          "line_end": 622,
          "args": [
            "self",
            "data",
            "fingerprint",
            "rule"
          ],
          "returns": null,
          "docstring": "Check for matches based on custom rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_records_match_rule",
          "line_start": 624,
          "line_end": 629,
          "args": [
            "self",
            "data",
            "existing_fingerprint",
            "rule"
          ],
          "returns": null,
          "docstring": "Check if records match a specific rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        },
        {
          "name": "_calculate_rule_similarity",
          "line_start": 631,
          "line_end": 635,
          "args": [
            "self",
            "data",
            "existing_fingerprint",
            "rule"
          ],
          "returns": null,
          "docstring": "Calculate similarity based on rule criteria.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        },
        {
          "name": "_records_are_duplicates",
          "line_start": 637,
          "line_end": 640,
          "args": [
            "self",
            "record1",
            "record2",
            "hash1",
            "hash2"
          ],
          "returns": null,
          "docstring": "Check if two records are duplicates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "_store_record_fingerprint",
          "line_start": 642,
          "line_end": 649,
          "args": [
            "self",
            "fingerprint",
            "data"
          ],
          "returns": null,
          "docstring": "Store record fingerprint for future comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_get_record_from_fingerprint",
          "line_start": 651,
          "line_end": 656,
          "args": [
            "self",
            "fingerprint"
          ],
          "returns": null,
          "docstring": "Get original record from fingerprint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_merge_records",
          "line_start": 658,
          "line_end": 685,
          "args": [
            "self",
            "current_data",
            "existing_data",
            "rule"
          ],
          "returns": null,
          "docstring": "Merge two records based on rule specifications.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 272
        },
        {
          "name": "_identify_conflict_fields",
          "line_start": 687,
          "line_end": 700,
          "args": [
            "self",
            "current_data",
            "duplicate_info"
          ],
          "returns": null,
          "docstring": "Identify fields that have conflicts between records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_calculate_avg_processing_time",
          "line_start": 702,
          "line_end": 705,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate average processing time per record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 9
        },
        {
          "name": "_calculate_deduplication_ratio",
          "line_start": 707,
          "line_end": 713,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate deduplication effectiveness ratio.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "_calculate_memory_efficiency",
          "line_start": 715,
          "line_end": 723,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate memory efficiency from deduplication.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_cleanup_loop",
          "line_start": 725,
          "line_end": 758,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background cleanup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "get_recent_duplicates",
          "line_start": 760,
          "line_end": 770,
          "args": [
            "self",
            "hours",
            "limit"
          ],
          "returns": null,
          "docstring": "Get recent duplicate records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "shutdown",
          "line_start": 772,
          "line_end": 775,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown deduplication engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "numeric_average_resolver",
          "line_start": 511,
          "line_end": 519,
          "args": [
            "current_data",
            "existing_data"
          ],
          "returns": null,
          "docstring": "Resolver that averages numeric values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "list_merge_resolver",
          "line_start": 521,
          "line_end": 535,
          "args": [
            "current_data",
            "existing_data"
          ],
          "returns": null,
          "docstring": "Resolver that merges list values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "extract_keys",
          "line_start": 542,
          "line_end": 548,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "extract_semantic",
          "line_start": 562,
          "line_end": 569,
          "args": [
            "obj",
            "prefix"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "count_recursive",
          "line_start": 578,
          "line_end": 586,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "copy",
          "names": [
            "copy"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'copy', 'json', 'logging', 'enum', 'threading', 'hashlib', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 775,
      "complexity_score": 7871,
      "api_surface_area": 21,
      "docstring": "Analytics Data Deduplication and Conflict Resolution Engine\n==========================================================\n\nAdvanced deduplication system for analytics data with intelligent\nconflict resolution, data merging, and consistency maintenance.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9047619047619048,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_delivery_enhancer.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_delivery_enhancer.py",
      "component_name": "analytics_delivery_enhancer",
      "analysis_timestamp": "2025-08-20 21:46:40.311864",
      "classes": [
        {
          "name": "DeliveryStatus",
          "line_start": 24,
          "line_end": 28,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "DeliveryRecord",
          "line_start": 31,
          "line_end": 41,
          "base_classes": [],
          "methods": [],
          "docstring": "Analytics delivery tracking record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "JSONEncoder",
          "line_start": 43,
          "line_end": 54,
          "base_classes": [
            "<ast.Attribute object at 0x0000019D29B6E590>"
          ],
          "methods": [
            {
              "name": "default",
              "line_start": 46,
              "line_end": 54,
              "args": [
                "self",
                "obj"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            }
          ],
          "docstring": "Custom JSON encoder for datetime and other objects.",
          "decorators": []
        },
        {
          "name": "AnalyticsDeliveryEnhancer",
          "line_start": 56,
          "line_end": 407,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 61,
              "line_end": 93,
              "args": [
                "self",
                "max_retries",
                "retry_delay"
              ],
              "returns": null,
              "docstring": "Initialize delivery enhancer.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "start_delivery_service",
              "line_start": 95,
              "line_end": 121,
              "args": [
                "self",
                "num_workers"
              ],
              "returns": null,
              "docstring": "Start delivery service workers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "stop_delivery_service",
              "line_start": 123,
              "line_end": 133,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop delivery service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "queue_delivery",
              "line_start": 135,
              "line_end": 158,
              "args": [
                "self",
                "data",
                "target"
              ],
              "returns": null,
              "docstring": "Queue analytics data for delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_process_data_for_delivery",
              "line_start": 160,
              "line_end": 178,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Process data to ensure reliable delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_serialize_json",
              "line_start": 180,
              "line_end": 193,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Ensure data is JSON serializable.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "_convert_datetimes",
              "line_start": 195,
              "line_end": 214,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Convert datetime objects to ISO strings.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 158
            },
            {
              "name": "_convert_enums",
              "line_start": 216,
              "line_end": 235,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Convert enum objects to their values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 156
            },
            {
              "name": "_sanitize_errors",
              "line_start": 237,
              "line_end": 261,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Sanitize error objects and exceptions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_delivery_worker",
              "line_start": 263,
              "line_end": 300,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Delivery worker thread.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 196
            },
            {
              "name": "_retry_worker",
              "line_start": 302,
              "line_end": 322,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Retry worker for failed deliveries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_attempt_delivery",
              "line_start": 324,
              "line_end": 342,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "docstring": "Attempt to deliver analytics data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            },
            {
              "name": "get_delivery_summary",
              "line_start": 344,
              "line_end": 383,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get delivery service summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 242
            },
            {
              "name": "get_recent_failures",
              "line_start": 385,
              "line_end": 402,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get recent delivery failures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "shutdown",
              "line_start": 404,
              "line_end": 407,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown delivery enhancer.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Enhances analytics delivery with guarantees and monitoring.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "default",
          "line_start": 46,
          "line_end": 54,
          "args": [
            "self",
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "__init__",
          "line_start": 61,
          "line_end": 93,
          "args": [
            "self",
            "max_retries",
            "retry_delay"
          ],
          "returns": null,
          "docstring": "Initialize delivery enhancer.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "start_delivery_service",
          "line_start": 95,
          "line_end": 121,
          "args": [
            "self",
            "num_workers"
          ],
          "returns": null,
          "docstring": "Start delivery service workers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "stop_delivery_service",
          "line_start": 123,
          "line_end": 133,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop delivery service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "queue_delivery",
          "line_start": 135,
          "line_end": 158,
          "args": [
            "self",
            "data",
            "target"
          ],
          "returns": null,
          "docstring": "Queue analytics data for delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_process_data_for_delivery",
          "line_start": 160,
          "line_end": 178,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Process data to ensure reliable delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_serialize_json",
          "line_start": 180,
          "line_end": 193,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Ensure data is JSON serializable.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "_convert_datetimes",
          "line_start": 195,
          "line_end": 214,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Convert datetime objects to ISO strings.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "_convert_enums",
          "line_start": 216,
          "line_end": 235,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Convert enum objects to their values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 156
        },
        {
          "name": "_sanitize_errors",
          "line_start": 237,
          "line_end": 261,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Sanitize error objects and exceptions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_delivery_worker",
          "line_start": 263,
          "line_end": 300,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Delivery worker thread.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 196
        },
        {
          "name": "_retry_worker",
          "line_start": 302,
          "line_end": 322,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Retry worker for failed deliveries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_attempt_delivery",
          "line_start": 324,
          "line_end": 342,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "docstring": "Attempt to deliver analytics data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "get_delivery_summary",
          "line_start": 344,
          "line_end": 383,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get delivery service summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 242
        },
        {
          "name": "get_recent_failures",
          "line_start": 385,
          "line_end": 402,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get recent delivery failures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "shutdown",
          "line_start": 404,
          "line_end": 407,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown delivery enhancer.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        }
      ],
      "imports": [
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'queue', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 407,
      "complexity_score": 3838,
      "api_surface_area": 14,
      "docstring": "Analytics Delivery Enhancer\n===========================\n\nEnsures reliable delivery of analytics data to the dashboard with retry\nmechanisms, delivery guarantees, and data flow monitoring.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.95,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_delivery_guarantee.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_delivery_guarantee.py",
      "component_name": "analytics_delivery_guarantee",
      "analysis_timestamp": "2025-08-20 21:46:40.320425",
      "classes": [
        {
          "name": "DeliveryStatus",
          "line_start": 26,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Delivery status types.",
          "decorators": []
        },
        {
          "name": "DeliveryPriority",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Delivery priority levels.",
          "decorators": []
        },
        {
          "name": "DeliveryRecord",
          "line_start": 43,
          "line_end": 69,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 56,
              "line_end": 69,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            }
          ],
          "docstring": "Persistent delivery record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDeliveryGuarantee",
          "line_start": 71,
          "line_end": 658,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 76,
              "line_end": 149,
              "args": [
                "self",
                "aggregator",
                "db_path",
                "max_retries",
                "retry_interval"
              ],
              "returns": null,
              "docstring": "Initialize delivery guarantee system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    db_path: Database path for persistent storage\n    max_retries: Maximum retry attempts\n    retry_interval: Seconds between retries",
              "is_async": false,
              "decorators": [],
              "complexity_score": 256
            },
            {
              "name": "_init_database",
              "line_start": 151,
              "line_end": 189,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize SQLite database for persistent storage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_load_pending_deliveries",
              "line_start": 191,
              "line_end": 213,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load pending deliveries from database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_row_to_record",
              "line_start": 215,
              "line_end": 228,
              "args": [
                "self",
                "row"
              ],
              "returns": null,
              "docstring": "Convert database row to DeliveryRecord.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "submit_analytics",
              "line_start": 230,
              "line_end": 266,
              "args": [
                "self",
                "analytics_data",
                "priority"
              ],
              "returns": null,
              "docstring": "Submit analytics for guaranteed delivery.\n\nArgs:\n    analytics_data: Analytics data to deliver\n    priority: Delivery priority\n    \nReturns:\n    Delivery ID for tracking",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_generate_delivery_id",
              "line_start": 268,
              "line_end": 272,
              "args": [
                "self",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Generate unique delivery ID.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "_save_record",
              "line_start": 274,
              "line_end": 298,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "docstring": "Save delivery record to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "add_delivery_handler",
              "line_start": 300,
              "line_end": 307,
              "args": [
                "self",
                "handler"
              ],
              "returns": null,
              "docstring": "Add delivery handler function.\n\nArgs:\n    handler: Function that takes analytics data and returns success bool",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "add_verification_handler",
              "line_start": 309,
              "line_end": 316,
              "args": [
                "self",
                "handler"
              ],
              "returns": null,
              "docstring": "Add verification handler function.\n\nArgs:\n    handler: Function that takes delivery_id, data and returns verified bool",
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            },
            {
              "name": "_delivery_loop",
              "line_start": 318,
              "line_end": 347,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background delivery processing loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 162
            },
            {
              "name": "_attempt_delivery",
              "line_start": 349,
              "line_end": 446,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "docstring": "Attempt to deliver analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 506
            },
            {
              "name": "_verification_loop",
              "line_start": 448,
              "line_end": 472,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background verification loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_verify_delivery",
              "line_start": 474,
              "line_end": 506,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "docstring": "Verify that delivery was successful.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_cleanup_loop",
              "line_start": 508,
              "line_end": 554,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background cleanup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 220
            },
            {
              "name": "_update_delivery_stats",
              "line_start": 556,
              "line_end": 577,
              "args": [
                "self",
                "delivery_time",
                "success"
              ],
              "returns": null,
              "docstring": "Update delivery statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 126
            },
            {
              "name": "get_delivery_status",
              "line_start": 579,
              "line_end": 597,
              "args": [
                "self",
                "delivery_id"
              ],
              "returns": null,
              "docstring": "Get status of specific delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "get_guarantee_statistics",
              "line_start": 599,
              "line_end": 619,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive delivery guarantee statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "force_delivery_retry",
              "line_start": 621,
              "line_end": 647,
              "args": [
                "self",
                "delivery_id"
              ],
              "returns": null,
              "docstring": "Force retry of specific delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "shutdown",
              "line_start": 649,
              "line_end": 658,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown delivery guarantee system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            }
          ],
          "docstring": "Comprehensive analytics delivery guarantee system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 56,
          "line_end": 69,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "__init__",
          "line_start": 76,
          "line_end": 149,
          "args": [
            "self",
            "aggregator",
            "db_path",
            "max_retries",
            "retry_interval"
          ],
          "returns": null,
          "docstring": "Initialize delivery guarantee system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    db_path: Database path for persistent storage\n    max_retries: Maximum retry attempts\n    retry_interval: Seconds between retries",
          "is_async": false,
          "decorators": [],
          "complexity_score": 256
        },
        {
          "name": "_init_database",
          "line_start": 151,
          "line_end": 189,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize SQLite database for persistent storage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_load_pending_deliveries",
          "line_start": 191,
          "line_end": 213,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load pending deliveries from database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_row_to_record",
          "line_start": 215,
          "line_end": 228,
          "args": [
            "self",
            "row"
          ],
          "returns": null,
          "docstring": "Convert database row to DeliveryRecord.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "submit_analytics",
          "line_start": 230,
          "line_end": 266,
          "args": [
            "self",
            "analytics_data",
            "priority"
          ],
          "returns": null,
          "docstring": "Submit analytics for guaranteed delivery.\n\nArgs:\n    analytics_data: Analytics data to deliver\n    priority: Delivery priority\n    \nReturns:\n    Delivery ID for tracking",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_generate_delivery_id",
          "line_start": 268,
          "line_end": 272,
          "args": [
            "self",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Generate unique delivery ID.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "_save_record",
          "line_start": 274,
          "line_end": 298,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "docstring": "Save delivery record to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "add_delivery_handler",
          "line_start": 300,
          "line_end": 307,
          "args": [
            "self",
            "handler"
          ],
          "returns": null,
          "docstring": "Add delivery handler function.\n\nArgs:\n    handler: Function that takes analytics data and returns success bool",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "add_verification_handler",
          "line_start": 309,
          "line_end": 316,
          "args": [
            "self",
            "handler"
          ],
          "returns": null,
          "docstring": "Add verification handler function.\n\nArgs:\n    handler: Function that takes delivery_id, data and returns verified bool",
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "_delivery_loop",
          "line_start": 318,
          "line_end": 347,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background delivery processing loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 162
        },
        {
          "name": "_attempt_delivery",
          "line_start": 349,
          "line_end": 446,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "docstring": "Attempt to deliver analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 506
        },
        {
          "name": "_verification_loop",
          "line_start": 448,
          "line_end": 472,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background verification loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_verify_delivery",
          "line_start": 474,
          "line_end": 506,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "docstring": "Verify that delivery was successful.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_cleanup_loop",
          "line_start": 508,
          "line_end": 554,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background cleanup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 220
        },
        {
          "name": "_update_delivery_stats",
          "line_start": 556,
          "line_end": 577,
          "args": [
            "self",
            "delivery_time",
            "success"
          ],
          "returns": null,
          "docstring": "Update delivery statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "get_delivery_status",
          "line_start": 579,
          "line_end": 597,
          "args": [
            "self",
            "delivery_id"
          ],
          "returns": null,
          "docstring": "Get status of specific delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "get_guarantee_statistics",
          "line_start": 599,
          "line_end": 619,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive delivery guarantee statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "force_delivery_retry",
          "line_start": 621,
          "line_end": 647,
          "args": [
            "self",
            "delivery_id"
          ],
          "returns": null,
          "docstring": "Force retry of specific delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "shutdown",
          "line_start": 649,
          "line_end": 658,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown delivery guarantee system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'sqlite3', 'hashlib', 'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 661,
      "complexity_score": 5438,
      "api_surface_area": 16,
      "docstring": "Analytics Delivery Guarantee System\n====================================\n\nEnsures 100% analytics delivery to dashboard with persistent tracking,\nautomatic retries, and comprehensive verification.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0416666666666667,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_delivery_verifier.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_delivery_verifier.py",
      "component_name": "analytics_delivery_verifier",
      "analysis_timestamp": "2025-08-20 21:46:40.331935",
      "classes": [
        {
          "name": "VerificationStatus",
          "line_start": 27,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Verification status types.",
          "decorators": []
        },
        {
          "name": "DeliveryMethod",
          "line_start": 35,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Delivery method types.",
          "decorators": []
        },
        {
          "name": "VerificationTest",
          "line_start": 44,
          "line_end": 60,
          "base_classes": [],
          "methods": [
            {
              "name": "__post_init__",
              "line_start": 58,
              "line_end": 60,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Represents a delivery verification test.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDeliveryVerifier",
          "line_start": 62,
          "line_end": 857,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 67,
              "line_end": 177,
              "args": [
                "self",
                "aggregator",
                "dashboard_url",
                "verification_interval",
                "max_pending_tests"
              ],
              "returns": null,
              "docstring": "Initialize delivery verifier.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    dashboard_url: Dashboard URL for verification\n    verification_interval: Seconds between verification cycles\n    max_pending_tests: Maximum pending tests to track",
              "is_async": false,
              "decorators": [],
              "complexity_score": 327
            },
            {
              "name": "add_alert_handler",
              "line_start": 179,
              "line_end": 186,
              "args": [
                "self",
                "handler"
              ],
              "returns": null,
              "docstring": "Add alert handler.\n\nArgs:\n    handler: Function(alert_type, message, severity)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "create_verification_test",
              "line_start": 188,
              "line_end": 248,
              "args": [
                "self",
                "test_type",
                "delivery_method",
                "custom_payload"
              ],
              "returns": null,
              "docstring": "Create a new verification test.\n\nArgs:\n    test_type: Type of test to perform\n    delivery_method: How to deliver the test payload\n    custom_payload: Custom payload data\n    \nReturns:\n    Test ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 230
            },
            {
              "name": "send_verification_test",
              "line_start": 250,
              "line_end": 295,
              "args": [
                "self",
                "test_id"
              ],
              "returns": null,
              "docstring": "Send verification test using specified delivery method.\n\nArgs:\n    test_id: Test ID to send\n    \nReturns:\n    Success status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 269
            },
            {
              "name": "_send_direct_test",
              "line_start": 297,
              "line_end": 330,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Send test directly through analytics aggregator.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "_send_batch_test",
              "line_start": 332,
              "line_end": 359,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Send test through batch processor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_send_heartbeat_test",
              "line_start": 361,
              "line_end": 380,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Send test through heartbeat monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_send_fallback_test",
              "line_start": 382,
              "line_end": 398,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Send test through fallback system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_send_emergency_test",
              "line_start": 400,
              "line_end": 414,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Send test through emergency delivery path.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "check_delivery_confirmation",
              "line_start": 416,
              "line_end": 455,
              "args": [
                "self",
                "test_id"
              ],
              "returns": null,
              "docstring": "Check if test delivery was confirmed.\n\nArgs:\n    test_id: Test ID to check\n    \nReturns:\n    True if confirmed, False otherwise",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "_check_analytics_endpoint",
              "line_start": 457,
              "line_end": 475,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Check analytics endpoint for test data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "_check_monitoring_endpoint",
              "line_start": 477,
              "line_end": 499,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Check monitoring endpoint for test data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_check_flow_endpoint",
              "line_start": 501,
              "line_end": 525,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Check flow monitoring for test transaction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_check_heartbeat_endpoint",
              "line_start": 527,
              "line_end": 551,
              "args": [
                "self",
                "test"
              ],
              "returns": null,
              "docstring": "Check heartbeat monitoring for test delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_contains_test_token",
              "line_start": 553,
              "line_end": 568,
              "args": [
                "self",
                "data",
                "test"
              ],
              "returns": null,
              "docstring": "Check if data contains our test verification token.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_generate_test_payload",
              "line_start": 570,
              "line_end": 594,
              "args": [
                "self",
                "pattern"
              ],
              "returns": null,
              "docstring": "Generate test payload based on pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "_generate_verification_token",
              "line_start": 596,
              "line_end": 599,
              "args": [
                "self",
                "test_id"
              ],
              "returns": null,
              "docstring": "Generate unique verification token.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_update_delivery_stats",
              "line_start": 601,
              "line_end": 624,
              "args": [
                "self",
                "delivery_time",
                "success"
              ],
              "returns": null,
              "docstring": "Update delivery statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 158
            },
            {
              "name": "_verification_loop",
              "line_start": 626,
              "line_end": 650,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background verification loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_create_periodic_tests",
              "line_start": 652,
              "line_end": 662,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Create periodic verification tests.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "_check_pending_tests",
              "line_start": 664,
              "line_end": 677,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check all pending tests for confirmation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_handle_timeouts_and_retries",
              "line_start": 679,
              "line_end": 707,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Handle test timeouts and retries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "_get_fallback_delivery_method",
              "line_start": 709,
              "line_end": 719,
              "args": [
                "self",
                "current_method"
              ],
              "returns": null,
              "docstring": "Get fallback delivery method.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_check_failure_patterns",
              "line_start": 721,
              "line_end": 754,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for concerning failure patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_trigger_alert",
              "line_start": 756,
              "line_end": 766,
              "args": [
                "self",
                "alert_type",
                "message",
                "severity"
              ],
              "returns": null,
              "docstring": "Trigger alert for delivery issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_cleanup_loop",
              "line_start": 768,
              "line_end": 790,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background cleanup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            },
            {
              "name": "get_verification_status",
              "line_start": 792,
              "line_end": 817,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive verification status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "force_verification_test",
              "line_start": 819,
              "line_end": 845,
              "args": [
                "self",
                "test_type",
                "delivery_method"
              ],
              "returns": null,
              "docstring": "Force a verification test for manual testing.\n\nArgs:\n    test_type: Type of test\n    delivery_method: Delivery method string\n    \nReturns:\n    Test ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "shutdown",
              "line_start": 847,
              "line_end": 857,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown verification system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            }
          ],
          "docstring": "Continuous verification system for analytics delivery.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__post_init__",
          "line_start": 58,
          "line_end": 60,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "__init__",
          "line_start": 67,
          "line_end": 177,
          "args": [
            "self",
            "aggregator",
            "dashboard_url",
            "verification_interval",
            "max_pending_tests"
          ],
          "returns": null,
          "docstring": "Initialize delivery verifier.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    dashboard_url: Dashboard URL for verification\n    verification_interval: Seconds between verification cycles\n    max_pending_tests: Maximum pending tests to track",
          "is_async": false,
          "decorators": [],
          "complexity_score": 327
        },
        {
          "name": "add_alert_handler",
          "line_start": 179,
          "line_end": 186,
          "args": [
            "self",
            "handler"
          ],
          "returns": null,
          "docstring": "Add alert handler.\n\nArgs:\n    handler: Function(alert_type, message, severity)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "create_verification_test",
          "line_start": 188,
          "line_end": 248,
          "args": [
            "self",
            "test_type",
            "delivery_method",
            "custom_payload"
          ],
          "returns": null,
          "docstring": "Create a new verification test.\n\nArgs:\n    test_type: Type of test to perform\n    delivery_method: How to deliver the test payload\n    custom_payload: Custom payload data\n    \nReturns:\n    Test ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 230
        },
        {
          "name": "send_verification_test",
          "line_start": 250,
          "line_end": 295,
          "args": [
            "self",
            "test_id"
          ],
          "returns": null,
          "docstring": "Send verification test using specified delivery method.\n\nArgs:\n    test_id: Test ID to send\n    \nReturns:\n    Success status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 269
        },
        {
          "name": "_send_direct_test",
          "line_start": 297,
          "line_end": 330,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Send test directly through analytics aggregator.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "_send_batch_test",
          "line_start": 332,
          "line_end": 359,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Send test through batch processor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_send_heartbeat_test",
          "line_start": 361,
          "line_end": 380,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Send test through heartbeat monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_send_fallback_test",
          "line_start": 382,
          "line_end": 398,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Send test through fallback system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_send_emergency_test",
          "line_start": 400,
          "line_end": 414,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Send test through emergency delivery path.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "check_delivery_confirmation",
          "line_start": 416,
          "line_end": 455,
          "args": [
            "self",
            "test_id"
          ],
          "returns": null,
          "docstring": "Check if test delivery was confirmed.\n\nArgs:\n    test_id: Test ID to check\n    \nReturns:\n    True if confirmed, False otherwise",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "_check_analytics_endpoint",
          "line_start": 457,
          "line_end": 475,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Check analytics endpoint for test data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "_check_monitoring_endpoint",
          "line_start": 477,
          "line_end": 499,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Check monitoring endpoint for test data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_check_flow_endpoint",
          "line_start": 501,
          "line_end": 525,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Check flow monitoring for test transaction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_check_heartbeat_endpoint",
          "line_start": 527,
          "line_end": 551,
          "args": [
            "self",
            "test"
          ],
          "returns": null,
          "docstring": "Check heartbeat monitoring for test delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_contains_test_token",
          "line_start": 553,
          "line_end": 568,
          "args": [
            "self",
            "data",
            "test"
          ],
          "returns": null,
          "docstring": "Check if data contains our test verification token.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_generate_test_payload",
          "line_start": 570,
          "line_end": 594,
          "args": [
            "self",
            "pattern"
          ],
          "returns": null,
          "docstring": "Generate test payload based on pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "_generate_verification_token",
          "line_start": 596,
          "line_end": 599,
          "args": [
            "self",
            "test_id"
          ],
          "returns": null,
          "docstring": "Generate unique verification token.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_update_delivery_stats",
          "line_start": 601,
          "line_end": 624,
          "args": [
            "self",
            "delivery_time",
            "success"
          ],
          "returns": null,
          "docstring": "Update delivery statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "_verification_loop",
          "line_start": 626,
          "line_end": 650,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background verification loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_create_periodic_tests",
          "line_start": 652,
          "line_end": 662,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Create periodic verification tests.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "_check_pending_tests",
          "line_start": 664,
          "line_end": 677,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check all pending tests for confirmation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_handle_timeouts_and_retries",
          "line_start": 679,
          "line_end": 707,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Handle test timeouts and retries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "_get_fallback_delivery_method",
          "line_start": 709,
          "line_end": 719,
          "args": [
            "self",
            "current_method"
          ],
          "returns": null,
          "docstring": "Get fallback delivery method.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_check_failure_patterns",
          "line_start": 721,
          "line_end": 754,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for concerning failure patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_trigger_alert",
          "line_start": 756,
          "line_end": 766,
          "args": [
            "self",
            "alert_type",
            "message",
            "severity"
          ],
          "returns": null,
          "docstring": "Trigger alert for delivery issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_cleanup_loop",
          "line_start": 768,
          "line_end": 790,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background cleanup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "get_verification_status",
          "line_start": 792,
          "line_end": 817,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive verification status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "force_verification_test",
          "line_start": 819,
          "line_end": 845,
          "args": [
            "self",
            "test_type",
            "delivery_method"
          ],
          "returns": null,
          "docstring": "Force a verification test for manual testing.\n\nArgs:\n    test_type: Type of test\n    delivery_method: Delivery method string\n    \nReturns:\n    Test ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "shutdown",
          "line_start": 847,
          "line_end": 857,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown verification system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "requests",
          "names": [
            "requests"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "core.analytics_batch_processor",
          "names": [
            "BatchPriority"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 338
        },
        {
          "module": "core.analytics_flow_monitor",
          "names": [
            "FlowStage",
            "FlowStatus"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 305
        }
      ],
      "external_dependencies": "{'requests', 'dataclasses', 'time', 'typing', 'json', 'logging', 'enum', 'core.analytics_flow_monitor', 'datetime', 'threading', 'uuid', 'hashlib', 'asyncio', 'core.analytics_batch_processor', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 860,
      "complexity_score": 6950,
      "api_surface_area": 14,
      "docstring": "Analytics Delivery Verification Loop\n=====================================\n\nComprehensive verification system that continuously tests analytics delivery\nto ensure 100% reliability and immediate detection of any delivery failures.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_error_recovery.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_error_recovery.py",
      "component_name": "analytics_error_recovery",
      "analysis_timestamp": "2025-08-20 21:46:40.345959",
      "classes": [
        {
          "name": "ErrorSeverity",
          "line_start": 27,
          "line_end": 32,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "RecoveryStrategy",
          "line_start": 34,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "DegradationLevel",
          "line_start": 43,
          "line_end": 49,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "ErrorPattern",
          "line_start": 52,
          "line_end": 62,
          "base_classes": [],
          "methods": [],
          "docstring": "Error pattern definition for intelligent detection.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ErrorRecord",
          "line_start": 65,
          "line_end": 78,
          "base_classes": [],
          "methods": [],
          "docstring": "Individual error occurrence record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RecoveryAttempt",
          "line_start": 81,
          "line_end": 90,
          "base_classes": [],
          "methods": [],
          "docstring": "Recovery attempt record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ComponentHealth",
          "line_start": 93,
          "line_end": 102,
          "base_classes": [],
          "methods": [],
          "docstring": "Component health status.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsErrorRecovery",
          "line_start": 104,
          "line_end": 823,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 109,
              "line_end": 170,
              "args": [
                "self",
                "max_error_history",
                "recovery_timeout",
                "health_check_interval"
              ],
              "returns": null,
              "docstring": "Initialize analytics error recovery system.\n\nArgs:\n    max_error_history: Maximum errors to keep in history\n    recovery_timeout: Timeout for recovery attempts\n    health_check_interval: Interval for health checks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 189
            },
            {
              "name": "start_error_recovery",
              "line_start": 172,
              "line_end": 186,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start error recovery monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "stop_error_recovery",
              "line_start": 188,
              "line_end": 197,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop error recovery monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "handle_error",
              "line_start": 199,
              "line_end": 244,
              "args": [
                "self",
                "error",
                "component",
                "context",
                "severity"
              ],
              "returns": null,
              "docstring": "Handle an error with automatic recovery attempts.\n\nArgs:\n    error: Exception that occurred\n    component: Component where error occurred\n    context: Additional context information\n    severity: Error severity level\n\nReturns:\n    True if recovery was successful, False otherwise",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "register_fallback_function",
              "line_start": 246,
              "line_end": 258,
              "args": [
                "self",
                "component",
                "function_name",
                "fallback",
                "degraded_version"
              ],
              "returns": null,
              "docstring": "Register fallback functions for graceful degradation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "register_backup_system",
              "line_start": 260,
              "line_end": 275,
              "args": [
                "self",
                "component",
                "backup_system",
                "priority"
              ],
              "returns": null,
              "docstring": "Register backup systems for failover.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "get_component_health",
              "line_start": 277,
              "line_end": 288,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Get health status for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "force_degradation",
              "line_start": 290,
              "line_end": 293,
              "args": [
                "self",
                "component",
                "level",
                "reason"
              ],
              "returns": null,
              "docstring": "Force degradation of a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "restore_component",
              "line_start": 295,
              "line_end": 321,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Attempt to restore a degraded component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "get_error_recovery_summary",
              "line_start": 323,
              "line_end": 381,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get error recovery system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 297
            },
            {
              "name": "_create_error_record",
              "line_start": 383,
              "line_end": 408,
              "args": [
                "self",
                "error",
                "component",
                "context",
                "severity"
              ],
              "returns": null,
              "docstring": "Create detailed error record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "_update_component_health",
              "line_start": 410,
              "line_end": 450,
              "args": [
                "self",
                "component",
                "error_record"
              ],
              "returns": null,
              "docstring": "Update component health based on error.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 241
            },
            {
              "name": "_determine_recovery_strategy",
              "line_start": 452,
              "line_end": 469,
              "args": [
                "self",
                "error_record",
                "pattern"
              ],
              "returns": null,
              "docstring": "Determine the best recovery strategy for an error.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_attempt_recovery",
              "line_start": 471,
              "line_end": 521,
              "args": [
                "self",
                "error_record",
                "strategy"
              ],
              "returns": null,
              "docstring": "Attempt recovery using the specified strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 317
            },
            {
              "name": "_retry_with_backoff",
              "line_start": 523,
              "line_end": 543,
              "args": [
                "self",
                "error_record",
                "attempt"
              ],
              "returns": null,
              "docstring": "Implement retry with exponential backoff.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_fallback_to_cache",
              "line_start": 545,
              "line_end": 559,
              "args": [
                "self",
                "error_record",
                "attempt"
              ],
              "returns": null,
              "docstring": "Fallback to cached data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_apply_graceful_degradation",
              "line_start": 561,
              "line_end": 576,
              "args": [
                "self",
                "error_record",
                "attempt"
              ],
              "returns": null,
              "docstring": "Apply graceful degradation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_failover_to_backup",
              "line_start": 578,
              "line_end": 594,
              "args": [
                "self",
                "error_record",
                "attempt"
              ],
              "returns": null,
              "docstring": "Failover to backup system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            },
            {
              "name": "_enable_partial_functionality",
              "line_start": 596,
              "line_end": 613,
              "args": [
                "self",
                "error_record",
                "attempt"
              ],
              "returns": null,
              "docstring": "Enable partial functionality mode.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_activate_safe_mode",
              "line_start": 615,
              "line_end": 622,
              "args": [
                "self",
                "error_record",
                "attempt"
              ],
              "returns": null,
              "docstring": "Activate safe mode with minimal functionality.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_apply_degradation",
              "line_start": 624,
              "line_end": 638,
              "args": [
                "self",
                "component",
                "level",
                "reason"
              ],
              "returns": null,
              "docstring": "Apply degradation to a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_update_circuit_breaker",
              "line_start": 640,
              "line_end": 656,
              "args": [
                "self",
                "component",
                "failed"
              ],
              "returns": null,
              "docstring": "Update circuit breaker state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_check_and_apply_degradation",
              "line_start": 658,
              "line_end": 668,
              "args": [
                "self",
                "component",
                "error_record"
              ],
              "returns": null,
              "docstring": "Check if degradation should be applied based on error patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_error_monitoring_loop",
              "line_start": 670,
              "line_end": 689,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background error monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 113
            },
            {
              "name": "_health_monitoring_loop",
              "line_start": 691,
              "line_end": 705,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background health monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_update_component_health_score",
              "line_start": 707,
              "line_end": 722,
              "args": [
                "self",
                "component_name",
                "health"
              ],
              "returns": null,
              "docstring": "Update component health score based on recent performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "_check_automatic_recovery",
              "line_start": 724,
              "line_end": 731,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for automatic recovery opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_check_system_health",
              "line_start": 733,
              "line_end": 751,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check overall system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_setup_default_error_patterns",
              "line_start": 753,
              "line_end": 789,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default error patterns for detection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_setup_default_recovery_handlers",
              "line_start": 791,
              "line_end": 800,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default recovery handlers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "get_recent_errors",
              "line_start": 802,
              "line_end": 818,
              "args": [
                "self",
                "hours",
                "component",
                "severity"
              ],
              "returns": null,
              "docstring": "Get recent error records.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "shutdown",
              "line_start": 820,
              "line_end": 823,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown error recovery system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced error recovery and graceful degradation system.",
          "decorators": []
        },
        {
          "name": "ErrorPatternDetector",
          "line_start": 826,
          "line_end": 860,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 829,
              "line_end": 830,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 9
            },
            {
              "name": "detect_pattern",
              "line_start": 832,
              "line_end": 860,
              "args": [
                "self",
                "error_record",
                "error_history"
              ],
              "returns": null,
              "docstring": "Detect if an error matches any known patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 137
            }
          ],
          "docstring": "Intelligent error pattern detection.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 109,
          "line_end": 170,
          "args": [
            "self",
            "max_error_history",
            "recovery_timeout",
            "health_check_interval"
          ],
          "returns": null,
          "docstring": "Initialize analytics error recovery system.\n\nArgs:\n    max_error_history: Maximum errors to keep in history\n    recovery_timeout: Timeout for recovery attempts\n    health_check_interval: Interval for health checks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 189
        },
        {
          "name": "start_error_recovery",
          "line_start": 172,
          "line_end": 186,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start error recovery monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "stop_error_recovery",
          "line_start": 188,
          "line_end": 197,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop error recovery monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "handle_error",
          "line_start": 199,
          "line_end": 244,
          "args": [
            "self",
            "error",
            "component",
            "context",
            "severity"
          ],
          "returns": null,
          "docstring": "Handle an error with automatic recovery attempts.\n\nArgs:\n    error: Exception that occurred\n    component: Component where error occurred\n    context: Additional context information\n    severity: Error severity level\n\nReturns:\n    True if recovery was successful, False otherwise",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "register_fallback_function",
          "line_start": 246,
          "line_end": 258,
          "args": [
            "self",
            "component",
            "function_name",
            "fallback",
            "degraded_version"
          ],
          "returns": null,
          "docstring": "Register fallback functions for graceful degradation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "register_backup_system",
          "line_start": 260,
          "line_end": 275,
          "args": [
            "self",
            "component",
            "backup_system",
            "priority"
          ],
          "returns": null,
          "docstring": "Register backup systems for failover.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "get_component_health",
          "line_start": 277,
          "line_end": 288,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Get health status for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "force_degradation",
          "line_start": 290,
          "line_end": 293,
          "args": [
            "self",
            "component",
            "level",
            "reason"
          ],
          "returns": null,
          "docstring": "Force degradation of a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "restore_component",
          "line_start": 295,
          "line_end": 321,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Attempt to restore a degraded component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "get_error_recovery_summary",
          "line_start": 323,
          "line_end": 381,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get error recovery system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 297
        },
        {
          "name": "_create_error_record",
          "line_start": 383,
          "line_end": 408,
          "args": [
            "self",
            "error",
            "component",
            "context",
            "severity"
          ],
          "returns": null,
          "docstring": "Create detailed error record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "_update_component_health",
          "line_start": 410,
          "line_end": 450,
          "args": [
            "self",
            "component",
            "error_record"
          ],
          "returns": null,
          "docstring": "Update component health based on error.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 241
        },
        {
          "name": "_determine_recovery_strategy",
          "line_start": 452,
          "line_end": 469,
          "args": [
            "self",
            "error_record",
            "pattern"
          ],
          "returns": null,
          "docstring": "Determine the best recovery strategy for an error.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_attempt_recovery",
          "line_start": 471,
          "line_end": 521,
          "args": [
            "self",
            "error_record",
            "strategy"
          ],
          "returns": null,
          "docstring": "Attempt recovery using the specified strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 317
        },
        {
          "name": "_retry_with_backoff",
          "line_start": 523,
          "line_end": 543,
          "args": [
            "self",
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": "Implement retry with exponential backoff.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_fallback_to_cache",
          "line_start": 545,
          "line_end": 559,
          "args": [
            "self",
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": "Fallback to cached data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_apply_graceful_degradation",
          "line_start": 561,
          "line_end": 576,
          "args": [
            "self",
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": "Apply graceful degradation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_failover_to_backup",
          "line_start": 578,
          "line_end": 594,
          "args": [
            "self",
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": "Failover to backup system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        },
        {
          "name": "_enable_partial_functionality",
          "line_start": 596,
          "line_end": 613,
          "args": [
            "self",
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": "Enable partial functionality mode.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_activate_safe_mode",
          "line_start": 615,
          "line_end": 622,
          "args": [
            "self",
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": "Activate safe mode with minimal functionality.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_apply_degradation",
          "line_start": 624,
          "line_end": 638,
          "args": [
            "self",
            "component",
            "level",
            "reason"
          ],
          "returns": null,
          "docstring": "Apply degradation to a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_update_circuit_breaker",
          "line_start": 640,
          "line_end": 656,
          "args": [
            "self",
            "component",
            "failed"
          ],
          "returns": null,
          "docstring": "Update circuit breaker state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_check_and_apply_degradation",
          "line_start": 658,
          "line_end": 668,
          "args": [
            "self",
            "component",
            "error_record"
          ],
          "returns": null,
          "docstring": "Check if degradation should be applied based on error patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_error_monitoring_loop",
          "line_start": 670,
          "line_end": 689,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background error monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 113
        },
        {
          "name": "_health_monitoring_loop",
          "line_start": 691,
          "line_end": 705,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background health monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_update_component_health_score",
          "line_start": 707,
          "line_end": 722,
          "args": [
            "self",
            "component_name",
            "health"
          ],
          "returns": null,
          "docstring": "Update component health score based on recent performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "_check_automatic_recovery",
          "line_start": 724,
          "line_end": 731,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for automatic recovery opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_check_system_health",
          "line_start": 733,
          "line_end": 751,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check overall system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_setup_default_error_patterns",
          "line_start": 753,
          "line_end": 789,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default error patterns for detection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_setup_default_recovery_handlers",
          "line_start": 791,
          "line_end": 800,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default recovery handlers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "get_recent_errors",
          "line_start": 802,
          "line_end": 818,
          "args": [
            "self",
            "hours",
            "component",
            "severity"
          ],
          "returns": null,
          "docstring": "Get recent error records.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "shutdown",
          "line_start": 820,
          "line_end": 823,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown error recovery system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "__init__",
          "line_start": 829,
          "line_end": 830,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 9
        },
        {
          "name": "detect_pattern",
          "line_start": 832,
          "line_end": 860,
          "args": [
            "self",
            "error_record",
            "error_history"
          ],
          "returns": null,
          "docstring": "Detect if an error matches any known patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 137
        },
        {
          "name": "default_retry_handler",
          "line_start": 793,
          "line_end": 794,
          "args": [
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "default_fallback_handler",
          "line_start": 796,
          "line_end": 797,
          "args": [
            "error_record",
            "attempt"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "inspect",
          "names": [
            "inspect"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Tuple",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "copy",
          "names": [
            "copy"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'dataclasses', 'copy', 'json', 'logging', 'inspect', 'enum', 'threading', 'traceback', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 860,
      "complexity_score": 7604,
      "api_surface_area": 26,
      "docstring": "Analytics Advanced Error Recovery and Graceful Degradation System\n================================================================\n\nComprehensive error recovery system with automatic healing, graceful\ndegradation, failover mechanisms, and intelligent error pattern detection.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.8888888888888888,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_event_queue.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_event_queue.py",
      "component_name": "analytics_event_queue",
      "analysis_timestamp": "2025-08-20 21:46:40.358479",
      "classes": [
        {
          "name": "EventPriority",
          "line_start": 27,
          "line_end": 32,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Event priority levels.",
          "decorators": []
        },
        {
          "name": "EventStatus",
          "line_start": 34,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Event processing status.",
          "decorators": []
        },
        {
          "name": "AnalyticsEvent",
          "line_start": 43,
          "line_end": 55,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents an analytics event.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsEventQueue",
          "line_start": 57,
          "line_end": 598,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 62,
              "line_end": 117,
              "args": [
                "self",
                "db_path",
                "max_retries",
                "batch_size",
                "delivery_timeout"
              ],
              "returns": null,
              "docstring": "Initialize the event queue.\n\nArgs:\n    db_path: Path to SQLite database for persistence\n    max_retries: Maximum retry attempts per event\n    batch_size: Number of events to process in batch\n    delivery_timeout: Timeout for delivery attempts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_init_database",
              "line_start": 119,
              "line_end": 157,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize SQLite database for event persistence.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_load_pending_events",
              "line_start": 159,
              "line_end": 204,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load pending events from database on startup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 244
            },
            {
              "name": "enqueue",
              "line_start": 206,
              "line_end": 247,
              "args": [
                "self",
                "event_type",
                "data",
                "priority",
                "metadata"
              ],
              "returns": null,
              "docstring": "Add an event to the queue.\n\nArgs:\n    event_type: Type of analytics event\n    data: Event data\n    priority: Event priority\n    metadata: Optional metadata\n    \nReturns:\n    Event ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "_persist_event",
              "line_start": 249,
              "line_end": 277,
              "args": [
                "self",
                "event"
              ],
              "returns": null,
              "docstring": "Persist event to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "register_handler",
              "line_start": 279,
              "line_end": 288,
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "returns": null,
              "docstring": "Register a delivery handler for an event type.\n\nArgs:\n    event_type: Type of event to handle\n    handler: Handler function",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "start_processing",
              "line_start": 290,
              "line_end": 325,
              "args": [
                "self",
                "num_workers"
              ],
              "returns": null,
              "docstring": "Start event processing workers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "stop_processing",
              "line_start": 327,
              "line_end": 336,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop event processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_processing_worker",
              "line_start": 338,
              "line_end": 351,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main processing worker thread.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_get_next_event",
              "line_start": 353,
              "line_end": 367,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get next event from priority queues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_process_event",
              "line_start": 369,
              "line_end": 412,
              "args": [
                "self",
                "event"
              ],
              "returns": null,
              "docstring": "Process a single event.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 183
            },
            {
              "name": "_deliver_with_timeout",
              "line_start": 414,
              "line_end": 431,
              "args": [
                "self",
                "handler",
                "event"
              ],
              "returns": null,
              "docstring": "Deliver event with timeout.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_default_delivery_handler",
              "line_start": 433,
              "line_end": 436,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Default delivery handler - just logs the data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_handle_delivery_failure",
              "line_start": 438,
              "line_end": 455,
              "args": [
                "self",
                "event"
              ],
              "returns": null,
              "docstring": "Handle failed delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "_requeue_event",
              "line_start": 457,
              "line_end": 461,
              "args": [
                "self",
                "event"
              ],
              "returns": null,
              "docstring": "Requeue event for processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_retry_worker",
              "line_start": 463,
              "line_end": 488,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Worker thread for handling retries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "_cleanup_worker",
              "line_start": 490,
              "line_end": 514,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Worker thread for cleaning up old delivered events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "_update_delivery_stats",
              "line_start": 516,
              "line_end": 530,
              "args": [
                "self",
                "delivery_time"
              ],
              "returns": null,
              "docstring": "Update delivery statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_get_total_queue_size",
              "line_start": 532,
              "line_end": 534,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get total number of events in all queues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "get_statistics",
              "line_start": 536,
              "line_end": 551,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get queue statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "get_failed_events",
              "line_start": 553,
              "line_end": 567,
              "args": [
                "self",
                "limit"
              ],
              "returns": null,
              "docstring": "Get recent failed events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "retry_failed_event",
              "line_start": 569,
              "line_end": 586,
              "args": [
                "self",
                "event_id"
              ],
              "returns": null,
              "docstring": "Manually retry a failed event.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "shutdown",
              "line_start": 588,
              "line_end": 598,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the event queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            }
          ],
          "docstring": "Persistent event queue with guaranteed delivery.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 62,
          "line_end": 117,
          "args": [
            "self",
            "db_path",
            "max_retries",
            "batch_size",
            "delivery_timeout"
          ],
          "returns": null,
          "docstring": "Initialize the event queue.\n\nArgs:\n    db_path: Path to SQLite database for persistence\n    max_retries: Maximum retry attempts per event\n    batch_size: Number of events to process in batch\n    delivery_timeout: Timeout for delivery attempts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_init_database",
          "line_start": 119,
          "line_end": 157,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize SQLite database for event persistence.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_load_pending_events",
          "line_start": 159,
          "line_end": 204,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load pending events from database on startup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 244
        },
        {
          "name": "enqueue",
          "line_start": 206,
          "line_end": 247,
          "args": [
            "self",
            "event_type",
            "data",
            "priority",
            "metadata"
          ],
          "returns": null,
          "docstring": "Add an event to the queue.\n\nArgs:\n    event_type: Type of analytics event\n    data: Event data\n    priority: Event priority\n    metadata: Optional metadata\n    \nReturns:\n    Event ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "_persist_event",
          "line_start": 249,
          "line_end": 277,
          "args": [
            "self",
            "event"
          ],
          "returns": null,
          "docstring": "Persist event to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "register_handler",
          "line_start": 279,
          "line_end": 288,
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "returns": null,
          "docstring": "Register a delivery handler for an event type.\n\nArgs:\n    event_type: Type of event to handle\n    handler: Handler function",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "start_processing",
          "line_start": 290,
          "line_end": 325,
          "args": [
            "self",
            "num_workers"
          ],
          "returns": null,
          "docstring": "Start event processing workers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "stop_processing",
          "line_start": 327,
          "line_end": 336,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop event processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_processing_worker",
          "line_start": 338,
          "line_end": 351,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main processing worker thread.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_get_next_event",
          "line_start": 353,
          "line_end": 367,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get next event from priority queues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_process_event",
          "line_start": 369,
          "line_end": 412,
          "args": [
            "self",
            "event"
          ],
          "returns": null,
          "docstring": "Process a single event.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 183
        },
        {
          "name": "_deliver_with_timeout",
          "line_start": 414,
          "line_end": 431,
          "args": [
            "self",
            "handler",
            "event"
          ],
          "returns": null,
          "docstring": "Deliver event with timeout.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_default_delivery_handler",
          "line_start": 433,
          "line_end": 436,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Default delivery handler - just logs the data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_handle_delivery_failure",
          "line_start": 438,
          "line_end": 455,
          "args": [
            "self",
            "event"
          ],
          "returns": null,
          "docstring": "Handle failed delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "_requeue_event",
          "line_start": 457,
          "line_end": 461,
          "args": [
            "self",
            "event"
          ],
          "returns": null,
          "docstring": "Requeue event for processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_retry_worker",
          "line_start": 463,
          "line_end": 488,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Worker thread for handling retries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "_cleanup_worker",
          "line_start": 490,
          "line_end": 514,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Worker thread for cleaning up old delivered events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "_update_delivery_stats",
          "line_start": 516,
          "line_end": 530,
          "args": [
            "self",
            "delivery_time"
          ],
          "returns": null,
          "docstring": "Update delivery statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_get_total_queue_size",
          "line_start": 532,
          "line_end": 534,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get total number of events in all queues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "get_statistics",
          "line_start": 536,
          "line_end": 551,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get queue statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "get_failed_events",
          "line_start": 553,
          "line_end": 567,
          "args": [
            "self",
            "limit"
          ],
          "returns": null,
          "docstring": "Get recent failed events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "retry_failed_event",
          "line_start": 569,
          "line_end": 586,
          "args": [
            "self",
            "event_id"
          ],
          "returns": null,
          "docstring": "Manually retry a failed event.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "shutdown",
          "line_start": 588,
          "line_end": 598,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the event queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        }
      ],
      "imports": [
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "concurrent.futures",
          "names": [
            "concurrent.futures"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 416
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'dataclasses', 'json', 'logging', 'pickle', 'concurrent.futures', 'enum', 'threading', 'uuid', 'queue', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 598,
      "complexity_score": 4778,
      "api_surface_area": 16,
      "docstring": "Analytics Event Queue with Guaranteed Delivery\n==============================================\n\nProvides a persistent event queue with guaranteed delivery for analytics data.\nEnsures no analytics are lost even during system failures.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.037037037037037,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_export_manager.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_export_manager.py",
      "component_name": "analytics_export_manager",
      "analysis_timestamp": "2025-08-20 21:46:40.367479",
      "classes": [
        {
          "name": "ExportFormat",
          "line_start": 29,
          "line_end": 38,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Supported export formats.",
          "decorators": []
        },
        {
          "name": "ExportDestination",
          "line_start": 40,
          "line_end": 47,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Export destination types.",
          "decorators": []
        },
        {
          "name": "ExportJob",
          "line_start": 50,
          "line_end": 63,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents an export job.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsExportManager",
          "line_start": 65,
          "line_end": 658,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 70,
              "line_end": 114,
              "args": [
                "self",
                "export_dir"
              ],
              "returns": null,
              "docstring": "Initialize export manager.\n\nArgs:\n    export_dir: Directory for file exports",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "export_analytics",
              "line_start": 116,
              "line_end": 160,
              "args": [
                "self",
                "data",
                "format",
                "destination",
                "filename",
                "filters"
              ],
              "returns": null,
              "docstring": "Export analytics data in specified format.\n\nArgs:\n    data: Analytics data to export\n    format: Export format\n    destination: Export destination\n    filename: Optional filename (auto-generated if not provided)\n    filters: Optional filters to apply\n    \nReturns:\n    Export job object",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "_process_export",
              "line_start": 162,
              "line_end": 215,
              "args": [
                "self",
                "job",
                "data"
              ],
              "returns": null,
              "docstring": "Process export job.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 383
            },
            {
              "name": "_apply_filters",
              "line_start": 217,
              "line_end": 246,
              "args": [
                "self",
                "data",
                "filters"
              ],
              "returns": null,
              "docstring": "Apply filters to data before export.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 203
            },
            {
              "name": "_count_rows",
              "line_start": 248,
              "line_end": 262,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Count rows in data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_export_json",
              "line_start": 264,
              "line_end": 272,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as JSON.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "_export_csv",
              "line_start": 274,
              "line_end": 292,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as CSV.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_flatten_for_csv",
              "line_start": 294,
              "line_end": 327,
              "args": [
                "self",
                "data",
                "parent_key",
                "sep"
              ],
              "returns": null,
              "docstring": "Flatten nested data structure for CSV export.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 240
            },
            {
              "name": "_flatten_dict",
              "line_start": 329,
              "line_end": 340,
              "args": [
                "self",
                "d",
                "parent_key",
                "sep"
              ],
              "returns": null,
              "docstring": "Flatten a dictionary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_export_html",
              "line_start": 342,
              "line_end": 350,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as HTML.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_generate_html_report",
              "line_start": 352,
              "line_end": 401,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Generate HTML report from data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 269
            },
            {
              "name": "_get_html_template",
              "line_start": 403,
              "line_end": 433,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get HTML template for reports.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 9
            },
            {
              "name": "_export_excel",
              "line_start": 435,
              "line_end": 447,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as Excel (placeholder - requires openpyxl).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_export_xml",
              "line_start": 449,
              "line_end": 457,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as XML.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_dict_to_xml",
              "line_start": 459,
              "line_end": 492,
              "args": [
                "self",
                "data",
                "root_name"
              ],
              "returns": null,
              "docstring": "Convert dictionary to XML string.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 285
            },
            {
              "name": "_export_parquet",
              "line_start": 494,
              "line_end": 498,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as Parquet (placeholder - requires pyarrow).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "_export_pickle",
              "line_start": 500,
              "line_end": 508,
              "args": [
                "self",
                "data",
                "output_path"
              ],
              "returns": null,
              "docstring": "Export data as pickle.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "create_archive",
              "line_start": 510,
              "line_end": 525,
              "args": [
                "self",
                "job_ids",
                "archive_name"
              ],
              "returns": null,
              "docstring": "Create archive of multiple export files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 154
            },
            {
              "name": "schedule_export",
              "line_start": 527,
              "line_end": 546,
              "args": [
                "self",
                "data_source",
                "format",
                "interval_minutes",
                "filters"
              ],
              "returns": null,
              "docstring": "Schedule periodic export.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "start_scheduler",
              "line_start": 548,
              "line_end": 557,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start export scheduler.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_scheduler",
              "line_start": 559,
              "line_end": 566,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop export scheduler.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "_scheduler_loop",
              "line_start": 568,
              "line_end": 596,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Scheduler loop for periodic exports.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "get_export_status",
              "line_start": 598,
              "line_end": 616,
              "args": [
                "self",
                "job_id"
              ],
              "returns": null,
              "docstring": "Get status of an export job.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "get_statistics",
              "line_start": 618,
              "line_end": 632,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get export statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "cleanup_old_exports",
              "line_start": 634,
              "line_end": 653,
              "args": [
                "self",
                "days"
              ],
              "returns": null,
              "docstring": "Clean up old export files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "shutdown",
              "line_start": 655,
              "line_end": 658,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown export manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Manages analytics data exports with multiple format support.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 70,
          "line_end": 114,
          "args": [
            "self",
            "export_dir"
          ],
          "returns": null,
          "docstring": "Initialize export manager.\n\nArgs:\n    export_dir: Directory for file exports",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "export_analytics",
          "line_start": 116,
          "line_end": 160,
          "args": [
            "self",
            "data",
            "format",
            "destination",
            "filename",
            "filters"
          ],
          "returns": null,
          "docstring": "Export analytics data in specified format.\n\nArgs:\n    data: Analytics data to export\n    format: Export format\n    destination: Export destination\n    filename: Optional filename (auto-generated if not provided)\n    filters: Optional filters to apply\n    \nReturns:\n    Export job object",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "_process_export",
          "line_start": 162,
          "line_end": 215,
          "args": [
            "self",
            "job",
            "data"
          ],
          "returns": null,
          "docstring": "Process export job.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 383
        },
        {
          "name": "_apply_filters",
          "line_start": 217,
          "line_end": 246,
          "args": [
            "self",
            "data",
            "filters"
          ],
          "returns": null,
          "docstring": "Apply filters to data before export.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 203
        },
        {
          "name": "_count_rows",
          "line_start": 248,
          "line_end": 262,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Count rows in data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_export_json",
          "line_start": 264,
          "line_end": 272,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as JSON.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "_export_csv",
          "line_start": 274,
          "line_end": 292,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as CSV.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_flatten_for_csv",
          "line_start": 294,
          "line_end": 327,
          "args": [
            "self",
            "data",
            "parent_key",
            "sep"
          ],
          "returns": null,
          "docstring": "Flatten nested data structure for CSV export.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 240
        },
        {
          "name": "_flatten_dict",
          "line_start": 329,
          "line_end": 340,
          "args": [
            "self",
            "d",
            "parent_key",
            "sep"
          ],
          "returns": null,
          "docstring": "Flatten a dictionary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_export_html",
          "line_start": 342,
          "line_end": 350,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as HTML.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_generate_html_report",
          "line_start": 352,
          "line_end": 401,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Generate HTML report from data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 269
        },
        {
          "name": "_get_html_template",
          "line_start": 403,
          "line_end": 433,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get HTML template for reports.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 9
        },
        {
          "name": "_export_excel",
          "line_start": 435,
          "line_end": 447,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as Excel (placeholder - requires openpyxl).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_export_xml",
          "line_start": 449,
          "line_end": 457,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as XML.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_dict_to_xml",
          "line_start": 459,
          "line_end": 492,
          "args": [
            "self",
            "data",
            "root_name"
          ],
          "returns": null,
          "docstring": "Convert dictionary to XML string.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 285
        },
        {
          "name": "_export_parquet",
          "line_start": 494,
          "line_end": 498,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as Parquet (placeholder - requires pyarrow).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "_export_pickle",
          "line_start": 500,
          "line_end": 508,
          "args": [
            "self",
            "data",
            "output_path"
          ],
          "returns": null,
          "docstring": "Export data as pickle.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "create_archive",
          "line_start": 510,
          "line_end": 525,
          "args": [
            "self",
            "job_ids",
            "archive_name"
          ],
          "returns": null,
          "docstring": "Create archive of multiple export files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 154
        },
        {
          "name": "schedule_export",
          "line_start": 527,
          "line_end": 546,
          "args": [
            "self",
            "data_source",
            "format",
            "interval_minutes",
            "filters"
          ],
          "returns": null,
          "docstring": "Schedule periodic export.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "start_scheduler",
          "line_start": 548,
          "line_end": 557,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start export scheduler.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_scheduler",
          "line_start": 559,
          "line_end": 566,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop export scheduler.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "_scheduler_loop",
          "line_start": 568,
          "line_end": 596,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Scheduler loop for periodic exports.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "get_export_status",
          "line_start": 598,
          "line_end": 616,
          "args": [
            "self",
            "job_id"
          ],
          "returns": null,
          "docstring": "Get status of an export job.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "get_statistics",
          "line_start": 618,
          "line_end": 632,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get export statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "cleanup_old_exports",
          "line_start": 634,
          "line_end": 653,
          "args": [
            "self",
            "days"
          ],
          "returns": null,
          "docstring": "Clean up old export files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "shutdown",
          "line_start": 655,
          "line_end": 658,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown export manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "process_item",
          "line_start": 464,
          "line_end": 484,
          "args": [
            "key",
            "value",
            "indent"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 205
        }
      ],
      "imports": [
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "csv",
          "names": [
            "csv"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "zipfile",
          "names": [
            "zipfile"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "BinaryIO"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "io",
          "names": [
            "BytesIO",
            "StringIO"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "base64",
          "names": [
            "base64"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        }
      ],
      "external_dependencies": "{'io', 'base64', 'typing', 'dataclasses', 'time', 'zipfile', 'json', 'logging', 'pickle', 'enum', 'threading', 'os', 'csv', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 658,
      "complexity_score": 6619,
      "api_surface_area": 19,
      "docstring": "Analytics Export Manager\n========================\n\nProvides comprehensive export capabilities for analytics data in multiple formats.\nSupports scheduled exports, custom templates, and various destinations.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_fallback_system.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_fallback_system.py",
      "component_name": "analytics_fallback_system",
      "analysis_timestamp": "2025-08-20 21:46:40.377456",
      "classes": [
        {
          "name": "FallbackLevel",
          "line_start": 26,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Fallback escalation levels.",
          "decorators": []
        },
        {
          "name": "FallbackReason",
          "line_start": 35,
          "line_end": 42,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Reasons for fallback activation.",
          "decorators": []
        },
        {
          "name": "FallbackEvent",
          "line_start": 45,
          "line_end": 54,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a fallback event.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsFallbackSystem",
          "line_start": 56,
          "line_end": 577,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 61,
              "line_end": 134,
              "args": [
                "self",
                "cache_size",
                "local_storage_path",
                "degraded_mode_threshold"
              ],
              "returns": null,
              "docstring": "Initialize fallback system.\n\nArgs:\n    cache_size: Maximum cache entries\n    local_storage_path: Path for local storage fallback\n    degraded_mode_threshold: Failures before degraded mode",
              "is_async": false,
              "decorators": [],
              "complexity_score": 244
            },
            {
              "name": "process_analytics",
              "line_start": 136,
              "line_end": 164,
              "args": [
                "self",
                "analytics_func",
                "analytics_data",
                "context"
              ],
              "returns": null,
              "docstring": "Process analytics with fallback protection.\n\nArgs:\n    analytics_func: Primary analytics function\n    analytics_data: Analytics data\n    context: Optional context\n    \nReturns:\n    (success, result)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_handle_success",
              "line_start": 166,
              "line_end": 176,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Handle successful analytics processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "_handle_failure",
              "line_start": 178,
              "line_end": 191,
              "args": [
                "self",
                "error",
                "data"
              ],
              "returns": null,
              "docstring": "Handle analytics failure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_execute_fallback",
              "line_start": 193,
              "line_end": 208,
              "args": [
                "self",
                "data",
                "error"
              ],
              "returns": null,
              "docstring": "Execute current fallback strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_fallback_to_cache",
              "line_start": 210,
              "line_end": 229,
              "args": [
                "self",
                "data",
                "error"
              ],
              "returns": null,
              "docstring": "Fallback to cached data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_fallback_to_secondary",
              "line_start": 231,
              "line_end": 244,
              "args": [
                "self",
                "data",
                "error"
              ],
              "returns": null,
              "docstring": "Fallback to secondary endpoint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_fallback_to_degraded",
              "line_start": 246,
              "line_end": 255,
              "args": [
                "self",
                "data",
                "error"
              ],
              "returns": null,
              "docstring": "Fallback to degraded mode with minimal data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_fallback_to_local",
              "line_start": 257,
              "line_end": 273,
              "args": [
                "self",
                "data",
                "error"
              ],
              "returns": null,
              "docstring": "Fallback to local storage only.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_fallback_to_emergency",
              "line_start": 275,
              "line_end": 288,
              "args": [
                "self",
                "data",
                "error"
              ],
              "returns": null,
              "docstring": "Emergency fallback with absolute minimum.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_create_degraded_response",
              "line_start": 290,
              "line_end": 302,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Create degraded response with essential data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_escalate_fallback",
              "line_start": 304,
              "line_end": 330,
              "args": [
                "self",
                "new_level",
                "reason",
                "error"
              ],
              "returns": null,
              "docstring": "Escalate to new fallback level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_escalate_to_next_level",
              "line_start": 332,
              "line_end": 349,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "docstring": "Escalate to next fallback level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_attempt_recovery",
              "line_start": 351,
              "line_end": 363,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Attempt to recover to better fallback level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_setup_local_storage",
              "line_start": 365,
              "line_end": 387,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup local SQLite storage for fallback.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_store_locally",
              "line_start": 389,
              "line_end": 413,
              "args": [
                "self",
                "data",
                "status"
              ],
              "returns": null,
              "docstring": "Store data locally.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_preserve_data",
              "line_start": 415,
              "line_end": 429,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Preserve data during failure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_update_cache",
              "line_start": 431,
              "line_end": 448,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Update fallback cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_generate_cache_key",
              "line_start": 450,
              "line_end": 459,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Generate cache key for data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_estimate_recovery_time",
              "line_start": 461,
              "line_end": 465,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Estimate time to recovery in seconds.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "_recovery_loop",
              "line_start": 467,
              "line_end": 483,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background recovery monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "_sync_local_storage",
              "line_start": 485,
              "line_end": 517,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Sync locally stored data when connection restored.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 111
            },
            {
              "name": "_recover_exponential",
              "line_start": 519,
              "line_end": 521,
              "args": [
                "self",
                "attempts"
              ],
              "returns": null,
              "docstring": "Exponential backoff recovery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_recover_linear",
              "line_start": 523,
              "line_end": 525,
              "args": [
                "self",
                "attempts"
              ],
              "returns": null,
              "docstring": "Linear recovery timing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "_recover_immediate",
              "line_start": 527,
              "line_end": 529,
              "args": [
                "self",
                "attempts"
              ],
              "returns": null,
              "docstring": "Immediate recovery attempt.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 12
            },
            {
              "name": "register_alternative_endpoint",
              "line_start": 531,
              "line_end": 536,
              "args": [
                "self",
                "endpoint",
                "priority"
              ],
              "returns": null,
              "docstring": "Register alternative endpoint for fallback.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "get_fallback_status",
              "line_start": 538,
              "line_end": 557,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current fallback status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "force_recovery",
              "line_start": 559,
              "line_end": 565,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Force attempt to recover to primary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "shutdown",
              "line_start": 567,
              "line_end": 577,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown fallback system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            }
          ],
          "docstring": "Comprehensive fallback system for analytics failures.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 61,
          "line_end": 134,
          "args": [
            "self",
            "cache_size",
            "local_storage_path",
            "degraded_mode_threshold"
          ],
          "returns": null,
          "docstring": "Initialize fallback system.\n\nArgs:\n    cache_size: Maximum cache entries\n    local_storage_path: Path for local storage fallback\n    degraded_mode_threshold: Failures before degraded mode",
          "is_async": false,
          "decorators": [],
          "complexity_score": 244
        },
        {
          "name": "process_analytics",
          "line_start": 136,
          "line_end": 164,
          "args": [
            "self",
            "analytics_func",
            "analytics_data",
            "context"
          ],
          "returns": null,
          "docstring": "Process analytics with fallback protection.\n\nArgs:\n    analytics_func: Primary analytics function\n    analytics_data: Analytics data\n    context: Optional context\n    \nReturns:\n    (success, result)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_handle_success",
          "line_start": 166,
          "line_end": 176,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Handle successful analytics processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "_handle_failure",
          "line_start": 178,
          "line_end": 191,
          "args": [
            "self",
            "error",
            "data"
          ],
          "returns": null,
          "docstring": "Handle analytics failure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_execute_fallback",
          "line_start": 193,
          "line_end": 208,
          "args": [
            "self",
            "data",
            "error"
          ],
          "returns": null,
          "docstring": "Execute current fallback strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_fallback_to_cache",
          "line_start": 210,
          "line_end": 229,
          "args": [
            "self",
            "data",
            "error"
          ],
          "returns": null,
          "docstring": "Fallback to cached data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_fallback_to_secondary",
          "line_start": 231,
          "line_end": 244,
          "args": [
            "self",
            "data",
            "error"
          ],
          "returns": null,
          "docstring": "Fallback to secondary endpoint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_fallback_to_degraded",
          "line_start": 246,
          "line_end": 255,
          "args": [
            "self",
            "data",
            "error"
          ],
          "returns": null,
          "docstring": "Fallback to degraded mode with minimal data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_fallback_to_local",
          "line_start": 257,
          "line_end": 273,
          "args": [
            "self",
            "data",
            "error"
          ],
          "returns": null,
          "docstring": "Fallback to local storage only.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_fallback_to_emergency",
          "line_start": 275,
          "line_end": 288,
          "args": [
            "self",
            "data",
            "error"
          ],
          "returns": null,
          "docstring": "Emergency fallback with absolute minimum.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_create_degraded_response",
          "line_start": 290,
          "line_end": 302,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Create degraded response with essential data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_escalate_fallback",
          "line_start": 304,
          "line_end": 330,
          "args": [
            "self",
            "new_level",
            "reason",
            "error"
          ],
          "returns": null,
          "docstring": "Escalate to new fallback level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_escalate_to_next_level",
          "line_start": 332,
          "line_end": 349,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "docstring": "Escalate to next fallback level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_attempt_recovery",
          "line_start": 351,
          "line_end": 363,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Attempt to recover to better fallback level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_setup_local_storage",
          "line_start": 365,
          "line_end": 387,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup local SQLite storage for fallback.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_store_locally",
          "line_start": 389,
          "line_end": 413,
          "args": [
            "self",
            "data",
            "status"
          ],
          "returns": null,
          "docstring": "Store data locally.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_preserve_data",
          "line_start": 415,
          "line_end": 429,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Preserve data during failure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_update_cache",
          "line_start": 431,
          "line_end": 448,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Update fallback cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_generate_cache_key",
          "line_start": 450,
          "line_end": 459,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Generate cache key for data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_estimate_recovery_time",
          "line_start": 461,
          "line_end": 465,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Estimate time to recovery in seconds.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "_recovery_loop",
          "line_start": 467,
          "line_end": 483,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background recovery monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "_sync_local_storage",
          "line_start": 485,
          "line_end": 517,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Sync locally stored data when connection restored.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 111
        },
        {
          "name": "_recover_exponential",
          "line_start": 519,
          "line_end": 521,
          "args": [
            "self",
            "attempts"
          ],
          "returns": null,
          "docstring": "Exponential backoff recovery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_recover_linear",
          "line_start": 523,
          "line_end": 525,
          "args": [
            "self",
            "attempts"
          ],
          "returns": null,
          "docstring": "Linear recovery timing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "_recover_immediate",
          "line_start": 527,
          "line_end": 529,
          "args": [
            "self",
            "attempts"
          ],
          "returns": null,
          "docstring": "Immediate recovery attempt.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 12
        },
        {
          "name": "register_alternative_endpoint",
          "line_start": 531,
          "line_end": 536,
          "args": [
            "self",
            "endpoint",
            "priority"
          ],
          "returns": null,
          "docstring": "Register alternative endpoint for fallback.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "get_fallback_status",
          "line_start": 538,
          "line_end": 557,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current fallback status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "force_recovery",
          "line_start": 559,
          "line_end": 565,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Force attempt to recover to primary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "shutdown",
          "line_start": 567,
          "line_end": 577,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown fallback system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'dataclasses', 'json', 'logging', 'pickle', 'enum', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 580,
      "complexity_score": 4710,
      "api_surface_area": 10,
      "docstring": "Analytics Fallback System\n=========================\n\nProvides multiple fallback mechanisms for analytics failures including\ncaching, alternative endpoints, degraded mode, and local storage.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0303030303030303,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_flow_monitor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_flow_monitor.py",
      "component_name": "analytics_flow_monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.385935",
      "classes": [
        {
          "name": "FlowStage",
          "line_start": 30,
          "line_end": 39,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Analytics flow stages.",
          "decorators": []
        },
        {
          "name": "FlowStatus",
          "line_start": 41,
          "line_end": 47,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Flow status.",
          "decorators": []
        },
        {
          "name": "FlowEvent",
          "line_start": 50,
          "line_end": 61,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents an event in the analytics flow.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "FlowTransaction",
          "line_start": 64,
          "line_end": 75,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a complete analytics flow transaction.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsFlowMonitor",
          "line_start": 77,
          "line_end": 576,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 82,
              "line_end": 140,
              "args": [
                "self",
                "log_to_file",
                "log_file_path",
                "max_transactions"
              ],
              "returns": null,
              "docstring": "Initialize flow monitor.\n\nArgs:\n    log_to_file: Enable file logging\n    log_file_path: Path to log file\n    max_transactions: Maximum transactions to keep in memory",
              "is_async": false,
              "decorators": [],
              "complexity_score": 185
            },
            {
              "name": "_setup_file_logger",
              "line_start": 142,
              "line_end": 158,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup file logger for detailed flow logging.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "start_transaction",
              "line_start": 160,
              "line_end": 192,
              "args": [
                "self",
                "transaction_id"
              ],
              "returns": null,
              "docstring": "Start a new analytics flow transaction.\n\nArgs:\n    transaction_id: Optional transaction ID\n    \nReturns:\n    Transaction ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "record_stage",
              "line_start": 194,
              "line_end": 268,
              "args": [
                "self",
                "transaction_id",
                "stage",
                "status",
                "data",
                "message",
                "metadata",
                "error"
              ],
              "returns": null,
              "docstring": "Record a stage in the analytics flow.\n\nArgs:\n    transaction_id: Transaction ID\n    stage: Flow stage\n    status: Stage status\n    data: Optional data being processed\n    message: Stage message\n    metadata: Additional metadata\n    error: Optional exception\n    \nReturns:\n    Flow event",
              "is_async": false,
              "decorators": [],
              "complexity_score": 348
            },
            {
              "name": "complete_transaction",
              "line_start": 270,
              "line_end": 320,
              "args": [
                "self",
                "transaction_id",
                "status"
              ],
              "returns": null,
              "docstring": "Complete an analytics flow transaction.\n\nArgs:\n    transaction_id: Transaction ID\n    status: Optional final status\n    \nReturns:\n    Completed transaction",
              "is_async": false,
              "decorators": [],
              "complexity_score": 233
            },
            {
              "name": "_calculate_data_size",
              "line_start": 322,
              "line_end": 334,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate approximate size of data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_update_statistics",
              "line_start": 336,
              "line_end": 352,
              "args": [
                "self",
                "stage",
                "status",
                "duration_ms",
                "data_size"
              ],
              "returns": null,
              "docstring": "Update flow statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "_log_event",
              "line_start": 354,
              "line_end": 358,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": "Log event to console and file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_log_stage_event",
              "line_start": 360,
              "line_end": 385,
              "args": [
                "self",
                "transaction_id",
                "event"
              ],
              "returns": null,
              "docstring": "Log stage event with details.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "_check_thresholds",
              "line_start": 387,
              "line_end": 413,
              "args": [
                "self",
                "transaction",
                "event"
              ],
              "returns": null,
              "docstring": "Check thresholds and generate alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 143
            },
            {
              "name": "_monitoring_loop",
              "line_start": 415,
              "line_end": 440,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "_calculate_error_rates",
              "line_start": 442,
              "line_end": 460,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate and check error rates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "get_flow_summary",
              "line_start": 462,
              "line_end": 480,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get flow monitoring summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 130
            },
            {
              "name": "get_transaction_details",
              "line_start": 482,
              "line_end": 526,
              "args": [
                "self",
                "transaction_id"
              ],
              "returns": null,
              "docstring": "Get detailed transaction information.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 233
            },
            {
              "name": "export_flow_logs",
              "line_start": 528,
              "line_end": 562,
              "args": [
                "self",
                "format"
              ],
              "returns": null,
              "docstring": "Export flow logs.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 199
            },
            {
              "name": "shutdown",
              "line_start": 564,
              "line_end": 576,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown flow monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            }
          ],
          "docstring": "Monitors and logs the complete analytics data flow.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 82,
          "line_end": 140,
          "args": [
            "self",
            "log_to_file",
            "log_file_path",
            "max_transactions"
          ],
          "returns": null,
          "docstring": "Initialize flow monitor.\n\nArgs:\n    log_to_file: Enable file logging\n    log_file_path: Path to log file\n    max_transactions: Maximum transactions to keep in memory",
          "is_async": false,
          "decorators": [],
          "complexity_score": 185
        },
        {
          "name": "_setup_file_logger",
          "line_start": 142,
          "line_end": 158,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup file logger for detailed flow logging.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "start_transaction",
          "line_start": 160,
          "line_end": 192,
          "args": [
            "self",
            "transaction_id"
          ],
          "returns": null,
          "docstring": "Start a new analytics flow transaction.\n\nArgs:\n    transaction_id: Optional transaction ID\n    \nReturns:\n    Transaction ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "record_stage",
          "line_start": 194,
          "line_end": 268,
          "args": [
            "self",
            "transaction_id",
            "stage",
            "status",
            "data",
            "message",
            "metadata",
            "error"
          ],
          "returns": null,
          "docstring": "Record a stage in the analytics flow.\n\nArgs:\n    transaction_id: Transaction ID\n    stage: Flow stage\n    status: Stage status\n    data: Optional data being processed\n    message: Stage message\n    metadata: Additional metadata\n    error: Optional exception\n    \nReturns:\n    Flow event",
          "is_async": false,
          "decorators": [],
          "complexity_score": 348
        },
        {
          "name": "complete_transaction",
          "line_start": 270,
          "line_end": 320,
          "args": [
            "self",
            "transaction_id",
            "status"
          ],
          "returns": null,
          "docstring": "Complete an analytics flow transaction.\n\nArgs:\n    transaction_id: Transaction ID\n    status: Optional final status\n    \nReturns:\n    Completed transaction",
          "is_async": false,
          "decorators": [],
          "complexity_score": 233
        },
        {
          "name": "_calculate_data_size",
          "line_start": 322,
          "line_end": 334,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate approximate size of data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_update_statistics",
          "line_start": 336,
          "line_end": 352,
          "args": [
            "self",
            "stage",
            "status",
            "duration_ms",
            "data_size"
          ],
          "returns": null,
          "docstring": "Update flow statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "_log_event",
          "line_start": 354,
          "line_end": 358,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": "Log event to console and file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_log_stage_event",
          "line_start": 360,
          "line_end": 385,
          "args": [
            "self",
            "transaction_id",
            "event"
          ],
          "returns": null,
          "docstring": "Log stage event with details.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "_check_thresholds",
          "line_start": 387,
          "line_end": 413,
          "args": [
            "self",
            "transaction",
            "event"
          ],
          "returns": null,
          "docstring": "Check thresholds and generate alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 143
        },
        {
          "name": "_monitoring_loop",
          "line_start": 415,
          "line_end": 440,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "_calculate_error_rates",
          "line_start": 442,
          "line_end": 460,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate and check error rates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "get_flow_summary",
          "line_start": 462,
          "line_end": 480,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get flow monitoring summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 130
        },
        {
          "name": "get_transaction_details",
          "line_start": 482,
          "line_end": 526,
          "args": [
            "self",
            "transaction_id"
          ],
          "returns": null,
          "docstring": "Get detailed transaction information.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 233
        },
        {
          "name": "export_flow_logs",
          "line_start": 528,
          "line_end": 562,
          "args": [
            "self",
            "format"
          ],
          "returns": null,
          "docstring": "Export flow logs.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 199
        },
        {
          "name": "shutdown",
          "line_start": 564,
          "line_end": 576,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown flow monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'hashlib', 'traceback', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 579,
      "complexity_score": 4920,
      "api_surface_area": 14,
      "docstring": "Analytics Flow Monitor\n======================\n\nComprehensive monitoring and logging system for analytics data flow.\nTracks every stage of analytics processing from collection to delivery.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0476190476190477,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_health_monitor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_health_monitor.py",
      "component_name": "analytics_health_monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.400933",
      "classes": [
        {
          "name": "HealthStatus",
          "line_start": 25,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "ComponentType",
          "line_start": 32,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "HealthCheck",
          "line_start": 43,
          "line_end": 156,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 46,
              "line_end": 71,
              "args": [
                "self",
                "name",
                "check_func",
                "interval",
                "timeout",
                "critical"
              ],
              "returns": null,
              "docstring": "Initialize a health check.\n\nArgs:\n    name: Name of the health check\n    check_func: Function that performs the check\n    interval: Check interval in seconds\n    timeout: Check timeout in seconds\n    critical: Whether this is a critical check",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "execute",
              "line_start": 73,
              "line_end": 114,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Execute the health check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 255
            },
            {
              "name": "_execute_with_timeout",
              "line_start": 116,
              "line_end": 139,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Execute check function with timeout.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "get_stats",
              "line_start": 141,
              "line_end": 156,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get check statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            }
          ],
          "docstring": "Represents a health check for a component.",
          "decorators": []
        },
        {
          "name": "RecoveryAction",
          "line_start": 158,
          "line_end": 233,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 161,
              "line_end": 178,
              "args": [
                "self",
                "name",
                "action_func",
                "conditions"
              ],
              "returns": null,
              "docstring": "Initialize a recovery action.\n\nArgs:\n    name: Name of the recovery action\n    action_func: Function that performs the recovery\n    conditions: Conditions under which to trigger this action",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "should_execute",
              "line_start": 180,
              "line_end": 198,
              "args": [
                "self",
                "health_result"
              ],
              "returns": null,
              "docstring": "Check if this recovery action should be executed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "execute",
              "line_start": 200,
              "line_end": 233,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "docstring": "Execute the recovery action.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 184
            }
          ],
          "docstring": "Represents a recovery action for a component.",
          "decorators": []
        },
        {
          "name": "AnalyticsHealthMonitor",
          "line_start": 235,
          "line_end": 725,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 240,
              "line_end": 276,
              "args": [
                "self",
                "check_interval"
              ],
              "returns": null,
              "docstring": "Initialize the health monitor.\n\nArgs:\n    check_interval: Global check interval in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "register_component",
              "line_start": 278,
              "line_end": 281,
              "args": [
                "self",
                "component_type",
                "component_instance"
              ],
              "returns": null,
              "docstring": "Register a component for monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "add_health_check",
              "line_start": 283,
              "line_end": 288,
              "args": [
                "self",
                "component_type",
                "check"
              ],
              "returns": null,
              "docstring": "Add a health check for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "add_recovery_action",
              "line_start": 290,
              "line_end": 293,
              "args": [
                "self",
                "component_type",
                "action"
              ],
              "returns": null,
              "docstring": "Add a recovery action for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "add_alert_callback",
              "line_start": 295,
              "line_end": 297,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add a callback function for health alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "start_monitoring",
              "line_start": 299,
              "line_end": 312,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the health monitoring service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "stop_monitoring",
              "line_start": 314,
              "line_end": 320,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop the health monitoring service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "run_health_check",
              "line_start": 322,
              "line_end": 388,
              "args": [
                "self",
                "component_type"
              ],
              "returns": null,
              "docstring": "Run health checks for all components or a specific component.\n\nArgs:\n    component_type: Specific component to check, or None for all\n\nReturns:\n    Health check results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 309
            },
            {
              "name": "get_health_status",
              "line_start": 390,
              "line_end": 411,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current health status summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "get_component_health",
              "line_start": 413,
              "line_end": 431,
              "args": [
                "self",
                "component_type"
              ],
              "returns": null,
              "docstring": "Get detailed health information for a specific component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "force_recovery",
              "line_start": 433,
              "line_end": 469,
              "args": [
                "self",
                "component_type",
                "action_name"
              ],
              "returns": null,
              "docstring": "Force execution of recovery actions for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_setup_default_checks",
              "line_start": 471,
              "line_end": 545,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Set up default health checks for known components.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 336
            },
            {
              "name": "_setup_default_recovery_actions",
              "line_start": 547,
              "line_end": 598,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Set up default recovery actions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 250
            },
            {
              "name": "_monitoring_loop",
              "line_start": 600,
              "line_end": 612,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_trigger_recovery",
              "line_start": 614,
              "line_end": 639,
              "args": [
                "self",
                "component_type",
                "health_result"
              ],
              "returns": null,
              "docstring": "Trigger recovery actions if conditions are met.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "_calculate_overall_health",
              "line_start": 641,
              "line_end": 654,
              "args": [
                "self",
                "component_results"
              ],
              "returns": null,
              "docstring": "Calculate overall system health from component results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_check_system_resources",
              "line_start": 656,
              "line_end": 672,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check system resource usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_send_alerts",
              "line_start": 674,
              "line_end": 694,
              "args": [
                "self",
                "health_summary"
              ],
              "returns": null,
              "docstring": "Send alerts based on health status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "get_monitoring_stats",
              "line_start": 696,
              "line_end": 725,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive monitoring statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 234
            }
          ],
          "docstring": "Comprehensive health monitoring system for analytics components.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 46,
          "line_end": 71,
          "args": [
            "self",
            "name",
            "check_func",
            "interval",
            "timeout",
            "critical"
          ],
          "returns": null,
          "docstring": "Initialize a health check.\n\nArgs:\n    name: Name of the health check\n    check_func: Function that performs the check\n    interval: Check interval in seconds\n    timeout: Check timeout in seconds\n    critical: Whether this is a critical check",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "execute",
          "line_start": 73,
          "line_end": 114,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Execute the health check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 255
        },
        {
          "name": "_execute_with_timeout",
          "line_start": 116,
          "line_end": 139,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Execute check function with timeout.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "get_stats",
          "line_start": 141,
          "line_end": 156,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get check statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "__init__",
          "line_start": 161,
          "line_end": 178,
          "args": [
            "self",
            "name",
            "action_func",
            "conditions"
          ],
          "returns": null,
          "docstring": "Initialize a recovery action.\n\nArgs:\n    name: Name of the recovery action\n    action_func: Function that performs the recovery\n    conditions: Conditions under which to trigger this action",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "should_execute",
          "line_start": 180,
          "line_end": 198,
          "args": [
            "self",
            "health_result"
          ],
          "returns": null,
          "docstring": "Check if this recovery action should be executed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "execute",
          "line_start": 200,
          "line_end": 233,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "docstring": "Execute the recovery action.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        },
        {
          "name": "__init__",
          "line_start": 240,
          "line_end": 276,
          "args": [
            "self",
            "check_interval"
          ],
          "returns": null,
          "docstring": "Initialize the health monitor.\n\nArgs:\n    check_interval: Global check interval in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "register_component",
          "line_start": 278,
          "line_end": 281,
          "args": [
            "self",
            "component_type",
            "component_instance"
          ],
          "returns": null,
          "docstring": "Register a component for monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "add_health_check",
          "line_start": 283,
          "line_end": 288,
          "args": [
            "self",
            "component_type",
            "check"
          ],
          "returns": null,
          "docstring": "Add a health check for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "add_recovery_action",
          "line_start": 290,
          "line_end": 293,
          "args": [
            "self",
            "component_type",
            "action"
          ],
          "returns": null,
          "docstring": "Add a recovery action for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "add_alert_callback",
          "line_start": 295,
          "line_end": 297,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add a callback function for health alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "start_monitoring",
          "line_start": 299,
          "line_end": 312,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the health monitoring service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "stop_monitoring",
          "line_start": 314,
          "line_end": 320,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop the health monitoring service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "run_health_check",
          "line_start": 322,
          "line_end": 388,
          "args": [
            "self",
            "component_type"
          ],
          "returns": null,
          "docstring": "Run health checks for all components or a specific component.\n\nArgs:\n    component_type: Specific component to check, or None for all\n\nReturns:\n    Health check results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 309
        },
        {
          "name": "get_health_status",
          "line_start": 390,
          "line_end": 411,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current health status summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "get_component_health",
          "line_start": 413,
          "line_end": 431,
          "args": [
            "self",
            "component_type"
          ],
          "returns": null,
          "docstring": "Get detailed health information for a specific component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "force_recovery",
          "line_start": 433,
          "line_end": 469,
          "args": [
            "self",
            "component_type",
            "action_name"
          ],
          "returns": null,
          "docstring": "Force execution of recovery actions for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_setup_default_checks",
          "line_start": 471,
          "line_end": 545,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Set up default health checks for known components.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 336
        },
        {
          "name": "_setup_default_recovery_actions",
          "line_start": 547,
          "line_end": 598,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Set up default recovery actions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 250
        },
        {
          "name": "_monitoring_loop",
          "line_start": 600,
          "line_end": 612,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_trigger_recovery",
          "line_start": 614,
          "line_end": 639,
          "args": [
            "self",
            "component_type",
            "health_result"
          ],
          "returns": null,
          "docstring": "Trigger recovery actions if conditions are met.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "_calculate_overall_health",
          "line_start": 641,
          "line_end": 654,
          "args": [
            "self",
            "component_results"
          ],
          "returns": null,
          "docstring": "Calculate overall system health from component results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_check_system_resources",
          "line_start": 656,
          "line_end": 672,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check system resource usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_send_alerts",
          "line_start": 674,
          "line_end": 694,
          "args": [
            "self",
            "health_summary"
          ],
          "returns": null,
          "docstring": "Send alerts based on health status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "get_monitoring_stats",
          "line_start": 696,
          "line_end": 725,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive monitoring statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 234
        },
        {
          "name": "timeout_handler",
          "line_start": 120,
          "line_end": 121,
          "args": [
            "signum",
            "frame"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "check_aggregator",
          "line_start": 474,
          "line_end": 488,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "check_performance_monitor",
          "line_start": 491,
          "line_end": 504,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "check_system_resources",
          "line_start": 507,
          "line_end": 526,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "cleanup_memory",
          "line_start": 550,
          "line_end": 552,
          "args": [
            "context"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "reset_cache",
          "line_start": 555,
          "line_end": 562,
          "args": [
            "context"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "restart_component",
          "line_start": 565,
          "line_end": 575,
          "args": [
            "context"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "gc",
          "names": [
            "gc"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "signal",
          "names": [
            "signal"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 118
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'signal', 'logging', 'enum', 'threading', 'gc', 'traceback', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 725,
      "complexity_score": 7428,
      "api_surface_area": 37,
      "docstring": "Analytics Health Monitor\n========================\n\nComprehensive health monitoring and auto-recovery system for analytics components.\nMonitors system health, detects failures, and automatically recovers from issues.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.7894736842105263,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_heartbeat_monitor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_heartbeat_monitor.py",
      "component_name": "analytics_heartbeat_monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.411934",
      "classes": [
        {
          "name": "ConnectionStatus",
          "line_start": 26,
          "line_end": 32,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Connection status states.",
          "decorators": []
        },
        {
          "name": "DeliveryStatus",
          "line_start": 34,
          "line_end": 39,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Analytics delivery status.",
          "decorators": []
        },
        {
          "name": "HeartbeatPulse",
          "line_start": 42,
          "line_end": 50,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a heartbeat pulse.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DeliveryConfirmation",
          "line_start": 53,
          "line_end": 63,
          "base_classes": [],
          "methods": [],
          "docstring": "Analytics delivery confirmation.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DashboardHeartbeatMonitor",
          "line_start": 65,
          "line_end": 687,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 70,
              "line_end": 157,
              "args": [
                "self",
                "heartbeat_interval",
                "timeout",
                "max_failures"
              ],
              "returns": null,
              "docstring": "Initialize heartbeat monitor.\n\nArgs:\n    heartbeat_interval: Seconds between heartbeats\n    timeout: Request timeout in seconds\n    max_failures: Failures before marking disconnected",
              "is_async": false,
              "decorators": [],
              "complexity_score": 274
            },
            {
              "name": "register_endpoint",
              "line_start": 159,
              "line_end": 187,
              "args": [
                "self",
                "name",
                "url",
                "check_type",
                "critical"
              ],
              "returns": null,
              "docstring": "Register a dashboard endpoint for monitoring.\n\nArgs:\n    name: Endpoint name\n    url: Endpoint URL\n    check_type: Type of health check (ping, http, websocket)\n    critical: Whether endpoint is critical",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "send_analytics",
              "line_start": 189,
              "line_end": 231,
              "args": [
                "self",
                "analytics_data",
                "endpoint",
                "strategy",
                "priority"
              ],
              "returns": null,
              "docstring": "Send analytics to dashboard with delivery confirmation.\n\nArgs:\n    analytics_data: Analytics data to send\n    endpoint: Target endpoint name\n    strategy: Delivery strategy\n    priority: Delivery priority (1-10)\n    \nReturns:\n    Delivery ID for tracking",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "get_delivery_status",
              "line_start": 233,
              "line_end": 265,
              "args": [
                "self",
                "delivery_id"
              ],
              "returns": null,
              "docstring": "Get status of analytics delivery.\n\nArgs:\n    delivery_id: Delivery ID to check\n    \nReturns:\n    Delivery confirmation or None",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_heartbeat_loop",
              "line_start": 267,
              "line_end": 278,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background heartbeat monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_send_heartbeat",
              "line_start": 280,
              "line_end": 337,
              "args": [
                "self",
                "endpoint_name",
                "endpoint_info"
              ],
              "returns": null,
              "docstring": "Send heartbeat to endpoint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 312
            },
            {
              "name": "_check_http",
              "line_start": 339,
              "line_end": 353,
              "args": [
                "self",
                "url"
              ],
              "returns": null,
              "docstring": "HTTP health check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_check_ping",
              "line_start": 355,
              "line_end": 370,
              "args": [
                "self",
                "url"
              ],
              "returns": null,
              "docstring": "Ping health check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_check_websocket",
              "line_start": 372,
              "line_end": 375,
              "args": [
                "self",
                "url"
              ],
              "returns": null,
              "docstring": "WebSocket health check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "_delivery_loop",
              "line_start": 377,
              "line_end": 391,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background delivery processing loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_process_delivery",
              "line_start": 393,
              "line_end": 446,
              "args": [
                "self",
                "delivery"
              ],
              "returns": null,
              "docstring": "Process analytics delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 301
            },
            {
              "name": "_deliver_direct",
              "line_start": 448,
              "line_end": 463,
              "args": [
                "self",
                "delivery"
              ],
              "returns": null,
              "docstring": "Direct delivery strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            },
            {
              "name": "_deliver_batched",
              "line_start": 465,
              "line_end": 488,
              "args": [
                "self",
                "delivery"
              ],
              "returns": null,
              "docstring": "Batched delivery strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 164
            },
            {
              "name": "_deliver_compressed",
              "line_start": 490,
              "line_end": 513,
              "args": [
                "self",
                "delivery"
              ],
              "returns": null,
              "docstring": "Compressed delivery strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "_deliver_chunked",
              "line_start": 515,
              "line_end": 547,
              "args": [
                "self",
                "delivery"
              ],
              "returns": null,
              "docstring": "Chunked delivery for large payloads.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 184
            },
            {
              "name": "_mark_delivery_failed",
              "line_start": 549,
              "line_end": 565,
              "args": [
                "self",
                "delivery",
                "error"
              ],
              "returns": null,
              "docstring": "Mark delivery as failed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_handle_connection_change",
              "line_start": 567,
              "line_end": 589,
              "args": [
                "self",
                "endpoint",
                "new_status"
              ],
              "returns": null,
              "docstring": "Handle connection status change.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 163
            },
            {
              "name": "_init_connection_pool",
              "line_start": 591,
              "line_end": 598,
              "args": [
                "self",
                "name",
                "url"
              ],
              "returns": null,
              "docstring": "Initialize connection pool for endpoint.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "_update_response_time_average",
              "line_start": 600,
              "line_end": 607,
              "args": [
                "self",
                "response_time"
              ],
              "returns": null,
              "docstring": "Update average response time.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "register_callback",
              "line_start": 609,
              "line_end": 618,
              "args": [
                "self",
                "event",
                "callback"
              ],
              "returns": null,
              "docstring": "Register callback for connection events.\n\nArgs:\n    event: Event type (on_connect, on_disconnect, etc.)\n    callback: Callback function",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "get_connection_status",
              "line_start": 620,
              "line_end": 650,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current connection status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "_calculate_overall_health",
              "line_start": 652,
              "line_end": 675,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "shutdown",
              "line_start": 677,
              "line_end": 687,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown heartbeat monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            }
          ],
          "docstring": "Monitors dashboard connectivity and ensures analytics delivery.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 70,
          "line_end": 157,
          "args": [
            "self",
            "heartbeat_interval",
            "timeout",
            "max_failures"
          ],
          "returns": null,
          "docstring": "Initialize heartbeat monitor.\n\nArgs:\n    heartbeat_interval: Seconds between heartbeats\n    timeout: Request timeout in seconds\n    max_failures: Failures before marking disconnected",
          "is_async": false,
          "decorators": [],
          "complexity_score": 274
        },
        {
          "name": "register_endpoint",
          "line_start": 159,
          "line_end": 187,
          "args": [
            "self",
            "name",
            "url",
            "check_type",
            "critical"
          ],
          "returns": null,
          "docstring": "Register a dashboard endpoint for monitoring.\n\nArgs:\n    name: Endpoint name\n    url: Endpoint URL\n    check_type: Type of health check (ping, http, websocket)\n    critical: Whether endpoint is critical",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "send_analytics",
          "line_start": 189,
          "line_end": 231,
          "args": [
            "self",
            "analytics_data",
            "endpoint",
            "strategy",
            "priority"
          ],
          "returns": null,
          "docstring": "Send analytics to dashboard with delivery confirmation.\n\nArgs:\n    analytics_data: Analytics data to send\n    endpoint: Target endpoint name\n    strategy: Delivery strategy\n    priority: Delivery priority (1-10)\n    \nReturns:\n    Delivery ID for tracking",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "get_delivery_status",
          "line_start": 233,
          "line_end": 265,
          "args": [
            "self",
            "delivery_id"
          ],
          "returns": null,
          "docstring": "Get status of analytics delivery.\n\nArgs:\n    delivery_id: Delivery ID to check\n    \nReturns:\n    Delivery confirmation or None",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_heartbeat_loop",
          "line_start": 267,
          "line_end": 278,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background heartbeat monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_send_heartbeat",
          "line_start": 280,
          "line_end": 337,
          "args": [
            "self",
            "endpoint_name",
            "endpoint_info"
          ],
          "returns": null,
          "docstring": "Send heartbeat to endpoint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 312
        },
        {
          "name": "_check_http",
          "line_start": 339,
          "line_end": 353,
          "args": [
            "self",
            "url"
          ],
          "returns": null,
          "docstring": "HTTP health check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_check_ping",
          "line_start": 355,
          "line_end": 370,
          "args": [
            "self",
            "url"
          ],
          "returns": null,
          "docstring": "Ping health check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_check_websocket",
          "line_start": 372,
          "line_end": 375,
          "args": [
            "self",
            "url"
          ],
          "returns": null,
          "docstring": "WebSocket health check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "_delivery_loop",
          "line_start": 377,
          "line_end": 391,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background delivery processing loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_process_delivery",
          "line_start": 393,
          "line_end": 446,
          "args": [
            "self",
            "delivery"
          ],
          "returns": null,
          "docstring": "Process analytics delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 301
        },
        {
          "name": "_deliver_direct",
          "line_start": 448,
          "line_end": 463,
          "args": [
            "self",
            "delivery"
          ],
          "returns": null,
          "docstring": "Direct delivery strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "_deliver_batched",
          "line_start": 465,
          "line_end": 488,
          "args": [
            "self",
            "delivery"
          ],
          "returns": null,
          "docstring": "Batched delivery strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 164
        },
        {
          "name": "_deliver_compressed",
          "line_start": 490,
          "line_end": 513,
          "args": [
            "self",
            "delivery"
          ],
          "returns": null,
          "docstring": "Compressed delivery strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "_deliver_chunked",
          "line_start": 515,
          "line_end": 547,
          "args": [
            "self",
            "delivery"
          ],
          "returns": null,
          "docstring": "Chunked delivery for large payloads.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        },
        {
          "name": "_mark_delivery_failed",
          "line_start": 549,
          "line_end": 565,
          "args": [
            "self",
            "delivery",
            "error"
          ],
          "returns": null,
          "docstring": "Mark delivery as failed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_handle_connection_change",
          "line_start": 567,
          "line_end": 589,
          "args": [
            "self",
            "endpoint",
            "new_status"
          ],
          "returns": null,
          "docstring": "Handle connection status change.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 163
        },
        {
          "name": "_init_connection_pool",
          "line_start": 591,
          "line_end": 598,
          "args": [
            "self",
            "name",
            "url"
          ],
          "returns": null,
          "docstring": "Initialize connection pool for endpoint.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "_update_response_time_average",
          "line_start": 600,
          "line_end": 607,
          "args": [
            "self",
            "response_time"
          ],
          "returns": null,
          "docstring": "Update average response time.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "register_callback",
          "line_start": 609,
          "line_end": 618,
          "args": [
            "self",
            "event",
            "callback"
          ],
          "returns": null,
          "docstring": "Register callback for connection events.\n\nArgs:\n    event: Event type (on_connect, on_disconnect, etc.)\n    callback: Callback function",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "get_connection_status",
          "line_start": 620,
          "line_end": 650,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current connection status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "_calculate_overall_health",
          "line_start": 652,
          "line_end": 675,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "shutdown",
          "line_start": 677,
          "line_end": 687,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown heartbeat monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "socket",
          "names": [
            "socket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "requests",
          "names": [
            "requests"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "urllib.parse",
          "names": [
            "urlparse"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 492
        },
        {
          "module": "base64",
          "names": [
            "base64"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 493
        }
      ],
      "external_dependencies": "{'requests', 'urllib.parse', 'base64', 'typing', 'time', 'dataclasses', 'zlib', 'socket', 'json', 'logging', 'enum', 'threading', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 690,
      "complexity_score": 5868,
      "api_surface_area": 12,
      "docstring": "Dashboard Connection Heartbeat Monitor\n======================================\n\nMonitors dashboard connectivity and ensures analytics delivery with\nheartbeat checks, connection pooling, and automatic reconnection.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0357142857142858,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_integrity_guardian.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_integrity_guardian.py",
      "component_name": "analytics_integrity_guardian",
      "analysis_timestamp": "2025-08-20 21:46:40.420935",
      "classes": [
        {
          "name": "IntegrityStatus",
          "line_start": 28,
          "line_end": 34,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Data integrity status.",
          "decorators": []
        },
        {
          "name": "ChecksumAlgorithm",
          "line_start": 36,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Checksum algorithms.",
          "decorators": []
        },
        {
          "name": "IntegrityRecord",
          "line_start": 44,
          "line_end": 68,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 56,
              "line_end": 68,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            }
          ],
          "docstring": "Analytics integrity record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsIntegrityGuardian",
          "line_start": 70,
          "line_end": 620,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 75,
              "line_end": 141,
              "args": [
                "self",
                "aggregator",
                "db_path",
                "verification_interval"
              ],
              "returns": null,
              "docstring": "Initialize analytics integrity guardian.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    db_path: Database path for integrity records\n    verification_interval: Seconds between integrity checks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 263
            },
            {
              "name": "_init_database",
              "line_start": 143,
              "line_end": 176,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize integrity database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "register_analytics",
              "line_start": 178,
              "line_end": 237,
              "args": [
                "self",
                "analytics_id",
                "analytics_data",
                "algorithm"
              ],
              "returns": null,
              "docstring": "Register analytics for integrity monitoring.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    analytics_data: Analytics data to protect\n    algorithm: Checksum algorithm to use\n    \nReturns:\n    Generated checksum",
              "is_async": false,
              "decorators": [],
              "complexity_score": 230
            },
            {
              "name": "verify_analytics",
              "line_start": 239,
              "line_end": 316,
              "args": [
                "self",
                "analytics_id",
                "current_data"
              ],
              "returns": null,
              "docstring": "Verify analytics integrity.\n\nArgs:\n    analytics_id: Analytics identifier\n    current_data: Current analytics data to verify\n    \nReturns:\n    Integrity verification record",
              "is_async": false,
              "decorators": [],
              "complexity_score": 382
            },
            {
              "name": "_generate_checksum",
              "line_start": 318,
              "line_end": 352,
              "args": [
                "self",
                "data",
                "algorithm"
              ],
              "returns": null,
              "docstring": "Generate checksum for data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_normalize_data",
              "line_start": 354,
              "line_end": 381,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize data for consistent checksums.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "_detect_tampering",
              "line_start": 383,
              "line_end": 411,
              "args": [
                "self",
                "analytics_id",
                "current_data"
              ],
              "returns": null,
              "docstring": "Detect potential tampering attempts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "_check_timestamp_tampering",
              "line_start": 413,
              "line_end": 436,
              "args": [
                "self",
                "original",
                "current"
              ],
              "returns": null,
              "docstring": "Check for timestamp tampering.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "_attempt_recovery",
              "line_start": 438,
              "line_end": 473,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Attempt to recover corrupted analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 193
            },
            {
              "name": "_save_integrity_record",
              "line_start": 475,
              "line_end": 502,
              "args": [
                "self",
                "record",
                "backup_data"
              ],
              "returns": null,
              "docstring": "Save integrity record to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_verification_loop",
              "line_start": 504,
              "line_end": 526,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background verification loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "_cleanup_loop",
              "line_start": 528,
              "line_end": 563,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background cleanup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 201
            },
            {
              "name": "get_integrity_status",
              "line_start": 565,
              "line_end": 568,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Get integrity status for specific analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "get_integrity_summary",
              "line_start": 570,
              "line_end": 594,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive integrity summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "force_verification",
              "line_start": 596,
              "line_end": 609,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Force immediate verification of specific analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "shutdown",
              "line_start": 611,
              "line_end": 620,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown integrity guardian.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            }
          ],
          "docstring": "Advanced analytics integrity verification and protection system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 56,
          "line_end": 68,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "__init__",
          "line_start": 75,
          "line_end": 141,
          "args": [
            "self",
            "aggregator",
            "db_path",
            "verification_interval"
          ],
          "returns": null,
          "docstring": "Initialize analytics integrity guardian.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    db_path: Database path for integrity records\n    verification_interval: Seconds between integrity checks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 263
        },
        {
          "name": "_init_database",
          "line_start": 143,
          "line_end": 176,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize integrity database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "register_analytics",
          "line_start": 178,
          "line_end": 237,
          "args": [
            "self",
            "analytics_id",
            "analytics_data",
            "algorithm"
          ],
          "returns": null,
          "docstring": "Register analytics for integrity monitoring.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    analytics_data: Analytics data to protect\n    algorithm: Checksum algorithm to use\n    \nReturns:\n    Generated checksum",
          "is_async": false,
          "decorators": [],
          "complexity_score": 230
        },
        {
          "name": "verify_analytics",
          "line_start": 239,
          "line_end": 316,
          "args": [
            "self",
            "analytics_id",
            "current_data"
          ],
          "returns": null,
          "docstring": "Verify analytics integrity.\n\nArgs:\n    analytics_id: Analytics identifier\n    current_data: Current analytics data to verify\n    \nReturns:\n    Integrity verification record",
          "is_async": false,
          "decorators": [],
          "complexity_score": 382
        },
        {
          "name": "_generate_checksum",
          "line_start": 318,
          "line_end": 352,
          "args": [
            "self",
            "data",
            "algorithm"
          ],
          "returns": null,
          "docstring": "Generate checksum for data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_normalize_data",
          "line_start": 354,
          "line_end": 381,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize data for consistent checksums.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "_detect_tampering",
          "line_start": 383,
          "line_end": 411,
          "args": [
            "self",
            "analytics_id",
            "current_data"
          ],
          "returns": null,
          "docstring": "Detect potential tampering attempts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "_check_timestamp_tampering",
          "line_start": 413,
          "line_end": 436,
          "args": [
            "self",
            "original",
            "current"
          ],
          "returns": null,
          "docstring": "Check for timestamp tampering.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "_attempt_recovery",
          "line_start": 438,
          "line_end": 473,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Attempt to recover corrupted analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 193
        },
        {
          "name": "_save_integrity_record",
          "line_start": 475,
          "line_end": 502,
          "args": [
            "self",
            "record",
            "backup_data"
          ],
          "returns": null,
          "docstring": "Save integrity record to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_verification_loop",
          "line_start": 504,
          "line_end": 526,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background verification loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "_cleanup_loop",
          "line_start": 528,
          "line_end": 563,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background cleanup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 201
        },
        {
          "name": "get_integrity_status",
          "line_start": 565,
          "line_end": 568,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Get integrity status for specific analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "get_integrity_summary",
          "line_start": 570,
          "line_end": 594,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive integrity summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "force_verification",
          "line_start": 596,
          "line_end": 609,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Force immediate verification of specific analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "shutdown",
          "line_start": 611,
          "line_end": 620,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown integrity guardian.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "base64",
          "names": [
            "base64"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        }
      ],
      "external_dependencies": "{'sqlite3', 'hashlib', 'base64', 'typing', 'time', 'dataclasses', 'zlib', 'json', 'logging', 'enum', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 623,
      "complexity_score": 5422,
      "api_surface_area": 14,
      "docstring": "Analytics Integrity Guardian\n============================\n\nAdvanced data integrity system with checksums, verification, and tamper detection\nto ensure 100% analytics reliability and prevent any data corruption or loss.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0476190476190477,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_integrity_verifier.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_integrity_verifier.py",
      "component_name": "analytics_integrity_verifier",
      "analysis_timestamp": "2025-08-20 21:46:40.429935",
      "classes": [
        {
          "name": "IntegrityLevel",
          "line_start": 28,
          "line_end": 32,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "IntegrityViolationType",
          "line_start": 34,
          "line_end": 42,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "IntegrityRecord",
          "line_start": 45,
          "line_end": 57,
          "base_classes": [],
          "methods": [],
          "docstring": "Data integrity record with verification information.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "IntegrityViolation",
          "line_start": 60,
          "line_end": 72,
          "base_classes": [],
          "methods": [],
          "docstring": "Integrity violation detection record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AuditTrailEntry",
          "line_start": 75,
          "line_end": 85,
          "base_classes": [],
          "methods": [],
          "docstring": "Audit trail entry for data modifications.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsIntegrityVerifier",
          "line_start": 87,
          "line_end": 776,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 92,
              "line_end": 143,
              "args": [
                "self",
                "integrity_level",
                "secret_key",
                "audit_db_path"
              ],
              "returns": null,
              "docstring": "Initialize analytics integrity verifier.\n\nArgs:\n    integrity_level: Level of integrity verification\n    secret_key: Secret key for HMAC signatures\n    audit_db_path: Path to audit trail database",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "start_verification",
              "line_start": 145,
              "line_end": 154,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start background integrity verification.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_verification",
              "line_start": 156,
              "line_end": 163,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop integrity verification.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "create_integrity_record",
              "line_start": 165,
              "line_end": 225,
              "args": [
                "self",
                "data",
                "source",
                "user_id"
              ],
              "returns": null,
              "docstring": "Create integrity record for new data.\n\nArgs:\n    data: Analytics data to protect\n    source: Data source identifier\n    user_id: User creating the record\n\nReturns:\n    IntegrityRecord with verification information",
              "is_async": false,
              "decorators": [],
              "complexity_score": 240
            },
            {
              "name": "verify_data_integrity",
              "line_start": 227,
              "line_end": 331,
              "args": [
                "self",
                "data",
                "record_id"
              ],
              "returns": null,
              "docstring": "Verify data integrity against stored record.\n\nArgs:\n    data: Data to verify\n    record_id: ID of integrity record\n\nReturns:\n    Tuple of (is_valid, violations_found)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 499
            },
            {
              "name": "verify_chain_integrity",
              "line_start": 333,
              "line_end": 425,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Verify the integrity of the entire data chain.\n\nReturns:\n    Tuple of (chain_valid, violations_found)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 454
            },
            {
              "name": "get_integrity_summary",
              "line_start": 427,
              "line_end": 476,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get integrity verification system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 301
            },
            {
              "name": "_setup_audit_database",
              "line_start": 478,
              "line_end": 528,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup audit trail database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_setup_verification_algorithms",
              "line_start": 530,
              "line_end": 539,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup verification algorithms based on integrity level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_generate_record_id",
              "line_start": 541,
              "line_end": 546,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Generate unique record ID.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 86
            },
            {
              "name": "_calculate_data_hash",
              "line_start": 548,
              "line_end": 551,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate data hash using primary algorithm.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_calculate_chain_hash",
              "line_start": 553,
              "line_end": 556,
              "args": [
                "self",
                "data_hash"
              ],
              "returns": null,
              "docstring": "Calculate chain hash linking to previous record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_calculate_chain_hash_for_record",
              "line_start": 558,
              "line_end": 561,
              "args": [
                "self",
                "record",
                "previous_hash"
              ],
              "returns": null,
              "docstring": "Calculate chain hash for a specific record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_generate_signature",
              "line_start": 563,
              "line_end": 566,
              "args": [
                "self",
                "data",
                "data_hash"
              ],
              "returns": null,
              "docstring": "Generate HMAC signature for data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_calculate_additional_checksums",
              "line_start": 568,
              "line_end": 586,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate additional checksums for maximum integrity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 170
            },
            {
              "name": "_verify_additional_checksums",
              "line_start": 588,
              "line_end": 615,
              "args": [
                "self",
                "data",
                "integrity_record"
              ],
              "returns": null,
              "docstring": "Verify additional checksums for maximum integrity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_check_timestamp_anomalies",
              "line_start": 617,
              "line_end": 652,
              "args": [
                "self",
                "integrity_record"
              ],
              "returns": null,
              "docstring": "Check for timestamp anomalies.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_create_audit_entry",
              "line_start": 654,
              "line_end": 672,
              "args": [
                "self",
                "action",
                "record_id",
                "source",
                "user_id",
                "changes"
              ],
              "returns": null,
              "docstring": "Create audit trail entry.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_store_audit_entry",
              "line_start": 674,
              "line_end": 700,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Store audit entry in database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_verification_loop",
              "line_start": 702,
              "line_end": 723,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background verification loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_calculate_cache_hit_rate",
              "line_start": 725,
              "line_end": 728,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate cache hit rate.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 9
            },
            {
              "name": "_calculate_avg_verification_time",
              "line_start": 730,
              "line_end": 733,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate average verification time.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 9
            },
            {
              "name": "get_recent_violations",
              "line_start": 735,
              "line_end": 748,
              "args": [
                "self",
                "hours",
                "severity"
              ],
              "returns": null,
              "docstring": "Get recent integrity violations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "get_audit_trail",
              "line_start": 750,
              "line_end": 762,
              "args": [
                "self",
                "hours",
                "record_id"
              ],
              "returns": null,
              "docstring": "Get audit trail entries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "resolve_violation",
              "line_start": 764,
              "line_end": 771,
              "args": [
                "self",
                "violation_id",
                "remediation_action"
              ],
              "returns": null,
              "docstring": "Mark a violation as resolved.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "shutdown",
              "line_start": 773,
              "line_end": 776,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown integrity verifier.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced data integrity verification system for analytics data.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 92,
          "line_end": 143,
          "args": [
            "self",
            "integrity_level",
            "secret_key",
            "audit_db_path"
          ],
          "returns": null,
          "docstring": "Initialize analytics integrity verifier.\n\nArgs:\n    integrity_level: Level of integrity verification\n    secret_key: Secret key for HMAC signatures\n    audit_db_path: Path to audit trail database",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "start_verification",
          "line_start": 145,
          "line_end": 154,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start background integrity verification.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_verification",
          "line_start": 156,
          "line_end": 163,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop integrity verification.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "create_integrity_record",
          "line_start": 165,
          "line_end": 225,
          "args": [
            "self",
            "data",
            "source",
            "user_id"
          ],
          "returns": null,
          "docstring": "Create integrity record for new data.\n\nArgs:\n    data: Analytics data to protect\n    source: Data source identifier\n    user_id: User creating the record\n\nReturns:\n    IntegrityRecord with verification information",
          "is_async": false,
          "decorators": [],
          "complexity_score": 240
        },
        {
          "name": "verify_data_integrity",
          "line_start": 227,
          "line_end": 331,
          "args": [
            "self",
            "data",
            "record_id"
          ],
          "returns": null,
          "docstring": "Verify data integrity against stored record.\n\nArgs:\n    data: Data to verify\n    record_id: ID of integrity record\n\nReturns:\n    Tuple of (is_valid, violations_found)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 499
        },
        {
          "name": "verify_chain_integrity",
          "line_start": 333,
          "line_end": 425,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Verify the integrity of the entire data chain.\n\nReturns:\n    Tuple of (chain_valid, violations_found)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 454
        },
        {
          "name": "get_integrity_summary",
          "line_start": 427,
          "line_end": 476,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get integrity verification system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 301
        },
        {
          "name": "_setup_audit_database",
          "line_start": 478,
          "line_end": 528,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup audit trail database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_setup_verification_algorithms",
          "line_start": 530,
          "line_end": 539,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup verification algorithms based on integrity level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_generate_record_id",
          "line_start": 541,
          "line_end": 546,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Generate unique record ID.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 86
        },
        {
          "name": "_calculate_data_hash",
          "line_start": 548,
          "line_end": 551,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate data hash using primary algorithm.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_calculate_chain_hash",
          "line_start": 553,
          "line_end": 556,
          "args": [
            "self",
            "data_hash"
          ],
          "returns": null,
          "docstring": "Calculate chain hash linking to previous record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_calculate_chain_hash_for_record",
          "line_start": 558,
          "line_end": 561,
          "args": [
            "self",
            "record",
            "previous_hash"
          ],
          "returns": null,
          "docstring": "Calculate chain hash for a specific record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_generate_signature",
          "line_start": 563,
          "line_end": 566,
          "args": [
            "self",
            "data",
            "data_hash"
          ],
          "returns": null,
          "docstring": "Generate HMAC signature for data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_calculate_additional_checksums",
          "line_start": 568,
          "line_end": 586,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate additional checksums for maximum integrity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 170
        },
        {
          "name": "_verify_additional_checksums",
          "line_start": 588,
          "line_end": 615,
          "args": [
            "self",
            "data",
            "integrity_record"
          ],
          "returns": null,
          "docstring": "Verify additional checksums for maximum integrity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_check_timestamp_anomalies",
          "line_start": 617,
          "line_end": 652,
          "args": [
            "self",
            "integrity_record"
          ],
          "returns": null,
          "docstring": "Check for timestamp anomalies.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_create_audit_entry",
          "line_start": 654,
          "line_end": 672,
          "args": [
            "self",
            "action",
            "record_id",
            "source",
            "user_id",
            "changes"
          ],
          "returns": null,
          "docstring": "Create audit trail entry.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_store_audit_entry",
          "line_start": 674,
          "line_end": 700,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Store audit entry in database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_verification_loop",
          "line_start": 702,
          "line_end": 723,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background verification loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_calculate_cache_hit_rate",
          "line_start": 725,
          "line_end": 728,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate cache hit rate.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 9
        },
        {
          "name": "_calculate_avg_verification_time",
          "line_start": 730,
          "line_end": 733,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate average verification time.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 9
        },
        {
          "name": "get_recent_violations",
          "line_start": 735,
          "line_end": 748,
          "args": [
            "self",
            "hours",
            "severity"
          ],
          "returns": null,
          "docstring": "Get recent integrity violations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "get_audit_trail",
          "line_start": 750,
          "line_end": 762,
          "args": [
            "self",
            "hours",
            "record_id"
          ],
          "returns": null,
          "docstring": "Get audit trail entries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "resolve_violation",
          "line_start": 764,
          "line_end": 771,
          "args": [
            "self",
            "violation_id",
            "remediation_action"
          ],
          "returns": null,
          "docstring": "Mark a violation as resolved.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "shutdown",
          "line_start": 773,
          "line_end": 776,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown integrity verifier.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "hmac",
          "names": [
            "hmac"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        }
      ],
      "external_dependencies": "{'sqlite3', 'hashlib', 'typing', 'time', 'dataclasses', 'zlib', 'json', 'logging', 'hmac', 'enum', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 776,
      "complexity_score": 6756,
      "api_surface_area": 20,
      "docstring": "Analytics Data Integrity Verification System\n===========================================\n\nAdvanced data integrity verification with checksums, chain validation,\ntamper detection, and comprehensive audit trails for analytics data.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.96875,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_metrics_collector.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_metrics_collector.py",
      "component_name": "analytics_metrics_collector",
      "analysis_timestamp": "2025-08-20 21:46:40.441933",
      "classes": [
        {
          "name": "MetricType",
          "line_start": 25,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "Metric",
          "line_start": 33,
          "line_end": 41,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a single metric.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "HistogramBucket",
          "line_start": 44,
          "line_end": 47,
          "base_classes": [],
          "methods": [],
          "docstring": "Histogram bucket for distribution metrics.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "Timer",
          "line_start": 49,
          "line_end": 65,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 52,
              "line_end": 56,
              "args": [
                "self",
                "collector",
                "name",
                "labels"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "__enter__",
              "line_start": 58,
              "line_end": 60,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 16
            },
            {
              "name": "__exit__",
              "line_start": 62,
              "line_end": 65,
              "args": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            }
          ],
          "docstring": "Timer context manager for measuring durations.",
          "decorators": []
        },
        {
          "name": "AnalyticsMetricsCollector",
          "line_start": 67,
          "line_end": 626,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 72,
              "line_end": 139,
              "args": [
                "self",
                "collection_interval"
              ],
              "returns": null,
              "docstring": "Initialize metrics collector.\n\nArgs:\n    collection_interval: Interval between automatic collections in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 216
            },
            {
              "name": "start_collection",
              "line_start": 141,
              "line_end": 149,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start automatic metrics collection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_collection",
              "line_start": 151,
              "line_end": 156,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop automatic metrics collection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "increment_counter",
              "line_start": 158,
              "line_end": 182,
              "args": [
                "self",
                "name",
                "value",
                "labels",
                "description",
                "unit"
              ],
              "returns": null,
              "docstring": "Increment a counter metric.\n\nArgs:\n    name: Metric name\n    value: Increment value\n    labels: Metric labels\n    description: Metric description\n    unit: Metric unit",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "set_gauge",
              "line_start": 184,
              "line_end": 208,
              "args": [
                "self",
                "name",
                "value",
                "labels",
                "description",
                "unit"
              ],
              "returns": null,
              "docstring": "Set a gauge metric value.\n\nArgs:\n    name: Metric name\n    value: Gauge value\n    labels: Metric labels\n    description: Metric description\n    unit: Metric unit",
              "is_async": false,
              "decorators": [],
              "complexity_score": 113
            },
            {
              "name": "record_histogram",
              "line_start": 210,
              "line_end": 246,
              "args": [
                "self",
                "name",
                "value",
                "labels",
                "description",
                "unit",
                "buckets"
              ],
              "returns": null,
              "docstring": "Record a histogram metric.\n\nArgs:\n    name: Metric name\n    value: Observed value\n    labels: Metric labels\n    description: Metric description\n    unit: Metric unit\n    buckets: Histogram buckets",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "record_timer",
              "line_start": 248,
              "line_end": 275,
              "args": [
                "self",
                "name",
                "duration",
                "labels",
                "description"
              ],
              "returns": null,
              "docstring": "Record a timer metric.\n\nArgs:\n    name: Timer name\n    duration: Duration in seconds\n    labels: Metric labels\n    description: Timer description",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "timer",
              "line_start": 277,
              "line_end": 288,
              "args": [
                "self",
                "name",
                "labels"
              ],
              "returns": null,
              "docstring": "Create a timer context manager.\n\nArgs:\n    name: Timer name\n    labels: Metric labels\n\nReturns:\n    Timer context manager",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "collect_system_metrics",
              "line_start": 290,
              "line_end": 365,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect system-level metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 406
            },
            {
              "name": "collect_analytics_component_metrics",
              "line_start": 367,
              "line_end": 394,
              "args": [
                "self",
                "component_name",
                "component_stats"
              ],
              "returns": null,
              "docstring": "Collect metrics from analytics components.\n\nArgs:\n    component_name: Name of the component\n    component_stats: Component statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 181
            },
            {
              "name": "get_metrics",
              "line_start": 396,
              "line_end": 432,
              "args": [
                "self",
                "name_filter",
                "label_filter",
                "max_age_seconds"
              ],
              "returns": null,
              "docstring": "Get collected metrics with optional filtering.\n\nArgs:\n    name_filter: Filter by metric name (substring match)\n    label_filter: Filter by labels (exact match)\n    max_age_seconds: Maximum age of metrics to return\n\nReturns:\n    List of matching metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 164
            },
            {
              "name": "get_current_values",
              "line_start": 434,
              "line_end": 466,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current values of all metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 241
            },
            {
              "name": "export_prometheus",
              "line_start": 468,
              "line_end": 514,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Export metrics in Prometheus format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 416
            },
            {
              "name": "export_json",
              "line_start": 516,
              "line_end": 518,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Export metrics in JSON format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_create_metric_key",
              "line_start": 520,
              "line_end": 527,
              "args": [
                "self",
                "name",
                "labels"
              ],
              "returns": null,
              "docstring": "Create a unique key for metric with labels.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_extract_labels_from_key",
              "line_start": 529,
              "line_end": 542,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Extract labels from metric key for Prometheus format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_record_metric",
              "line_start": 544,
              "line_end": 570,
              "args": [
                "self",
                "name",
                "metric_type",
                "value",
                "labels",
                "description",
                "unit"
              ],
              "returns": null,
              "docstring": "Record a metric to the metrics list.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 156
            },
            {
              "name": "_update_labels_index",
              "line_start": 572,
              "line_end": 575,
              "args": [
                "self",
                "name",
                "labels"
              ],
              "returns": null,
              "docstring": "Update labels index for efficient querying.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_collection_loop",
              "line_start": 577,
              "line_end": 600,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background collection loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "add_metric_callback",
              "line_start": 602,
              "line_end": 604,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add a callback for when metrics are recorded.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "get_summary",
              "line_start": 606,
              "line_end": 621,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get collector summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "shutdown",
              "line_start": 623,
              "line_end": 626,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown metrics collector.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Comprehensive metrics collection system for analytics components.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 52,
          "line_end": 56,
          "args": [
            "self",
            "collector",
            "name",
            "labels"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "__enter__",
          "line_start": 58,
          "line_end": 60,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 16
        },
        {
          "name": "__exit__",
          "line_start": 62,
          "line_end": 65,
          "args": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "__init__",
          "line_start": 72,
          "line_end": 139,
          "args": [
            "self",
            "collection_interval"
          ],
          "returns": null,
          "docstring": "Initialize metrics collector.\n\nArgs:\n    collection_interval: Interval between automatic collections in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 216
        },
        {
          "name": "start_collection",
          "line_start": 141,
          "line_end": 149,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start automatic metrics collection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_collection",
          "line_start": 151,
          "line_end": 156,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop automatic metrics collection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "increment_counter",
          "line_start": 158,
          "line_end": 182,
          "args": [
            "self",
            "name",
            "value",
            "labels",
            "description",
            "unit"
          ],
          "returns": null,
          "docstring": "Increment a counter metric.\n\nArgs:\n    name: Metric name\n    value: Increment value\n    labels: Metric labels\n    description: Metric description\n    unit: Metric unit",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "set_gauge",
          "line_start": 184,
          "line_end": 208,
          "args": [
            "self",
            "name",
            "value",
            "labels",
            "description",
            "unit"
          ],
          "returns": null,
          "docstring": "Set a gauge metric value.\n\nArgs:\n    name: Metric name\n    value: Gauge value\n    labels: Metric labels\n    description: Metric description\n    unit: Metric unit",
          "is_async": false,
          "decorators": [],
          "complexity_score": 113
        },
        {
          "name": "record_histogram",
          "line_start": 210,
          "line_end": 246,
          "args": [
            "self",
            "name",
            "value",
            "labels",
            "description",
            "unit",
            "buckets"
          ],
          "returns": null,
          "docstring": "Record a histogram metric.\n\nArgs:\n    name: Metric name\n    value: Observed value\n    labels: Metric labels\n    description: Metric description\n    unit: Metric unit\n    buckets: Histogram buckets",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "record_timer",
          "line_start": 248,
          "line_end": 275,
          "args": [
            "self",
            "name",
            "duration",
            "labels",
            "description"
          ],
          "returns": null,
          "docstring": "Record a timer metric.\n\nArgs:\n    name: Timer name\n    duration: Duration in seconds\n    labels: Metric labels\n    description: Timer description",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "timer",
          "line_start": 277,
          "line_end": 288,
          "args": [
            "self",
            "name",
            "labels"
          ],
          "returns": null,
          "docstring": "Create a timer context manager.\n\nArgs:\n    name: Timer name\n    labels: Metric labels\n\nReturns:\n    Timer context manager",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "collect_system_metrics",
          "line_start": 290,
          "line_end": 365,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect system-level metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 406
        },
        {
          "name": "collect_analytics_component_metrics",
          "line_start": 367,
          "line_end": 394,
          "args": [
            "self",
            "component_name",
            "component_stats"
          ],
          "returns": null,
          "docstring": "Collect metrics from analytics components.\n\nArgs:\n    component_name: Name of the component\n    component_stats: Component statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 181
        },
        {
          "name": "get_metrics",
          "line_start": 396,
          "line_end": 432,
          "args": [
            "self",
            "name_filter",
            "label_filter",
            "max_age_seconds"
          ],
          "returns": null,
          "docstring": "Get collected metrics with optional filtering.\n\nArgs:\n    name_filter: Filter by metric name (substring match)\n    label_filter: Filter by labels (exact match)\n    max_age_seconds: Maximum age of metrics to return\n\nReturns:\n    List of matching metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 164
        },
        {
          "name": "get_current_values",
          "line_start": 434,
          "line_end": 466,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current values of all metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 241
        },
        {
          "name": "export_prometheus",
          "line_start": 468,
          "line_end": 514,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Export metrics in Prometheus format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 416
        },
        {
          "name": "export_json",
          "line_start": 516,
          "line_end": 518,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Export metrics in JSON format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_create_metric_key",
          "line_start": 520,
          "line_end": 527,
          "args": [
            "self",
            "name",
            "labels"
          ],
          "returns": null,
          "docstring": "Create a unique key for metric with labels.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_extract_labels_from_key",
          "line_start": 529,
          "line_end": 542,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Extract labels from metric key for Prometheus format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_record_metric",
          "line_start": 544,
          "line_end": 570,
          "args": [
            "self",
            "name",
            "metric_type",
            "value",
            "labels",
            "description",
            "unit"
          ],
          "returns": null,
          "docstring": "Record a metric to the metrics list.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 156
        },
        {
          "name": "_update_labels_index",
          "line_start": 572,
          "line_end": 575,
          "args": [
            "self",
            "name",
            "labels"
          ],
          "returns": null,
          "docstring": "Update labels index for efficient querying.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_collection_loop",
          "line_start": 577,
          "line_end": 600,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background collection loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "add_metric_callback",
          "line_start": 602,
          "line_end": 604,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add a callback for when metrics are recorded.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "get_summary",
          "line_start": 606,
          "line_end": 621,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get collector summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "shutdown",
          "line_start": 623,
          "line_end": 626,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown metrics collector.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "gc",
          "names": [
            "gc"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'gc', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 626,
      "complexity_score": 6180,
      "api_surface_area": 32,
      "docstring": "Analytics Metrics Collector\n===========================\n\nComprehensive metrics collection and exposure system for monitoring\nall analytics components and system performance.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_normalizer.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_normalizer.py",
      "component_name": "analytics_normalizer",
      "analysis_timestamp": "2025-08-20 21:46:40.451940",
      "classes": [
        {
          "name": "DataType",
          "line_start": 25,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "NormalizationRule",
          "line_start": 35,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "FieldSchema",
          "line_start": 44,
          "line_end": 55,
          "base_classes": [],
          "methods": [],
          "docstring": "Schema definition for a data field.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDataNormalizer",
          "line_start": 57,
          "line_end": 656,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 62,
              "line_end": 137,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize the data normalizer.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "register_schema",
              "line_start": 139,
              "line_end": 142,
              "args": [
                "self",
                "schema_name",
                "fields"
              ],
              "returns": null,
              "docstring": "Register a data schema.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "add_field_mapping",
              "line_start": 144,
              "line_end": 150,
              "args": [
                "self",
                "source_field",
                "target_field",
                "transformation"
              ],
              "returns": null,
              "docstring": "Add a field mapping rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "add_custom_validator",
              "line_start": 152,
              "line_end": 154,
              "args": [
                "self",
                "field_name",
                "validator"
              ],
              "returns": null,
              "docstring": "Add a custom validator for a field.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "normalize",
              "line_start": 156,
              "line_end": 215,
              "args": [
                "self",
                "data",
                "schema_name"
              ],
              "returns": null,
              "docstring": "Normalize data according to schema and rules.\n\nArgs:\n    data: Data to normalize\n    schema_name: Schema to apply (optional)\n\nReturns:\n    Normalized data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 245
            },
            {
              "name": "validate",
              "line_start": 217,
              "line_end": 264,
              "args": [
                "self",
                "data",
                "schema_name"
              ],
              "returns": null,
              "docstring": "Validate data against a schema.\n\nArgs:\n    data: Data to validate\n    schema_name: Schema name\n\nReturns:\n    Validation result",
              "is_async": false,
              "decorators": [],
              "complexity_score": 261
            },
            {
              "name": "get_normalization_stats",
              "line_start": 266,
              "line_end": 286,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get normalization statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_setup_default_schemas",
              "line_start": 288,
              "line_end": 331,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Set up default schemas for common data types.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 327
            },
            {
              "name": "_setup_default_field_mappings",
              "line_start": 333,
              "line_end": 360,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Set up default field mappings.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "_apply_field_mappings",
              "line_start": 362,
              "line_end": 389,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Apply field mappings to data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "_normalize_timestamps",
              "line_start": 391,
              "line_end": 452,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize timestamp fields to ISO 8601 format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 353
            },
            {
              "name": "_normalize_units",
              "line_start": 454,
              "line_end": 498,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize units to standard formats.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 454
            },
            {
              "name": "_normalize_data_types",
              "line_start": 500,
              "line_end": 535,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize data types to expected formats.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 289
            },
            {
              "name": "_normalize_numeric_ranges",
              "line_start": 537,
              "line_end": 567,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize numeric values to appropriate ranges.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 219
            },
            {
              "name": "_apply_schema",
              "line_start": 569,
              "line_end": 585,
              "args": [
                "self",
                "data",
                "schema_name"
              ],
              "returns": null,
              "docstring": "Apply schema validation and default values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 136
            },
            {
              "name": "_normalize_field_value",
              "line_start": 587,
              "line_end": 617,
              "args": [
                "self",
                "value",
                "field_schema"
              ],
              "returns": null,
              "docstring": "Normalize a single field value according to its schema.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 220
            },
            {
              "name": "_validate_field",
              "line_start": 619,
              "line_end": 656,
              "args": [
                "self",
                "value",
                "field_schema"
              ],
              "returns": null,
              "docstring": "Validate a single field against its schema.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 348
            }
          ],
          "docstring": "Comprehensive data normalization and standardization system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 62,
          "line_end": 137,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize the data normalizer.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "register_schema",
          "line_start": 139,
          "line_end": 142,
          "args": [
            "self",
            "schema_name",
            "fields"
          ],
          "returns": null,
          "docstring": "Register a data schema.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "add_field_mapping",
          "line_start": 144,
          "line_end": 150,
          "args": [
            "self",
            "source_field",
            "target_field",
            "transformation"
          ],
          "returns": null,
          "docstring": "Add a field mapping rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "add_custom_validator",
          "line_start": 152,
          "line_end": 154,
          "args": [
            "self",
            "field_name",
            "validator"
          ],
          "returns": null,
          "docstring": "Add a custom validator for a field.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "normalize",
          "line_start": 156,
          "line_end": 215,
          "args": [
            "self",
            "data",
            "schema_name"
          ],
          "returns": null,
          "docstring": "Normalize data according to schema and rules.\n\nArgs:\n    data: Data to normalize\n    schema_name: Schema to apply (optional)\n\nReturns:\n    Normalized data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 245
        },
        {
          "name": "validate",
          "line_start": 217,
          "line_end": 264,
          "args": [
            "self",
            "data",
            "schema_name"
          ],
          "returns": null,
          "docstring": "Validate data against a schema.\n\nArgs:\n    data: Data to validate\n    schema_name: Schema name\n\nReturns:\n    Validation result",
          "is_async": false,
          "decorators": [],
          "complexity_score": 261
        },
        {
          "name": "get_normalization_stats",
          "line_start": 266,
          "line_end": 286,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get normalization statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_setup_default_schemas",
          "line_start": 288,
          "line_end": 331,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Set up default schemas for common data types.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 327
        },
        {
          "name": "_setup_default_field_mappings",
          "line_start": 333,
          "line_end": 360,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Set up default field mappings.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "_apply_field_mappings",
          "line_start": 362,
          "line_end": 389,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Apply field mappings to data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "_normalize_timestamps",
          "line_start": 391,
          "line_end": 452,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize timestamp fields to ISO 8601 format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 353
        },
        {
          "name": "_normalize_units",
          "line_start": 454,
          "line_end": 498,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize units to standard formats.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 454
        },
        {
          "name": "_normalize_data_types",
          "line_start": 500,
          "line_end": 535,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize data types to expected formats.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 289
        },
        {
          "name": "_normalize_numeric_ranges",
          "line_start": 537,
          "line_end": 567,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize numeric values to appropriate ranges.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 219
        },
        {
          "name": "_apply_schema",
          "line_start": 569,
          "line_end": 585,
          "args": [
            "self",
            "data",
            "schema_name"
          ],
          "returns": null,
          "docstring": "Apply schema validation and default values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 136
        },
        {
          "name": "_normalize_field_value",
          "line_start": 587,
          "line_end": 617,
          "args": [
            "self",
            "value",
            "field_schema"
          ],
          "returns": null,
          "docstring": "Normalize a single field value according to its schema.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 220
        },
        {
          "name": "_validate_field",
          "line_start": 619,
          "line_end": 656,
          "args": [
            "self",
            "value",
            "field_schema"
          ],
          "returns": null,
          "docstring": "Validate a single field against its schema.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 348
        },
        {
          "name": "normalize_timestamp_value",
          "line_start": 395,
          "line_end": 438,
          "args": [
            "value"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 229
        },
        {
          "name": "normalize_recursive",
          "line_start": 440,
          "line_end": 449,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "normalize_recursive",
          "line_start": 456,
          "line_end": 495,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 419
        },
        {
          "name": "normalize_recursive",
          "line_start": 502,
          "line_end": 532,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 254
        },
        {
          "name": "normalize_recursive",
          "line_start": 539,
          "line_end": 564,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        }
      ],
      "imports": [
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Union",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "copy",
          "names": [
            "copy"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'typing', 'dataclasses', 'copy', 'json', 'logging', 'enum', 're', 'math', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 656,
      "complexity_score": 8525,
      "api_surface_area": 17,
      "docstring": "Analytics Data Normalizer\n=========================\n\nComprehensive data normalization and standardization system for ensuring\nconsistent data formats, units, and structures across all analytics components.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.7692307692307693,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_optimizer.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_optimizer.py",
      "component_name": "analytics_optimizer",
      "analysis_timestamp": "2025-08-20 21:46:40.461456",
      "classes": [
        {
          "name": "AnalyticsOptimizer",
          "line_start": 23,
          "line_end": 378,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 28,
              "line_end": 57,
              "args": [
                "self",
                "compression_threshold",
                "cache_size"
              ],
              "returns": null,
              "docstring": "Initialize the analytics optimizer.\n\nArgs:\n    compression_threshold: Minimum data size (bytes) to trigger compression\n    cache_size: Maximum number of items to keep in optimization cache",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "compress_analytics_data",
              "line_start": 59,
              "line_end": 125,
              "args": [
                "self",
                "data",
                "compression_type"
              ],
              "returns": null,
              "docstring": "Compress analytics data for efficient storage.\n\nArgs:\n    data: Data to compress\n    compression_type: Type of compression ('gzip', 'zlib', 'pickle')\n    \nReturns:\n    Compressed data package with metadata",
              "is_async": false,
              "decorators": [],
              "complexity_score": 325
            },
            {
              "name": "decompress_analytics_data",
              "line_start": 127,
              "line_end": 160,
              "args": [
                "self",
                "compressed_package"
              ],
              "returns": null,
              "docstring": "Decompress analytics data.\n\nArgs:\n    compressed_package: Compressed data package\n    \nReturns:\n    Decompressed data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 149
            },
            {
              "name": "optimize_data_retrieval",
              "line_start": 162,
              "line_end": 194,
              "args": [
                "self",
                "query_params"
              ],
              "returns": null,
              "docstring": "Optimize data retrieval using intelligent caching.\n\nArgs:\n    query_params: Query parameters for data retrieval\n    \nReturns:\n    Cached data if available, None otherwise",
              "is_async": false,
              "decorators": [],
              "complexity_score": 132
            },
            {
              "name": "cache_data",
              "line_start": 196,
              "line_end": 220,
              "args": [
                "self",
                "query_params",
                "data",
                "ttl_seconds"
              ],
              "returns": null,
              "docstring": "Cache data for optimized retrieval.\n\nArgs:\n    query_params: Query parameters\n    data: Data to cache\n    ttl_seconds: Time to live for cache entry",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "aggregate_time_series_data",
              "line_start": 222,
              "line_end": 254,
              "args": [
                "self",
                "data_points",
                "aggregation_window"
              ],
              "returns": null,
              "docstring": "Aggregate time series data for efficient storage and visualization.\n\nArgs:\n    data_points: List of data points with timestamps\n    aggregation_window: Aggregation window ('1min', '5min', '1hour', etc.)\n    \nReturns:\n    Aggregated data points",
              "is_async": false,
              "decorators": [],
              "complexity_score": 163
            },
            {
              "name": "optimize_query_indexes",
              "line_start": 256,
              "line_end": 272,
              "args": [
                "self",
                "query_patterns"
              ],
              "returns": null,
              "docstring": "Build indexes for common query patterns.\n\nArgs:\n    query_patterns: List of common query patterns",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "get_optimization_stats",
              "line_start": 274,
              "line_end": 300,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimization performance statistics.\n\nReturns:\n    Performance statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_generate_cache_key",
              "line_start": 302,
              "line_end": 306,
              "args": [
                "self",
                "query_params"
              ],
              "returns": null,
              "docstring": "Generate a cache key from query parameters.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "_generate_index_key",
              "line_start": 308,
              "line_end": 314,
              "args": [
                "self",
                "pattern"
              ],
              "returns": null,
              "docstring": "Generate an index key from query pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_is_cache_valid",
              "line_start": 316,
              "line_end": 319,
              "args": [
                "self",
                "cache_entry"
              ],
              "returns": null,
              "docstring": "Check if cache entry is still valid.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "_evict_lru_cache_entry",
              "line_start": 321,
              "line_end": 330,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Evict least recently used cache entry.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_parse_time_window",
              "line_start": 332,
              "line_end": 341,
              "args": [
                "self",
                "window"
              ],
              "returns": null,
              "docstring": "Parse time window string to seconds.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_get_window_start",
              "line_start": 343,
              "line_end": 348,
              "args": [
                "self",
                "timestamp",
                "window_seconds"
              ],
              "returns": null,
              "docstring": "Get the start of the time window for a timestamp.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_aggregate_data_points",
              "line_start": 350,
              "line_end": 370,
              "args": [
                "self",
                "points",
                "window_start"
              ],
              "returns": null,
              "docstring": "Aggregate a list of data points into a single point.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 184
            },
            {
              "name": "clear_cache",
              "line_start": 372,
              "line_end": 378,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clear all optimization caches.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            }
          ],
          "docstring": "Optimizes analytics data for storage, retrieval, and processing efficiency.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 28,
          "line_end": 57,
          "args": [
            "self",
            "compression_threshold",
            "cache_size"
          ],
          "returns": null,
          "docstring": "Initialize the analytics optimizer.\n\nArgs:\n    compression_threshold: Minimum data size (bytes) to trigger compression\n    cache_size: Maximum number of items to keep in optimization cache",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "compress_analytics_data",
          "line_start": 59,
          "line_end": 125,
          "args": [
            "self",
            "data",
            "compression_type"
          ],
          "returns": null,
          "docstring": "Compress analytics data for efficient storage.\n\nArgs:\n    data: Data to compress\n    compression_type: Type of compression ('gzip', 'zlib', 'pickle')\n    \nReturns:\n    Compressed data package with metadata",
          "is_async": false,
          "decorators": [],
          "complexity_score": 325
        },
        {
          "name": "decompress_analytics_data",
          "line_start": 127,
          "line_end": 160,
          "args": [
            "self",
            "compressed_package"
          ],
          "returns": null,
          "docstring": "Decompress analytics data.\n\nArgs:\n    compressed_package: Compressed data package\n    \nReturns:\n    Decompressed data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 149
        },
        {
          "name": "optimize_data_retrieval",
          "line_start": 162,
          "line_end": 194,
          "args": [
            "self",
            "query_params"
          ],
          "returns": null,
          "docstring": "Optimize data retrieval using intelligent caching.\n\nArgs:\n    query_params: Query parameters for data retrieval\n    \nReturns:\n    Cached data if available, None otherwise",
          "is_async": false,
          "decorators": [],
          "complexity_score": 132
        },
        {
          "name": "cache_data",
          "line_start": 196,
          "line_end": 220,
          "args": [
            "self",
            "query_params",
            "data",
            "ttl_seconds"
          ],
          "returns": null,
          "docstring": "Cache data for optimized retrieval.\n\nArgs:\n    query_params: Query parameters\n    data: Data to cache\n    ttl_seconds: Time to live for cache entry",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "aggregate_time_series_data",
          "line_start": 222,
          "line_end": 254,
          "args": [
            "self",
            "data_points",
            "aggregation_window"
          ],
          "returns": null,
          "docstring": "Aggregate time series data for efficient storage and visualization.\n\nArgs:\n    data_points: List of data points with timestamps\n    aggregation_window: Aggregation window ('1min', '5min', '1hour', etc.)\n    \nReturns:\n    Aggregated data points",
          "is_async": false,
          "decorators": [],
          "complexity_score": 163
        },
        {
          "name": "optimize_query_indexes",
          "line_start": 256,
          "line_end": 272,
          "args": [
            "self",
            "query_patterns"
          ],
          "returns": null,
          "docstring": "Build indexes for common query patterns.\n\nArgs:\n    query_patterns: List of common query patterns",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "get_optimization_stats",
          "line_start": 274,
          "line_end": 300,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimization performance statistics.\n\nReturns:\n    Performance statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_generate_cache_key",
          "line_start": 302,
          "line_end": 306,
          "args": [
            "self",
            "query_params"
          ],
          "returns": null,
          "docstring": "Generate a cache key from query parameters.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "_generate_index_key",
          "line_start": 308,
          "line_end": 314,
          "args": [
            "self",
            "pattern"
          ],
          "returns": null,
          "docstring": "Generate an index key from query pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_is_cache_valid",
          "line_start": 316,
          "line_end": 319,
          "args": [
            "self",
            "cache_entry"
          ],
          "returns": null,
          "docstring": "Check if cache entry is still valid.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "_evict_lru_cache_entry",
          "line_start": 321,
          "line_end": 330,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Evict least recently used cache entry.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_parse_time_window",
          "line_start": 332,
          "line_end": 341,
          "args": [
            "self",
            "window"
          ],
          "returns": null,
          "docstring": "Parse time window string to seconds.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_get_window_start",
          "line_start": 343,
          "line_end": 348,
          "args": [
            "self",
            "timestamp",
            "window_seconds"
          ],
          "returns": null,
          "docstring": "Get the start of the time window for a timestamp.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_aggregate_data_points",
          "line_start": 350,
          "line_end": 370,
          "args": [
            "self",
            "points",
            "window_start"
          ],
          "returns": null,
          "docstring": "Aggregate a list of data points into a single point.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        },
        {
          "name": "clear_cache",
          "line_start": 372,
          "line_end": 378,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clear all optimization caches.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "gzip",
          "names": [
            "gzip"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        }
      ],
      "external_dependencies": "{'typing', 'zlib', 'json', 'logging', 'gzip', 'pickle', 'threading', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 378,
      "complexity_score": 3366,
      "api_surface_area": 16,
      "docstring": "Analytics Data Optimizer\n=========================\n\nOptimizes analytics data storage, retrieval, and processing for performance.\nProvides compression, indexing, and intelligent caching strategies.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0588235294117647,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_performance_booster.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_performance_booster.py",
      "component_name": "analytics_performance_booster",
      "analysis_timestamp": "2025-08-20 21:46:40.468453",
      "classes": [
        {
          "name": "PerformanceMetrics",
          "line_start": 27,
          "line_end": 36,
          "base_classes": [],
          "methods": [],
          "docstring": "Performance metrics tracking.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "FastCacheManager",
          "line_start": 38,
          "line_end": 109,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 41,
              "line_end": 47,
              "args": [
                "self",
                "max_size"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "start",
              "line_start": 49,
              "line_end": 53,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start preload worker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "stop",
              "line_start": 55,
              "line_end": 57,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop preload worker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            },
            {
              "name": "get",
              "line_start": 59,
              "line_end": 71,
              "args": [
                "self",
                "key",
                "loader"
              ],
              "returns": null,
              "docstring": "Get from cache with fallback loader.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "set",
              "line_start": 73,
              "line_end": 79,
              "args": [
                "self",
                "key",
                "value"
              ],
              "returns": null,
              "docstring": "Set cache value.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "schedule_preload",
              "line_start": 81,
              "line_end": 86,
              "args": [
                "self",
                "key",
                "loader"
              ],
              "returns": null,
              "docstring": "Schedule background preload.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "_preload_worker",
              "line_start": 88,
              "line_end": 100,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background preload worker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_evict_lru",
              "line_start": 102,
              "line_end": 109,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Evict least recently used item.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            }
          ],
          "docstring": "Ultra-fast caching with preemptive loading.",
          "decorators": []
        },
        {
          "name": "ParallelExecutor",
          "line_start": 111,
          "line_end": 146,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 114,
              "line_end": 116,
              "args": [
                "self",
                "max_workers"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "submit",
              "line_start": 118,
              "line_end": 122,
              "args": [
                "self",
                "key",
                "func"
              ],
              "returns": null,
              "docstring": "Submit function for parallel execution.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 46
            },
            {
              "name": "gather",
              "line_start": 124,
              "line_end": 142,
              "args": [
                "self",
                "keys",
                "timeout"
              ],
              "returns": null,
              "docstring": "Gather results from parallel executions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "shutdown",
              "line_start": 144,
              "line_end": 146,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown executor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            }
          ],
          "docstring": "Parallel execution manager for analytics operations.",
          "decorators": []
        },
        {
          "name": "AnalyticsPerformanceBooster",
          "line_start": 148,
          "line_end": 536,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 153,
              "line_end": 181,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize performance booster.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "start_optimization",
              "line_start": 183,
              "line_end": 193,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start performance optimization system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "stop_optimization",
              "line_start": 195,
              "line_end": 204,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop performance optimization system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "optimize_operation",
              "line_start": 206,
              "line_end": 239,
              "args": [
                "self",
                "operation_name",
                "func"
              ],
              "returns": null,
              "docstring": "Optimize any analytics operation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 181
            },
            {
              "name": "_optimize_comprehensive_analytics",
              "line_start": 241,
              "line_end": 292,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Optimize comprehensive analytics - main bottleneck.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 206
            },
            {
              "name": "_optimize_component_data",
              "line_start": 294,
              "line_end": 321,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Optimize individual component data fetching.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_optimize_system_metrics",
              "line_start": 323,
              "line_end": 349,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Optimize system metrics collection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            },
            {
              "name": "_optimize_health_checks",
              "line_start": 351,
              "line_end": 370,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Optimize health check operations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "_apply_generic_optimizations",
              "line_start": 372,
              "line_end": 389,
              "args": [
                "self",
                "operation_name",
                "func"
              ],
              "returns": null,
              "docstring": "Apply generic optimizations to any operation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "_get_component_data_fast",
              "line_start": 391,
              "line_end": 408,
              "args": [
                "self",
                "component_name"
              ],
              "returns": null,
              "docstring": "Fast component data retrieval.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_build_comprehensive_data",
              "line_start": 410,
              "line_end": 440,
              "args": [
                "self",
                "component_results"
              ],
              "returns": null,
              "docstring": "Build comprehensive analytics from component results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 174
            },
            {
              "name": "_record_metrics",
              "line_start": 442,
              "line_end": 467,
              "args": [
                "self",
                "operation_name",
                "start_time",
                "end_time",
                "duration_ms",
                "cache_hit",
                "parallel_execution",
                "optimization_applied"
              ],
              "returns": null,
              "docstring": "Record performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_optimization_worker",
              "line_start": 469,
              "line_end": 482,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background optimization worker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_cleanup_cache",
              "line_start": 484,
              "line_end": 497,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up expired cache entries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_preload_frequent_data",
              "line_start": 499,
              "line_end": 505,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Preload frequently accessed data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            },
            {
              "name": "get_performance_summary",
              "line_start": 507,
              "line_end": 531,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get performance optimization summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 177
            },
            {
              "name": "shutdown",
              "line_start": 533,
              "line_end": 536,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown performance booster.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced performance optimization system for analytics operations.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "performance_optimized",
          "line_start": 539,
          "line_end": 555,
          "args": [
            "operation_name"
          ],
          "returns": null,
          "docstring": "Decorator to apply performance optimizations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        },
        {
          "name": "__init__",
          "line_start": 41,
          "line_end": 47,
          "args": [
            "self",
            "max_size"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "start",
          "line_start": 49,
          "line_end": 53,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start preload worker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "stop",
          "line_start": 55,
          "line_end": 57,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop preload worker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        },
        {
          "name": "get",
          "line_start": 59,
          "line_end": 71,
          "args": [
            "self",
            "key",
            "loader"
          ],
          "returns": null,
          "docstring": "Get from cache with fallback loader.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "set",
          "line_start": 73,
          "line_end": 79,
          "args": [
            "self",
            "key",
            "value"
          ],
          "returns": null,
          "docstring": "Set cache value.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "schedule_preload",
          "line_start": 81,
          "line_end": 86,
          "args": [
            "self",
            "key",
            "loader"
          ],
          "returns": null,
          "docstring": "Schedule background preload.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "_preload_worker",
          "line_start": 88,
          "line_end": 100,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background preload worker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_evict_lru",
          "line_start": 102,
          "line_end": 109,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Evict least recently used item.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "__init__",
          "line_start": 114,
          "line_end": 116,
          "args": [
            "self",
            "max_workers"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "submit",
          "line_start": 118,
          "line_end": 122,
          "args": [
            "self",
            "key",
            "func"
          ],
          "returns": null,
          "docstring": "Submit function for parallel execution.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 46
        },
        {
          "name": "gather",
          "line_start": 124,
          "line_end": 142,
          "args": [
            "self",
            "keys",
            "timeout"
          ],
          "returns": null,
          "docstring": "Gather results from parallel executions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "shutdown",
          "line_start": 144,
          "line_end": 146,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown executor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "__init__",
          "line_start": 153,
          "line_end": 181,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize performance booster.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "start_optimization",
          "line_start": 183,
          "line_end": 193,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start performance optimization system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "stop_optimization",
          "line_start": 195,
          "line_end": 204,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop performance optimization system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "optimize_operation",
          "line_start": 206,
          "line_end": 239,
          "args": [
            "self",
            "operation_name",
            "func"
          ],
          "returns": null,
          "docstring": "Optimize any analytics operation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 181
        },
        {
          "name": "_optimize_comprehensive_analytics",
          "line_start": 241,
          "line_end": 292,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Optimize comprehensive analytics - main bottleneck.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 206
        },
        {
          "name": "_optimize_component_data",
          "line_start": 294,
          "line_end": 321,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Optimize individual component data fetching.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_optimize_system_metrics",
          "line_start": 323,
          "line_end": 349,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Optimize system metrics collection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "_optimize_health_checks",
          "line_start": 351,
          "line_end": 370,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Optimize health check operations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "_apply_generic_optimizations",
          "line_start": 372,
          "line_end": 389,
          "args": [
            "self",
            "operation_name",
            "func"
          ],
          "returns": null,
          "docstring": "Apply generic optimizations to any operation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "_get_component_data_fast",
          "line_start": 391,
          "line_end": 408,
          "args": [
            "self",
            "component_name"
          ],
          "returns": null,
          "docstring": "Fast component data retrieval.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_build_comprehensive_data",
          "line_start": 410,
          "line_end": 440,
          "args": [
            "self",
            "component_results"
          ],
          "returns": null,
          "docstring": "Build comprehensive analytics from component results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 174
        },
        {
          "name": "_record_metrics",
          "line_start": 442,
          "line_end": 467,
          "args": [
            "self",
            "operation_name",
            "start_time",
            "end_time",
            "duration_ms",
            "cache_hit",
            "parallel_execution",
            "optimization_applied"
          ],
          "returns": null,
          "docstring": "Record performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_optimization_worker",
          "line_start": 469,
          "line_end": 482,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background optimization worker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_cleanup_cache",
          "line_start": 484,
          "line_end": 497,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up expired cache entries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_preload_frequent_data",
          "line_start": 499,
          "line_end": 505,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Preload frequently accessed data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "get_performance_summary",
          "line_start": 507,
          "line_end": 531,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get performance optimization summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 177
        },
        {
          "name": "shutdown",
          "line_start": 533,
          "line_end": 536,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown performance booster.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "decorator",
          "line_start": 541,
          "line_end": 554,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "wrapper",
          "line_start": 543,
          "line_end": 553,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [
            "<ast.Call object at 0x0000019D2A5D2590>"
          ],
          "complexity_score": 68
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "concurrent.futures",
          "names": [
            "concurrent.futures"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "functools",
          "names": [
            "wraps"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 334
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 447
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'dataclasses', 'json', 'logging', 'concurrent.futures', 'functools', 'threading', 'queue', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 555,
      "complexity_score": 4888,
      "api_surface_area": 29,
      "docstring": "Analytics Performance Booster\n============================\n\nAdvanced performance optimization system to eliminate bottlenecks and ensure\nsub-5-second response times for all analytics operations.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9166666666666666,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_performance_monitor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_performance_monitor.py",
      "component_name": "analytics_performance_monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.475453",
      "classes": [
        {
          "name": "AnalyticsPerformanceMonitor",
          "line_start": 22,
          "line_end": 495,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 27,
              "line_end": 59,
              "args": [
                "self",
                "monitor_interval",
                "history_size"
              ],
              "returns": null,
              "docstring": "Initialize the performance monitor.\n\nArgs:\n    monitor_interval: Monitoring interval in seconds\n    history_size: Number of performance samples to keep",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "start_monitoring",
              "line_start": 61,
              "line_end": 71,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start performance monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "stop_monitoring",
              "line_start": 73,
              "line_end": 79,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop performance monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "record_operation",
              "line_start": 81,
              "line_end": 108,
              "args": [
                "self",
                "operation_name",
                "duration",
                "success",
                "metadata"
              ],
              "returns": null,
              "docstring": "Record a performance metric for an operation.\n\nArgs:\n    operation_name: Name of the operation\n    duration: Duration in seconds\n    success: Whether the operation succeeded\n    metadata: Additional metadata about the operation",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "get_performance_summary",
              "line_start": 110,
              "line_end": 158,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get a comprehensive performance summary.\n\nReturns:\n    Performance summary with key metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 262
            },
            {
              "name": "get_operation_trends",
              "line_start": 160,
              "line_end": 218,
              "args": [
                "self",
                "operation_name",
                "hours"
              ],
              "returns": null,
              "docstring": "Get performance trends for a specific operation.\n\nArgs:\n    operation_name: Name of the operation\n    hours: Number of hours to analyze\n    \nReturns:\n    Trend analysis for the operation",
              "is_async": false,
              "decorators": [],
              "complexity_score": 360
            },
            {
              "name": "optimize_performance",
              "line_start": 220,
              "line_end": 292,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze performance and suggest optimizations.\n\nReturns:\n    Performance optimization recommendations",
              "is_async": false,
              "decorators": [],
              "complexity_score": 391
            },
            {
              "name": "_monitoring_loop",
              "line_start": 294,
              "line_end": 311,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "_get_current_resource_usage",
              "line_start": 313,
              "line_end": 336,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current system resource usage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_check_performance_thresholds",
              "line_start": 338,
              "line_end": 343,
              "args": [
                "self",
                "operation_name",
                "duration"
              ],
              "returns": null,
              "docstring": "Check if operation duration exceeds thresholds.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 71
            },
            {
              "name": "_calculate_system_health",
              "line_start": 345,
              "line_end": 376,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall system health score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 215
            },
            {
              "name": "_get_active_alerts",
              "line_start": 378,
              "line_end": 411,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get list of active performance alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 177
            },
            {
              "name": "_calculate_optimization_score",
              "line_start": 413,
              "line_end": 439,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall optimization score (0-100).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 207
            },
            {
              "name": "_calculate_trend",
              "line_start": 441,
              "line_end": 458,
              "args": [
                "self",
                "values"
              ],
              "returns": null,
              "docstring": "Calculate trend direction from values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_percentile",
              "line_start": 460,
              "line_end": 473,
              "args": [
                "self",
                "values",
                "percentile"
              ],
              "returns": null,
              "docstring": "Calculate percentile value.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_cleanup_old_metrics",
              "line_start": 475,
              "line_end": 495,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old operation metrics to prevent memory leaks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            }
          ],
          "docstring": "Monitors the performance and efficiency of the analytics system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 27,
          "line_end": 59,
          "args": [
            "self",
            "monitor_interval",
            "history_size"
          ],
          "returns": null,
          "docstring": "Initialize the performance monitor.\n\nArgs:\n    monitor_interval: Monitoring interval in seconds\n    history_size: Number of performance samples to keep",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "start_monitoring",
          "line_start": 61,
          "line_end": 71,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start performance monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "stop_monitoring",
          "line_start": 73,
          "line_end": 79,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop performance monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "record_operation",
          "line_start": 81,
          "line_end": 108,
          "args": [
            "self",
            "operation_name",
            "duration",
            "success",
            "metadata"
          ],
          "returns": null,
          "docstring": "Record a performance metric for an operation.\n\nArgs:\n    operation_name: Name of the operation\n    duration: Duration in seconds\n    success: Whether the operation succeeded\n    metadata: Additional metadata about the operation",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "get_performance_summary",
          "line_start": 110,
          "line_end": 158,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get a comprehensive performance summary.\n\nReturns:\n    Performance summary with key metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 262
        },
        {
          "name": "get_operation_trends",
          "line_start": 160,
          "line_end": 218,
          "args": [
            "self",
            "operation_name",
            "hours"
          ],
          "returns": null,
          "docstring": "Get performance trends for a specific operation.\n\nArgs:\n    operation_name: Name of the operation\n    hours: Number of hours to analyze\n    \nReturns:\n    Trend analysis for the operation",
          "is_async": false,
          "decorators": [],
          "complexity_score": 360
        },
        {
          "name": "optimize_performance",
          "line_start": 220,
          "line_end": 292,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze performance and suggest optimizations.\n\nReturns:\n    Performance optimization recommendations",
          "is_async": false,
          "decorators": [],
          "complexity_score": 391
        },
        {
          "name": "_monitoring_loop",
          "line_start": 294,
          "line_end": 311,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "_get_current_resource_usage",
          "line_start": 313,
          "line_end": 336,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current system resource usage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_check_performance_thresholds",
          "line_start": 338,
          "line_end": 343,
          "args": [
            "self",
            "operation_name",
            "duration"
          ],
          "returns": null,
          "docstring": "Check if operation duration exceeds thresholds.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 71
        },
        {
          "name": "_calculate_system_health",
          "line_start": 345,
          "line_end": 376,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall system health score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 215
        },
        {
          "name": "_get_active_alerts",
          "line_start": 378,
          "line_end": 411,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get list of active performance alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 177
        },
        {
          "name": "_calculate_optimization_score",
          "line_start": 413,
          "line_end": 439,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall optimization score (0-100).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 207
        },
        {
          "name": "_calculate_trend",
          "line_start": 441,
          "line_end": 458,
          "args": [
            "self",
            "values"
          ],
          "returns": null,
          "docstring": "Calculate trend direction from values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_percentile",
          "line_start": 460,
          "line_end": 473,
          "args": [
            "self",
            "values",
            "percentile"
          ],
          "returns": null,
          "docstring": "Calculate percentile value.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_cleanup_old_metrics",
          "line_start": 475,
          "line_end": 495,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old operation metrics to prevent memory leaks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'logging', 'threading', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 495,
      "complexity_score": 5028,
      "api_surface_area": 12,
      "docstring": "Analytics Performance Monitor\n=============================\n\nMonitors the performance of the analytics system itself.\nTracks processing times, resource usage, and system efficiency.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0588235294117647,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_performance_optimizer.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_performance_optimizer.py",
      "component_name": "analytics_performance_optimizer",
      "analysis_timestamp": "2025-08-20 21:46:40.484452",
      "classes": [
        {
          "name": "OptimizationType",
          "line_start": 29,
          "line_end": 35,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "OptimizationLevel",
          "line_start": 37,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "OptimizationRule",
          "line_start": 43,
          "line_end": 52,
          "base_classes": [],
          "methods": [],
          "docstring": "Performance optimization rule.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PerformanceMetric",
          "line_start": 55,
          "line_end": 63,
          "base_classes": [],
          "methods": [],
          "docstring": "Performance measurement point.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "OptimizationResult",
          "line_start": 66,
          "line_end": 74,
          "base_classes": [],
          "methods": [],
          "docstring": "Result of an optimization operation.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsPerformanceOptimizer",
          "line_start": 76,
          "line_end": 660,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 81,
              "line_end": 133,
              "args": [
                "self",
                "optimization_level",
                "monitoring_interval"
              ],
              "returns": null,
              "docstring": "Initialize analytics performance optimizer.\n\nArgs:\n    optimization_level: Level of optimization aggressiveness\n    monitoring_interval: Interval between optimization checks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 178
            },
            {
              "name": "start_optimization",
              "line_start": 135,
              "line_end": 149,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start performance optimization monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "stop_optimization",
              "line_start": 151,
              "line_end": 160,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop performance optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "register_analytics_component",
              "line_start": 162,
              "line_end": 173,
              "args": [
                "self",
                "component_name",
                "component_instance"
              ],
              "returns": null,
              "docstring": "Register an analytics component for optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "add_optimization_rule",
              "line_start": 175,
              "line_end": 178,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add a custom optimization rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            },
            {
              "name": "record_performance_metric",
              "line_start": 180,
              "line_end": 191,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Record a performance metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "optimize_component",
              "line_start": 193,
              "line_end": 204,
              "args": [
                "self",
                "component_name"
              ],
              "returns": null,
              "docstring": "Manually trigger optimization for a specific component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "get_performance_recommendations",
              "line_start": 206,
              "line_end": 257,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get performance optimization recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 195
            },
            {
              "name": "_setup_default_rules",
              "line_start": 259,
              "line_end": 388,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default optimization rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 483
            },
            {
              "name": "_optimization_loop",
              "line_start": 390,
              "line_end": 407,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main optimization monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_metrics_collection_loop",
              "line_start": 409,
              "line_end": 429,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background metrics collection loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "_collect_current_metrics",
              "line_start": 431,
              "line_end": 475,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect current performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 257
            },
            {
              "name": "_can_apply_rule",
              "line_start": 477,
              "line_end": 490,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Check if a rule can be applied.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_apply_optimization_rule",
              "line_start": 492,
              "line_end": 555,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Apply an optimization rule and measure results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 357
            },
            {
              "name": "_calculate_improvement",
              "line_start": 557,
              "line_end": 588,
              "args": [
                "self",
                "before",
                "after",
                "optimization_type"
              ],
              "returns": null,
              "docstring": "Calculate performance improvement percentage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 249
            },
            {
              "name": "_update_performance_baseline",
              "line_start": 590,
              "line_end": 609,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Update performance baseline for a metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "get_optimization_summary",
              "line_start": 611,
              "line_end": 650,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get optimization system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 234
            },
            {
              "name": "get_optimization_history",
              "line_start": 652,
              "line_end": 655,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get optimization history for the specified time period.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "shutdown",
              "line_start": 657,
              "line_end": 660,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown optimization engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced performance optimization engine for analytics system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 81,
          "line_end": 133,
          "args": [
            "self",
            "optimization_level",
            "monitoring_interval"
          ],
          "returns": null,
          "docstring": "Initialize analytics performance optimizer.\n\nArgs:\n    optimization_level: Level of optimization aggressiveness\n    monitoring_interval: Interval between optimization checks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 178
        },
        {
          "name": "start_optimization",
          "line_start": 135,
          "line_end": 149,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start performance optimization monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "stop_optimization",
          "line_start": 151,
          "line_end": 160,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop performance optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "register_analytics_component",
          "line_start": 162,
          "line_end": 173,
          "args": [
            "self",
            "component_name",
            "component_instance"
          ],
          "returns": null,
          "docstring": "Register an analytics component for optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "add_optimization_rule",
          "line_start": 175,
          "line_end": 178,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add a custom optimization rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "record_performance_metric",
          "line_start": 180,
          "line_end": 191,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Record a performance metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "optimize_component",
          "line_start": 193,
          "line_end": 204,
          "args": [
            "self",
            "component_name"
          ],
          "returns": null,
          "docstring": "Manually trigger optimization for a specific component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "get_performance_recommendations",
          "line_start": 206,
          "line_end": 257,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get performance optimization recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 195
        },
        {
          "name": "_setup_default_rules",
          "line_start": 259,
          "line_end": 388,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default optimization rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 483
        },
        {
          "name": "_optimization_loop",
          "line_start": 390,
          "line_end": 407,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main optimization monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_metrics_collection_loop",
          "line_start": 409,
          "line_end": 429,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background metrics collection loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "_collect_current_metrics",
          "line_start": 431,
          "line_end": 475,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect current performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 257
        },
        {
          "name": "_can_apply_rule",
          "line_start": 477,
          "line_end": 490,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Check if a rule can be applied.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_apply_optimization_rule",
          "line_start": 492,
          "line_end": 555,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Apply an optimization rule and measure results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 357
        },
        {
          "name": "_calculate_improvement",
          "line_start": 557,
          "line_end": 588,
          "args": [
            "self",
            "before",
            "after",
            "optimization_type"
          ],
          "returns": null,
          "docstring": "Calculate performance improvement percentage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 249
        },
        {
          "name": "_update_performance_baseline",
          "line_start": 590,
          "line_end": 609,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Update performance baseline for a metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "get_optimization_summary",
          "line_start": 611,
          "line_end": 650,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get optimization system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 234
        },
        {
          "name": "get_optimization_history",
          "line_start": 652,
          "line_end": 655,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get optimization history for the specified time period.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "shutdown",
          "line_start": 657,
          "line_end": 660,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown optimization engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "memory_pressure_condition",
          "line_start": 263,
          "line_end": 264,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "memory_cleanup_action",
          "line_start": 266,
          "line_end": 277,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "cpu_pressure_condition",
          "line_start": 291,
          "line_end": 292,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 13
        },
        {
          "name": "cpu_optimization_action",
          "line_start": 294,
          "line_end": 305,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "cache_miss_condition",
          "line_start": 319,
          "line_end": 326,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "cache_optimization_action",
          "line_start": 328,
          "line_end": 336,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "io_pressure_condition",
          "line_start": 350,
          "line_end": 358,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "io_optimization_action",
          "line_start": 360,
          "line_end": 368,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "gc",
          "names": [
            "gc"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        }
      ],
      "external_dependencies": "{'queue', 'psutil', 'typing', 'time', 'dataclasses', 'sys', 'json', 'logging', 'enum', 'threading', 'gc', 'os', 'math', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 660,
      "complexity_score": 6094,
      "api_surface_area": 28,
      "docstring": "Analytics Performance Optimization Engine\n========================================\n\nAdvanced performance optimization system for analytics components with\nautomatic tuning, resource optimization, and intelligent scaling.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.7272727272727273,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_persistence.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_persistence.py",
      "component_name": "analytics_persistence",
      "analysis_timestamp": "2025-08-20 21:46:40.493452",
      "classes": [
        {
          "name": "AnalyticsPersistenceEngine",
          "line_start": 26,
          "line_end": 703,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 31,
              "line_end": 63,
              "args": [
                "self",
                "db_path",
                "retention_days"
              ],
              "returns": null,
              "docstring": "Initialize the persistence engine.\n\nArgs:\n    db_path: Path to the SQLite database\n    retention_days: Number of days to retain data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            },
            {
              "name": "_get_connection",
              "line_start": 65,
              "line_end": 74,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get thread-local database connection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_init_database",
              "line_start": 76,
              "line_end": 173,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize the database schema.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "store_analytics_snapshot",
              "line_start": 175,
              "line_end": 217,
              "args": [
                "self",
                "snapshot_type",
                "analytics_data",
                "metadata"
              ],
              "returns": null,
              "docstring": "Store a complete analytics snapshot.\n\nArgs:\n    snapshot_type: Type of snapshot (e.g., 'comprehensive', 'system_metrics')\n    analytics_data: The analytics data to store\n    metadata: Additional metadata about the snapshot\n\nReturns:\n    The ID of the stored snapshot",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "store_time_series_metric",
              "line_start": 219,
              "line_end": 244,
              "args": [
                "self",
                "metric_name",
                "value",
                "metric_type",
                "source_component",
                "tags"
              ],
              "returns": null,
              "docstring": "Store a time-series metric value.\n\nArgs:\n    metric_name: Name of the metric\n    value: Metric value\n    metric_type: Type of metric (gauge, counter, histogram, etc.)\n    source_component: Component that generated the metric\n    tags: Additional tags for the metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "store_analytics_event",
              "line_start": 246,
              "line_end": 270,
              "args": [
                "self",
                "event_type",
                "message",
                "severity",
                "component",
                "event_data",
                "correlation_id"
              ],
              "returns": null,
              "docstring": "Store an analytics event.\n\nArgs:\n    event_type: Type of event\n    message: Event message\n    severity: Event severity (debug, info, warning, error, critical)\n    component: Component that generated the event\n    event_data: Additional event data\n    correlation_id: Correlation ID for tracking related events",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "get_historical_snapshots",
              "line_start": 272,
              "line_end": 325,
              "args": [
                "self",
                "snapshot_type",
                "hours",
                "limit"
              ],
              "returns": null,
              "docstring": "Retrieve historical analytics snapshots.\n\nArgs:\n    snapshot_type: Filter by snapshot type\n    hours: Number of hours to look back\n    limit: Maximum number of snapshots to return\n\nReturns:\n    List of analytics snapshots",
              "is_async": false,
              "decorators": [],
              "complexity_score": 213
            },
            {
              "name": "get_time_series_data",
              "line_start": 327,
              "line_end": 348,
              "args": [
                "self",
                "metric_name",
                "hours"
              ],
              "returns": null,
              "docstring": "Get time series data for a specific metric.\n\nArgs:\n    metric_name: Name of the metric\n    hours: Number of hours to look back\n\nReturns:\n    List of metric data points",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "calculate_trend_analysis",
              "line_start": 350,
              "line_end": 431,
              "args": [
                "self",
                "metric_name",
                "hours"
              ],
              "returns": null,
              "docstring": "Calculate trend analysis for a specific metric.\n\nArgs:\n    metric_name: Name of the metric\n    hours: Analysis window in hours\n\nReturns:\n    Trend analysis results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 405
            },
            {
              "name": "get_performance_baseline",
              "line_start": 433,
              "line_end": 443,
              "args": [
                "self",
                "metric_name"
              ],
              "returns": null,
              "docstring": "Get performance baseline for a metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "get_anomaly_candidates",
              "line_start": 445,
              "line_end": 497,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Identify potential anomalies based on deviation from baselines.\n\nArgs:\n    hours: Number of hours to analyze\n\nReturns:\n    List of potential anomalies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 225
            },
            {
              "name": "get_persistence_stats",
              "line_start": 499,
              "line_end": 539,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get persistence engine statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 208
            },
            {
              "name": "_update_performance_baseline",
              "line_start": 541,
              "line_end": 586,
              "args": [
                "self",
                "metric_name",
                "value"
              ],
              "returns": null,
              "docstring": "Update the performance baseline for a metric.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 213
            },
            {
              "name": "_store_trend_analysis",
              "line_start": 588,
              "line_end": 608,
              "args": [
                "self",
                "trend_analysis"
              ],
              "returns": null,
              "docstring": "Store trend analysis results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "_generate_predictions",
              "line_start": 610,
              "line_end": 628,
              "args": [
                "self",
                "values",
                "slope",
                "num_predictions"
              ],
              "returns": null,
              "docstring": "Generate predictions based on trend analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_maintenance_loop",
              "line_start": 630,
              "line_end": 649,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background maintenance loop for data cleanup and optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_cleanup_old_data",
              "line_start": 651,
              "line_end": 681,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old data based on retention policy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "_optimize_database",
              "line_start": 683,
              "line_end": 696,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Optimize database performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "shutdown",
              "line_start": 698,
              "line_end": 703,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the persistence engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 37
            }
          ],
          "docstring": "Manages persistent storage of analytics data with advanced querying capabilities.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 31,
          "line_end": 63,
          "args": [
            "self",
            "db_path",
            "retention_days"
          ],
          "returns": null,
          "docstring": "Initialize the persistence engine.\n\nArgs:\n    db_path: Path to the SQLite database\n    retention_days: Number of days to retain data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        },
        {
          "name": "_get_connection",
          "line_start": 65,
          "line_end": 74,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get thread-local database connection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_init_database",
          "line_start": 76,
          "line_end": 173,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize the database schema.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "store_analytics_snapshot",
          "line_start": 175,
          "line_end": 217,
          "args": [
            "self",
            "snapshot_type",
            "analytics_data",
            "metadata"
          ],
          "returns": null,
          "docstring": "Store a complete analytics snapshot.\n\nArgs:\n    snapshot_type: Type of snapshot (e.g., 'comprehensive', 'system_metrics')\n    analytics_data: The analytics data to store\n    metadata: Additional metadata about the snapshot\n\nReturns:\n    The ID of the stored snapshot",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "store_time_series_metric",
          "line_start": 219,
          "line_end": 244,
          "args": [
            "self",
            "metric_name",
            "value",
            "metric_type",
            "source_component",
            "tags"
          ],
          "returns": null,
          "docstring": "Store a time-series metric value.\n\nArgs:\n    metric_name: Name of the metric\n    value: Metric value\n    metric_type: Type of metric (gauge, counter, histogram, etc.)\n    source_component: Component that generated the metric\n    tags: Additional tags for the metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "store_analytics_event",
          "line_start": 246,
          "line_end": 270,
          "args": [
            "self",
            "event_type",
            "message",
            "severity",
            "component",
            "event_data",
            "correlation_id"
          ],
          "returns": null,
          "docstring": "Store an analytics event.\n\nArgs:\n    event_type: Type of event\n    message: Event message\n    severity: Event severity (debug, info, warning, error, critical)\n    component: Component that generated the event\n    event_data: Additional event data\n    correlation_id: Correlation ID for tracking related events",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "get_historical_snapshots",
          "line_start": 272,
          "line_end": 325,
          "args": [
            "self",
            "snapshot_type",
            "hours",
            "limit"
          ],
          "returns": null,
          "docstring": "Retrieve historical analytics snapshots.\n\nArgs:\n    snapshot_type: Filter by snapshot type\n    hours: Number of hours to look back\n    limit: Maximum number of snapshots to return\n\nReturns:\n    List of analytics snapshots",
          "is_async": false,
          "decorators": [],
          "complexity_score": 213
        },
        {
          "name": "get_time_series_data",
          "line_start": 327,
          "line_end": 348,
          "args": [
            "self",
            "metric_name",
            "hours"
          ],
          "returns": null,
          "docstring": "Get time series data for a specific metric.\n\nArgs:\n    metric_name: Name of the metric\n    hours: Number of hours to look back\n\nReturns:\n    List of metric data points",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "calculate_trend_analysis",
          "line_start": 350,
          "line_end": 431,
          "args": [
            "self",
            "metric_name",
            "hours"
          ],
          "returns": null,
          "docstring": "Calculate trend analysis for a specific metric.\n\nArgs:\n    metric_name: Name of the metric\n    hours: Analysis window in hours\n\nReturns:\n    Trend analysis results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 405
        },
        {
          "name": "get_performance_baseline",
          "line_start": 433,
          "line_end": 443,
          "args": [
            "self",
            "metric_name"
          ],
          "returns": null,
          "docstring": "Get performance baseline for a metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "get_anomaly_candidates",
          "line_start": 445,
          "line_end": 497,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Identify potential anomalies based on deviation from baselines.\n\nArgs:\n    hours: Number of hours to analyze\n\nReturns:\n    List of potential anomalies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 225
        },
        {
          "name": "get_persistence_stats",
          "line_start": 499,
          "line_end": 539,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get persistence engine statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 208
        },
        {
          "name": "_update_performance_baseline",
          "line_start": 541,
          "line_end": 586,
          "args": [
            "self",
            "metric_name",
            "value"
          ],
          "returns": null,
          "docstring": "Update the performance baseline for a metric.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 213
        },
        {
          "name": "_store_trend_analysis",
          "line_start": 588,
          "line_end": 608,
          "args": [
            "self",
            "trend_analysis"
          ],
          "returns": null,
          "docstring": "Store trend analysis results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "_generate_predictions",
          "line_start": 610,
          "line_end": 628,
          "args": [
            "self",
            "values",
            "slope",
            "num_predictions"
          ],
          "returns": null,
          "docstring": "Generate predictions based on trend analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_maintenance_loop",
          "line_start": 630,
          "line_end": 649,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background maintenance loop for data cleanup and optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_cleanup_old_data",
          "line_start": 651,
          "line_end": 681,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old data based on retention policy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "_optimize_database",
          "line_start": 683,
          "line_end": 696,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Optimize database performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "shutdown",
          "line_start": 698,
          "line_end": 703,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the persistence engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 37
        }
      ],
      "imports": [
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'zlib', 'json', 'logging', 'pickle', 'threading', 'os', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 703,
      "complexity_score": 5260,
      "api_surface_area": 20,
      "docstring": "Analytics Data Persistence Engine\n=================================\n\nAdvanced data persistence with historical trending, time-series analysis,\nand intelligent data retention policies.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.05,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_pipeline.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_pipeline.py",
      "component_name": "analytics_pipeline",
      "analysis_timestamp": "2025-08-20 21:46:40.502451",
      "classes": [
        {
          "name": "DataTransformer",
          "line_start": 24,
          "line_end": 59,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 27,
              "line_end": 31,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "transform",
              "line_start": 33,
              "line_end": 44,
              "args": [
                "self",
                "data",
                "context"
              ],
              "returns": null,
              "docstring": "Transform the data. Override in subclasses.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_transform_impl",
              "line_start": 46,
              "line_end": 48,
              "args": [
                "self",
                "data",
                "context"
              ],
              "returns": null,
              "docstring": "Implementation method to override.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "get_stats",
              "line_start": 50,
              "line_end": 59,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get transformer statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            }
          ],
          "docstring": "Base class for data transformers.",
          "decorators": []
        },
        {
          "name": "DataEnricher",
          "line_start": 61,
          "line_end": 236,
          "base_classes": [
            "DataTransformer"
          ],
          "methods": [
            {
              "name": "_transform_impl",
              "line_start": 64,
              "line_end": 87,
              "args": [
                "self",
                "data",
                "context"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_enrich_system_metrics",
              "line_start": 89,
              "line_end": 103,
              "args": [
                "self",
                "system_metrics"
              ],
              "returns": null,
              "docstring": "Enrich system metrics with derived values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_enrich_test_metrics",
              "line_start": 105,
              "line_end": 125,
              "args": [
                "self",
                "test_metrics"
              ],
              "returns": null,
              "docstring": "Enrich test metrics with quality indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "_enrich_workflow_metrics",
              "line_start": 127,
              "line_end": 140,
              "args": [
                "self",
                "workflow_metrics"
              ],
              "returns": null,
              "docstring": "Enrich workflow metrics with efficiency indicators.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_add_cross_correlations",
              "line_start": 142,
              "line_end": 158,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Add cross-component correlation analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_calculate_performance_grade",
              "line_start": 160,
              "line_end": 171,
              "args": [
                "self",
                "system_load"
              ],
              "returns": null,
              "docstring": "Calculate performance grade based on system load.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_calculate_quality_tier",
              "line_start": 173,
              "line_end": 182,
              "args": [
                "self",
                "health_score"
              ],
              "returns": null,
              "docstring": "Calculate quality tier based on health score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_get_test_recommendation",
              "line_start": 184,
              "line_end": 193,
              "args": [
                "self",
                "pass_rate",
                "coverage",
                "total_tests"
              ],
              "returns": null,
              "docstring": "Get test improvement recommendation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "_calculate_workflow_efficiency",
              "line_start": 195,
              "line_end": 212,
              "args": [
                "self",
                "success_rate",
                "avg_duration",
                "active_count"
              ],
              "returns": null,
              "docstring": "Calculate workflow efficiency score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "_get_performance_rating",
              "line_start": 214,
              "line_end": 225,
              "args": [
                "self",
                "efficiency_score"
              ],
              "returns": null,
              "docstring": "Get performance rating based on efficiency score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_calculate_correlation_strength",
              "line_start": 227,
              "line_end": 236,
              "args": [
                "self",
                "value1",
                "value2"
              ],
              "returns": null,
              "docstring": "Calculate correlation strength between two values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            }
          ],
          "docstring": "Enriches analytics data with additional computed metrics.",
          "decorators": []
        },
        {
          "name": "DataNormalizer",
          "line_start": 238,
          "line_end": 314,
          "base_classes": [
            "DataTransformer"
          ],
          "methods": [
            {
              "name": "_transform_impl",
              "line_start": 241,
              "line_end": 260,
              "args": [
                "self",
                "data",
                "context"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_normalize_timestamps",
              "line_start": 262,
              "line_end": 282,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Ensure all timestamps are in ISO format.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "_normalize_units",
              "line_start": 284,
              "line_end": 298,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Normalize units across metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_standardize_fields",
              "line_start": 300,
              "line_end": 314,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Standardize field names and structures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 118
            }
          ],
          "docstring": "Normalizes data formats and units across different components.",
          "decorators": []
        },
        {
          "name": "DataAggregator",
          "line_start": 316,
          "line_end": 423,
          "base_classes": [
            "DataTransformer"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 319,
              "line_end": 322,
              "args": [
                "self",
                "name",
                "aggregation_rules"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "add_data_source",
              "line_start": 324,
              "line_end": 336,
              "args": [
                "self",
                "source_name",
                "data"
              ],
              "returns": null,
              "docstring": "Add data from a specific source.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            },
            {
              "name": "_transform_impl",
              "line_start": 338,
              "line_end": 354,
              "args": [
                "self",
                "data",
                "context"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_aggregate_numeric_metrics",
              "line_start": 356,
              "line_end": 376,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Aggregate numeric metrics from multiple sources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 126
            },
            {
              "name": "_resolve_categorical_conflicts",
              "line_start": 378,
              "line_end": 398,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Resolve conflicts in categorical data using voting.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 115
            },
            {
              "name": "_get_nested_value",
              "line_start": 400,
              "line_end": 411,
              "args": [
                "self",
                "data",
                "path"
              ],
              "returns": null,
              "docstring": "Get value from nested dictionary using dot notation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_set_nested_value",
              "line_start": 413,
              "line_end": 423,
              "args": [
                "self",
                "data",
                "path",
                "value"
              ],
              "returns": null,
              "docstring": "Set value in nested dictionary using dot notation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            }
          ],
          "docstring": "Aggregates data from multiple sources with conflict resolution.",
          "decorators": []
        },
        {
          "name": "AnalyticsPipeline",
          "line_start": 425,
          "line_end": 623,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 430,
              "line_end": 456,
              "args": [
                "self",
                "max_workers"
              ],
              "returns": null,
              "docstring": "Initialize the analytics pipeline.\n\nArgs:\n    max_workers: Maximum number of worker threads",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "_setup_default_pipeline",
              "line_start": 458,
              "line_end": 463,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Set up the default transformation pipeline.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "add_transformer",
              "line_start": 465,
              "line_end": 468,
              "args": [
                "self",
                "transformer"
              ],
              "returns": null,
              "docstring": "Add a transformer to the pipeline.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "remove_transformer",
              "line_start": 470,
              "line_end": 477,
              "args": [
                "self",
                "transformer_name"
              ],
              "returns": null,
              "docstring": "Remove a transformer from the pipeline.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            },
            {
              "name": "process",
              "line_start": 479,
              "line_end": 576,
              "args": [
                "self",
                "analytics_data",
                "context"
              ],
              "returns": null,
              "docstring": "Process analytics data through the pipeline.\n\nArgs:\n    analytics_data: The analytics data to process\n    context: Additional context for processing\n\nReturns:\n    Processed analytics data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 445
            },
            {
              "name": "process_async",
              "line_start": 578,
              "line_end": 580,
              "args": [
                "self",
                "analytics_data",
                "context"
              ],
              "returns": null,
              "docstring": "Process analytics data asynchronously.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "get_pipeline_stats",
              "line_start": 582,
              "line_end": 601,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get pipeline statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "reset_stats",
              "line_start": 603,
              "line_end": 618,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Reset pipeline statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "shutdown",
              "line_start": 620,
              "line_end": 623,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the pipeline.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 22
            }
          ],
          "docstring": "Main analytics pipeline that orchestrates data flow through transformers.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 27,
          "line_end": 31,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "transform",
          "line_start": 33,
          "line_end": 44,
          "args": [
            "self",
            "data",
            "context"
          ],
          "returns": null,
          "docstring": "Transform the data. Override in subclasses.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_transform_impl",
          "line_start": 46,
          "line_end": 48,
          "args": [
            "self",
            "data",
            "context"
          ],
          "returns": null,
          "docstring": "Implementation method to override.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "get_stats",
          "line_start": 50,
          "line_end": 59,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get transformer statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_transform_impl",
          "line_start": 64,
          "line_end": 87,
          "args": [
            "self",
            "data",
            "context"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_enrich_system_metrics",
          "line_start": 89,
          "line_end": 103,
          "args": [
            "self",
            "system_metrics"
          ],
          "returns": null,
          "docstring": "Enrich system metrics with derived values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_enrich_test_metrics",
          "line_start": 105,
          "line_end": 125,
          "args": [
            "self",
            "test_metrics"
          ],
          "returns": null,
          "docstring": "Enrich test metrics with quality indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "_enrich_workflow_metrics",
          "line_start": 127,
          "line_end": 140,
          "args": [
            "self",
            "workflow_metrics"
          ],
          "returns": null,
          "docstring": "Enrich workflow metrics with efficiency indicators.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_add_cross_correlations",
          "line_start": 142,
          "line_end": 158,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Add cross-component correlation analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_calculate_performance_grade",
          "line_start": 160,
          "line_end": 171,
          "args": [
            "self",
            "system_load"
          ],
          "returns": null,
          "docstring": "Calculate performance grade based on system load.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_calculate_quality_tier",
          "line_start": 173,
          "line_end": 182,
          "args": [
            "self",
            "health_score"
          ],
          "returns": null,
          "docstring": "Calculate quality tier based on health score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_get_test_recommendation",
          "line_start": 184,
          "line_end": 193,
          "args": [
            "self",
            "pass_rate",
            "coverage",
            "total_tests"
          ],
          "returns": null,
          "docstring": "Get test improvement recommendation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "_calculate_workflow_efficiency",
          "line_start": 195,
          "line_end": 212,
          "args": [
            "self",
            "success_rate",
            "avg_duration",
            "active_count"
          ],
          "returns": null,
          "docstring": "Calculate workflow efficiency score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "_get_performance_rating",
          "line_start": 214,
          "line_end": 225,
          "args": [
            "self",
            "efficiency_score"
          ],
          "returns": null,
          "docstring": "Get performance rating based on efficiency score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_calculate_correlation_strength",
          "line_start": 227,
          "line_end": 236,
          "args": [
            "self",
            "value1",
            "value2"
          ],
          "returns": null,
          "docstring": "Calculate correlation strength between two values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "_transform_impl",
          "line_start": 241,
          "line_end": 260,
          "args": [
            "self",
            "data",
            "context"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_normalize_timestamps",
          "line_start": 262,
          "line_end": 282,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Ensure all timestamps are in ISO format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "_normalize_units",
          "line_start": 284,
          "line_end": 298,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Normalize units across metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_standardize_fields",
          "line_start": 300,
          "line_end": 314,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Standardize field names and structures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 118
        },
        {
          "name": "__init__",
          "line_start": 319,
          "line_end": 322,
          "args": [
            "self",
            "name",
            "aggregation_rules"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "add_data_source",
          "line_start": 324,
          "line_end": 336,
          "args": [
            "self",
            "source_name",
            "data"
          ],
          "returns": null,
          "docstring": "Add data from a specific source.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        },
        {
          "name": "_transform_impl",
          "line_start": 338,
          "line_end": 354,
          "args": [
            "self",
            "data",
            "context"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_aggregate_numeric_metrics",
          "line_start": 356,
          "line_end": 376,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Aggregate numeric metrics from multiple sources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "_resolve_categorical_conflicts",
          "line_start": 378,
          "line_end": 398,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Resolve conflicts in categorical data using voting.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 115
        },
        {
          "name": "_get_nested_value",
          "line_start": 400,
          "line_end": 411,
          "args": [
            "self",
            "data",
            "path"
          ],
          "returns": null,
          "docstring": "Get value from nested dictionary using dot notation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_set_nested_value",
          "line_start": 413,
          "line_end": 423,
          "args": [
            "self",
            "data",
            "path",
            "value"
          ],
          "returns": null,
          "docstring": "Set value in nested dictionary using dot notation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "__init__",
          "line_start": 430,
          "line_end": 456,
          "args": [
            "self",
            "max_workers"
          ],
          "returns": null,
          "docstring": "Initialize the analytics pipeline.\n\nArgs:\n    max_workers: Maximum number of worker threads",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "_setup_default_pipeline",
          "line_start": 458,
          "line_end": 463,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Set up the default transformation pipeline.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "add_transformer",
          "line_start": 465,
          "line_end": 468,
          "args": [
            "self",
            "transformer"
          ],
          "returns": null,
          "docstring": "Add a transformer to the pipeline.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "remove_transformer",
          "line_start": 470,
          "line_end": 477,
          "args": [
            "self",
            "transformer_name"
          ],
          "returns": null,
          "docstring": "Remove a transformer from the pipeline.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "process",
          "line_start": 479,
          "line_end": 576,
          "args": [
            "self",
            "analytics_data",
            "context"
          ],
          "returns": null,
          "docstring": "Process analytics data through the pipeline.\n\nArgs:\n    analytics_data: The analytics data to process\n    context: Additional context for processing\n\nReturns:\n    Processed analytics data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 445
        },
        {
          "name": "process_async",
          "line_start": 578,
          "line_end": 580,
          "args": [
            "self",
            "analytics_data",
            "context"
          ],
          "returns": null,
          "docstring": "Process analytics data asynchronously.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "get_pipeline_stats",
          "line_start": 582,
          "line_end": 601,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get pipeline statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "reset_stats",
          "line_start": 603,
          "line_end": 618,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Reset pipeline statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "shutdown",
          "line_start": 620,
          "line_end": 623,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the pipeline.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "normalize_recursive",
          "line_start": 266,
          "line_end": 280,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "standardize_booleans",
          "line_start": 303,
          "line_end": 312,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor",
            "as_completed"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "copy",
          "names": [
            "copy"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "collections",
          "names": [
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 395
        }
      ],
      "external_dependencies": "{'typing', 'time', 'copy', 'json', 'logging', 'concurrent.futures', 'threading', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 623,
      "complexity_score": 6476,
      "api_surface_area": 22,
      "docstring": "Analytics Aggregation Pipeline\n==============================\n\nAdvanced data aggregation pipeline with transformation, enrichment,\nand intelligent data flow management.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.8571428571428571,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_pipeline_health_monitor.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_pipeline_health_monitor.py",
      "component_name": "analytics_pipeline_health_monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.514269",
      "classes": [
        {
          "name": "HealthStatus",
          "line_start": 29,
          "line_end": 35,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Health status levels.",
          "decorators": []
        },
        {
          "name": "AlertSeverity",
          "line_start": 38,
          "line_end": 44,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Alert severity levels.",
          "decorators": []
        },
        {
          "name": "HealthMetric",
          "line_start": 48,
          "line_end": 58,
          "base_classes": [],
          "methods": [],
          "docstring": "Individual health metric.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "HealthAlert",
          "line_start": 62,
          "line_end": 73,
          "base_classes": [],
          "methods": [],
          "docstring": "Health alert.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ComponentHealth",
          "line_start": 77,
          "line_end": 86,
          "base_classes": [],
          "methods": [],
          "docstring": "Component health summary.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsPipelineHealthMonitor",
          "line_start": 89,
          "line_end": 779,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 92,
              "line_end": 133,
              "args": [
                "self",
                "db_path",
                "websocket_port",
                "check_interval",
                "alert_retention_hours"
              ],
              "returns": null,
              "docstring": "Initialize the pipeline health monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 246
            },
            {
              "name": "_initialize_database",
              "line_start": 135,
              "line_end": 189,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize the health monitoring database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_register_default_health_checks",
              "line_start": 191,
              "line_end": 202,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Register default health check functions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "register_component",
              "line_start": 204,
              "line_end": 223,
              "args": [
                "self",
                "component",
                "health_check_fn"
              ],
              "returns": null,
              "docstring": "Register a component for health monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "record_metric",
              "line_start": 225,
              "line_end": 295,
              "args": [
                "self",
                "component",
                "metric_name",
                "value",
                "unit",
                "custom_thresholds"
              ],
              "returns": null,
              "docstring": "Record a health metric for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 368
            },
            {
              "name": "_save_metric_to_db",
              "line_start": 297,
              "line_end": 319,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Save metric to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_check_metric_alerts",
              "line_start": 321,
              "line_end": 345,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Check if metric triggers any alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 204
            },
            {
              "name": "_save_alert_to_db",
              "line_start": 347,
              "line_end": 370,
              "args": [
                "self",
                "alert"
              ],
              "returns": null,
              "docstring": "Save alert to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "_broadcast_metric_update",
              "line_start": 494,
              "line_end": 513,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Broadcast metric update to all WebSocket subscribers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_broadcast_alert",
              "line_start": 515,
              "line_end": 534,
              "args": [
                "self",
                "alert"
              ],
              "returns": null,
              "docstring": "Broadcast alert to all WebSocket subscribers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_monitor_health",
              "line_start": 557,
              "line_end": 581,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background health monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "_cleanup_old_alerts",
              "line_start": 583,
              "line_end": 594,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old resolved alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_check_aggregator_health",
              "line_start": 596,
              "line_end": 611,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check analytics aggregator health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "_check_pipeline_health",
              "line_start": 613,
              "line_end": 620,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check analytics pipeline health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_check_streaming_health",
              "line_start": 622,
              "line_end": 630,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check streaming health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_check_cache_health",
              "line_start": 632,
              "line_end": 639,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check cache health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_check_database_health",
              "line_start": 641,
              "line_end": 648,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check database health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_check_integrity_health",
              "line_start": 650,
              "line_end": 657,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check integrity system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_check_backup_health",
              "line_start": 659,
              "line_end": 666,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check backup system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_check_retry_health",
              "line_start": 668,
              "line_end": 675,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check retry system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "start_monitoring",
              "line_start": 677,
              "line_end": 691,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the health monitoring system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "stop_monitoring",
              "line_start": 705,
              "line_end": 716,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop the health monitoring system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "get_health_summary",
              "line_start": 718,
              "line_end": 742,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive health summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "_calculate_overall_status",
              "line_start": 744,
              "line_end": 758,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall system health status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "force_health_check",
              "line_start": 760,
              "line_end": 775,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Force immediate health check for component(s).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 76
            },
            {
              "name": "shutdown",
              "line_start": 777,
              "line_end": 779,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the health monitoring system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            }
          ],
          "docstring": "Real-time analytics pipeline health monitor with WebSocket streaming.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_health_monitor",
          "line_start": 785,
          "line_end": 790,
          "args": [],
          "returns": null,
          "docstring": "Get the global health monitor instance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "__init__",
          "line_start": 92,
          "line_end": 133,
          "args": [
            "self",
            "db_path",
            "websocket_port",
            "check_interval",
            "alert_retention_hours"
          ],
          "returns": null,
          "docstring": "Initialize the pipeline health monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 246
        },
        {
          "name": "_initialize_database",
          "line_start": 135,
          "line_end": 189,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize the health monitoring database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_register_default_health_checks",
          "line_start": 191,
          "line_end": 202,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Register default health check functions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "register_component",
          "line_start": 204,
          "line_end": 223,
          "args": [
            "self",
            "component",
            "health_check_fn"
          ],
          "returns": null,
          "docstring": "Register a component for health monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "record_metric",
          "line_start": 225,
          "line_end": 295,
          "args": [
            "self",
            "component",
            "metric_name",
            "value",
            "unit",
            "custom_thresholds"
          ],
          "returns": null,
          "docstring": "Record a health metric for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 368
        },
        {
          "name": "_save_metric_to_db",
          "line_start": 297,
          "line_end": 319,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Save metric to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_check_metric_alerts",
          "line_start": 321,
          "line_end": 345,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Check if metric triggers any alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 204
        },
        {
          "name": "_save_alert_to_db",
          "line_start": 347,
          "line_end": 370,
          "args": [
            "self",
            "alert"
          ],
          "returns": null,
          "docstring": "Save alert to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "_broadcast_metric_update",
          "line_start": 494,
          "line_end": 513,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Broadcast metric update to all WebSocket subscribers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_broadcast_alert",
          "line_start": 515,
          "line_end": 534,
          "args": [
            "self",
            "alert"
          ],
          "returns": null,
          "docstring": "Broadcast alert to all WebSocket subscribers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_monitor_health",
          "line_start": 557,
          "line_end": 581,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background health monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "_cleanup_old_alerts",
          "line_start": 583,
          "line_end": 594,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old resolved alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_check_aggregator_health",
          "line_start": 596,
          "line_end": 611,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check analytics aggregator health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "_check_pipeline_health",
          "line_start": 613,
          "line_end": 620,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check analytics pipeline health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_check_streaming_health",
          "line_start": 622,
          "line_end": 630,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check streaming health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_check_cache_health",
          "line_start": 632,
          "line_end": 639,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check cache health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_check_database_health",
          "line_start": 641,
          "line_end": 648,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check database health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_check_integrity_health",
          "line_start": 650,
          "line_end": 657,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check integrity system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_check_backup_health",
          "line_start": 659,
          "line_end": 666,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check backup system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_check_retry_health",
          "line_start": 668,
          "line_end": 675,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check retry system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "start_monitoring",
          "line_start": 677,
          "line_end": 691,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the health monitoring system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "stop_monitoring",
          "line_start": 705,
          "line_end": 716,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop the health monitoring system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "get_health_summary",
          "line_start": 718,
          "line_end": 742,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive health summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "_calculate_overall_status",
          "line_start": 744,
          "line_end": 758,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall system health status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "force_health_check",
          "line_start": 760,
          "line_end": 775,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Force immediate health check for component(s).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 76
        },
        {
          "name": "shutdown",
          "line_start": 777,
          "line_end": 779,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the health monitoring system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "websockets",
          "names": [
            "websockets"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 26
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 599
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 808
        }
      ],
      "external_dependencies": "{'sqlite3', 'psutil', 'websockets', 'time', 'typing', 'dataclasses', 'json', 'logging', 'concurrent.futures', 'enum', 'asyncio', 'threading', 'uuid', 'os', 'statistics', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 818,
      "complexity_score": 5278,
      "api_surface_area": 15,
      "docstring": "Real-Time Analytics Pipeline Health Monitor with WebSocket Streaming\n==================================================================\n\nProvides ultra-reliability through real-time pipeline health monitoring,\nWebSocket streaming of health metrics, and predictive failure detection.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0303030303030303,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_priority_queue.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_priority_queue.py",
      "component_name": "analytics_priority_queue",
      "analysis_timestamp": "2025-08-20 21:46:40.525278",
      "classes": [
        {
          "name": "QueuePriority",
          "line_start": 28,
          "line_end": 35,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Queue priority levels.",
          "decorators": []
        },
        {
          "name": "QueueType",
          "line_start": 38,
          "line_end": 43,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of priority queues.",
          "decorators": []
        },
        {
          "name": "ProcessingStatus",
          "line_start": 46,
          "line_end": 53,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Analytics processing status.",
          "decorators": []
        },
        {
          "name": "QueuedAnalytics",
          "line_start": 57,
          "line_end": 76,
          "base_classes": [],
          "methods": [
            {
              "name": "__lt__",
              "line_start": 70,
              "line_end": 76,
              "args": [
                "self",
                "other"
              ],
              "returns": null,
              "docstring": "For priority queue comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            }
          ],
          "docstring": "Queued analytics item.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "QueueMetrics",
          "line_start": 80,
          "line_end": 90,
          "base_classes": [],
          "methods": [],
          "docstring": "Queue performance metrics.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ProcessingLane",
          "line_start": 94,
          "line_end": 103,
          "base_classes": [],
          "methods": [],
          "docstring": "Processing lane configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsPriorityQueue",
          "line_start": 106,
          "line_end": 841,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 109,
              "line_end": 161,
              "args": [
                "self",
                "db_path",
                "max_queue_size",
                "processing_workers"
              ],
              "returns": null,
              "docstring": "Initialize the priority queue system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 296
            },
            {
              "name": "_initialize_database",
              "line_start": 163,
              "line_end": 228,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize the priority queue database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_setup_processing_lanes",
              "line_start": 230,
              "line_end": 273,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup processing lanes with different configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_initialize_metrics",
              "line_start": 275,
              "line_end": 294,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize queue metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "enqueue_analytics",
              "line_start": 296,
              "line_end": 349,
              "args": [
                "self",
                "analytics_id",
                "data",
                "priority",
                "metadata",
                "expiration_minutes",
                "processing_estimate_ms"
              ],
              "returns": null,
              "docstring": "Enqueue analytics for processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 296
            },
            {
              "name": "_determine_queue_type",
              "line_start": 351,
              "line_end": 362,
              "args": [
                "self",
                "priority",
                "data_size"
              ],
              "returns": null,
              "docstring": "Determine appropriate queue type based on priority and data size.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            },
            {
              "name": "_check_queue_capacity",
              "line_start": 364,
              "line_end": 368,
              "args": [
                "self",
                "queue_type"
              ],
              "returns": null,
              "docstring": "Check if queue has capacity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_check_rate_limit",
              "line_start": 370,
              "line_end": 385,
              "args": [
                "self",
                "queue_type"
              ],
              "returns": null,
              "docstring": "Check rate limiting for queue type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_save_queued_item_to_db",
              "line_start": 387,
              "line_end": 410,
              "args": [
                "self",
                "item"
              ],
              "returns": null,
              "docstring": "Save queued item to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 119
            },
            {
              "name": "start_processing",
              "line_start": 412,
              "line_end": 436,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the queue processing workers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "_worker_loop",
              "line_start": 438,
              "line_end": 469,
              "args": [
                "self",
                "queue_type",
                "worker_id"
              ],
              "returns": null,
              "docstring": "Worker loop for processing analytics from a specific queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "_process_analytics_item",
              "line_start": 471,
              "line_end": 544,
              "args": [
                "self",
                "item",
                "worker_id"
              ],
              "returns": null,
              "docstring": "Process individual analytics item.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 407
            },
            {
              "name": "_simulate_analytics_processing",
              "line_start": 546,
              "line_end": 568,
              "args": [
                "self",
                "item"
              ],
              "returns": null,
              "docstring": "Simulate analytics processing (replace with actual processing logic).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_record_processing_result",
              "line_start": 570,
              "line_end": 608,
              "args": [
                "self",
                "item",
                "worker_id",
                "wait_time_ms",
                "processing_time_ms",
                "status",
                "error_message"
              ],
              "returns": null,
              "docstring": "Record processing result.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_save_processing_result_to_db",
              "line_start": 610,
              "line_end": 635,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "docstring": "Save processing result to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_metrics_monitor",
              "line_start": 637,
              "line_end": 647,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background metrics monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_update_queue_metrics",
              "line_start": 649,
              "line_end": 683,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update queue performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 276
            },
            {
              "name": "_save_metrics_to_db",
              "line_start": 685,
              "line_end": 706,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Save queue metrics to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_cleanup_expired_items",
              "line_start": 708,
              "line_end": 739,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Remove expired items from queues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "get_queue_status",
              "line_start": 741,
              "line_end": 776,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive queue status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 223
            },
            {
              "name": "_calculate_system_health",
              "line_start": 778,
              "line_end": 804,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "_identify_bottlenecks",
              "line_start": 806,
              "line_end": 823,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify processing bottlenecks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "stop_processing",
              "line_start": 825,
              "line_end": 837,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop all queue processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "shutdown",
              "line_start": 839,
              "line_end": 841,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the priority queue system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            }
          ],
          "docstring": "Priority-based analytics queue with express lanes.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_priority_queue",
          "line_start": 847,
          "line_end": 852,
          "args": [],
          "returns": null,
          "docstring": "Get the global priority queue instance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "__lt__",
          "line_start": 70,
          "line_end": 76,
          "args": [
            "self",
            "other"
          ],
          "returns": null,
          "docstring": "For priority queue comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "__init__",
          "line_start": 109,
          "line_end": 161,
          "args": [
            "self",
            "db_path",
            "max_queue_size",
            "processing_workers"
          ],
          "returns": null,
          "docstring": "Initialize the priority queue system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 296
        },
        {
          "name": "_initialize_database",
          "line_start": 163,
          "line_end": 228,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize the priority queue database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_setup_processing_lanes",
          "line_start": 230,
          "line_end": 273,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup processing lanes with different configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_initialize_metrics",
          "line_start": 275,
          "line_end": 294,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize queue metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "enqueue_analytics",
          "line_start": 296,
          "line_end": 349,
          "args": [
            "self",
            "analytics_id",
            "data",
            "priority",
            "metadata",
            "expiration_minutes",
            "processing_estimate_ms"
          ],
          "returns": null,
          "docstring": "Enqueue analytics for processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 296
        },
        {
          "name": "_determine_queue_type",
          "line_start": 351,
          "line_end": 362,
          "args": [
            "self",
            "priority",
            "data_size"
          ],
          "returns": null,
          "docstring": "Determine appropriate queue type based on priority and data size.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        },
        {
          "name": "_check_queue_capacity",
          "line_start": 364,
          "line_end": 368,
          "args": [
            "self",
            "queue_type"
          ],
          "returns": null,
          "docstring": "Check if queue has capacity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_check_rate_limit",
          "line_start": 370,
          "line_end": 385,
          "args": [
            "self",
            "queue_type"
          ],
          "returns": null,
          "docstring": "Check rate limiting for queue type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_save_queued_item_to_db",
          "line_start": 387,
          "line_end": 410,
          "args": [
            "self",
            "item"
          ],
          "returns": null,
          "docstring": "Save queued item to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 119
        },
        {
          "name": "start_processing",
          "line_start": 412,
          "line_end": 436,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the queue processing workers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "_worker_loop",
          "line_start": 438,
          "line_end": 469,
          "args": [
            "self",
            "queue_type",
            "worker_id"
          ],
          "returns": null,
          "docstring": "Worker loop for processing analytics from a specific queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "_process_analytics_item",
          "line_start": 471,
          "line_end": 544,
          "args": [
            "self",
            "item",
            "worker_id"
          ],
          "returns": null,
          "docstring": "Process individual analytics item.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 407
        },
        {
          "name": "_simulate_analytics_processing",
          "line_start": 546,
          "line_end": 568,
          "args": [
            "self",
            "item"
          ],
          "returns": null,
          "docstring": "Simulate analytics processing (replace with actual processing logic).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_record_processing_result",
          "line_start": 570,
          "line_end": 608,
          "args": [
            "self",
            "item",
            "worker_id",
            "wait_time_ms",
            "processing_time_ms",
            "status",
            "error_message"
          ],
          "returns": null,
          "docstring": "Record processing result.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_save_processing_result_to_db",
          "line_start": 610,
          "line_end": 635,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "docstring": "Save processing result to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_metrics_monitor",
          "line_start": 637,
          "line_end": 647,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background metrics monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_update_queue_metrics",
          "line_start": 649,
          "line_end": 683,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update queue performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 276
        },
        {
          "name": "_save_metrics_to_db",
          "line_start": 685,
          "line_end": 706,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Save queue metrics to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_cleanup_expired_items",
          "line_start": 708,
          "line_end": 739,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Remove expired items from queues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "get_queue_status",
          "line_start": 741,
          "line_end": 776,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive queue status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 223
        },
        {
          "name": "_calculate_system_health",
          "line_start": 778,
          "line_end": 804,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "_identify_bottlenecks",
          "line_start": 806,
          "line_end": 823,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify processing bottlenecks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "stop_processing",
          "line_start": 825,
          "line_end": 837,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop all queue processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "shutdown",
          "line_start": 839,
          "line_end": 841,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the priority queue system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "heapq",
          "names": [
            "heapq"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'dataclasses', 'json', 'logging', 'concurrent.futures', 'enum', 'threading', 'uuid', 'os', 'statistics', 'datetime', 'heapq'}",
      "internal_dependencies": "set()",
      "lines_of_code": 899,
      "complexity_score": 7248,
      "api_surface_area": 11,
      "docstring": "Analytics Priority Queuing with Express Lanes\n=============================================\n\nProvides ultra-reliability through intelligent priority-based queuing,\nexpress lanes for critical analytics, dynamic load balancing, and QoS guarantees.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0303030303030303,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_quality_assurance.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_quality_assurance.py",
      "component_name": "analytics_quality_assurance",
      "analysis_timestamp": "2025-08-20 21:46:40.539362",
      "classes": [
        {
          "name": "QualityLevel",
          "line_start": 25,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "IntegrityStatus",
          "line_start": 32,
          "line_end": 36,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "QualityMetric",
          "line_start": 39,
          "line_end": 46,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a data quality metric.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "IntegrityCheck",
          "line_start": 49,
          "line_end": 56,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a data integrity check result.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsQualityAssurance",
          "line_start": 58,
          "line_end": 766,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 63,
              "line_end": 116,
              "args": [
                "self",
                "check_interval"
              ],
              "returns": null,
              "docstring": "Initialize the quality assurance system.\n\nArgs:\n    check_interval: Interval between quality checks in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "start_monitoring",
              "line_start": 118,
              "line_end": 126,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start continuous quality monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_monitoring",
              "line_start": 128,
              "line_end": 133,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop quality monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "assess_data_quality",
              "line_start": 135,
              "line_end": 247,
              "args": [
                "self",
                "data",
                "data_source"
              ],
              "returns": null,
              "docstring": "Perform comprehensive data quality assessment.\n\nArgs:\n    data: Data to assess\n    data_source: Source identifier for the data\n\nReturns:\n    Quality assessment results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 508
            },
            {
              "name": "_check_completeness",
              "line_start": 249,
              "line_end": 275,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Check data completeness.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 192
            },
            {
              "name": "_check_accuracy",
              "line_start": 277,
              "line_end": 319,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Check data accuracy using validation rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 248
            },
            {
              "name": "_check_consistency",
              "line_start": 321,
              "line_end": 382,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Check data consistency.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 430
            },
            {
              "name": "_check_timeliness",
              "line_start": 384,
              "line_end": 425,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Check data timeliness.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 225
            },
            {
              "name": "_check_validity",
              "line_start": 427,
              "line_end": 455,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Check data validity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 143
            },
            {
              "name": "_check_uniqueness",
              "line_start": 457,
              "line_end": 477,
              "args": [
                "self",
                "data",
                "data_source"
              ],
              "returns": null,
              "docstring": "Check data uniqueness.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_perform_integrity_checks",
              "line_start": 479,
              "line_end": 532,
              "args": [
                "self",
                "data",
                "data_source"
              ],
              "returns": null,
              "docstring": "Perform comprehensive integrity checks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 223
            },
            {
              "name": "_generate_fingerprint",
              "line_start": 534,
              "line_end": 542,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Generate a fingerprint for data integrity tracking.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_track_fingerprint",
              "line_start": 544,
              "line_end": 550,
              "args": [
                "self",
                "fingerprint",
                "data_source"
              ],
              "returns": null,
              "docstring": "Track data fingerprint for integrity monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "_is_reasonable_numeric_value",
              "line_start": 552,
              "line_end": 573,
              "args": [
                "self",
                "field_name",
                "value"
              ],
              "returns": null,
              "docstring": "Check if a numeric value is reasonable.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_is_valid_type",
              "line_start": 575,
              "line_end": 595,
              "args": [
                "self",
                "field_name",
                "value"
              ],
              "returns": null,
              "docstring": "Check if value type is valid for the field.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "_determine_quality_level",
              "line_start": 597,
              "line_end": 608,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Determine quality level from score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_generate_recommendations",
              "line_start": 610,
              "line_end": 637,
              "args": [
                "self",
                "quality_scores",
                "integrity_checks"
              ],
              "returns": null,
              "docstring": "Generate recommendations for improving data quality.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 176
            },
            {
              "name": "_check_quality_alerts",
              "line_start": 639,
              "line_end": 661,
              "args": [
                "self",
                "assessment"
              ],
              "returns": null,
              "docstring": "Check for quality alerts and trigger callbacks.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_setup_default_rules",
              "line_start": 663,
              "line_end": 676,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default validation rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 204
            },
            {
              "name": "_monitoring_loop",
              "line_start": 678,
              "line_end": 691,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_perform_periodic_analysis",
              "line_start": 693,
              "line_end": 720,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Perform periodic quality analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 190
            },
            {
              "name": "add_alert_callback",
              "line_start": 722,
              "line_end": 724,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add a callback for quality alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 35
            },
            {
              "name": "get_quality_summary",
              "line_start": 726,
              "line_end": 752,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get overall quality summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "get_recent_alerts",
              "line_start": 754,
              "line_end": 761,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get recent quality alerts.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            },
            {
              "name": "shutdown",
              "line_start": 763,
              "line_end": 766,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the quality assurance system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Comprehensive data quality assurance system for analytics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 63,
          "line_end": 116,
          "args": [
            "self",
            "check_interval"
          ],
          "returns": null,
          "docstring": "Initialize the quality assurance system.\n\nArgs:\n    check_interval: Interval between quality checks in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "start_monitoring",
          "line_start": 118,
          "line_end": 126,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start continuous quality monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_monitoring",
          "line_start": 128,
          "line_end": 133,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop quality monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "assess_data_quality",
          "line_start": 135,
          "line_end": 247,
          "args": [
            "self",
            "data",
            "data_source"
          ],
          "returns": null,
          "docstring": "Perform comprehensive data quality assessment.\n\nArgs:\n    data: Data to assess\n    data_source: Source identifier for the data\n\nReturns:\n    Quality assessment results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 508
        },
        {
          "name": "_check_completeness",
          "line_start": 249,
          "line_end": 275,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Check data completeness.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 192
        },
        {
          "name": "_check_accuracy",
          "line_start": 277,
          "line_end": 319,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Check data accuracy using validation rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 248
        },
        {
          "name": "_check_consistency",
          "line_start": 321,
          "line_end": 382,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Check data consistency.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 430
        },
        {
          "name": "_check_timeliness",
          "line_start": 384,
          "line_end": 425,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Check data timeliness.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 225
        },
        {
          "name": "_check_validity",
          "line_start": 427,
          "line_end": 455,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Check data validity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 143
        },
        {
          "name": "_check_uniqueness",
          "line_start": 457,
          "line_end": 477,
          "args": [
            "self",
            "data",
            "data_source"
          ],
          "returns": null,
          "docstring": "Check data uniqueness.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_perform_integrity_checks",
          "line_start": 479,
          "line_end": 532,
          "args": [
            "self",
            "data",
            "data_source"
          ],
          "returns": null,
          "docstring": "Perform comprehensive integrity checks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 223
        },
        {
          "name": "_generate_fingerprint",
          "line_start": 534,
          "line_end": 542,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Generate a fingerprint for data integrity tracking.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_track_fingerprint",
          "line_start": 544,
          "line_end": 550,
          "args": [
            "self",
            "fingerprint",
            "data_source"
          ],
          "returns": null,
          "docstring": "Track data fingerprint for integrity monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "_is_reasonable_numeric_value",
          "line_start": 552,
          "line_end": 573,
          "args": [
            "self",
            "field_name",
            "value"
          ],
          "returns": null,
          "docstring": "Check if a numeric value is reasonable.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_is_valid_type",
          "line_start": 575,
          "line_end": 595,
          "args": [
            "self",
            "field_name",
            "value"
          ],
          "returns": null,
          "docstring": "Check if value type is valid for the field.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "_determine_quality_level",
          "line_start": 597,
          "line_end": 608,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Determine quality level from score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_generate_recommendations",
          "line_start": 610,
          "line_end": 637,
          "args": [
            "self",
            "quality_scores",
            "integrity_checks"
          ],
          "returns": null,
          "docstring": "Generate recommendations for improving data quality.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 176
        },
        {
          "name": "_check_quality_alerts",
          "line_start": 639,
          "line_end": 661,
          "args": [
            "self",
            "assessment"
          ],
          "returns": null,
          "docstring": "Check for quality alerts and trigger callbacks.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_setup_default_rules",
          "line_start": 663,
          "line_end": 676,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default validation rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 204
        },
        {
          "name": "_monitoring_loop",
          "line_start": 678,
          "line_end": 691,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_perform_periodic_analysis",
          "line_start": 693,
          "line_end": 720,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Perform periodic quality analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 190
        },
        {
          "name": "add_alert_callback",
          "line_start": 722,
          "line_end": 724,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add a callback for quality alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 35
        },
        {
          "name": "get_quality_summary",
          "line_start": 726,
          "line_end": 752,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get overall quality summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "get_recent_alerts",
          "line_start": 754,
          "line_end": 761,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get recent quality alerts.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "shutdown",
          "line_start": 763,
          "line_end": 766,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the quality assurance system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "count_fields",
          "line_start": 257,
          "line_end": 271,
          "args": [
            "obj",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "validate_recursive",
          "line_start": 285,
          "line_end": 314,
          "args": [
            "obj",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "collect_timestamps",
          "line_start": 331,
          "line_end": 345,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "collect_numeric_values",
          "line_start": 358,
          "line_end": 369,
          "args": [
            "obj",
            "path"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "collect_timestamps",
          "line_start": 390,
          "line_end": 404,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "validate_recursive",
          "line_start": 435,
          "line_end": 451,
          "args": [
            "obj"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'hashlib', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 766,
      "complexity_score": 8355,
      "api_surface_area": 20,
      "docstring": "Analytics Data Quality Assurance System\n=======================================\n\nComprehensive data quality monitoring, integrity checks, and automated \nremediation to ensure analytics reliability and accuracy.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.8055555555555556,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_quantum_retry.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_quantum_retry.py",
      "component_name": "analytics_quantum_retry",
      "analysis_timestamp": "2025-08-20 21:46:40.554874",
      "classes": [
        {
          "name": "RetryStrategy",
          "line_start": 28,
          "line_end": 36,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Quantum retry strategy types.",
          "decorators": []
        },
        {
          "name": "FailurePattern",
          "line_start": 38,
          "line_end": 45,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Failure pattern types for analysis.",
          "decorators": []
        },
        {
          "name": "RetryPriority",
          "line_start": 47,
          "line_end": 53,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Retry priority levels.",
          "decorators": []
        },
        {
          "name": "RetryAttempt",
          "line_start": 56,
          "line_end": 84,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 70,
              "line_end": 84,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            }
          ],
          "docstring": "Individual retry attempt record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RetryContext",
          "line_start": 87,
          "line_end": 115,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 101,
              "line_end": 115,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 108
            }
          ],
          "docstring": "Comprehensive retry context for adaptive strategies.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsQuantumRetry",
          "line_start": 117,
          "line_end": 1189,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 122,
              "line_end": 217,
              "args": [
                "self",
                "aggregator",
                "delivery_guarantee",
                "integrity_guardian",
                "db_path",
                "quantum_processing_interval"
              ],
              "returns": null,
              "docstring": "Initialize quantum retry system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    delivery_guarantee: Delivery guarantee system\n    integrity_guardian: Integrity guardian system\n    db_path: Database path for retry records\n    quantum_processing_interval: Seconds between quantum cycles",
              "is_async": false,
              "decorators": [],
              "complexity_score": 387
            },
            {
              "name": "_init_database",
              "line_start": 219,
              "line_end": 276,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize quantum retry database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 82
            },
            {
              "name": "submit_for_quantum_retry",
              "line_start": 278,
              "line_end": 321,
              "args": [
                "self",
                "analytics_id",
                "analytics_data",
                "priority",
                "strategy",
                "max_attempts"
              ],
              "returns": null,
              "docstring": "Submit analytics for quantum-level retry processing.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    analytics_data: Analytics data to retry\n    priority: Retry priority\n    strategy: Initial retry strategy\n    max_attempts: Maximum retry attempts\n    \nReturns:\n    Retry context ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_quantum_processing_loop",
              "line_start": 323,
              "line_end": 355,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main quantum processing loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 191
            },
            {
              "name": "_process_quantum_retry",
              "line_start": 357,
              "line_end": 448,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Process a single quantum retry attempt.\n\nArgs:\n    analytics_id: Analytics to retry\n    \nReturns:\n    True if successful, False if should continue retrying",
              "is_async": false,
              "decorators": [],
              "complexity_score": 442
            },
            {
              "name": "_calculate_quantum_delay",
              "line_start": 450,
              "line_end": 508,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "docstring": "Calculate adaptive quantum delay based on strategy and history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 405
            },
            {
              "name": "_attempt_quantum_delivery",
              "line_start": 510,
              "line_end": 567,
              "args": [
                "self",
                "context",
                "attempt"
              ],
              "returns": null,
              "docstring": "Attempt delivery using quantum-level strategies.\n\nArgs:\n    context: Retry context\n    attempt: Current attempt record\n    \nReturns:\n    True if delivery successful",
              "is_async": false,
              "decorators": [],
              "complexity_score": 256
            },
            {
              "name": "_try_aggregator_delivery",
              "line_start": 569,
              "line_end": 575,
              "args": [
                "self",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Try delivery via aggregator.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_try_guarantee_delivery",
              "line_start": 577,
              "line_end": 595,
              "args": [
                "self",
                "analytics_data",
                "priority"
              ],
              "returns": null,
              "docstring": "Try delivery via delivery guarantee system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_try_integrity_recovery",
              "line_start": 597,
              "line_end": 604,
              "args": [
                "self",
                "analytics_id",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Try delivery via integrity guardian recovery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_pattern_analysis_loop",
              "line_start": 606,
              "line_end": 618,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background pattern analysis loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_prediction_loop",
              "line_start": 620,
              "line_end": 631,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background prediction loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_analyze_failure_patterns",
              "line_start": 633,
              "line_end": 666,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze failure patterns using machine learning.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 195
            },
            {
              "name": "_detect_patterns",
              "line_start": 668,
              "line_end": 717,
              "args": [
                "self",
                "failures"
              ],
              "returns": null,
              "docstring": "Detect failure patterns from recent failures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 403
            },
            {
              "name": "_select_optimal_strategy",
              "line_start": 719,
              "line_end": 754,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "docstring": "Select optimal retry strategy based on performance and patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 223
            },
            {
              "name": "add_retry_handler",
              "line_start": 756,
              "line_end": 758,
              "args": [
                "self",
                "handler"
              ],
              "returns": null,
              "docstring": "Add custom retry handler.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "get_quantum_statistics",
              "line_start": 760,
              "line_end": 787,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive quantum retry statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 160
            },
            {
              "name": "_save_retry_context",
              "line_start": 789,
              "line_end": 812,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "docstring": "Save retry context to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "_save_retry_attempt",
              "line_start": 814,
              "line_end": 838,
              "args": [
                "self",
                "attempt"
              ],
              "returns": null,
              "docstring": "Save retry attempt to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 113
            },
            {
              "name": "_save_detected_pattern",
              "line_start": 840,
              "line_end": 862,
              "args": [
                "self",
                "pattern_type",
                "confidence",
                "failures"
              ],
              "returns": null,
              "docstring": "Save detected pattern to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 113
            },
            {
              "name": "_recommend_strategy_for_pattern",
              "line_start": 864,
              "line_end": 873,
              "args": [
                "self",
                "pattern_type"
              ],
              "returns": null,
              "docstring": "Recommend optimal strategy for detected pattern.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_detect_success_patterns",
              "line_start": 875,
              "line_end": 912,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect patterns in successful retries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "_update_predictions",
              "line_start": 914,
              "line_end": 943,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update success predictions for active retries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "_generate_success_predictions",
              "line_start": 945,
              "line_end": 968,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate machine learning predictions for success.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "_optimize_strategies",
              "line_start": 970,
              "line_end": 992,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Optimize retry strategies based on performance data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 166
            },
            {
              "name": "_update_strategy_performance",
              "line_start": 994,
              "line_end": 1034,
              "args": [
                "self",
                "strategy",
                "success",
                "attempts",
                "processing_time"
              ],
              "returns": null,
              "docstring": "Update performance metrics for a strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 227
            },
            {
              "name": "_analyze_failure",
              "line_start": 1036,
              "line_end": 1069,
              "args": [
                "self",
                "context",
                "attempt"
              ],
              "returns": null,
              "docstring": "Analyze failure and update context patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "_learn_from_success",
              "line_start": 1071,
              "line_end": 1103,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "docstring": "Learn from successful retry to improve future predictions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 178
            },
            {
              "name": "_save_final_failure",
              "line_start": 1105,
              "line_end": 1127,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "docstring": "Save final failure record when max attempts exceeded.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "get_retry_status",
              "line_start": 1129,
              "line_end": 1160,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Get current retry status for specific analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "force_quantum_retry",
              "line_start": 1162,
              "line_end": 1178,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Force immediate quantum retry for specific analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "shutdown",
              "line_start": 1180,
              "line_end": 1189,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown quantum retry system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            }
          ],
          "docstring": "Quantum-level analytics retry system with adaptive strategies.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 70,
          "line_end": 84,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "to_dict",
          "line_start": 101,
          "line_end": 115,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 108
        },
        {
          "name": "__init__",
          "line_start": 122,
          "line_end": 217,
          "args": [
            "self",
            "aggregator",
            "delivery_guarantee",
            "integrity_guardian",
            "db_path",
            "quantum_processing_interval"
          ],
          "returns": null,
          "docstring": "Initialize quantum retry system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    delivery_guarantee: Delivery guarantee system\n    integrity_guardian: Integrity guardian system\n    db_path: Database path for retry records\n    quantum_processing_interval: Seconds between quantum cycles",
          "is_async": false,
          "decorators": [],
          "complexity_score": 387
        },
        {
          "name": "_init_database",
          "line_start": 219,
          "line_end": 276,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize quantum retry database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 82
        },
        {
          "name": "submit_for_quantum_retry",
          "line_start": 278,
          "line_end": 321,
          "args": [
            "self",
            "analytics_id",
            "analytics_data",
            "priority",
            "strategy",
            "max_attempts"
          ],
          "returns": null,
          "docstring": "Submit analytics for quantum-level retry processing.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    analytics_data: Analytics data to retry\n    priority: Retry priority\n    strategy: Initial retry strategy\n    max_attempts: Maximum retry attempts\n    \nReturns:\n    Retry context ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_quantum_processing_loop",
          "line_start": 323,
          "line_end": 355,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main quantum processing loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "_process_quantum_retry",
          "line_start": 357,
          "line_end": 448,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Process a single quantum retry attempt.\n\nArgs:\n    analytics_id: Analytics to retry\n    \nReturns:\n    True if successful, False if should continue retrying",
          "is_async": false,
          "decorators": [],
          "complexity_score": 442
        },
        {
          "name": "_calculate_quantum_delay",
          "line_start": 450,
          "line_end": 508,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "docstring": "Calculate adaptive quantum delay based on strategy and history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 405
        },
        {
          "name": "_attempt_quantum_delivery",
          "line_start": 510,
          "line_end": 567,
          "args": [
            "self",
            "context",
            "attempt"
          ],
          "returns": null,
          "docstring": "Attempt delivery using quantum-level strategies.\n\nArgs:\n    context: Retry context\n    attempt: Current attempt record\n    \nReturns:\n    True if delivery successful",
          "is_async": false,
          "decorators": [],
          "complexity_score": 256
        },
        {
          "name": "_try_aggregator_delivery",
          "line_start": 569,
          "line_end": 575,
          "args": [
            "self",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Try delivery via aggregator.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_try_guarantee_delivery",
          "line_start": 577,
          "line_end": 595,
          "args": [
            "self",
            "analytics_data",
            "priority"
          ],
          "returns": null,
          "docstring": "Try delivery via delivery guarantee system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_try_integrity_recovery",
          "line_start": 597,
          "line_end": 604,
          "args": [
            "self",
            "analytics_id",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Try delivery via integrity guardian recovery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_pattern_analysis_loop",
          "line_start": 606,
          "line_end": 618,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background pattern analysis loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_prediction_loop",
          "line_start": 620,
          "line_end": 631,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background prediction loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_analyze_failure_patterns",
          "line_start": 633,
          "line_end": 666,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze failure patterns using machine learning.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 195
        },
        {
          "name": "_detect_patterns",
          "line_start": 668,
          "line_end": 717,
          "args": [
            "self",
            "failures"
          ],
          "returns": null,
          "docstring": "Detect failure patterns from recent failures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 403
        },
        {
          "name": "_select_optimal_strategy",
          "line_start": 719,
          "line_end": 754,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "docstring": "Select optimal retry strategy based on performance and patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 223
        },
        {
          "name": "add_retry_handler",
          "line_start": 756,
          "line_end": 758,
          "args": [
            "self",
            "handler"
          ],
          "returns": null,
          "docstring": "Add custom retry handler.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "get_quantum_statistics",
          "line_start": 760,
          "line_end": 787,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive quantum retry statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "_save_retry_context",
          "line_start": 789,
          "line_end": 812,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "docstring": "Save retry context to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "_save_retry_attempt",
          "line_start": 814,
          "line_end": 838,
          "args": [
            "self",
            "attempt"
          ],
          "returns": null,
          "docstring": "Save retry attempt to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 113
        },
        {
          "name": "_save_detected_pattern",
          "line_start": 840,
          "line_end": 862,
          "args": [
            "self",
            "pattern_type",
            "confidence",
            "failures"
          ],
          "returns": null,
          "docstring": "Save detected pattern to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 113
        },
        {
          "name": "_recommend_strategy_for_pattern",
          "line_start": 864,
          "line_end": 873,
          "args": [
            "self",
            "pattern_type"
          ],
          "returns": null,
          "docstring": "Recommend optimal strategy for detected pattern.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_detect_success_patterns",
          "line_start": 875,
          "line_end": 912,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect patterns in successful retries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "_update_predictions",
          "line_start": 914,
          "line_end": 943,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update success predictions for active retries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "_generate_success_predictions",
          "line_start": 945,
          "line_end": 968,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate machine learning predictions for success.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "_optimize_strategies",
          "line_start": 970,
          "line_end": 992,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Optimize retry strategies based on performance data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 166
        },
        {
          "name": "_update_strategy_performance",
          "line_start": 994,
          "line_end": 1034,
          "args": [
            "self",
            "strategy",
            "success",
            "attempts",
            "processing_time"
          ],
          "returns": null,
          "docstring": "Update performance metrics for a strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 227
        },
        {
          "name": "_analyze_failure",
          "line_start": 1036,
          "line_end": 1069,
          "args": [
            "self",
            "context",
            "attempt"
          ],
          "returns": null,
          "docstring": "Analyze failure and update context patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "_learn_from_success",
          "line_start": 1071,
          "line_end": 1103,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "docstring": "Learn from successful retry to improve future predictions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 178
        },
        {
          "name": "_save_final_failure",
          "line_start": 1105,
          "line_end": 1127,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "docstring": "Save final failure record when max attempts exceeded.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "get_retry_status",
          "line_start": 1129,
          "line_end": 1160,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Get current retry status for specific analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "force_quantum_retry",
          "line_start": 1162,
          "line_end": 1178,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Force immediate quantum retry for specific analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "shutdown",
          "line_start": 1180,
          "line_end": 1189,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown quantum retry system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "random",
          "names": [
            "random"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "analytics_delivery_guarantee",
          "names": [
            "DeliveryPriority"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 580
        }
      ],
      "external_dependencies": "{'random', 'sqlite3', 'hashlib', 'typing', 'dataclasses', 'time', 'json', 'logging', 'enum', 'threading', 'os', 'math', 'datetime', 'collections', 'analytics_delivery_guarantee'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1192,
      "complexity_score": 10970,
      "api_surface_area": 16,
      "docstring": "Analytics Quantum-Level Retry System\n====================================\n\nAdvanced quantum-level retry logic with adaptive strategies, machine learning,\nand predictive failure detection for absolute analytics delivery reliability.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.025,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_rate_limiter.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_rate_limiter.py",
      "component_name": "analytics_rate_limiter",
      "analysis_timestamp": "2025-08-20 21:46:40.570389",
      "classes": [
        {
          "name": "RateLimitStrategy",
          "line_start": 25,
          "line_end": 30,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "BackpressureAction",
          "line_start": 32,
          "line_end": 38,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "TrafficPriority",
          "line_start": 40,
          "line_end": 45,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "RateLimitRule",
          "line_start": 48,
          "line_end": 60,
          "base_classes": [],
          "methods": [],
          "docstring": "Rate limiting rule configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TrafficMetrics",
          "line_start": 63,
          "line_end": 70,
          "base_classes": [],
          "methods": [],
          "docstring": "Traffic measurement metrics.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "BackpressureEvent",
          "line_start": 73,
          "line_end": 83,
          "base_classes": [],
          "methods": [],
          "docstring": "Backpressure event information.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsRateLimiter",
          "line_start": 85,
          "line_end": 835,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 90,
              "line_end": 154,
              "args": [
                "self",
                "max_queue_size",
                "monitoring_interval",
                "adaptive_adjustment_factor"
              ],
              "returns": null,
              "docstring": "Initialize analytics rate limiter.\n\nArgs:\n    max_queue_size: Maximum queue size before backpressure kicks in\n    monitoring_interval: Interval for monitoring and adjustments\n    adaptive_adjustment_factor: Factor for adaptive rate adjustments",
              "is_async": false,
              "decorators": [],
              "complexity_score": 213
            },
            {
              "name": "start_rate_limiting",
              "line_start": 156,
              "line_end": 170,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start rate limiting and monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "stop_rate_limiting",
              "line_start": 172,
              "line_end": 181,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop rate limiting.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "add_rate_limit_rule",
              "line_start": 183,
              "line_end": 187,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Add a rate limiting rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "process_request",
              "line_start": 189,
              "line_end": 231,
              "args": [
                "self",
                "data",
                "source",
                "data_type",
                "priority"
              ],
              "returns": null,
              "docstring": "Process a request through rate limiting.\n\nArgs:\n    data: Request data\n    source: Data source identifier\n    data_type: Type of data being processed\n    priority: Request priority\n\nReturns:\n    Tuple of (allowed, delay_seconds, reason)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 226
            },
            {
              "name": "get_rate_limiter_summary",
              "line_start": 233,
              "line_end": 278,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get rate limiter system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 277
            },
            {
              "name": "_setup_default_rules",
              "line_start": 280,
              "line_end": 342,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default rate limiting rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "_initialize_limiter",
              "line_start": 344,
              "line_end": 380,
              "args": [
                "self",
                "rule"
              ],
              "returns": null,
              "docstring": "Initialize rate limiter for a rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 164
            },
            {
              "name": "_find_applicable_rules",
              "line_start": 382,
              "line_end": 407,
              "args": [
                "self",
                "source",
                "data_type"
              ],
              "returns": null,
              "docstring": "Find rate limiting rules applicable to the request.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 140
            },
            {
              "name": "_check_rate_limit",
              "line_start": 409,
              "line_end": 433,
              "args": [
                "self",
                "rule",
                "source",
                "data",
                "priority"
              ],
              "returns": null,
              "docstring": "Check if request passes rate limit for a specific rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 197
            },
            {
              "name": "_check_token_bucket",
              "line_start": 435,
              "line_end": 451,
              "args": [
                "self",
                "limiter",
                "rule",
                "current_time"
              ],
              "returns": null,
              "docstring": "Check token bucket rate limit.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "_check_sliding_window",
              "line_start": 453,
              "line_end": 469,
              "args": [
                "self",
                "limiter",
                "rule",
                "current_time"
              ],
              "returns": null,
              "docstring": "Check sliding window rate limit.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "_check_fixed_window",
              "line_start": 471,
              "line_end": 487,
              "args": [
                "self",
                "limiter",
                "rule",
                "current_time"
              ],
              "returns": null,
              "docstring": "Check fixed window rate limit.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 134
            },
            {
              "name": "_check_adaptive_aimd",
              "line_start": 489,
              "line_end": 520,
              "args": [
                "self",
                "limiter",
                "rule",
                "current_time",
                "source"
              ],
              "returns": null,
              "docstring": "Check adaptive AIMD rate limit.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 241
            },
            {
              "name": "_check_exponential_backoff",
              "line_start": 522,
              "line_end": 531,
              "args": [
                "self",
                "limiter",
                "rule",
                "current_time"
              ],
              "returns": null,
              "docstring": "Check exponential backoff rate limit.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_check_backpressure",
              "line_start": 533,
              "line_end": 558,
              "args": [
                "self",
                "source",
                "data",
                "priority"
              ],
              "returns": null,
              "docstring": "Check if backpressure should be applied.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "_handle_backpressure",
              "line_start": 560,
              "line_end": 606,
              "args": [
                "self",
                "action",
                "data",
                "source",
                "priority"
              ],
              "returns": null,
              "docstring": "Handle backpressure action.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 280
            },
            {
              "name": "_queue_request",
              "line_start": 608,
              "line_end": 632,
              "args": [
                "self",
                "data",
                "source",
                "priority"
              ],
              "returns": null,
              "docstring": "Queue request for processing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_monitoring_loop",
              "line_start": 634,
              "line_end": 653,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_processing_loop",
              "line_start": 655,
              "line_end": 676,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background processing loop for queued requests.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 83
            },
            {
              "name": "_process_queued_request",
              "line_start": 678,
              "line_end": 685,
              "args": [
                "self",
                "request_item"
              ],
              "returns": null,
              "docstring": "Process a queued request.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_update_traffic_metrics",
              "line_start": 687,
              "line_end": 714,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update traffic metrics for monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_adjust_adaptive_rates",
              "line_start": 716,
              "line_end": 743,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Adjust adaptive rate limits based on current performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 202
            },
            {
              "name": "_check_congestion_recovery",
              "line_start": 745,
              "line_end": 752,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check if congestion has been resolved.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_cleanup_old_data",
              "line_start": 754,
              "line_end": 767,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old data structures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 93
            },
            {
              "name": "_calculate_current_rate",
              "line_start": 769,
              "line_end": 778,
              "args": [
                "self",
                "limiter",
                "rule"
              ],
              "returns": null,
              "docstring": "Calculate current request rate for a limiter.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_detect_congestion",
              "line_start": 780,
              "line_end": 793,
              "args": [
                "self",
                "source"
              ],
              "returns": null,
              "docstring": "Detect if congestion is occurring for a source.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_congestion_resolved",
              "line_start": 795,
              "line_end": 803,
              "args": [
                "self",
                "source"
              ],
              "returns": null,
              "docstring": "Check if congestion has been resolved for a source.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 45
            },
            {
              "name": "_compress_data",
              "line_start": 805,
              "line_end": 816,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Compress data to reduce size (simplified implementation).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_matches_pattern",
              "line_start": 818,
              "line_end": 825,
              "args": [
                "self",
                "text",
                "pattern"
              ],
              "returns": null,
              "docstring": "Check if text matches a pattern (supports wildcards).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "get_backpressure_events",
              "line_start": 827,
              "line_end": 830,
              "args": [
                "self",
                "hours"
              ],
              "returns": null,
              "docstring": "Get recent backpressure events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "shutdown",
              "line_start": 832,
              "line_end": 835,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown rate limiter.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced adaptive rate limiting and backpressure management system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 90,
          "line_end": 154,
          "args": [
            "self",
            "max_queue_size",
            "monitoring_interval",
            "adaptive_adjustment_factor"
          ],
          "returns": null,
          "docstring": "Initialize analytics rate limiter.\n\nArgs:\n    max_queue_size: Maximum queue size before backpressure kicks in\n    monitoring_interval: Interval for monitoring and adjustments\n    adaptive_adjustment_factor: Factor for adaptive rate adjustments",
          "is_async": false,
          "decorators": [],
          "complexity_score": 213
        },
        {
          "name": "start_rate_limiting",
          "line_start": 156,
          "line_end": 170,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start rate limiting and monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "stop_rate_limiting",
          "line_start": 172,
          "line_end": 181,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop rate limiting.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "add_rate_limit_rule",
          "line_start": 183,
          "line_end": 187,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Add a rate limiting rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "process_request",
          "line_start": 189,
          "line_end": 231,
          "args": [
            "self",
            "data",
            "source",
            "data_type",
            "priority"
          ],
          "returns": null,
          "docstring": "Process a request through rate limiting.\n\nArgs:\n    data: Request data\n    source: Data source identifier\n    data_type: Type of data being processed\n    priority: Request priority\n\nReturns:\n    Tuple of (allowed, delay_seconds, reason)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 226
        },
        {
          "name": "get_rate_limiter_summary",
          "line_start": 233,
          "line_end": 278,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get rate limiter system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 277
        },
        {
          "name": "_setup_default_rules",
          "line_start": 280,
          "line_end": 342,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default rate limiting rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "_initialize_limiter",
          "line_start": 344,
          "line_end": 380,
          "args": [
            "self",
            "rule"
          ],
          "returns": null,
          "docstring": "Initialize rate limiter for a rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 164
        },
        {
          "name": "_find_applicable_rules",
          "line_start": 382,
          "line_end": 407,
          "args": [
            "self",
            "source",
            "data_type"
          ],
          "returns": null,
          "docstring": "Find rate limiting rules applicable to the request.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 140
        },
        {
          "name": "_check_rate_limit",
          "line_start": 409,
          "line_end": 433,
          "args": [
            "self",
            "rule",
            "source",
            "data",
            "priority"
          ],
          "returns": null,
          "docstring": "Check if request passes rate limit for a specific rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 197
        },
        {
          "name": "_check_token_bucket",
          "line_start": 435,
          "line_end": 451,
          "args": [
            "self",
            "limiter",
            "rule",
            "current_time"
          ],
          "returns": null,
          "docstring": "Check token bucket rate limit.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "_check_sliding_window",
          "line_start": 453,
          "line_end": 469,
          "args": [
            "self",
            "limiter",
            "rule",
            "current_time"
          ],
          "returns": null,
          "docstring": "Check sliding window rate limit.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "_check_fixed_window",
          "line_start": 471,
          "line_end": 487,
          "args": [
            "self",
            "limiter",
            "rule",
            "current_time"
          ],
          "returns": null,
          "docstring": "Check fixed window rate limit.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 134
        },
        {
          "name": "_check_adaptive_aimd",
          "line_start": 489,
          "line_end": 520,
          "args": [
            "self",
            "limiter",
            "rule",
            "current_time",
            "source"
          ],
          "returns": null,
          "docstring": "Check adaptive AIMD rate limit.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 241
        },
        {
          "name": "_check_exponential_backoff",
          "line_start": 522,
          "line_end": 531,
          "args": [
            "self",
            "limiter",
            "rule",
            "current_time"
          ],
          "returns": null,
          "docstring": "Check exponential backoff rate limit.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_check_backpressure",
          "line_start": 533,
          "line_end": 558,
          "args": [
            "self",
            "source",
            "data",
            "priority"
          ],
          "returns": null,
          "docstring": "Check if backpressure should be applied.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "_handle_backpressure",
          "line_start": 560,
          "line_end": 606,
          "args": [
            "self",
            "action",
            "data",
            "source",
            "priority"
          ],
          "returns": null,
          "docstring": "Handle backpressure action.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 280
        },
        {
          "name": "_queue_request",
          "line_start": 608,
          "line_end": 632,
          "args": [
            "self",
            "data",
            "source",
            "priority"
          ],
          "returns": null,
          "docstring": "Queue request for processing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_monitoring_loop",
          "line_start": 634,
          "line_end": 653,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_processing_loop",
          "line_start": 655,
          "line_end": 676,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background processing loop for queued requests.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "_process_queued_request",
          "line_start": 678,
          "line_end": 685,
          "args": [
            "self",
            "request_item"
          ],
          "returns": null,
          "docstring": "Process a queued request.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_update_traffic_metrics",
          "line_start": 687,
          "line_end": 714,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update traffic metrics for monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_adjust_adaptive_rates",
          "line_start": 716,
          "line_end": 743,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Adjust adaptive rate limits based on current performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 202
        },
        {
          "name": "_check_congestion_recovery",
          "line_start": 745,
          "line_end": 752,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check if congestion has been resolved.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_cleanup_old_data",
          "line_start": 754,
          "line_end": 767,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old data structures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 93
        },
        {
          "name": "_calculate_current_rate",
          "line_start": 769,
          "line_end": 778,
          "args": [
            "self",
            "limiter",
            "rule"
          ],
          "returns": null,
          "docstring": "Calculate current request rate for a limiter.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_detect_congestion",
          "line_start": 780,
          "line_end": 793,
          "args": [
            "self",
            "source"
          ],
          "returns": null,
          "docstring": "Detect if congestion is occurring for a source.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_congestion_resolved",
          "line_start": 795,
          "line_end": 803,
          "args": [
            "self",
            "source"
          ],
          "returns": null,
          "docstring": "Check if congestion has been resolved for a source.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 45
        },
        {
          "name": "_compress_data",
          "line_start": 805,
          "line_end": 816,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Compress data to reduce size (simplified implementation).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_matches_pattern",
          "line_start": 818,
          "line_end": 825,
          "args": [
            "self",
            "text",
            "pattern"
          ],
          "returns": null,
          "docstring": "Check if text matches a pattern (supports wildcards).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "get_backpressure_events",
          "line_start": 827,
          "line_end": 830,
          "args": [
            "self",
            "hours"
          ],
          "returns": null,
          "docstring": "Get recent backpressure events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "shutdown",
          "line_start": 832,
          "line_end": 835,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown rate limiter.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "fnmatch",
          "names": [
            "fnmatch"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 824
        }
      ],
      "external_dependencies": "{'fnmatch', 'psutil', 'typing', 'time', 'dataclasses', 'logging', 'math', 'enum', 'threading', 'queue', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 835,
      "complexity_score": 7840,
      "api_surface_area": 14,
      "docstring": "Analytics Adaptive Rate Limiting and Backpressure Management\n===========================================================\n\nAdvanced rate limiting system with adaptive throttling, backpressure\nhandling, and intelligent traffic shaping for analytics data flow.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9487179487179487,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_receipt_tracker.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_receipt_tracker.py",
      "component_name": "analytics_receipt_tracker",
      "analysis_timestamp": "2025-08-20 21:46:40.591893",
      "classes": [
        {
          "name": "DeliveryStatus",
          "line_start": 29,
          "line_end": 37,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Analytics delivery status.",
          "decorators": []
        },
        {
          "name": "ReceiptType",
          "line_start": 40,
          "line_end": 46,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of delivery receipts.",
          "decorators": []
        },
        {
          "name": "DeliveryPriority",
          "line_start": 49,
          "line_end": 55,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Delivery priority levels.",
          "decorators": []
        },
        {
          "name": "DeliveryReceipt",
          "line_start": 59,
          "line_end": 69,
          "base_classes": [],
          "methods": [],
          "docstring": "Delivery receipt record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "DeliveryAttempt",
          "line_start": 73,
          "line_end": 82,
          "base_classes": [],
          "methods": [],
          "docstring": "Individual delivery attempt.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsDelivery",
          "line_start": 86,
          "line_end": 100,
          "base_classes": [],
          "methods": [],
          "docstring": "Analytics delivery tracking record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsReceiptTracker",
          "line_start": 103,
          "line_end": 791,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 106,
              "line_end": 144,
              "args": [
                "self",
                "db_path",
                "secret_key",
                "confirmation_timeout",
                "max_retry_attempts"
              ],
              "returns": null,
              "docstring": "Initialize the receipt tracker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 191
            },
            {
              "name": "_generate_secret_key",
              "line_start": 146,
              "line_end": 148,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate a secret key for signatures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 23
            },
            {
              "name": "_initialize_database",
              "line_start": 150,
              "line_end": 227,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize the receipt tracking database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "initiate_delivery",
              "line_start": 229,
              "line_end": 279,
              "args": [
                "self",
                "analytics_id",
                "destination",
                "analytics_data",
                "priority",
                "expiration_minutes",
                "metadata"
              ],
              "returns": null,
              "docstring": "Initiate analytics delivery with tracking.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 247
            },
            {
              "name": "_calculate_checksum",
              "line_start": 281,
              "line_end": 284,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate checksum for data integrity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_generate_signature",
              "line_start": 286,
              "line_end": 294,
              "args": [
                "self",
                "delivery_id",
                "analytics_id",
                "checksum"
              ],
              "returns": null,
              "docstring": "Generate delivery signature for verification.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_verify_signature",
              "line_start": 296,
              "line_end": 299,
              "args": [
                "self",
                "delivery_id",
                "analytics_id",
                "checksum",
                "signature"
              ],
              "returns": null,
              "docstring": "Verify delivery signature.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 43
            },
            {
              "name": "_save_delivery_to_db",
              "line_start": 301,
              "line_end": 325,
              "args": [
                "self",
                "delivery"
              ],
              "returns": null,
              "docstring": "Save delivery to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "_process_delivery",
              "line_start": 327,
              "line_end": 386,
              "args": [
                "self",
                "delivery_id",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Process analytics delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 319
            },
            {
              "name": "_simulate_delivery",
              "line_start": 388,
              "line_end": 394,
              "args": [
                "self",
                "destination",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Simulate analytics delivery (replace with actual delivery logic).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_create_delivery_attempt",
              "line_start": 396,
              "line_end": 407,
              "args": [
                "self",
                "delivery_id",
                "attempt_number"
              ],
              "returns": null,
              "docstring": "Create a new delivery attempt record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_handle_delivery_failure",
              "line_start": 409,
              "line_end": 445,
              "args": [
                "self",
                "delivery",
                "attempt",
                "error_message"
              ],
              "returns": null,
              "docstring": "Handle delivery failure and schedule retry if needed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 188
            },
            {
              "name": "_schedule_retry",
              "line_start": 447,
              "line_end": 460,
              "args": [
                "self",
                "delivery_id",
                "delay_seconds"
              ],
              "returns": null,
              "docstring": "Schedule delivery retry.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_generate_automatic_receipt",
              "line_start": 462,
              "line_end": 493,
              "args": [
                "self",
                "delivery_id",
                "processing_time_ms"
              ],
              "returns": null,
              "docstring": "Generate automatic delivery receipt.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_generate_receipt_signature",
              "line_start": 495,
              "line_end": 504,
              "args": [
                "self",
                "delivery_id",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Generate receipt signature.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "confirm_delivery",
              "line_start": 506,
              "line_end": 556,
              "args": [
                "self",
                "delivery_id",
                "receipt_type",
                "confirmation_data"
              ],
              "returns": null,
              "docstring": "Confirm delivery receipt.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 309
            },
            {
              "name": "_schedule_confirmation_timeout",
              "line_start": 558,
              "line_end": 576,
              "args": [
                "self",
                "delivery_id"
              ],
              "returns": null,
              "docstring": "Schedule confirmation timeout check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_save_attempt_to_db",
              "line_start": 578,
              "line_end": 599,
              "args": [
                "self",
                "attempt"
              ],
              "returns": null,
              "docstring": "Save delivery attempt to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_save_receipt_to_db",
              "line_start": 601,
              "line_end": 623,
              "args": [
                "self",
                "receipt"
              ],
              "returns": null,
              "docstring": "Save receipt to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_log_audit_trail",
              "line_start": 625,
              "line_end": 650,
              "args": [
                "self",
                "delivery_id",
                "action",
                "details",
                "user_id",
                "ip_address"
              ],
              "returns": null,
              "docstring": "Log audit trail entry.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "get_delivery_status",
              "line_start": 652,
              "line_end": 677,
              "args": [
                "self",
                "delivery_id"
              ],
              "returns": null,
              "docstring": "Get delivery status and tracking information.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            },
            {
              "name": "get_tracking_summary",
              "line_start": 679,
              "line_end": 699,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive tracking summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "start_monitoring",
              "line_start": 701,
              "line_end": 710,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start receipt tracking monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_monitor_deliveries",
              "line_start": 712,
              "line_end": 729,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_check_expired_deliveries",
              "line_start": 731,
              "line_end": 749,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for expired deliveries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "_cleanup_old_deliveries",
              "line_start": 751,
              "line_end": 763,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old completed deliveries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "_update_statistics",
              "line_start": 765,
              "line_end": 777,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update tracking statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            },
            {
              "name": "stop_monitoring",
              "line_start": 779,
              "line_end": 787,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop receipt tracking monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "shutdown",
              "line_start": 789,
              "line_end": 791,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the receipt tracker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            }
          ],
          "docstring": "Analytics delivery confirmation and receipt tracking system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_receipt_tracker",
          "line_start": 797,
          "line_end": 802,
          "args": [],
          "returns": null,
          "docstring": "Get the global receipt tracker instance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "__init__",
          "line_start": 106,
          "line_end": 144,
          "args": [
            "self",
            "db_path",
            "secret_key",
            "confirmation_timeout",
            "max_retry_attempts"
          ],
          "returns": null,
          "docstring": "Initialize the receipt tracker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "_generate_secret_key",
          "line_start": 146,
          "line_end": 148,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate a secret key for signatures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 23
        },
        {
          "name": "_initialize_database",
          "line_start": 150,
          "line_end": 227,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize the receipt tracking database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "initiate_delivery",
          "line_start": 229,
          "line_end": 279,
          "args": [
            "self",
            "analytics_id",
            "destination",
            "analytics_data",
            "priority",
            "expiration_minutes",
            "metadata"
          ],
          "returns": null,
          "docstring": "Initiate analytics delivery with tracking.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 247
        },
        {
          "name": "_calculate_checksum",
          "line_start": 281,
          "line_end": 284,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate checksum for data integrity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_generate_signature",
          "line_start": 286,
          "line_end": 294,
          "args": [
            "self",
            "delivery_id",
            "analytics_id",
            "checksum"
          ],
          "returns": null,
          "docstring": "Generate delivery signature for verification.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_verify_signature",
          "line_start": 296,
          "line_end": 299,
          "args": [
            "self",
            "delivery_id",
            "analytics_id",
            "checksum",
            "signature"
          ],
          "returns": null,
          "docstring": "Verify delivery signature.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 43
        },
        {
          "name": "_save_delivery_to_db",
          "line_start": 301,
          "line_end": 325,
          "args": [
            "self",
            "delivery"
          ],
          "returns": null,
          "docstring": "Save delivery to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "_process_delivery",
          "line_start": 327,
          "line_end": 386,
          "args": [
            "self",
            "delivery_id",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Process analytics delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 319
        },
        {
          "name": "_simulate_delivery",
          "line_start": 388,
          "line_end": 394,
          "args": [
            "self",
            "destination",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Simulate analytics delivery (replace with actual delivery logic).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_create_delivery_attempt",
          "line_start": 396,
          "line_end": 407,
          "args": [
            "self",
            "delivery_id",
            "attempt_number"
          ],
          "returns": null,
          "docstring": "Create a new delivery attempt record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_handle_delivery_failure",
          "line_start": 409,
          "line_end": 445,
          "args": [
            "self",
            "delivery",
            "attempt",
            "error_message"
          ],
          "returns": null,
          "docstring": "Handle delivery failure and schedule retry if needed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 188
        },
        {
          "name": "_schedule_retry",
          "line_start": 447,
          "line_end": 460,
          "args": [
            "self",
            "delivery_id",
            "delay_seconds"
          ],
          "returns": null,
          "docstring": "Schedule delivery retry.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_generate_automatic_receipt",
          "line_start": 462,
          "line_end": 493,
          "args": [
            "self",
            "delivery_id",
            "processing_time_ms"
          ],
          "returns": null,
          "docstring": "Generate automatic delivery receipt.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_generate_receipt_signature",
          "line_start": 495,
          "line_end": 504,
          "args": [
            "self",
            "delivery_id",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Generate receipt signature.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "confirm_delivery",
          "line_start": 506,
          "line_end": 556,
          "args": [
            "self",
            "delivery_id",
            "receipt_type",
            "confirmation_data"
          ],
          "returns": null,
          "docstring": "Confirm delivery receipt.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 309
        },
        {
          "name": "_schedule_confirmation_timeout",
          "line_start": 558,
          "line_end": 576,
          "args": [
            "self",
            "delivery_id"
          ],
          "returns": null,
          "docstring": "Schedule confirmation timeout check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_save_attempt_to_db",
          "line_start": 578,
          "line_end": 599,
          "args": [
            "self",
            "attempt"
          ],
          "returns": null,
          "docstring": "Save delivery attempt to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_save_receipt_to_db",
          "line_start": 601,
          "line_end": 623,
          "args": [
            "self",
            "receipt"
          ],
          "returns": null,
          "docstring": "Save receipt to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_log_audit_trail",
          "line_start": 625,
          "line_end": 650,
          "args": [
            "self",
            "delivery_id",
            "action",
            "details",
            "user_id",
            "ip_address"
          ],
          "returns": null,
          "docstring": "Log audit trail entry.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "get_delivery_status",
          "line_start": 652,
          "line_end": 677,
          "args": [
            "self",
            "delivery_id"
          ],
          "returns": null,
          "docstring": "Get delivery status and tracking information.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        },
        {
          "name": "get_tracking_summary",
          "line_start": 679,
          "line_end": 699,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive tracking summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "start_monitoring",
          "line_start": 701,
          "line_end": 710,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start receipt tracking monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_monitor_deliveries",
          "line_start": 712,
          "line_end": 729,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_check_expired_deliveries",
          "line_start": 731,
          "line_end": 749,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for expired deliveries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "_cleanup_old_deliveries",
          "line_start": 751,
          "line_end": 763,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old completed deliveries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "_update_statistics",
          "line_start": 765,
          "line_end": 777,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update tracking statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        },
        {
          "name": "stop_monitoring",
          "line_start": 779,
          "line_end": 787,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop receipt tracking monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "shutdown",
          "line_start": 789,
          "line_end": 791,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the receipt tracker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "hmac",
          "names": [
            "hmac"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "base64",
          "names": [
            "base64"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 26
        }
      ],
      "external_dependencies": "{'sqlite3', 'base64', 'typing', 'time', 'dataclasses', 'json', 'logging', 'concurrent.futures', 'hmac', 'enum', 'datetime', 'threading', 'uuid', 'hashlib', 'os'}",
      "internal_dependencies": "set()",
      "lines_of_code": 850,
      "complexity_score": 6732,
      "api_surface_area": 15,
      "docstring": "Analytics Delivery Confirmation with Receipt Tracking\n====================================================\n\nProvides ultra-reliability through end-to-end delivery confirmation,\nreceipt tracking, audit trails, and guaranteed delivery mechanisms.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.027027027027027,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_recovery_orchestrator.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_recovery_orchestrator.py",
      "component_name": "analytics_recovery_orchestrator",
      "analysis_timestamp": "2025-08-20 21:46:40.605634",
      "classes": [
        {
          "name": "HealthStatus",
          "line_start": 24,
          "line_end": 31,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Component health status.",
          "decorators": []
        },
        {
          "name": "RecoveryAction",
          "line_start": 33,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Recovery action types.",
          "decorators": []
        },
        {
          "name": "HealthCheck",
          "line_start": 44,
          "line_end": 51,
          "base_classes": [],
          "methods": [],
          "docstring": "Health check result.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RecoveryPlan",
          "line_start": 54,
          "line_end": 61,
          "base_classes": [],
          "methods": [],
          "docstring": "Recovery action plan.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsRecoveryOrchestrator",
          "line_start": 63,
          "line_end": 746,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 68,
              "line_end": 124,
              "args": [
                "self",
                "check_interval"
              ],
              "returns": null,
              "docstring": "Initialize recovery orchestrator.\n\nArgs:\n    check_interval: Seconds between health checks",
              "is_async": false,
              "decorators": [],
              "complexity_score": 186
            },
            {
              "name": "register_component",
              "line_start": 126,
              "line_end": 154,
              "args": [
                "self",
                "name",
                "component",
                "health_check",
                "dependencies"
              ],
              "returns": null,
              "docstring": "Register component for monitoring.\n\nArgs:\n    name: Component name\n    component: Component instance\n    health_check: Health check function\n    dependencies: Component dependencies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "check_component_health",
              "line_start": 156,
              "line_end": 226,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Check health of a component.\n\nArgs:\n    name: Component name\n    \nReturns:\n    Health check result",
              "is_async": false,
              "decorators": [],
              "complexity_score": 224
            },
            {
              "name": "initiate_recovery",
              "line_start": 228,
              "line_end": 273,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Initiate recovery for a component.\n\nArgs:\n    component: Component name\n    \nReturns:\n    Success status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "_create_recovery_plan",
              "line_start": 275,
              "line_end": 329,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Create recovery plan for component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 251
            },
            {
              "name": "_execute_recovery_plan",
              "line_start": 331,
              "line_end": 373,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Execute recovery plan.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 258
            },
            {
              "name": "_restart_component",
              "line_start": 375,
              "line_end": 387,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Restart a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_reset_component",
              "line_start": 389,
              "line_end": 402,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Reset component state.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_repair_component",
              "line_start": 404,
              "line_end": 418,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Repair component issues.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_failover_component",
              "line_start": 420,
              "line_end": 422,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Failover to backup component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_isolate_component",
              "line_start": 425,
              "line_end": 429,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Isolate failing component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "_monitor_component",
              "line_start": 431,
              "line_end": 433,
              "args": [
                "self",
                "name"
              ],
              "returns": null,
              "docstring": "Enhanced monitoring for component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 19
            },
            {
              "name": "_analyze_health_result",
              "line_start": 436,
              "line_end": 464,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "docstring": "Analyze health check result.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "_detect_failure_patterns",
              "line_start": 466,
              "line_end": 503,
              "args": [
                "self",
                "component",
                "health_check"
              ],
              "returns": null,
              "docstring": "Detect failure patterns for prediction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 200
            },
            {
              "name": "_preemptive_recovery",
              "line_start": 505,
              "line_end": 519,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Initiate preemptive recovery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_check_cascade_risk",
              "line_start": 521,
              "line_end": 532,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for cascade failure risk.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 85
            },
            {
              "name": "_prevent_cascade",
              "line_start": 534,
              "line_end": 546,
              "args": [
                "self",
                "at_risk_components"
              ],
              "returns": null,
              "docstring": "Prevent cascade failures.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_monitoring_loop",
              "line_start": 548,
              "line_end": 572,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_clean_predictions",
              "line_start": 574,
              "line_end": 587,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean old predictions and update accuracy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_recover_event_queue",
              "line_start": 590,
              "line_end": 605,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover event queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "_recover_batch_processor",
              "line_start": 607,
              "line_end": 623,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover batch processor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_recover_heartbeat",
              "line_start": 625,
              "line_end": 641,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover heartbeat monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_recover_flow_monitor",
              "line_start": 643,
              "line_end": 656,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover flow monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_recover_fallback",
              "line_start": 658,
              "line_end": 669,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover fallback system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            },
            {
              "name": "_recover_dead_letter",
              "line_start": 671,
              "line_end": 685,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover dead letter queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_recover_compressor",
              "line_start": 687,
              "line_end": 699,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover compressor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_recover_retry_manager",
              "line_start": 701,
              "line_end": 714,
              "args": [
                "self",
                "plan"
              ],
              "returns": null,
              "docstring": "Recover retry manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "get_orchestrator_status",
              "line_start": 716,
              "line_end": 737,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get orchestrator status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "shutdown",
              "line_start": 739,
              "line_end": 746,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown orchestrator.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            }
          ],
          "docstring": "Orchestrates automatic recovery of all analytics components.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 68,
          "line_end": 124,
          "args": [
            "self",
            "check_interval"
          ],
          "returns": null,
          "docstring": "Initialize recovery orchestrator.\n\nArgs:\n    check_interval: Seconds between health checks",
          "is_async": false,
          "decorators": [],
          "complexity_score": 186
        },
        {
          "name": "register_component",
          "line_start": 126,
          "line_end": 154,
          "args": [
            "self",
            "name",
            "component",
            "health_check",
            "dependencies"
          ],
          "returns": null,
          "docstring": "Register component for monitoring.\n\nArgs:\n    name: Component name\n    component: Component instance\n    health_check: Health check function\n    dependencies: Component dependencies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "check_component_health",
          "line_start": 156,
          "line_end": 226,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Check health of a component.\n\nArgs:\n    name: Component name\n    \nReturns:\n    Health check result",
          "is_async": false,
          "decorators": [],
          "complexity_score": 224
        },
        {
          "name": "initiate_recovery",
          "line_start": 228,
          "line_end": 273,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Initiate recovery for a component.\n\nArgs:\n    component: Component name\n    \nReturns:\n    Success status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "_create_recovery_plan",
          "line_start": 275,
          "line_end": 329,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Create recovery plan for component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 251
        },
        {
          "name": "_execute_recovery_plan",
          "line_start": 331,
          "line_end": 373,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Execute recovery plan.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 258
        },
        {
          "name": "_restart_component",
          "line_start": 375,
          "line_end": 387,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Restart a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_reset_component",
          "line_start": 389,
          "line_end": 402,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Reset component state.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_repair_component",
          "line_start": 404,
          "line_end": 418,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Repair component issues.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_failover_component",
          "line_start": 420,
          "line_end": 422,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Failover to backup component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_isolate_component",
          "line_start": 425,
          "line_end": 429,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Isolate failing component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "_monitor_component",
          "line_start": 431,
          "line_end": 433,
          "args": [
            "self",
            "name"
          ],
          "returns": null,
          "docstring": "Enhanced monitoring for component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 19
        },
        {
          "name": "_analyze_health_result",
          "line_start": 436,
          "line_end": 464,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "docstring": "Analyze health check result.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "_detect_failure_patterns",
          "line_start": 466,
          "line_end": 503,
          "args": [
            "self",
            "component",
            "health_check"
          ],
          "returns": null,
          "docstring": "Detect failure patterns for prediction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 200
        },
        {
          "name": "_preemptive_recovery",
          "line_start": 505,
          "line_end": 519,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Initiate preemptive recovery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_check_cascade_risk",
          "line_start": 521,
          "line_end": 532,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for cascade failure risk.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 85
        },
        {
          "name": "_prevent_cascade",
          "line_start": 534,
          "line_end": 546,
          "args": [
            "self",
            "at_risk_components"
          ],
          "returns": null,
          "docstring": "Prevent cascade failures.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_monitoring_loop",
          "line_start": 548,
          "line_end": 572,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_clean_predictions",
          "line_start": 574,
          "line_end": 587,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean old predictions and update accuracy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_recover_event_queue",
          "line_start": 590,
          "line_end": 605,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover event queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "_recover_batch_processor",
          "line_start": 607,
          "line_end": 623,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover batch processor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_recover_heartbeat",
          "line_start": 625,
          "line_end": 641,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover heartbeat monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_recover_flow_monitor",
          "line_start": 643,
          "line_end": 656,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover flow monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_recover_fallback",
          "line_start": 658,
          "line_end": 669,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover fallback system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "_recover_dead_letter",
          "line_start": 671,
          "line_end": 685,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover dead letter queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_recover_compressor",
          "line_start": 687,
          "line_end": 699,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover compressor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_recover_retry_manager",
          "line_start": 701,
          "line_end": 714,
          "args": [
            "self",
            "plan"
          ],
          "returns": null,
          "docstring": "Recover retry manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "get_orchestrator_status",
          "line_start": 716,
          "line_end": 737,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get orchestrator status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "shutdown",
          "line_start": 739,
          "line_end": 746,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown orchestrator.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "core.analytics_batch_processor",
          "names": [
            "FlushReason"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 614
        },
        {
          "module": "core.analytics_flow_monitor",
          "names": [
            "FlowStatus"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 650
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'core.analytics_flow_monitor', 'datetime', 'threading', 'traceback', 'core.analytics_batch_processor', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 749,
      "complexity_score": 5654,
      "api_surface_area": 10,
      "docstring": "Analytics Recovery Orchestrator\n================================\n\nIntelligent self-healing system that detects, diagnoses, and automatically\nrecovers from any failure condition to ensure 100% uptime.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0294117647058822,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_redundancy.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_redundancy.py",
      "component_name": "analytics_redundancy",
      "analysis_timestamp": "2025-08-20 21:46:40.615473",
      "classes": [
        {
          "name": "FailoverMode",
          "line_start": 27,
          "line_end": 31,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "NodeStatus",
          "line_start": 33,
          "line_end": 38,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "RedundancyNode",
          "line_start": 41,
          "line_end": 50,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a redundant analytics processing node.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsRedundancyManager",
          "line_start": 52,
          "line_end": 694,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 57,
              "line_end": 112,
              "args": [
                "self",
                "failover_mode",
                "backup_directory"
              ],
              "returns": null,
              "docstring": "Initialize redundancy manager.\n\nArgs:\n    failover_mode: Type of failover mechanism\n    backup_directory: Directory for backup data storage",
              "is_async": false,
              "decorators": [],
              "complexity_score": 225
            },
            {
              "name": "register_node",
              "line_start": 114,
              "line_end": 151,
              "args": [
                "self",
                "node_id",
                "processor_function",
                "priority",
                "backup_data_path"
              ],
              "returns": null,
              "docstring": "Register a redundant analytics node.\n\nArgs:\n    node_id: Unique identifier for the node\n    processor_function: Function that processes analytics data\n    priority: Node priority (higher = more preferred)\n    backup_data_path: Optional backup data path for this node\n\nReturns:\n    Created redundancy node",
              "is_async": false,
              "decorators": [],
              "complexity_score": 147
            },
            {
              "name": "start_redundancy",
              "line_start": 153,
              "line_end": 169,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start redundancy monitoring and failover.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "stop_redundancy",
              "line_start": 171,
              "line_end": 180,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop redundancy monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "process_analytics_data",
              "line_start": 182,
              "line_end": 228,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Process analytics data with redundancy and failover.\n\nArgs:\n    data: Analytics data to process\n    source: Source identifier\n\nReturns:\n    Processed analytics data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 170
            },
            {
              "name": "_process_with_redundancy",
              "line_start": 230,
              "line_end": 296,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Process data using redundant nodes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 417
            },
            {
              "name": "_process_with_node",
              "line_start": 298,
              "line_end": 319,
              "args": [
                "self",
                "node_id",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Process data with a specific node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 116
            },
            {
              "name": "_aggregate_results",
              "line_start": 321,
              "line_end": 362,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "docstring": "Aggregate results from multiple nodes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 252
            },
            {
              "name": "_activate_node",
              "line_start": 364,
              "line_end": 370,
              "args": [
                "self",
                "node_id"
              ],
              "returns": null,
              "docstring": "Activate a redundancy node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_deactivate_node",
              "line_start": 372,
              "line_end": 378,
              "args": [
                "self",
                "node_id"
              ],
              "returns": null,
              "docstring": "Deactivate a redundancy node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 63
            },
            {
              "name": "_record_node_failure",
              "line_start": 380,
              "line_end": 387,
              "args": [
                "self",
                "node_id"
              ],
              "returns": null,
              "docstring": "Record a failure for a node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "_trigger_failover",
              "line_start": 389,
              "line_end": 419,
              "args": [
                "self",
                "failed_node_id"
              ],
              "returns": null,
              "docstring": "Trigger failover from a failed node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 172
            },
            {
              "name": "_attempt_data_recovery",
              "line_start": 421,
              "line_end": 472,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Attempt to recover data from backups.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "_queue_data_for_backup",
              "line_start": 474,
              "line_end": 492,
              "args": [
                "self",
                "data",
                "source"
              ],
              "returns": null,
              "docstring": "Queue data for backup storage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 101
            },
            {
              "name": "_heartbeat_loop",
              "line_start": 494,
              "line_end": 512,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Monitor node heartbeats.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 114
            },
            {
              "name": "_failover_loop",
              "line_start": 514,
              "line_end": 533,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Monitor for recovery opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_attempt_node_recovery",
              "line_start": 535,
              "line_end": 569,
              "args": [
                "self",
                "node_id"
              ],
              "returns": null,
              "docstring": "Attempt to recover a failed node.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 206
            },
            {
              "name": "_backup_loop",
              "line_start": 571,
              "line_end": 591,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Process backup queue.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_create_backup",
              "line_start": 593,
              "line_end": 610,
              "args": [
                "self",
                "backup_items"
              ],
              "returns": null,
              "docstring": "Create backup file from queued items.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_cleanup_old_backups",
              "line_start": 612,
              "line_end": 629,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up old backup files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 132
            },
            {
              "name": "add_failover_callback",
              "line_start": 631,
              "line_end": 633,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add callback for failover events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "add_recovery_callback",
              "line_start": 635,
              "line_end": 637,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add callback for recovery events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "add_data_loss_callback",
              "line_start": 639,
              "line_end": 641,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add callback for data loss events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "get_redundancy_status",
              "line_start": 643,
              "line_end": 672,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get overall redundancy status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "shutdown",
              "line_start": 674,
              "line_end": 694,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown redundancy manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 84
            }
          ],
          "docstring": "Manages redundancy and failover for analytics processing.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 57,
          "line_end": 112,
          "args": [
            "self",
            "failover_mode",
            "backup_directory"
          ],
          "returns": null,
          "docstring": "Initialize redundancy manager.\n\nArgs:\n    failover_mode: Type of failover mechanism\n    backup_directory: Directory for backup data storage",
          "is_async": false,
          "decorators": [],
          "complexity_score": 225
        },
        {
          "name": "register_node",
          "line_start": 114,
          "line_end": 151,
          "args": [
            "self",
            "node_id",
            "processor_function",
            "priority",
            "backup_data_path"
          ],
          "returns": null,
          "docstring": "Register a redundant analytics node.\n\nArgs:\n    node_id: Unique identifier for the node\n    processor_function: Function that processes analytics data\n    priority: Node priority (higher = more preferred)\n    backup_data_path: Optional backup data path for this node\n\nReturns:\n    Created redundancy node",
          "is_async": false,
          "decorators": [],
          "complexity_score": 147
        },
        {
          "name": "start_redundancy",
          "line_start": 153,
          "line_end": 169,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start redundancy monitoring and failover.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "stop_redundancy",
          "line_start": 171,
          "line_end": 180,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop redundancy monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "process_analytics_data",
          "line_start": 182,
          "line_end": 228,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Process analytics data with redundancy and failover.\n\nArgs:\n    data: Analytics data to process\n    source: Source identifier\n\nReturns:\n    Processed analytics data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 170
        },
        {
          "name": "_process_with_redundancy",
          "line_start": 230,
          "line_end": 296,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Process data using redundant nodes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 417
        },
        {
          "name": "_process_with_node",
          "line_start": 298,
          "line_end": 319,
          "args": [
            "self",
            "node_id",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Process data with a specific node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        },
        {
          "name": "_aggregate_results",
          "line_start": 321,
          "line_end": 362,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "docstring": "Aggregate results from multiple nodes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 252
        },
        {
          "name": "_activate_node",
          "line_start": 364,
          "line_end": 370,
          "args": [
            "self",
            "node_id"
          ],
          "returns": null,
          "docstring": "Activate a redundancy node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_deactivate_node",
          "line_start": 372,
          "line_end": 378,
          "args": [
            "self",
            "node_id"
          ],
          "returns": null,
          "docstring": "Deactivate a redundancy node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 63
        },
        {
          "name": "_record_node_failure",
          "line_start": 380,
          "line_end": 387,
          "args": [
            "self",
            "node_id"
          ],
          "returns": null,
          "docstring": "Record a failure for a node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "_trigger_failover",
          "line_start": 389,
          "line_end": 419,
          "args": [
            "self",
            "failed_node_id"
          ],
          "returns": null,
          "docstring": "Trigger failover from a failed node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 172
        },
        {
          "name": "_attempt_data_recovery",
          "line_start": 421,
          "line_end": 472,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Attempt to recover data from backups.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "_queue_data_for_backup",
          "line_start": 474,
          "line_end": 492,
          "args": [
            "self",
            "data",
            "source"
          ],
          "returns": null,
          "docstring": "Queue data for backup storage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 101
        },
        {
          "name": "_heartbeat_loop",
          "line_start": 494,
          "line_end": 512,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Monitor node heartbeats.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 114
        },
        {
          "name": "_failover_loop",
          "line_start": 514,
          "line_end": 533,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Monitor for recovery opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_attempt_node_recovery",
          "line_start": 535,
          "line_end": 569,
          "args": [
            "self",
            "node_id"
          ],
          "returns": null,
          "docstring": "Attempt to recover a failed node.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 206
        },
        {
          "name": "_backup_loop",
          "line_start": 571,
          "line_end": 591,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Process backup queue.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_create_backup",
          "line_start": 593,
          "line_end": 610,
          "args": [
            "self",
            "backup_items"
          ],
          "returns": null,
          "docstring": "Create backup file from queued items.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_cleanup_old_backups",
          "line_start": 612,
          "line_end": 629,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up old backup files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 132
        },
        {
          "name": "add_failover_callback",
          "line_start": 631,
          "line_end": 633,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add callback for failover events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "add_recovery_callback",
          "line_start": 635,
          "line_end": 637,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add callback for recovery events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "add_data_loss_callback",
          "line_start": 639,
          "line_end": 641,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add callback for data loss events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "get_redundancy_status",
          "line_start": 643,
          "line_end": 672,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get overall redundancy status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "shutdown",
          "line_start": 674,
          "line_end": 694,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown redundancy manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 84
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "copy",
          "names": [
            "copy"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "collections",
          "names": [
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 348
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'copy', 'json', 'logging', 'pickle', 'enum', 'threading', 'os', 'queue', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 694,
      "complexity_score": 6646,
      "api_surface_area": 18,
      "docstring": "Analytics Redundancy and Failover System\n=========================================\n\nProvides redundancy, failover mechanisms, and backup pathways to ensure\nanalytics data always reaches the dashboard even under failure conditions.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9655172413793104,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_retry_manager.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_retry_manager.py",
      "component_name": "analytics_retry_manager",
      "analysis_timestamp": "2025-08-20 21:46:40.626474",
      "classes": [
        {
          "name": "RetryStrategy",
          "line_start": 26,
          "line_end": 31,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Retry strategy types.",
          "decorators": []
        },
        {
          "name": "RetryConfig",
          "line_start": 34,
          "line_end": 41,
          "base_classes": [],
          "methods": [],
          "docstring": "Retry configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RetryAttempt",
          "line_start": 44,
          "line_end": 51,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a retry attempt.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CircuitState",
          "line_start": 53,
          "line_end": 57,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Circuit breaker states.",
          "decorators": []
        },
        {
          "name": "CircuitBreaker",
          "line_start": 59,
          "line_end": 139,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 62,
              "line_end": 82,
              "args": [
                "self",
                "failure_threshold",
                "recovery_timeout",
                "success_threshold"
              ],
              "returns": null,
              "docstring": "Initialize circuit breaker.\n\nArgs:\n    failure_threshold: Failures before opening circuit\n    recovery_timeout: Time before attempting recovery\n    success_threshold: Successes needed to close circuit",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "call",
              "line_start": 84,
              "line_end": 105,
              "args": [
                "self",
                "func"
              ],
              "returns": null,
              "docstring": "Call function through circuit breaker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "_on_success",
              "line_start": 107,
              "line_end": 117,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Handle successful call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_on_failure",
              "line_start": 119,
              "line_end": 131,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Handle failed call.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "reset",
              "line_start": 133,
              "line_end": 139,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Reset circuit breaker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 38
            }
          ],
          "docstring": "Circuit breaker for retry management.",
          "decorators": []
        },
        {
          "name": "AnalyticsRetryManager",
          "line_start": 141,
          "line_end": 482,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 146,
              "line_end": 165,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize retry manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "configure_operation",
              "line_start": 167,
              "line_end": 187,
              "args": [
                "self",
                "operation_name",
                "config",
                "circuit_breaker"
              ],
              "returns": null,
              "docstring": "Configure retry settings for an operation.\n\nArgs:\n    operation_name: Name of the operation\n    config: Retry configuration\n    circuit_breaker: Enable circuit breaker",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "retry_operation",
              "line_start": 189,
              "line_end": 304,
              "args": [
                "self",
                "operation_name",
                "func"
              ],
              "returns": null,
              "docstring": "Execute operation with retry logic.\n\nArgs:\n    operation_name: Name of the operation\n    func: Function to execute\n    *args: Function arguments\n    **kwargs: Function keyword arguments\n    \nReturns:\n    Function result\n    \nRaises:\n    Exception: If all retries fail",
              "is_async": false,
              "decorators": [],
              "complexity_score": 450
            },
            {
              "name": "_calculate_delay",
              "line_start": 306,
              "line_end": 338,
              "args": [
                "self",
                "attempt_num",
                "config"
              ],
              "returns": null,
              "docstring": "Calculate retry delay based on strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 182
            },
            {
              "name": "_fibonacci",
              "line_start": 340,
              "line_end": 347,
              "args": [
                "self",
                "n"
              ],
              "returns": null,
              "docstring": "Calculate Fibonacci number.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_get_adaptive_delay",
              "line_start": 349,
              "line_end": 368,
              "args": [
                "self",
                "attempt_num",
                "config"
              ],
              "returns": null,
              "docstring": "Get adaptive delay based on learned patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "_learn_from_attempts",
              "line_start": 370,
              "line_end": 407,
              "args": [
                "self",
                "operation_name",
                "attempts"
              ],
              "returns": null,
              "docstring": "Learn from retry attempts to optimize future retries.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 208
            },
            {
              "name": "get_retry_statistics",
              "line_start": 409,
              "line_end": 450,
              "args": [
                "self",
                "operation_name"
              ],
              "returns": null,
              "docstring": "Get retry statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 267
            },
            {
              "name": "reset_circuit_breaker",
              "line_start": 452,
              "line_end": 456,
              "args": [
                "self",
                "operation_name"
              ],
              "returns": null,
              "docstring": "Reset circuit breaker for an operation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 40
            },
            {
              "name": "decorator",
              "line_start": 458,
              "line_end": 478,
              "args": [
                "self",
                "operation_name",
                "config"
              ],
              "returns": null,
              "docstring": "Decorator for adding retry logic to functions.\n\nUsage:\n    @retry_manager.decorator(\"my_operation\")\n    def my_function():\n        # function code",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "shutdown",
              "line_start": 480,
              "line_end": 482,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown retry manager.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Manages retry logic for analytics operations.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "with_retry",
          "line_start": 488,
          "line_end": 498,
          "args": [
            "operation_name",
            "max_retries",
            "initial_delay"
          ],
          "returns": null,
          "docstring": "Convenience decorator for retry logic.\n\nUsage:\n    @with_retry(\"analytics_fetch\", max_retries=5)\n    def fetch_analytics():\n        # function code",
          "is_async": false,
          "decorators": [],
          "complexity_score": 37
        },
        {
          "name": "__init__",
          "line_start": 62,
          "line_end": 82,
          "args": [
            "self",
            "failure_threshold",
            "recovery_timeout",
            "success_threshold"
          ],
          "returns": null,
          "docstring": "Initialize circuit breaker.\n\nArgs:\n    failure_threshold: Failures before opening circuit\n    recovery_timeout: Time before attempting recovery\n    success_threshold: Successes needed to close circuit",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "call",
          "line_start": 84,
          "line_end": 105,
          "args": [
            "self",
            "func"
          ],
          "returns": null,
          "docstring": "Call function through circuit breaker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "_on_success",
          "line_start": 107,
          "line_end": 117,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Handle successful call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_on_failure",
          "line_start": 119,
          "line_end": 131,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Handle failed call.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "reset",
          "line_start": 133,
          "line_end": 139,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Reset circuit breaker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 38
        },
        {
          "name": "__init__",
          "line_start": 146,
          "line_end": 165,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize retry manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "configure_operation",
          "line_start": 167,
          "line_end": 187,
          "args": [
            "self",
            "operation_name",
            "config",
            "circuit_breaker"
          ],
          "returns": null,
          "docstring": "Configure retry settings for an operation.\n\nArgs:\n    operation_name: Name of the operation\n    config: Retry configuration\n    circuit_breaker: Enable circuit breaker",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "retry_operation",
          "line_start": 189,
          "line_end": 304,
          "args": [
            "self",
            "operation_name",
            "func"
          ],
          "returns": null,
          "docstring": "Execute operation with retry logic.\n\nArgs:\n    operation_name: Name of the operation\n    func: Function to execute\n    *args: Function arguments\n    **kwargs: Function keyword arguments\n    \nReturns:\n    Function result\n    \nRaises:\n    Exception: If all retries fail",
          "is_async": false,
          "decorators": [],
          "complexity_score": 450
        },
        {
          "name": "_calculate_delay",
          "line_start": 306,
          "line_end": 338,
          "args": [
            "self",
            "attempt_num",
            "config"
          ],
          "returns": null,
          "docstring": "Calculate retry delay based on strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 182
        },
        {
          "name": "_fibonacci",
          "line_start": 340,
          "line_end": 347,
          "args": [
            "self",
            "n"
          ],
          "returns": null,
          "docstring": "Calculate Fibonacci number.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_get_adaptive_delay",
          "line_start": 349,
          "line_end": 368,
          "args": [
            "self",
            "attempt_num",
            "config"
          ],
          "returns": null,
          "docstring": "Get adaptive delay based on learned patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "_learn_from_attempts",
          "line_start": 370,
          "line_end": 407,
          "args": [
            "self",
            "operation_name",
            "attempts"
          ],
          "returns": null,
          "docstring": "Learn from retry attempts to optimize future retries.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 208
        },
        {
          "name": "get_retry_statistics",
          "line_start": 409,
          "line_end": 450,
          "args": [
            "self",
            "operation_name"
          ],
          "returns": null,
          "docstring": "Get retry statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 267
        },
        {
          "name": "reset_circuit_breaker",
          "line_start": 452,
          "line_end": 456,
          "args": [
            "self",
            "operation_name"
          ],
          "returns": null,
          "docstring": "Reset circuit breaker for an operation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 40
        },
        {
          "name": "decorator",
          "line_start": 458,
          "line_end": 478,
          "args": [
            "self",
            "operation_name",
            "config"
          ],
          "returns": null,
          "docstring": "Decorator for adding retry logic to functions.\n\nUsage:\n    @retry_manager.decorator(\"my_operation\")\n    def my_function():\n        # function code",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "shutdown",
          "line_start": 480,
          "line_end": 482,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown retry manager.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "decorator_wrapper",
          "line_start": 467,
          "line_end": 476,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "wrapper",
          "line_start": 473,
          "line_end": 474,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [
            "<ast.Call object at 0x0000019D295443D0>"
          ],
          "complexity_score": 28
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "random",
          "names": [
            "random"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "Callable",
            "TypeVar",
            "Generic"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "functools",
          "names": [
            "functools"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'random', 'typing', 'dataclasses', 'time', 'functools', 'logging', 'enum', 'threading', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 498,
      "complexity_score": 4068,
      "api_surface_area": 19,
      "docstring": "Analytics Retry Manager with Exponential Backoff\n================================================\n\nProvides intelligent retry mechanisms for failed analytics operations\nwith exponential backoff, circuit breaking, and adaptive strategies.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.96,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_sla_tracker.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_sla_tracker.py",
      "component_name": "analytics_sla_tracker",
      "analysis_timestamp": "2025-08-20 21:46:40.637754",
      "classes": [
        {
          "name": "SLALevel",
          "line_start": 27,
          "line_end": 32,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "SLA performance levels.",
          "decorators": []
        },
        {
          "name": "EscalationLevel",
          "line_start": 35,
          "line_end": 41,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Escalation levels.",
          "decorators": []
        },
        {
          "name": "ViolationType",
          "line_start": 44,
          "line_end": 50,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "SLA violation types.",
          "decorators": []
        },
        {
          "name": "DeliveryPriority",
          "line_start": 53,
          "line_end": 59,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Delivery priority levels.",
          "decorators": []
        },
        {
          "name": "SLAConfiguration",
          "line_start": 63,
          "line_end": 71,
          "base_classes": [],
          "methods": [],
          "docstring": "SLA configuration settings.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SLAMetric",
          "line_start": 75,
          "line_end": 84,
          "base_classes": [],
          "methods": [],
          "docstring": "Individual SLA metric measurement.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SLAViolation",
          "line_start": 88,
          "line_end": 101,
          "base_classes": [],
          "methods": [],
          "docstring": "SLA violation record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "EscalationRule",
          "line_start": 105,
          "line_end": 112,
          "base_classes": [],
          "methods": [],
          "docstring": "Escalation rule configuration.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsSLATracker",
          "line_start": 115,
          "line_end": 808,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 118,
              "line_end": 154,
              "args": [
                "self",
                "db_path",
                "default_sla_level",
                "monitoring_interval"
              ],
              "returns": null,
              "docstring": "Initialize the SLA tracker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 258
            },
            {
              "name": "_initialize_database",
              "line_start": 156,
              "line_end": 218,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize the SLA tracking database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_setup_default_sla_configs",
              "line_start": 220,
              "line_end": 259,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default SLA configurations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_setup_default_escalation_rules",
              "line_start": 261,
              "line_end": 293,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default escalation rules.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 92
            },
            {
              "name": "track_analytics_delivery",
              "line_start": 295,
              "line_end": 319,
              "args": [
                "self",
                "analytics_id",
                "component",
                "stage",
                "sla_level"
              ],
              "returns": null,
              "docstring": "Start tracking analytics delivery against SLA.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 104
            },
            {
              "name": "record_delivery_success",
              "line_start": 321,
              "line_end": 354,
              "args": [
                "self",
                "tracking_id",
                "latency_ms",
                "additional_metrics"
              ],
              "returns": null,
              "docstring": "Record successful analytics delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 173
            },
            {
              "name": "record_delivery_failure",
              "line_start": 356,
              "line_end": 403,
              "args": [
                "self",
                "tracking_id",
                "error_message",
                "latency_ms"
              ],
              "returns": null,
              "docstring": "Record failed analytics delivery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 201
            },
            {
              "name": "_check_delivery_timeout",
              "line_start": 405,
              "line_end": 418,
              "args": [
                "self",
                "tracking_id"
              ],
              "returns": null,
              "docstring": "Check for delivery timeout and escalate if necessary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_save_metric_to_db",
              "line_start": 420,
              "line_end": 441,
              "args": [
                "self",
                "metric"
              ],
              "returns": null,
              "docstring": "Save SLA metric to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_check_sla_violations",
              "line_start": 443,
              "line_end": 467,
              "args": [
                "self",
                "metric",
                "sla_config"
              ],
              "returns": null,
              "docstring": "Check metric against SLA thresholds.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "_process_violation",
              "line_start": 469,
              "line_end": 480,
              "args": [
                "self",
                "violation"
              ],
              "returns": null,
              "docstring": "Process SLA violation and trigger escalation if needed.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_save_violation_to_db",
              "line_start": 482,
              "line_end": 508,
              "args": [
                "self",
                "violation"
              ],
              "returns": null,
              "docstring": "Save SLA violation to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "_check_escalation",
              "line_start": 510,
              "line_end": 517,
              "args": [
                "self",
                "violation"
              ],
              "returns": null,
              "docstring": "Check if violation needs escalation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 48
            },
            {
              "name": "_should_escalate",
              "line_start": 519,
              "line_end": 531,
              "args": [
                "self",
                "violation",
                "rule"
              ],
              "returns": null,
              "docstring": "Determine if violation should be escalated.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 77
            },
            {
              "name": "_escalate_violation",
              "line_start": 533,
              "line_end": 545,
              "args": [
                "self",
                "violation",
                "rule"
              ],
              "returns": null,
              "docstring": "Escalate violation according to rule.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 75
            },
            {
              "name": "_send_escalation_notifications",
              "line_start": 547,
              "line_end": 572,
              "args": [
                "self",
                "violation",
                "rule"
              ],
              "returns": null,
              "docstring": "Send escalation notifications.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 122
            },
            {
              "name": "_send_email",
              "line_start": 574,
              "line_end": 578,
              "args": [
                "self",
                "to_email",
                "subject",
                "body"
              ],
              "returns": null,
              "docstring": "Send email notification (placeholder implementation).",
              "is_async": false,
              "decorators": [],
              "complexity_score": 44
            },
            {
              "name": "_execute_auto_actions",
              "line_start": 580,
              "line_end": 598,
              "args": [
                "self",
                "violation",
                "rule"
              ],
              "returns": null,
              "docstring": "Execute automatic remediation actions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_restart_slow_components",
              "line_start": 600,
              "line_end": 602,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Restart slow components.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "_increase_resources",
              "line_start": 604,
              "line_end": 606,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Increase system resources.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "_activate_failover",
              "line_start": 608,
              "line_end": 610,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Activate failover systems.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "_scale_up_instances",
              "line_start": 612,
              "line_end": 614,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Scale up instances.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "_emergency_backup_activation",
              "line_start": 616,
              "line_end": 618,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Activate emergency backup systems.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 14
            },
            {
              "name": "start_monitoring",
              "line_start": 620,
              "line_end": 629,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start SLA monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_monitor_sla",
              "line_start": 631,
              "line_end": 648,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background SLA monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "_calculate_sla_performance",
              "line_start": 650,
              "line_end": 682,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate current SLA performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 192
            },
            {
              "name": "_check_ongoing_violations",
              "line_start": 684,
              "line_end": 693,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check ongoing violations for auto-resolution.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            },
            {
              "name": "_is_violation_resolved",
              "line_start": 695,
              "line_end": 721,
              "args": [
                "self",
                "violation"
              ],
              "returns": null,
              "docstring": "Check if violation conditions are resolved.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 163
            },
            {
              "name": "_generate_performance_reports",
              "line_start": 723,
              "line_end": 726,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Generate periodic performance reports.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 6
            },
            {
              "name": "get_sla_summary",
              "line_start": 728,
              "line_end": 789,
              "args": [
                "self",
                "sla_level"
              ],
              "returns": null,
              "docstring": "Get comprehensive SLA performance summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 424
            },
            {
              "name": "force_sla_check",
              "line_start": 791,
              "line_end": 794,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Force immediate SLA performance check.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "stop_monitoring",
              "line_start": 796,
              "line_end": 804,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop SLA monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "shutdown",
              "line_start": 806,
              "line_end": 808,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the SLA tracker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 11
            }
          ],
          "docstring": "Analytics delivery SLA tracker with automatic escalation.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_sla_tracker",
          "line_start": 814,
          "line_end": 819,
          "args": [],
          "returns": null,
          "docstring": "Get the global SLA tracker instance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "__init__",
          "line_start": 118,
          "line_end": 154,
          "args": [
            "self",
            "db_path",
            "default_sla_level",
            "monitoring_interval"
          ],
          "returns": null,
          "docstring": "Initialize the SLA tracker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 258
        },
        {
          "name": "_initialize_database",
          "line_start": 156,
          "line_end": 218,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize the SLA tracking database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_setup_default_sla_configs",
          "line_start": 220,
          "line_end": 259,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default SLA configurations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_setup_default_escalation_rules",
          "line_start": 261,
          "line_end": 293,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default escalation rules.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 92
        },
        {
          "name": "track_analytics_delivery",
          "line_start": 295,
          "line_end": 319,
          "args": [
            "self",
            "analytics_id",
            "component",
            "stage",
            "sla_level"
          ],
          "returns": null,
          "docstring": "Start tracking analytics delivery against SLA.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 104
        },
        {
          "name": "record_delivery_success",
          "line_start": 321,
          "line_end": 354,
          "args": [
            "self",
            "tracking_id",
            "latency_ms",
            "additional_metrics"
          ],
          "returns": null,
          "docstring": "Record successful analytics delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 173
        },
        {
          "name": "record_delivery_failure",
          "line_start": 356,
          "line_end": 403,
          "args": [
            "self",
            "tracking_id",
            "error_message",
            "latency_ms"
          ],
          "returns": null,
          "docstring": "Record failed analytics delivery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 201
        },
        {
          "name": "_check_delivery_timeout",
          "line_start": 405,
          "line_end": 418,
          "args": [
            "self",
            "tracking_id"
          ],
          "returns": null,
          "docstring": "Check for delivery timeout and escalate if necessary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_save_metric_to_db",
          "line_start": 420,
          "line_end": 441,
          "args": [
            "self",
            "metric"
          ],
          "returns": null,
          "docstring": "Save SLA metric to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_check_sla_violations",
          "line_start": 443,
          "line_end": 467,
          "args": [
            "self",
            "metric",
            "sla_config"
          ],
          "returns": null,
          "docstring": "Check metric against SLA thresholds.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "_process_violation",
          "line_start": 469,
          "line_end": 480,
          "args": [
            "self",
            "violation"
          ],
          "returns": null,
          "docstring": "Process SLA violation and trigger escalation if needed.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_save_violation_to_db",
          "line_start": 482,
          "line_end": 508,
          "args": [
            "self",
            "violation"
          ],
          "returns": null,
          "docstring": "Save SLA violation to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "_check_escalation",
          "line_start": 510,
          "line_end": 517,
          "args": [
            "self",
            "violation"
          ],
          "returns": null,
          "docstring": "Check if violation needs escalation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 48
        },
        {
          "name": "_should_escalate",
          "line_start": 519,
          "line_end": 531,
          "args": [
            "self",
            "violation",
            "rule"
          ],
          "returns": null,
          "docstring": "Determine if violation should be escalated.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 77
        },
        {
          "name": "_escalate_violation",
          "line_start": 533,
          "line_end": 545,
          "args": [
            "self",
            "violation",
            "rule"
          ],
          "returns": null,
          "docstring": "Escalate violation according to rule.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 75
        },
        {
          "name": "_send_escalation_notifications",
          "line_start": 547,
          "line_end": 572,
          "args": [
            "self",
            "violation",
            "rule"
          ],
          "returns": null,
          "docstring": "Send escalation notifications.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 122
        },
        {
          "name": "_send_email",
          "line_start": 574,
          "line_end": 578,
          "args": [
            "self",
            "to_email",
            "subject",
            "body"
          ],
          "returns": null,
          "docstring": "Send email notification (placeholder implementation).",
          "is_async": false,
          "decorators": [],
          "complexity_score": 44
        },
        {
          "name": "_execute_auto_actions",
          "line_start": 580,
          "line_end": 598,
          "args": [
            "self",
            "violation",
            "rule"
          ],
          "returns": null,
          "docstring": "Execute automatic remediation actions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_restart_slow_components",
          "line_start": 600,
          "line_end": 602,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Restart slow components.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "_increase_resources",
          "line_start": 604,
          "line_end": 606,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Increase system resources.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "_activate_failover",
          "line_start": 608,
          "line_end": 610,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Activate failover systems.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "_scale_up_instances",
          "line_start": 612,
          "line_end": 614,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Scale up instances.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "_emergency_backup_activation",
          "line_start": 616,
          "line_end": 618,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Activate emergency backup systems.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 14
        },
        {
          "name": "start_monitoring",
          "line_start": 620,
          "line_end": 629,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start SLA monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_monitor_sla",
          "line_start": 631,
          "line_end": 648,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background SLA monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "_calculate_sla_performance",
          "line_start": 650,
          "line_end": 682,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate current SLA performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 192
        },
        {
          "name": "_check_ongoing_violations",
          "line_start": 684,
          "line_end": 693,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check ongoing violations for auto-resolution.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "_is_violation_resolved",
          "line_start": 695,
          "line_end": 721,
          "args": [
            "self",
            "violation"
          ],
          "returns": null,
          "docstring": "Check if violation conditions are resolved.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 163
        },
        {
          "name": "_generate_performance_reports",
          "line_start": 723,
          "line_end": 726,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Generate periodic performance reports.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 6
        },
        {
          "name": "get_sla_summary",
          "line_start": 728,
          "line_end": 789,
          "args": [
            "self",
            "sla_level"
          ],
          "returns": null,
          "docstring": "Get comprehensive SLA performance summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 424
        },
        {
          "name": "force_sla_check",
          "line_start": 791,
          "line_end": 794,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Force immediate SLA performance check.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "stop_monitoring",
          "line_start": 796,
          "line_end": 804,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop SLA monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "shutdown",
          "line_start": 806,
          "line_end": 808,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the SLA tracker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 11
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'dataclasses', 'json', 'logging', 'concurrent.futures', 'enum', 'threading', 'uuid', 'os', 'statistics', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 860,
      "complexity_score": 6292,
      "api_surface_area": 17,
      "docstring": "Analytics Delivery SLA Tracker with Automatic Escalation\n========================================================\n\nProvides ultra-reliability through comprehensive SLA tracking, automatic\nescalation, performance guarantees, and executive reporting.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0232558139534884,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_smart_cache.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_smart_cache.py",
      "component_name": "analytics_smart_cache",
      "analysis_timestamp": "2025-08-20 21:46:40.650274",
      "classes": [
        {
          "name": "CachePolicy",
          "line_start": 28,
          "line_end": 32,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "CacheLevel",
          "line_start": 34,
          "line_end": 37,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "CacheEntry",
          "line_start": 40,
          "line_end": 56,
          "base_classes": [],
          "methods": [
            {
              "name": "__post_init__",
              "line_start": 52,
              "line_end": 56,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            }
          ],
          "docstring": "Represents a cached data entry.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AccessPattern",
          "line_start": 59,
          "line_end": 69,
          "base_classes": [],
          "methods": [
            {
              "name": "__post_init__",
              "line_start": 67,
              "line_end": 69,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            }
          ],
          "docstring": "Tracks access patterns for predictive caching.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SmartAnalyticsCache",
          "line_start": 71,
          "line_end": 723,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 76,
              "line_end": 143,
              "args": [
                "self",
                "max_memory_size",
                "max_compressed_size",
                "cache_policy",
                "compression_threshold",
                "prediction_enabled"
              ],
              "returns": null,
              "docstring": "Initialize the smart cache system.\n\nArgs:\n    max_memory_size: Maximum L1 cache size in bytes\n    max_compressed_size: Maximum L2 cache size in bytes\n    cache_policy: Cache eviction policy\n    compression_threshold: Minimum size for compression\n    prediction_enabled: Enable predictive prefetching",
              "is_async": false,
              "decorators": [],
              "complexity_score": 221
            },
            {
              "name": "get",
              "line_start": 145,
              "line_end": 199,
              "args": [
                "self",
                "key",
                "default"
              ],
              "returns": null,
              "docstring": "Get data from cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 288
            },
            {
              "name": "put",
              "line_start": 201,
              "line_end": 245,
              "args": [
                "self",
                "key",
                "data",
                "ttl"
              ],
              "returns": null,
              "docstring": "Put data into cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 213
            },
            {
              "name": "invalidate",
              "line_start": 247,
              "line_end": 268,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Remove entry from cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "clear",
              "line_start": 270,
              "line_end": 280,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clear all cache levels.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "prefetch",
              "line_start": 282,
              "line_end": 296,
              "args": [
                "self",
                "keys",
                "data_loader"
              ],
              "returns": null,
              "docstring": "Prefetch data for specified keys.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 121
            },
            {
              "name": "get_cache_stats",
              "line_start": 298,
              "line_end": 334,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive cache statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 289
            },
            {
              "name": "get_cache_efficiency",
              "line_start": 336,
              "line_end": 397,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze cache efficiency and provide recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 315
            },
            {
              "name": "start_prediction_engine",
              "line_start": 399,
              "line_end": 408,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the predictive caching engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "stop_prediction_engine",
              "line_start": 410,
              "line_end": 416,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop the predictive caching engine.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_put_l1",
              "line_start": 418,
              "line_end": 425,
              "args": [
                "self",
                "key",
                "entry"
              ],
              "returns": null,
              "docstring": "Put entry in L1 cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_put_l2",
              "line_start": 427,
              "line_end": 434,
              "args": [
                "self",
                "key",
                "entry"
              ],
              "returns": null,
              "docstring": "Put entry in L2 cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            },
            {
              "name": "_evict_l1",
              "line_start": 436,
              "line_end": 470,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Evict entry from L1 cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 222
            },
            {
              "name": "_evict_l2",
              "line_start": 472,
              "line_end": 482,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Evict entry from L2 cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "_promote_to_l1",
              "line_start": 484,
              "line_end": 502,
              "args": [
                "self",
                "key",
                "data",
                "l2_entry"
              ],
              "returns": null,
              "docstring": "Promote an entry from L2 to L1.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_select_adaptive_eviction_candidate",
              "line_start": 504,
              "line_end": 519,
              "args": [
                "self",
                "cache"
              ],
              "returns": null,
              "docstring": "Select eviction candidate using adaptive policy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_record_access",
              "line_start": 521,
              "line_end": 540,
              "args": [
                "self",
                "key",
                "access_time"
              ],
              "returns": null,
              "docstring": "Record access pattern for prediction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 146
            },
            {
              "name": "_update_prediction_scores",
              "line_start": 542,
              "line_end": 551,
              "args": [
                "self",
                "key",
                "was_hit"
              ],
              "returns": null,
              "docstring": "Update prediction scores based on access outcomes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_trigger_prefetch_analysis",
              "line_start": 553,
              "line_end": 564,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Analyze if we should prefetch related data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_find_related_keys",
              "line_start": 566,
              "line_end": 584,
              "args": [
                "self",
                "key"
              ],
              "returns": null,
              "docstring": "Find keys that are often accessed together.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_prediction_loop",
              "line_start": 586,
              "line_end": 600,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main prediction loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 52
            },
            {
              "name": "_analyze_prediction_opportunities",
              "line_start": 602,
              "line_end": 620,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze access patterns to identify prediction opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "_adaptive_cache_sizing",
              "line_start": 622,
              "line_end": 649,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Adaptively adjust cache sizes based on performance.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 214
            },
            {
              "name": "_compress_data",
              "line_start": 651,
              "line_end": 654,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Compress data for L2 storage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "_decompress_data",
              "line_start": 656,
              "line_end": 659,
              "args": [
                "self",
                "compressed_data"
              ],
              "returns": null,
              "docstring": "Decompress data from L2 storage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "_calculate_size",
              "line_start": 661,
              "line_end": 676,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "docstring": "Calculate approximate size of data in bytes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "_calculate_performance_grade",
              "line_start": 678,
              "line_end": 695,
              "args": [
                "self",
                "efficiency_score"
              ],
              "returns": null,
              "docstring": "Calculate performance grade based on efficiency score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "_identify_cache_bottlenecks",
              "line_start": 697,
              "line_end": 717,
              "args": [
                "self",
                "stats"
              ],
              "returns": null,
              "docstring": "Identify performance bottlenecks in the cache system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "shutdown",
              "line_start": 719,
              "line_end": 723,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown the cache system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 24
            }
          ],
          "docstring": "Advanced caching system with multiple levels and predictive capabilities.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__post_init__",
          "line_start": 52,
          "line_end": 56,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "__post_init__",
          "line_start": 67,
          "line_end": 69,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "__init__",
          "line_start": 76,
          "line_end": 143,
          "args": [
            "self",
            "max_memory_size",
            "max_compressed_size",
            "cache_policy",
            "compression_threshold",
            "prediction_enabled"
          ],
          "returns": null,
          "docstring": "Initialize the smart cache system.\n\nArgs:\n    max_memory_size: Maximum L1 cache size in bytes\n    max_compressed_size: Maximum L2 cache size in bytes\n    cache_policy: Cache eviction policy\n    compression_threshold: Minimum size for compression\n    prediction_enabled: Enable predictive prefetching",
          "is_async": false,
          "decorators": [],
          "complexity_score": 221
        },
        {
          "name": "get",
          "line_start": 145,
          "line_end": 199,
          "args": [
            "self",
            "key",
            "default"
          ],
          "returns": null,
          "docstring": "Get data from cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 288
        },
        {
          "name": "put",
          "line_start": 201,
          "line_end": 245,
          "args": [
            "self",
            "key",
            "data",
            "ttl"
          ],
          "returns": null,
          "docstring": "Put data into cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 213
        },
        {
          "name": "invalidate",
          "line_start": 247,
          "line_end": 268,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Remove entry from cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "clear",
          "line_start": 270,
          "line_end": 280,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clear all cache levels.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "prefetch",
          "line_start": 282,
          "line_end": 296,
          "args": [
            "self",
            "keys",
            "data_loader"
          ],
          "returns": null,
          "docstring": "Prefetch data for specified keys.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 121
        },
        {
          "name": "get_cache_stats",
          "line_start": 298,
          "line_end": 334,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive cache statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 289
        },
        {
          "name": "get_cache_efficiency",
          "line_start": 336,
          "line_end": 397,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze cache efficiency and provide recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 315
        },
        {
          "name": "start_prediction_engine",
          "line_start": 399,
          "line_end": 408,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the predictive caching engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "stop_prediction_engine",
          "line_start": 410,
          "line_end": 416,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop the predictive caching engine.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_put_l1",
          "line_start": 418,
          "line_end": 425,
          "args": [
            "self",
            "key",
            "entry"
          ],
          "returns": null,
          "docstring": "Put entry in L1 cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_put_l2",
          "line_start": 427,
          "line_end": 434,
          "args": [
            "self",
            "key",
            "entry"
          ],
          "returns": null,
          "docstring": "Put entry in L2 cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        },
        {
          "name": "_evict_l1",
          "line_start": 436,
          "line_end": 470,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Evict entry from L1 cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 222
        },
        {
          "name": "_evict_l2",
          "line_start": 472,
          "line_end": 482,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Evict entry from L2 cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "_promote_to_l1",
          "line_start": 484,
          "line_end": 502,
          "args": [
            "self",
            "key",
            "data",
            "l2_entry"
          ],
          "returns": null,
          "docstring": "Promote an entry from L2 to L1.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_select_adaptive_eviction_candidate",
          "line_start": 504,
          "line_end": 519,
          "args": [
            "self",
            "cache"
          ],
          "returns": null,
          "docstring": "Select eviction candidate using adaptive policy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_record_access",
          "line_start": 521,
          "line_end": 540,
          "args": [
            "self",
            "key",
            "access_time"
          ],
          "returns": null,
          "docstring": "Record access pattern for prediction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 146
        },
        {
          "name": "_update_prediction_scores",
          "line_start": 542,
          "line_end": 551,
          "args": [
            "self",
            "key",
            "was_hit"
          ],
          "returns": null,
          "docstring": "Update prediction scores based on access outcomes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_trigger_prefetch_analysis",
          "line_start": 553,
          "line_end": 564,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Analyze if we should prefetch related data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_find_related_keys",
          "line_start": 566,
          "line_end": 584,
          "args": [
            "self",
            "key"
          ],
          "returns": null,
          "docstring": "Find keys that are often accessed together.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_prediction_loop",
          "line_start": 586,
          "line_end": 600,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main prediction loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 52
        },
        {
          "name": "_analyze_prediction_opportunities",
          "line_start": 602,
          "line_end": 620,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze access patterns to identify prediction opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "_adaptive_cache_sizing",
          "line_start": 622,
          "line_end": 649,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Adaptively adjust cache sizes based on performance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 214
        },
        {
          "name": "_compress_data",
          "line_start": 651,
          "line_end": 654,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Compress data for L2 storage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "_decompress_data",
          "line_start": 656,
          "line_end": 659,
          "args": [
            "self",
            "compressed_data"
          ],
          "returns": null,
          "docstring": "Decompress data from L2 storage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "_calculate_size",
          "line_start": 661,
          "line_end": 676,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "docstring": "Calculate approximate size of data in bytes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "_calculate_performance_grade",
          "line_start": 678,
          "line_end": 695,
          "args": [
            "self",
            "efficiency_score"
          ],
          "returns": null,
          "docstring": "Calculate performance grade based on efficiency score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "_identify_cache_bottlenecks",
          "line_start": 697,
          "line_end": 717,
          "args": [
            "self",
            "stats"
          ],
          "returns": null,
          "docstring": "Identify performance bottlenecks in the cache system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "shutdown",
          "line_start": 719,
          "line_end": 723,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown the cache system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Tuple",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque",
            "OrderedDict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "zlib",
          "names": [
            "zlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'zlib', 'json', 'logging', 'pickle', 'enum', 'asyncio', 'threading', 'hashlib', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 723,
      "complexity_score": 7338,
      "api_surface_area": 20,
      "docstring": "Smart Analytics Cache System\n============================\n\nAdvanced caching system with predictive prefetching, intelligent eviction,\nand adaptive cache sizing based on usage patterns.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9166666666666666,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_streaming.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_streaming.py",
      "component_name": "analytics_streaming",
      "analysis_timestamp": "2025-08-20 21:46:40.659728",
      "classes": [
        {
          "name": "AnalyticsStreamManager",
          "line_start": 24,
          "line_end": 366,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 29,
              "line_end": 69,
              "args": [
                "self",
                "analytics_aggregator",
                "stream_interval"
              ],
              "returns": null,
              "docstring": "Initialize the analytics stream manager.\n\nArgs:\n    analytics_aggregator: The analytics aggregator instance\n    stream_interval: Streaming interval in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "start_streaming",
              "line_start": 71,
              "line_end": 81,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the analytics streaming service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "stop_streaming",
              "line_start": 83,
              "line_end": 97,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop the analytics streaming service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "add_client",
              "line_start": 99,
              "line_end": 145,
              "args": [
                "self",
                "client_id",
                "websocket",
                "subscriptions"
              ],
              "returns": null,
              "docstring": "Add a client to the streaming service.\n\nArgs:\n    client_id: Unique client identifier\n    websocket: WebSocket connection (if available)\n    subscriptions: List of metric types to subscribe to",
              "is_async": false,
              "decorators": [],
              "complexity_score": 196
            },
            {
              "name": "remove_client",
              "line_start": 147,
              "line_end": 153,
              "args": [
                "self",
                "client_id"
              ],
              "returns": null,
              "docstring": "Remove a client from the streaming service.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "subscribe_client",
              "line_start": 155,
              "line_end": 168,
              "args": [
                "self",
                "client_id",
                "metric_types"
              ],
              "returns": null,
              "docstring": "Subscribe a client to specific metric types.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 80
            },
            {
              "name": "stream_analytics_update",
              "line_start": 170,
              "line_end": 198,
              "args": [
                "self",
                "analytics_data",
                "metric_type"
              ],
              "returns": null,
              "docstring": "Stream an analytics update to subscribed clients.\n\nArgs:\n    analytics_data: The analytics data to stream\n    metric_type: Type of metrics being streamed",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "add_data_transformer",
              "line_start": 200,
              "line_end": 202,
              "args": [
                "self",
                "transformer"
              ],
              "returns": null,
              "docstring": "Add a data transformation function to the pipeline.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "add_stream_filter",
              "line_start": 204,
              "line_end": 206,
              "args": [
                "self",
                "filter_func"
              ],
              "returns": null,
              "docstring": "Add a stream filter function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "get_stream_stats",
              "line_start": 208,
              "line_end": 222,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get streaming statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_streaming_loop",
              "line_start": 224,
              "line_end": 267,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main streaming loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 194
            },
            {
              "name": "_get_streaming_analytics",
              "line_start": 269,
              "line_end": 298,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get lightweight analytics optimized for streaming.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "_transform_data",
              "line_start": 300,
              "line_end": 310,
              "args": [
                "self",
                "data",
                "metric_type"
              ],
              "returns": null,
              "docstring": "Apply data transformations to the analytics data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "_broadcast_message",
              "line_start": 312,
              "line_end": 331,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "docstring": "Broadcast a message to all connected clients.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_client_subscribed_to_message",
              "line_start": 333,
              "line_end": 346,
              "args": [
                "self",
                "client_id",
                "message"
              ],
              "returns": null,
              "docstring": "Check if a client is subscribed to receive a message.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_send_to_client",
              "line_start": 348,
              "line_end": 366,
              "args": [
                "self",
                "client_id",
                "message",
                "message_str"
              ],
              "returns": null,
              "docstring": "Send a message to a specific client.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 124
            }
          ],
          "docstring": "Manages real-time analytics streaming to connected clients.",
          "decorators": []
        },
        {
          "name": "AnalyticsStreamIntegrator",
          "line_start": 369,
          "line_end": 425,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 374,
              "line_end": 388,
              "args": [
                "self",
                "analytics_aggregator",
                "stream_manager"
              ],
              "returns": null,
              "docstring": "Initialize the stream integrator.\n\nArgs:\n    analytics_aggregator: The analytics aggregator instance\n    stream_manager: The stream manager instance",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_setup_streaming_hooks",
              "line_start": 390,
              "line_end": 407,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Set up hooks to automatically stream analytics updates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_hook_method",
              "line_start": 409,
              "line_end": 425,
              "args": [
                "self",
                "method_name",
                "metric_type"
              ],
              "returns": null,
              "docstring": "Hook a specific method for streaming.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            }
          ],
          "docstring": "Integrates the streaming system with the analytics aggregator.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "compress_analytics_for_streaming",
          "line_start": 429,
          "line_end": 437,
          "args": [
            "data",
            "metric_type"
          ],
          "returns": null,
          "docstring": "Compress analytics data for efficient streaming.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "add_streaming_metadata",
          "line_start": 439,
          "line_end": 448,
          "args": [
            "data",
            "metric_type"
          ],
          "returns": null,
          "docstring": "Add streaming-specific metadata to analytics data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        },
        {
          "name": "__init__",
          "line_start": 29,
          "line_end": 69,
          "args": [
            "self",
            "analytics_aggregator",
            "stream_interval"
          ],
          "returns": null,
          "docstring": "Initialize the analytics stream manager.\n\nArgs:\n    analytics_aggregator: The analytics aggregator instance\n    stream_interval: Streaming interval in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "start_streaming",
          "line_start": 71,
          "line_end": 81,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the analytics streaming service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "stop_streaming",
          "line_start": 83,
          "line_end": 97,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop the analytics streaming service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "add_client",
          "line_start": 99,
          "line_end": 145,
          "args": [
            "self",
            "client_id",
            "websocket",
            "subscriptions"
          ],
          "returns": null,
          "docstring": "Add a client to the streaming service.\n\nArgs:\n    client_id: Unique client identifier\n    websocket: WebSocket connection (if available)\n    subscriptions: List of metric types to subscribe to",
          "is_async": false,
          "decorators": [],
          "complexity_score": 196
        },
        {
          "name": "remove_client",
          "line_start": 147,
          "line_end": 153,
          "args": [
            "self",
            "client_id"
          ],
          "returns": null,
          "docstring": "Remove a client from the streaming service.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "subscribe_client",
          "line_start": 155,
          "line_end": 168,
          "args": [
            "self",
            "client_id",
            "metric_types"
          ],
          "returns": null,
          "docstring": "Subscribe a client to specific metric types.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 80
        },
        {
          "name": "stream_analytics_update",
          "line_start": 170,
          "line_end": 198,
          "args": [
            "self",
            "analytics_data",
            "metric_type"
          ],
          "returns": null,
          "docstring": "Stream an analytics update to subscribed clients.\n\nArgs:\n    analytics_data: The analytics data to stream\n    metric_type: Type of metrics being streamed",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "add_data_transformer",
          "line_start": 200,
          "line_end": 202,
          "args": [
            "self",
            "transformer"
          ],
          "returns": null,
          "docstring": "Add a data transformation function to the pipeline.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "add_stream_filter",
          "line_start": 204,
          "line_end": 206,
          "args": [
            "self",
            "filter_func"
          ],
          "returns": null,
          "docstring": "Add a stream filter function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "get_stream_stats",
          "line_start": 208,
          "line_end": 222,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get streaming statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_streaming_loop",
          "line_start": 224,
          "line_end": 267,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main streaming loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 194
        },
        {
          "name": "_get_streaming_analytics",
          "line_start": 269,
          "line_end": 298,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get lightweight analytics optimized for streaming.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "_transform_data",
          "line_start": 300,
          "line_end": 310,
          "args": [
            "self",
            "data",
            "metric_type"
          ],
          "returns": null,
          "docstring": "Apply data transformations to the analytics data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "_broadcast_message",
          "line_start": 312,
          "line_end": 331,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "docstring": "Broadcast a message to all connected clients.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_client_subscribed_to_message",
          "line_start": 333,
          "line_end": 346,
          "args": [
            "self",
            "client_id",
            "message"
          ],
          "returns": null,
          "docstring": "Check if a client is subscribed to receive a message.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_send_to_client",
          "line_start": 348,
          "line_end": 366,
          "args": [
            "self",
            "client_id",
            "message",
            "message_str"
          ],
          "returns": null,
          "docstring": "Send a message to a specific client.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 124
        },
        {
          "name": "__init__",
          "line_start": 374,
          "line_end": 388,
          "args": [
            "self",
            "analytics_aggregator",
            "stream_manager"
          ],
          "returns": null,
          "docstring": "Initialize the stream integrator.\n\nArgs:\n    analytics_aggregator: The analytics aggregator instance\n    stream_manager: The stream manager instance",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_setup_streaming_hooks",
          "line_start": 390,
          "line_end": 407,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Set up hooks to automatically stream analytics updates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_hook_method",
          "line_start": 409,
          "line_end": 425,
          "args": [
            "self",
            "method_name",
            "metric_type"
          ],
          "returns": null,
          "docstring": "Hook a specific method for streaming.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "streaming_wrapper",
          "line_start": 395,
          "line_end": 399,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "streaming_wrapper",
          "line_start": 414,
          "line_end": 423,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 83
        }
      ],
      "imports": [
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "weakref",
          "names": [
            "weakref"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        }
      ],
      "external_dependencies": "{'weakref', 'typing', 'time', 'json', 'logging', 'threading', 'queue', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 448,
      "complexity_score": 4036,
      "api_surface_area": 22,
      "docstring": "Analytics Streaming Engine\n=========================\n\nReal-time analytics streaming with WebSocket support for live dashboard updates.\nProvides continuous data flow to ensure analytics reach the dashboard instantly.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.96,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_telemetry.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_telemetry.py",
      "component_name": "analytics_telemetry",
      "analysis_timestamp": "2025-08-20 21:46:40.668317",
      "classes": [
        {
          "name": "TelemetryLevel",
          "line_start": 28,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "TraceType",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "TelemetryEvent",
          "line_start": 43,
          "line_end": 58,
          "base_classes": [],
          "methods": [],
          "docstring": "Structured telemetry event.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "Span",
          "line_start": 61,
          "line_end": 74,
          "base_classes": [],
          "methods": [],
          "docstring": "Distributed tracing span.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "MetricPoint",
          "line_start": 77,
          "line_end": 84,
          "base_classes": [],
          "methods": [],
          "docstring": "Time-series metric point.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsTelemetryCollector",
          "line_start": 86,
          "line_end": 652,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 91,
              "line_end": 158,
              "args": [
                "self",
                "service_name",
                "export_interval",
                "max_events",
                "enable_tracing",
                "enable_metrics"
              ],
              "returns": null,
              "docstring": "Initialize analytics telemetry collector.\n\nArgs:\n    service_name: Name of the service\n    export_interval: Interval for exporting telemetry data\n    max_events: Maximum events to keep in memory\n    enable_tracing: Enable distributed tracing\n    enable_metrics: Enable metrics collection",
              "is_async": false,
              "decorators": [],
              "complexity_score": 235
            },
            {
              "name": "start_collection",
              "line_start": 160,
              "line_end": 174,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start telemetry collection and export.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "stop_collection",
              "line_start": 176,
              "line_end": 188,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop telemetry collection.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 55
            },
            {
              "name": "record_event",
              "line_start": 190,
              "line_end": 250,
              "args": [
                "self",
                "level",
                "component",
                "operation",
                "message",
                "duration_ms",
                "attributes",
                "metrics",
                "error"
              ],
              "returns": null,
              "docstring": "Record a telemetry event.\n\nArgs:\n    level: Severity level\n    component: Component name\n    operation: Operation name\n    message: Event message\n    duration_ms: Operation duration in milliseconds\n    attributes: Additional attributes\n    metrics: Associated metrics\n    error: Error information\n\nReturns:\n    Event ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 250
            },
            {
              "name": "start_span",
              "line_start": 252,
              "line_end": 298,
              "args": [
                "self",
                "operation_name",
                "component",
                "parent_span_id",
                "attributes"
              ],
              "returns": null,
              "docstring": "Start a new distributed tracing span.\n\nArgs:\n    operation_name: Name of the operation\n    component: Component performing the operation\n    parent_span_id: ID of parent span\n    attributes: Initial span attributes\n\nReturns:\n    Span ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "end_span",
              "line_start": 300,
              "line_end": 329,
              "args": [
                "self",
                "span_id",
                "status",
                "attributes"
              ],
              "returns": null,
              "docstring": "End a distributed tracing span.\n\nArgs:\n    span_id: ID of span to end\n    status: Final status (ok, error, timeout, cancelled)\n    attributes: Final attributes to add",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "record_metric",
              "line_start": 331,
              "line_end": 360,
              "args": [
                "self",
                "name",
                "value",
                "labels",
                "unit",
                "metric_type"
              ],
              "returns": null,
              "docstring": "Record a metric point.\n\nArgs:\n    name: Metric name\n    value: Metric value\n    labels: Metric labels\n    unit: Unit of measurement\n    metric_type: Type of metric",
              "is_async": false,
              "decorators": [],
              "complexity_score": 131
            },
            {
              "name": "add_span_link",
              "line_start": 362,
              "line_end": 371,
              "args": [
                "self",
                "span_id",
                "linked_trace_id",
                "linked_span_id",
                "attributes"
              ],
              "returns": null,
              "docstring": "Add a link to another span.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "get_current_trace_id",
              "line_start": 373,
              "line_end": 375,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current trace ID.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "get_current_span_id",
              "line_start": 377,
              "line_end": 379,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current span ID.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 21
            },
            {
              "name": "add_event_exporter",
              "line_start": 381,
              "line_end": 383,
              "args": [
                "self",
                "exporter"
              ],
              "returns": null,
              "docstring": "Add an event exporter function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "add_span_exporter",
              "line_start": 385,
              "line_end": 387,
              "args": [
                "self",
                "exporter"
              ],
              "returns": null,
              "docstring": "Add a span exporter function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 31
            },
            {
              "name": "add_metric_exporter",
              "line_start": 389,
              "line_end": 391,
              "args": [
                "self",
                "exporter"
              ],
              "returns": null,
              "docstring": "Add a metric exporter function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_should_sample",
              "line_start": 393,
              "line_end": 399,
              "args": [
                "self",
                "level"
              ],
              "returns": null,
              "docstring": "Determine if event should be sampled.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            },
            {
              "name": "_collection_loop",
              "line_start": 401,
              "line_end": 428,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background collection loop for system metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 161
            },
            {
              "name": "_export_loop",
              "line_start": 430,
              "line_end": 438,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background export loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 51
            },
            {
              "name": "_export_telemetry_data",
              "line_start": 440,
              "line_end": 474,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Export collected telemetry data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 187
            },
            {
              "name": "_setup_default_exporters",
              "line_start": 476,
              "line_end": 562,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default file-based exporters.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 592
            },
            {
              "name": "get_telemetry_summary",
              "line_start": 564,
              "line_end": 604,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get telemetry system summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 283
            },
            {
              "name": "get_recent_events",
              "line_start": 606,
              "line_end": 615,
              "args": [
                "self",
                "limit",
                "level"
              ],
              "returns": null,
              "docstring": "Get recent events, optionally filtered by level.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "get_trace_spans",
              "line_start": 617,
              "line_end": 633,
              "args": [
                "self",
                "trace_id"
              ],
              "returns": null,
              "docstring": "Get all spans for a specific trace.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 87
            },
            {
              "name": "get_metric_values",
              "line_start": 635,
              "line_end": 642,
              "args": [
                "self",
                "metric_name",
                "hours"
              ],
              "returns": null,
              "docstring": "Get metric values for the specified time period.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "shutdown",
              "line_start": 644,
              "line_end": 652,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown telemetry system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 41
            }
          ],
          "docstring": "Comprehensive telemetry and observability system for analytics.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "traced_operation",
          "line_start": 655,
          "line_end": 680,
          "args": [
            "operation_name",
            "component"
          ],
          "returns": null,
          "docstring": "Decorator to automatically trace an operation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "__init__",
          "line_start": 91,
          "line_end": 158,
          "args": [
            "self",
            "service_name",
            "export_interval",
            "max_events",
            "enable_tracing",
            "enable_metrics"
          ],
          "returns": null,
          "docstring": "Initialize analytics telemetry collector.\n\nArgs:\n    service_name: Name of the service\n    export_interval: Interval for exporting telemetry data\n    max_events: Maximum events to keep in memory\n    enable_tracing: Enable distributed tracing\n    enable_metrics: Enable metrics collection",
          "is_async": false,
          "decorators": [],
          "complexity_score": 235
        },
        {
          "name": "start_collection",
          "line_start": 160,
          "line_end": 174,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start telemetry collection and export.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "stop_collection",
          "line_start": 176,
          "line_end": 188,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop telemetry collection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 55
        },
        {
          "name": "record_event",
          "line_start": 190,
          "line_end": 250,
          "args": [
            "self",
            "level",
            "component",
            "operation",
            "message",
            "duration_ms",
            "attributes",
            "metrics",
            "error"
          ],
          "returns": null,
          "docstring": "Record a telemetry event.\n\nArgs:\n    level: Severity level\n    component: Component name\n    operation: Operation name\n    message: Event message\n    duration_ms: Operation duration in milliseconds\n    attributes: Additional attributes\n    metrics: Associated metrics\n    error: Error information\n\nReturns:\n    Event ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 250
        },
        {
          "name": "start_span",
          "line_start": 252,
          "line_end": 298,
          "args": [
            "self",
            "operation_name",
            "component",
            "parent_span_id",
            "attributes"
          ],
          "returns": null,
          "docstring": "Start a new distributed tracing span.\n\nArgs:\n    operation_name: Name of the operation\n    component: Component performing the operation\n    parent_span_id: ID of parent span\n    attributes: Initial span attributes\n\nReturns:\n    Span ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "end_span",
          "line_start": 300,
          "line_end": 329,
          "args": [
            "self",
            "span_id",
            "status",
            "attributes"
          ],
          "returns": null,
          "docstring": "End a distributed tracing span.\n\nArgs:\n    span_id: ID of span to end\n    status: Final status (ok, error, timeout, cancelled)\n    attributes: Final attributes to add",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "record_metric",
          "line_start": 331,
          "line_end": 360,
          "args": [
            "self",
            "name",
            "value",
            "labels",
            "unit",
            "metric_type"
          ],
          "returns": null,
          "docstring": "Record a metric point.\n\nArgs:\n    name: Metric name\n    value: Metric value\n    labels: Metric labels\n    unit: Unit of measurement\n    metric_type: Type of metric",
          "is_async": false,
          "decorators": [],
          "complexity_score": 131
        },
        {
          "name": "add_span_link",
          "line_start": 362,
          "line_end": 371,
          "args": [
            "self",
            "span_id",
            "linked_trace_id",
            "linked_span_id",
            "attributes"
          ],
          "returns": null,
          "docstring": "Add a link to another span.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "get_current_trace_id",
          "line_start": 373,
          "line_end": 375,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current trace ID.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "get_current_span_id",
          "line_start": 377,
          "line_end": 379,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current span ID.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 21
        },
        {
          "name": "add_event_exporter",
          "line_start": 381,
          "line_end": 383,
          "args": [
            "self",
            "exporter"
          ],
          "returns": null,
          "docstring": "Add an event exporter function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "add_span_exporter",
          "line_start": 385,
          "line_end": 387,
          "args": [
            "self",
            "exporter"
          ],
          "returns": null,
          "docstring": "Add a span exporter function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 31
        },
        {
          "name": "add_metric_exporter",
          "line_start": 389,
          "line_end": 391,
          "args": [
            "self",
            "exporter"
          ],
          "returns": null,
          "docstring": "Add a metric exporter function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_should_sample",
          "line_start": 393,
          "line_end": 399,
          "args": [
            "self",
            "level"
          ],
          "returns": null,
          "docstring": "Determine if event should be sampled.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "_collection_loop",
          "line_start": 401,
          "line_end": 428,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background collection loop for system metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 161
        },
        {
          "name": "_export_loop",
          "line_start": 430,
          "line_end": 438,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background export loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 51
        },
        {
          "name": "_export_telemetry_data",
          "line_start": 440,
          "line_end": 474,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Export collected telemetry data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 187
        },
        {
          "name": "_setup_default_exporters",
          "line_start": 476,
          "line_end": 562,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default file-based exporters.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 592
        },
        {
          "name": "get_telemetry_summary",
          "line_start": 564,
          "line_end": 604,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get telemetry system summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 283
        },
        {
          "name": "get_recent_events",
          "line_start": 606,
          "line_end": 615,
          "args": [
            "self",
            "limit",
            "level"
          ],
          "returns": null,
          "docstring": "Get recent events, optionally filtered by level.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "get_trace_spans",
          "line_start": 617,
          "line_end": 633,
          "args": [
            "self",
            "trace_id"
          ],
          "returns": null,
          "docstring": "Get all spans for a specific trace.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 87
        },
        {
          "name": "get_metric_values",
          "line_start": 635,
          "line_end": 642,
          "args": [
            "self",
            "metric_name",
            "hours"
          ],
          "returns": null,
          "docstring": "Get metric values for the specified time period.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "shutdown",
          "line_start": 644,
          "line_end": 652,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown telemetry system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 41
        },
        {
          "name": "decorator",
          "line_start": 657,
          "line_end": 679,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 144
        },
        {
          "name": "json_event_exporter",
          "line_start": 481,
          "line_end": 503,
          "args": [
            "events"
          ],
          "returns": null,
          "docstring": "Export events to JSON file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "json_span_exporter",
          "line_start": 505,
          "line_end": 526,
          "args": [
            "spans"
          ],
          "returns": null,
          "docstring": "Export spans to JSON file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "prometheus_metric_exporter",
          "line_start": 528,
          "line_end": 557,
          "args": [
            "metrics"
          ],
          "returns": null,
          "docstring": "Export metrics in Prometheus format.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 243
        },
        {
          "name": "wrapper",
          "line_start": 658,
          "line_end": 678,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "uuid",
          "names": [
            "uuid"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "socket",
          "names": [
            "socket"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "random",
          "names": [
            "random"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 398
        }
      ],
      "external_dependencies": "{'random', 'psutil', 'typing', 'dataclasses', 'time', 'socket', 'json', 'logging', 'enum', 'threading', 'uuid', 'os', 'queue', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 680,
      "complexity_score": 6763,
      "api_surface_area": 40,
      "docstring": "Analytics Telemetry and Observability System\n===========================================\n\nComprehensive telemetry collection, distributed tracing, and observability\nfor the analytics system with OpenTelemetry integration and metrics export.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9142857142857143,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_validator.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_validator.py",
      "component_name": "analytics_validator",
      "analysis_timestamp": "2025-08-20 21:46:40.677317",
      "classes": [
        {
          "name": "AnalyticsValidator",
          "line_start": 20,
          "line_end": 356,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 25,
              "line_end": 48,
              "args": [
                "self",
                "history_window"
              ],
              "returns": null,
              "docstring": "Initialize the analytics validator.\n\nArgs:\n    history_window: Number of historical data points to keep for validation",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            },
            {
              "name": "validate_performance_metrics",
              "line_start": 50,
              "line_end": 99,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Validate performance metrics for consistency and anomalies.\n\nArgs:\n    metrics: Performance metrics to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 334
            },
            {
              "name": "validate_test_metrics",
              "line_start": 101,
              "line_end": 146,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Validate test metrics for consistency.\n\nArgs:\n    metrics: Test metrics to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 297
            },
            {
              "name": "validate_system_metrics",
              "line_start": 148,
              "line_end": 202,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Validate system metrics for consistency.\n\nArgs:\n    metrics: System metrics to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 383
            },
            {
              "name": "_detect_performance_anomalies",
              "line_start": 204,
              "line_end": 251,
              "args": [
                "self",
                "current_metrics"
              ],
              "returns": null,
              "docstring": "Detect anomalies in performance metrics based on historical data.\n\nArgs:\n    current_metrics: Current metrics to check\n    \nReturns:\n    List of detected anomalies",
              "is_async": false,
              "decorators": [],
              "complexity_score": 340
            },
            {
              "name": "validate_comprehensive_analytics",
              "line_start": 253,
              "line_end": 304,
              "args": [
                "self",
                "analytics"
              ],
              "returns": null,
              "docstring": "Validate a complete analytics payload.\n\nArgs:\n    analytics: Complete analytics data\n    \nReturns:\n    Tuple of (is_valid, dict_of_issues_by_category)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 328
            },
            {
              "name": "get_data_quality_report",
              "line_start": 306,
              "line_end": 345,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get a comprehensive data quality report.\n\nReturns:\n    Data quality report with statistics and recommendations",
              "is_async": false,
              "decorators": [],
              "complexity_score": 167
            },
            {
              "name": "reset_validation_stats",
              "line_start": 347,
              "line_end": 356,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Reset validation statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            }
          ],
          "docstring": "Validates analytics data for quality, consistency, and anomalies.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 25,
          "line_end": 48,
          "args": [
            "self",
            "history_window"
          ],
          "returns": null,
          "docstring": "Initialize the analytics validator.\n\nArgs:\n    history_window: Number of historical data points to keep for validation",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        },
        {
          "name": "validate_performance_metrics",
          "line_start": 50,
          "line_end": 99,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Validate performance metrics for consistency and anomalies.\n\nArgs:\n    metrics: Performance metrics to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 334
        },
        {
          "name": "validate_test_metrics",
          "line_start": 101,
          "line_end": 146,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Validate test metrics for consistency.\n\nArgs:\n    metrics: Test metrics to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 297
        },
        {
          "name": "validate_system_metrics",
          "line_start": 148,
          "line_end": 202,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Validate system metrics for consistency.\n\nArgs:\n    metrics: System metrics to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 383
        },
        {
          "name": "_detect_performance_anomalies",
          "line_start": 204,
          "line_end": 251,
          "args": [
            "self",
            "current_metrics"
          ],
          "returns": null,
          "docstring": "Detect anomalies in performance metrics based on historical data.\n\nArgs:\n    current_metrics: Current metrics to check\n    \nReturns:\n    List of detected anomalies",
          "is_async": false,
          "decorators": [],
          "complexity_score": 340
        },
        {
          "name": "validate_comprehensive_analytics",
          "line_start": 253,
          "line_end": 304,
          "args": [
            "self",
            "analytics"
          ],
          "returns": null,
          "docstring": "Validate a complete analytics payload.\n\nArgs:\n    analytics: Complete analytics data\n    \nReturns:\n    Tuple of (is_valid, dict_of_issues_by_category)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 328
        },
        {
          "name": "get_data_quality_report",
          "line_start": 306,
          "line_end": 345,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get a comprehensive data quality report.\n\nReturns:\n    Data quality report with statistics and recommendations",
          "is_async": false,
          "decorators": [],
          "complexity_score": 167
        },
        {
          "name": "reset_validation_stats",
          "line_start": 347,
          "line_end": 356,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Reset validation statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        }
      ],
      "external_dependencies": "{'typing', 'time', 'logging', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 356,
      "complexity_score": 3898,
      "api_surface_area": 12,
      "docstring": "Analytics Data Validator\n========================\n\nValidates and ensures quality of analytics data before storage and processing.\nProvides data integrity checks and anomaly detection.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.1111111111111112,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\analytics_watchdog.py": {
      "file_path": "dashboard\\dashboard_core\\analytics_watchdog.py",
      "component_name": "analytics_watchdog",
      "analysis_timestamp": "2025-08-20 21:46:40.687376",
      "classes": [
        {
          "name": "WatchdogAction",
          "line_start": 27,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "ComponentState",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": null,
          "decorators": []
        },
        {
          "name": "WatchdogRule",
          "line_start": 43,
          "line_end": 53,
          "base_classes": [],
          "methods": [],
          "docstring": "Defines a watchdog monitoring rule.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ComponentHealth",
          "line_start": 56,
          "line_end": 66,
          "base_classes": [],
          "methods": [],
          "docstring": "Health status of a monitored component.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AnalyticsWatchdog",
          "line_start": 68,
          "line_end": 674,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 73,
              "line_end": 127,
              "args": [
                "self",
                "check_interval",
                "max_restart_attempts"
              ],
              "returns": null,
              "docstring": "Initialize analytics watchdog.\n\nArgs:\n    check_interval: Default interval between health checks in seconds\n    max_restart_attempts: Maximum restart attempts before giving up",
              "is_async": false,
              "decorators": [],
              "complexity_score": 179
            },
            {
              "name": "register_component",
              "line_start": 129,
              "line_end": 181,
              "args": [
                "self",
                "component_name",
                "component_instance",
                "check_function",
                "failure_threshold",
                "restart_action",
                "is_critical"
              ],
              "returns": null,
              "docstring": "Register a component for watchdog monitoring.\n\nArgs:\n    component_name: Name of the component\n    component_instance: Instance of the component\n    check_function: Custom health check function\n    failure_threshold: Number of failures before taking action\n    restart_action: Action to take on failure\n    is_critical: Whether component is critical to system operation",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "register_process",
              "line_start": 183,
              "line_end": 203,
              "args": [
                "self",
                "process_name",
                "process_id",
                "command_line",
                "working_directory"
              ],
              "returns": null,
              "docstring": "Register a process for monitoring and auto-restart.\n\nArgs:\n    process_name: Name identifier for the process\n    process_id: Process ID (if known)\n    command_line: Command to restart the process\n    working_directory: Working directory for the process",
              "is_async": false,
              "decorators": [],
              "complexity_score": 60
            },
            {
              "name": "start_monitoring",
              "line_start": 205,
              "line_end": 219,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start watchdog monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "stop_monitoring",
              "line_start": 221,
              "line_end": 230,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop watchdog monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "check_component_health",
              "line_start": 232,
              "line_end": 284,
              "args": [
                "self",
                "component_name"
              ],
              "returns": null,
              "docstring": "Manually check health of a specific component.\n\nArgs:\n    component_name: Name of component to check\n\nReturns:\n    Component health status",
              "is_async": false,
              "decorators": [],
              "complexity_score": 243
            },
            {
              "name": "restart_component",
              "line_start": 286,
              "line_end": 360,
              "args": [
                "self",
                "component_name",
                "force"
              ],
              "returns": null,
              "docstring": "Restart a specific component.\n\nArgs:\n    component_name: Name of component to restart\n    force: Whether to force restart even if not failed\n\nReturns:\n    True if restart was successful",
              "is_async": false,
              "decorators": [],
              "complexity_score": 352
            },
            {
              "name": "_monitoring_loop",
              "line_start": 362,
              "line_end": 385,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "_process_monitoring_loop",
              "line_start": 387,
              "line_end": 400,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Monitor registered processes.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_check_process_health",
              "line_start": 402,
              "line_end": 431,
              "args": [
                "self",
                "process_name",
                "process_info"
              ],
              "returns": null,
              "docstring": "Check health of a monitored process.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "_restart_process",
              "line_start": 433,
              "line_end": 464,
              "args": [
                "self",
                "process_name",
                "command_line",
                "working_directory"
              ],
              "returns": null,
              "docstring": "Restart a process using command line.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 168
            },
            {
              "name": "_handle_component_failure",
              "line_start": 466,
              "line_end": 488,
              "args": [
                "self",
                "component_name"
              ],
              "returns": null,
              "docstring": "Handle component failure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 150
            },
            {
              "name": "_execute_restart_action",
              "line_start": 490,
              "line_end": 517,
              "args": [
                "self",
                "component_name",
                "action"
              ],
              "returns": null,
              "docstring": "Execute restart action for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_graceful_shutdown_component",
              "line_start": 519,
              "line_end": 529,
              "args": [
                "self",
                "component_name"
              ],
              "returns": null,
              "docstring": "Gracefully shutdown a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "_check_cascade_failures",
              "line_start": 531,
              "line_end": 545,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Check for cascade failure patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_handle_cascade_failure",
              "line_start": 547,
              "line_end": 555,
              "args": [
                "self",
                "failed_components"
              ],
              "returns": null,
              "docstring": "Handle cascade failure situation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 47
            },
            {
              "name": "_setup_default_health_checks",
              "line_start": 557,
              "line_end": 577,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Setup default health check functions.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 73
            },
            {
              "name": "_create_default_health_check",
              "line_start": 579,
              "line_end": 598,
              "args": [
                "self",
                "component_instance"
              ],
              "returns": null,
              "docstring": "Create default health check for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            },
            {
              "name": "_collect_component_metrics",
              "line_start": 600,
              "line_end": 620,
              "args": [
                "self",
                "component_name"
              ],
              "returns": null,
              "docstring": "Collect metrics for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "add_restart_callback",
              "line_start": 622,
              "line_end": 624,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add callback for component restart events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "add_failure_callback",
              "line_start": 626,
              "line_end": 628,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add callback for component failure events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 29
            },
            {
              "name": "add_recovery_callback",
              "line_start": 630,
              "line_end": 632,
              "args": [
                "self",
                "callback"
              ],
              "returns": null,
              "docstring": "Add callback for component recovery events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "add_custom_recovery_action",
              "line_start": 634,
              "line_end": 636,
              "args": [
                "self",
                "component_name",
                "action"
              ],
              "returns": null,
              "docstring": "Add custom recovery action for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 30
            },
            {
              "name": "get_watchdog_status",
              "line_start": 638,
              "line_end": 669,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get overall watchdog status.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 242
            },
            {
              "name": "shutdown",
              "line_start": 671,
              "line_end": 674,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown watchdog system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Comprehensive watchdog system for analytics components.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 73,
          "line_end": 127,
          "args": [
            "self",
            "check_interval",
            "max_restart_attempts"
          ],
          "returns": null,
          "docstring": "Initialize analytics watchdog.\n\nArgs:\n    check_interval: Default interval between health checks in seconds\n    max_restart_attempts: Maximum restart attempts before giving up",
          "is_async": false,
          "decorators": [],
          "complexity_score": 179
        },
        {
          "name": "register_component",
          "line_start": 129,
          "line_end": 181,
          "args": [
            "self",
            "component_name",
            "component_instance",
            "check_function",
            "failure_threshold",
            "restart_action",
            "is_critical"
          ],
          "returns": null,
          "docstring": "Register a component for watchdog monitoring.\n\nArgs:\n    component_name: Name of the component\n    component_instance: Instance of the component\n    check_function: Custom health check function\n    failure_threshold: Number of failures before taking action\n    restart_action: Action to take on failure\n    is_critical: Whether component is critical to system operation",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "register_process",
          "line_start": 183,
          "line_end": 203,
          "args": [
            "self",
            "process_name",
            "process_id",
            "command_line",
            "working_directory"
          ],
          "returns": null,
          "docstring": "Register a process for monitoring and auto-restart.\n\nArgs:\n    process_name: Name identifier for the process\n    process_id: Process ID (if known)\n    command_line: Command to restart the process\n    working_directory: Working directory for the process",
          "is_async": false,
          "decorators": [],
          "complexity_score": 60
        },
        {
          "name": "start_monitoring",
          "line_start": 205,
          "line_end": 219,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start watchdog monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "stop_monitoring",
          "line_start": 221,
          "line_end": 230,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop watchdog monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "check_component_health",
          "line_start": 232,
          "line_end": 284,
          "args": [
            "self",
            "component_name"
          ],
          "returns": null,
          "docstring": "Manually check health of a specific component.\n\nArgs:\n    component_name: Name of component to check\n\nReturns:\n    Component health status",
          "is_async": false,
          "decorators": [],
          "complexity_score": 243
        },
        {
          "name": "restart_component",
          "line_start": 286,
          "line_end": 360,
          "args": [
            "self",
            "component_name",
            "force"
          ],
          "returns": null,
          "docstring": "Restart a specific component.\n\nArgs:\n    component_name: Name of component to restart\n    force: Whether to force restart even if not failed\n\nReturns:\n    True if restart was successful",
          "is_async": false,
          "decorators": [],
          "complexity_score": 352
        },
        {
          "name": "_monitoring_loop",
          "line_start": 362,
          "line_end": 385,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "_process_monitoring_loop",
          "line_start": 387,
          "line_end": 400,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Monitor registered processes.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_check_process_health",
          "line_start": 402,
          "line_end": 431,
          "args": [
            "self",
            "process_name",
            "process_info"
          ],
          "returns": null,
          "docstring": "Check health of a monitored process.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "_restart_process",
          "line_start": 433,
          "line_end": 464,
          "args": [
            "self",
            "process_name",
            "command_line",
            "working_directory"
          ],
          "returns": null,
          "docstring": "Restart a process using command line.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 168
        },
        {
          "name": "_handle_component_failure",
          "line_start": 466,
          "line_end": 488,
          "args": [
            "self",
            "component_name"
          ],
          "returns": null,
          "docstring": "Handle component failure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 150
        },
        {
          "name": "_execute_restart_action",
          "line_start": 490,
          "line_end": 517,
          "args": [
            "self",
            "component_name",
            "action"
          ],
          "returns": null,
          "docstring": "Execute restart action for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_graceful_shutdown_component",
          "line_start": 519,
          "line_end": 529,
          "args": [
            "self",
            "component_name"
          ],
          "returns": null,
          "docstring": "Gracefully shutdown a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "_check_cascade_failures",
          "line_start": 531,
          "line_end": 545,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Check for cascade failure patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_handle_cascade_failure",
          "line_start": 547,
          "line_end": 555,
          "args": [
            "self",
            "failed_components"
          ],
          "returns": null,
          "docstring": "Handle cascade failure situation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "_setup_default_health_checks",
          "line_start": 557,
          "line_end": 577,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Setup default health check functions.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 73
        },
        {
          "name": "_create_default_health_check",
          "line_start": 579,
          "line_end": 598,
          "args": [
            "self",
            "component_instance"
          ],
          "returns": null,
          "docstring": "Create default health check for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "_collect_component_metrics",
          "line_start": 600,
          "line_end": 620,
          "args": [
            "self",
            "component_name"
          ],
          "returns": null,
          "docstring": "Collect metrics for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "add_restart_callback",
          "line_start": 622,
          "line_end": 624,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add callback for component restart events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "add_failure_callback",
          "line_start": 626,
          "line_end": 628,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add callback for component failure events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 29
        },
        {
          "name": "add_recovery_callback",
          "line_start": 630,
          "line_end": 632,
          "args": [
            "self",
            "callback"
          ],
          "returns": null,
          "docstring": "Add callback for component recovery events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "add_custom_recovery_action",
          "line_start": 634,
          "line_end": 636,
          "args": [
            "self",
            "component_name",
            "action"
          ],
          "returns": null,
          "docstring": "Add custom recovery action for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 30
        },
        {
          "name": "get_watchdog_status",
          "line_start": 638,
          "line_end": 669,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get overall watchdog status.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 242
        },
        {
          "name": "shutdown",
          "line_start": 671,
          "line_end": 674,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown watchdog system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        },
        {
          "name": "memory_health_check",
          "line_start": 560,
          "line_end": 566,
          "args": [],
          "returns": null,
          "docstring": "Check system memory health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "cpu_health_check",
          "line_start": 568,
          "line_end": 574,
          "args": [],
          "returns": null,
          "docstring": "Check system CPU health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 24
        },
        {
          "name": "default_check",
          "line_start": 581,
          "line_end": 596,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "subprocess",
          "names": [
            "subprocess"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "signal",
          "names": [
            "signal"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        }
      ],
      "external_dependencies": "{'psutil', 'subprocess', 'typing', 'time', 'dataclasses', 'signal', 'json', 'logging', 'enum', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 674,
      "complexity_score": 5572,
      "api_surface_area": 27,
      "docstring": "Analytics Watchdog and Auto-Restart System\n===========================================\n\nComprehensive monitoring and automatic restart capabilities for analytics\ncomponents to ensure maximum uptime and reliability.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 0.9393939393939394,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\cache.py": {
      "file_path": "dashboard\\dashboard_core\\cache.py",
      "component_name": "cache",
      "analysis_timestamp": "2025-08-20 21:46:40.693930",
      "classes": [
        {
          "name": "MetricsCache",
          "line_start": 19,
          "line_end": 120,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 26,
              "line_end": 37,
              "args": [
                "self",
                "default_ttl"
              ],
              "returns": null,
              "docstring": "Initialize the cache.\n\nArgs:\n    default_ttl: Default time-to-live in seconds",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "get",
              "line_start": 39,
              "line_end": 61,
              "args": [
                "self",
                "key",
                "default"
              ],
              "returns": null,
              "docstring": "Get cached value.\n\nArgs:\n    key: Cache key\n    default: Default value if not found or expired\n    \nReturns:\n    Cached value or default",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "set",
              "line_start": 63,
              "line_end": 80,
              "args": [
                "self",
                "key",
                "value",
                "ttl"
              ],
              "returns": null,
              "docstring": "Set cached value.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (uses default if None)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 68
            },
            {
              "name": "invalidate",
              "line_start": 82,
              "line_end": 98,
              "args": [
                "self",
                "pattern"
              ],
              "returns": null,
              "docstring": "Invalidate cache entries matching pattern.\n\nArgs:\n    pattern: Pattern to match (simple string matching)\n    \nReturns:\n    Number of entries invalidated",
              "is_async": false,
              "decorators": [],
              "complexity_score": 58
            },
            {
              "name": "clear",
              "line_start": 100,
              "line_end": 103,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clear entire cache.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "get_stats",
              "line_start": 105,
              "line_end": 120,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 88
            }
          ],
          "docstring": "Time-based cache for metrics data.\n\nProvides TTL-based caching with thread-safe operations.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 26,
          "line_end": 37,
          "args": [
            "self",
            "default_ttl"
          ],
          "returns": null,
          "docstring": "Initialize the cache.\n\nArgs:\n    default_ttl: Default time-to-live in seconds",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "get",
          "line_start": 39,
          "line_end": 61,
          "args": [
            "self",
            "key",
            "default"
          ],
          "returns": null,
          "docstring": "Get cached value.\n\nArgs:\n    key: Cache key\n    default: Default value if not found or expired\n    \nReturns:\n    Cached value or default",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "set",
          "line_start": 63,
          "line_end": 80,
          "args": [
            "self",
            "key",
            "value",
            "ttl"
          ],
          "returns": null,
          "docstring": "Set cached value.\n\nArgs:\n    key: Cache key\n    value: Value to cache\n    ttl: Time-to-live in seconds (uses default if None)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 68
        },
        {
          "name": "invalidate",
          "line_start": 82,
          "line_end": 98,
          "args": [
            "self",
            "pattern"
          ],
          "returns": null,
          "docstring": "Invalidate cache entries matching pattern.\n\nArgs:\n    pattern: Pattern to match (simple string matching)\n    \nReturns:\n    Number of entries invalidated",
          "is_async": false,
          "decorators": [],
          "complexity_score": 58
        },
        {
          "name": "clear",
          "line_start": 100,
          "line_end": 103,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clear entire cache.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "get_stats",
          "line_start": 105,
          "line_end": 120,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 88
        }
      ],
      "imports": [
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 10
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Optional",
            "Dict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 12
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        }
      ],
      "external_dependencies": "{'typing', 'time', 'logging', 'threading', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 120,
      "complexity_score": 740,
      "api_surface_area": 10,
      "docstring": "Metrics Caching Module\n======================\n\nProvides caching layer for performance optimization.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.1428571428571428,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\data_store.py": {
      "file_path": "dashboard\\dashboard_core\\data_store.py",
      "component_name": "data_store",
      "analysis_timestamp": "2025-08-20 21:46:40.698602",
      "classes": [
        {
          "name": "MetricsDataStore",
          "line_start": 23,
          "line_end": 506,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 28,
              "line_end": 74,
              "args": [
                "self",
                "db_path",
                "max_history_days"
              ],
              "returns": null,
              "docstring": "Initialize the data store.\n\nArgs:\n    db_path: Path to SQLite database file\n    max_history_days: Days of history to retain",
              "is_async": false,
              "decorators": [],
              "complexity_score": 222
            },
            {
              "name": "_init_database",
              "line_start": 76,
              "line_end": 151,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize database schema.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "store_performance_metrics",
              "line_start": 153,
              "line_end": 178,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Store performance metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 128
            },
            {
              "name": "store_test_results",
              "line_start": 180,
              "line_end": 206,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "docstring": "Store test execution results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 135
            },
            {
              "name": "store_analytics_snapshot",
              "line_start": 208,
              "line_end": 236,
              "args": [
                "self",
                "snapshot_type",
                "data"
              ],
              "returns": null,
              "docstring": "Store analytics snapshot with optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 159
            },
            {
              "name": "log_event",
              "line_start": 238,
              "line_end": 263,
              "args": [
                "self",
                "event_type",
                "severity",
                "message",
                "details"
              ],
              "returns": null,
              "docstring": "Log an event.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            },
            {
              "name": "get_performance_history",
              "line_start": 265,
              "line_end": 313,
              "args": [
                "self",
                "hours",
                "codebase"
              ],
              "returns": null,
              "docstring": "Get performance metrics history with optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 227
            },
            {
              "name": "get_test_history",
              "line_start": 315,
              "line_end": 347,
              "args": [
                "self",
                "days"
              ],
              "returns": null,
              "docstring": "Get test results history.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "get_recent_events",
              "line_start": 349,
              "line_end": 381,
              "args": [
                "self",
                "limit",
                "severity"
              ],
              "returns": null,
              "docstring": "Get recent events.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 158
            },
            {
              "name": "get_analytics_snapshot",
              "line_start": 383,
              "line_end": 420,
              "args": [
                "self",
                "snapshot_type"
              ],
              "returns": null,
              "docstring": "Get the latest analytics snapshot.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "calculate_trends",
              "line_start": 422,
              "line_end": 471,
              "args": [
                "self",
                "metric_type",
                "hours"
              ],
              "returns": null,
              "docstring": "Calculate trends for a specific metric type.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 433
            },
            {
              "name": "cleanup_old_data",
              "line_start": 473,
              "line_end": 497,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Remove data older than max_history_days.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 120
            },
            {
              "name": "get_cache_stats",
              "line_start": 499,
              "line_end": 506,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get cache statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 61
            }
          ],
          "docstring": "Persistent storage for dashboard metrics using SQLite.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 28,
          "line_end": 74,
          "args": [
            "self",
            "db_path",
            "max_history_days"
          ],
          "returns": null,
          "docstring": "Initialize the data store.\n\nArgs:\n    db_path: Path to SQLite database file\n    max_history_days: Days of history to retain",
          "is_async": false,
          "decorators": [],
          "complexity_score": 222
        },
        {
          "name": "_init_database",
          "line_start": 76,
          "line_end": 151,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize database schema.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "store_performance_metrics",
          "line_start": 153,
          "line_end": 178,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Store performance metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 128
        },
        {
          "name": "store_test_results",
          "line_start": 180,
          "line_end": 206,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "docstring": "Store test execution results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 135
        },
        {
          "name": "store_analytics_snapshot",
          "line_start": 208,
          "line_end": 236,
          "args": [
            "self",
            "snapshot_type",
            "data"
          ],
          "returns": null,
          "docstring": "Store analytics snapshot with optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 159
        },
        {
          "name": "log_event",
          "line_start": 238,
          "line_end": 263,
          "args": [
            "self",
            "event_type",
            "severity",
            "message",
            "details"
          ],
          "returns": null,
          "docstring": "Log an event.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "get_performance_history",
          "line_start": 265,
          "line_end": 313,
          "args": [
            "self",
            "hours",
            "codebase"
          ],
          "returns": null,
          "docstring": "Get performance metrics history with optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 227
        },
        {
          "name": "get_test_history",
          "line_start": 315,
          "line_end": 347,
          "args": [
            "self",
            "days"
          ],
          "returns": null,
          "docstring": "Get test results history.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "get_recent_events",
          "line_start": 349,
          "line_end": 381,
          "args": [
            "self",
            "limit",
            "severity"
          ],
          "returns": null,
          "docstring": "Get recent events.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "get_analytics_snapshot",
          "line_start": 383,
          "line_end": 420,
          "args": [
            "self",
            "snapshot_type"
          ],
          "returns": null,
          "docstring": "Get the latest analytics snapshot.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "calculate_trends",
          "line_start": 422,
          "line_end": 471,
          "args": [
            "self",
            "metric_type",
            "hours"
          ],
          "returns": null,
          "docstring": "Calculate trends for a specific metric type.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 433
        },
        {
          "name": "cleanup_old_data",
          "line_start": 473,
          "line_end": 497,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Remove data older than max_history_days.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 120
        },
        {
          "name": "get_cache_stats",
          "line_start": 499,
          "line_end": 506,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get cache statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 61
        }
      ],
      "imports": [
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "pickle",
          "names": [
            "pickle"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "analytics_optimizer",
          "names": [
            "AnalyticsOptimizer"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 55
        },
        {
          "module": "analytics_backup",
          "names": [
            "AnalyticsBackupManager"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 64
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'analytics_backup', 'json', 'logging', 'pickle', 'analytics_optimizer', 'threading', 'os', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 506,
      "complexity_score": 4308,
      "api_surface_area": 22,
      "docstring": "Data Store for Dashboard Metrics\n=================================\n\nProvides persistent storage for metrics and analytics data.\nMaintains historical data for trend analysis.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0714285714285714,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\emergency_backup_recovery.py": {
      "file_path": "dashboard\\dashboard_core\\emergency_backup_recovery.py",
      "component_name": "emergency_backup_recovery",
      "analysis_timestamp": "2025-08-20 21:46:40.710600",
      "classes": [
        {
          "name": "BackupType",
          "line_start": 31,
          "line_end": 37,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of backup operations.",
          "decorators": []
        },
        {
          "name": "BackupStatus",
          "line_start": 39,
          "line_end": 46,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Backup operation status.",
          "decorators": []
        },
        {
          "name": "RecoveryMode",
          "line_start": 48,
          "line_end": 54,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Recovery operation modes.",
          "decorators": []
        },
        {
          "name": "StorageTier",
          "line_start": 56,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Storage tier levels.",
          "decorators": []
        },
        {
          "name": "BackupRecord",
          "line_start": 64,
          "line_end": 94,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 79,
              "line_end": 94,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            }
          ],
          "docstring": "Backup operation record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RecoveryRecord",
          "line_start": 97,
          "line_end": 121,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 109,
              "line_end": 121,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            }
          ],
          "docstring": "Recovery operation record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "EmergencyBackupRecovery",
          "line_start": 123,
          "line_end": 1306,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 128,
              "line_end": 220,
              "args": [
                "self",
                "aggregator",
                "backup_base_path",
                "backup_interval",
                "max_hot_backups"
              ],
              "returns": null,
              "docstring": "Initialize emergency backup and recovery system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    backup_base_path: Base path for backup storage\n    backup_interval: Seconds between automatic backups\n    max_hot_backups: Maximum number of hot tier backups",
              "is_async": false,
              "decorators": [],
              "complexity_score": 372
            },
            {
              "name": "_init_backup_structure",
              "line_start": 222,
              "line_end": 240,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize backup directory structure.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 94
            },
            {
              "name": "_init_database",
              "line_start": 242,
              "line_end": 298,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize backup registry database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "create_emergency_backup",
              "line_start": 300,
              "line_end": 367,
              "args": [
                "self",
                "analytics_data",
                "backup_type"
              ],
              "returns": null,
              "docstring": "Create emergency backup immediately.\n\nArgs:\n    analytics_data: Specific analytics to backup (None = all)\n    backup_type: Type of backup to create\n    \nReturns:\n    Backup ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 255
            },
            {
              "name": "instant_recovery",
              "line_start": 369,
              "line_end": 450,
              "args": [
                "self",
                "backup_id",
                "analytics_id_filter",
                "point_in_time"
              ],
              "returns": null,
              "docstring": "Perform instant recovery from backup.\n\nArgs:\n    backup_id: Specific backup to recover from (None = latest)\n    analytics_id_filter: Specific analytics to recover\n    point_in_time: Recover to specific point in time\n    \nReturns:\n    Recovery ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 362
            },
            {
              "name": "_collect_all_analytics",
              "line_start": 452,
              "line_end": 483,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect all available analytics data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 187
            },
            {
              "name": "_create_backup_file",
              "line_start": 485,
              "line_end": 546,
              "args": [
                "self",
                "backup_record",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Create compressed backup file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 384
            },
            {
              "name": "_calculate_file_checksum",
              "line_start": 548,
              "line_end": 558,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Calculate SHA-256 checksum of file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "_verify_backup_integrity",
              "line_start": 560,
              "line_end": 602,
              "args": [
                "self",
                "backup_record"
              ],
              "returns": null,
              "docstring": "Verify backup file integrity.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 222
            },
            {
              "name": "_store_in_hot_storage",
              "line_start": 604,
              "line_end": 629,
              "args": [
                "self",
                "backup_id",
                "analytics_data"
              ],
              "returns": null,
              "docstring": "Store backup in hot storage for instant access.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "_manage_hot_storage",
              "line_start": 631,
              "line_end": 660,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Manage hot storage to prevent memory overflow.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 177
            },
            {
              "name": "_find_best_backup",
              "line_start": 662,
              "line_end": 712,
              "args": [
                "self",
                "point_in_time"
              ],
              "returns": null,
              "docstring": "Find the best backup for recovery.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 267
            },
            {
              "name": "_perform_recovery",
              "line_start": 714,
              "line_end": 733,
              "args": [
                "self",
                "recovery_record",
                "analytics_id_filter"
              ],
              "returns": null,
              "docstring": "Perform the actual recovery operation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_recover_from_hot_storage",
              "line_start": 735,
              "line_end": 769,
              "args": [
                "self",
                "recovery_record",
                "analytics_id_filter"
              ],
              "returns": null,
              "docstring": "Recover analytics from hot storage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 196
            },
            {
              "name": "_recover_from_file",
              "line_start": 771,
              "line_end": 814,
              "args": [
                "self",
                "recovery_record",
                "backup_record",
                "analytics_id_filter"
              ],
              "returns": null,
              "docstring": "Recover analytics from backup file.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 253
            },
            {
              "name": "_restore_single_analytics",
              "line_start": 816,
              "line_end": 829,
              "args": [
                "self",
                "analytics"
              ],
              "returns": null,
              "docstring": "Restore a single analytics record.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 97
            },
            {
              "name": "_backup_loop",
              "line_start": 831,
              "line_end": 867,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background backup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 190
            },
            {
              "name": "_create_scheduled_backup",
              "line_start": 869,
              "line_end": 935,
              "args": [
                "self",
                "analytics_data",
                "backup_type"
              ],
              "returns": null,
              "docstring": "Create a scheduled backup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 333
            },
            {
              "name": "_maintenance_loop",
              "line_start": 937,
              "line_end": 949,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background maintenance loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_cleanup_expired_backups",
              "line_start": 951,
              "line_end": 989,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Clean up expired backups based on retention policy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 226
            },
            {
              "name": "_tier_migration",
              "line_start": 991,
              "line_end": 1015,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Migrate backups between storage tiers.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 158
            },
            {
              "name": "_migrate_backup_tier",
              "line_start": 1017,
              "line_end": 1044,
              "args": [
                "self",
                "backup_record",
                "new_tier"
              ],
              "returns": null,
              "docstring": "Migrate backup to new storage tier.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 148
            },
            {
              "name": "_verify_backup_integrity_batch",
              "line_start": 1046,
              "line_end": 1066,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Verify integrity of recent backups.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_monitoring_loop",
              "line_start": 1068,
              "line_end": 1085,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "_monitor_disk_space",
              "line_start": 1087,
              "line_end": 1105,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Monitor available disk space.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 112
            },
            {
              "name": "_monitor_backup_health",
              "line_start": 1107,
              "line_end": 1122,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Monitor overall backup system health.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_update_statistics",
              "line_start": 1124,
              "line_end": 1136,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Update system statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_load_backup_registry",
              "line_start": 1138,
              "line_end": 1165,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load existing backup records from database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 196
            },
            {
              "name": "_save_backup_record",
              "line_start": 1167,
              "line_end": 1193,
              "args": [
                "self",
                "backup_record"
              ],
              "returns": null,
              "docstring": "Save backup record to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_save_recovery_record",
              "line_start": 1195,
              "line_end": 1217,
              "args": [
                "self",
                "recovery_record"
              ],
              "returns": null,
              "docstring": "Save recovery record to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "get_backup_statistics",
              "line_start": 1219,
              "line_end": 1249,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive backup system statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 233
            },
            {
              "name": "get_backup_details",
              "line_start": 1251,
              "line_end": 1282,
              "args": [
                "self",
                "backup_id"
              ],
              "returns": null,
              "docstring": "Get detailed information about a specific backup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 177
            },
            {
              "name": "force_backup_verification",
              "line_start": 1284,
              "line_end": 1295,
              "args": [
                "self",
                "backup_id"
              ],
              "returns": null,
              "docstring": "Force verification of specific backup.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 54
            },
            {
              "name": "shutdown",
              "line_start": 1297,
              "line_end": 1306,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown emergency backup and recovery system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            }
          ],
          "docstring": "Emergency analytics backup and recovery system with multi-tier storage.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 79,
          "line_end": 94,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "to_dict",
          "line_start": 109,
          "line_end": 121,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "__init__",
          "line_start": 128,
          "line_end": 220,
          "args": [
            "self",
            "aggregator",
            "backup_base_path",
            "backup_interval",
            "max_hot_backups"
          ],
          "returns": null,
          "docstring": "Initialize emergency backup and recovery system.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    backup_base_path: Base path for backup storage\n    backup_interval: Seconds between automatic backups\n    max_hot_backups: Maximum number of hot tier backups",
          "is_async": false,
          "decorators": [],
          "complexity_score": 372
        },
        {
          "name": "_init_backup_structure",
          "line_start": 222,
          "line_end": 240,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize backup directory structure.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 94
        },
        {
          "name": "_init_database",
          "line_start": 242,
          "line_end": 298,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize backup registry database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "create_emergency_backup",
          "line_start": 300,
          "line_end": 367,
          "args": [
            "self",
            "analytics_data",
            "backup_type"
          ],
          "returns": null,
          "docstring": "Create emergency backup immediately.\n\nArgs:\n    analytics_data: Specific analytics to backup (None = all)\n    backup_type: Type of backup to create\n    \nReturns:\n    Backup ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 255
        },
        {
          "name": "instant_recovery",
          "line_start": 369,
          "line_end": 450,
          "args": [
            "self",
            "backup_id",
            "analytics_id_filter",
            "point_in_time"
          ],
          "returns": null,
          "docstring": "Perform instant recovery from backup.\n\nArgs:\n    backup_id: Specific backup to recover from (None = latest)\n    analytics_id_filter: Specific analytics to recover\n    point_in_time: Recover to specific point in time\n    \nReturns:\n    Recovery ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 362
        },
        {
          "name": "_collect_all_analytics",
          "line_start": 452,
          "line_end": 483,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect all available analytics data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 187
        },
        {
          "name": "_create_backup_file",
          "line_start": 485,
          "line_end": 546,
          "args": [
            "self",
            "backup_record",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Create compressed backup file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 384
        },
        {
          "name": "_calculate_file_checksum",
          "line_start": 548,
          "line_end": 558,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Calculate SHA-256 checksum of file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "_verify_backup_integrity",
          "line_start": 560,
          "line_end": 602,
          "args": [
            "self",
            "backup_record"
          ],
          "returns": null,
          "docstring": "Verify backup file integrity.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 222
        },
        {
          "name": "_store_in_hot_storage",
          "line_start": 604,
          "line_end": 629,
          "args": [
            "self",
            "backup_id",
            "analytics_data"
          ],
          "returns": null,
          "docstring": "Store backup in hot storage for instant access.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "_manage_hot_storage",
          "line_start": 631,
          "line_end": 660,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Manage hot storage to prevent memory overflow.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 177
        },
        {
          "name": "_find_best_backup",
          "line_start": 662,
          "line_end": 712,
          "args": [
            "self",
            "point_in_time"
          ],
          "returns": null,
          "docstring": "Find the best backup for recovery.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 267
        },
        {
          "name": "_perform_recovery",
          "line_start": 714,
          "line_end": 733,
          "args": [
            "self",
            "recovery_record",
            "analytics_id_filter"
          ],
          "returns": null,
          "docstring": "Perform the actual recovery operation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_recover_from_hot_storage",
          "line_start": 735,
          "line_end": 769,
          "args": [
            "self",
            "recovery_record",
            "analytics_id_filter"
          ],
          "returns": null,
          "docstring": "Recover analytics from hot storage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 196
        },
        {
          "name": "_recover_from_file",
          "line_start": 771,
          "line_end": 814,
          "args": [
            "self",
            "recovery_record",
            "backup_record",
            "analytics_id_filter"
          ],
          "returns": null,
          "docstring": "Recover analytics from backup file.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 253
        },
        {
          "name": "_restore_single_analytics",
          "line_start": 816,
          "line_end": 829,
          "args": [
            "self",
            "analytics"
          ],
          "returns": null,
          "docstring": "Restore a single analytics record.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 97
        },
        {
          "name": "_backup_loop",
          "line_start": 831,
          "line_end": 867,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background backup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 190
        },
        {
          "name": "_create_scheduled_backup",
          "line_start": 869,
          "line_end": 935,
          "args": [
            "self",
            "analytics_data",
            "backup_type"
          ],
          "returns": null,
          "docstring": "Create a scheduled backup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 333
        },
        {
          "name": "_maintenance_loop",
          "line_start": 937,
          "line_end": 949,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background maintenance loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_cleanup_expired_backups",
          "line_start": 951,
          "line_end": 989,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Clean up expired backups based on retention policy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 226
        },
        {
          "name": "_tier_migration",
          "line_start": 991,
          "line_end": 1015,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Migrate backups between storage tiers.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 158
        },
        {
          "name": "_migrate_backup_tier",
          "line_start": 1017,
          "line_end": 1044,
          "args": [
            "self",
            "backup_record",
            "new_tier"
          ],
          "returns": null,
          "docstring": "Migrate backup to new storage tier.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 148
        },
        {
          "name": "_verify_backup_integrity_batch",
          "line_start": 1046,
          "line_end": 1066,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Verify integrity of recent backups.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_monitoring_loop",
          "line_start": 1068,
          "line_end": 1085,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "_monitor_disk_space",
          "line_start": 1087,
          "line_end": 1105,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Monitor available disk space.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 112
        },
        {
          "name": "_monitor_backup_health",
          "line_start": 1107,
          "line_end": 1122,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Monitor overall backup system health.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_update_statistics",
          "line_start": 1124,
          "line_end": 1136,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Update system statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_load_backup_registry",
          "line_start": 1138,
          "line_end": 1165,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load existing backup records from database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 196
        },
        {
          "name": "_save_backup_record",
          "line_start": 1167,
          "line_end": 1193,
          "args": [
            "self",
            "backup_record"
          ],
          "returns": null,
          "docstring": "Save backup record to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_save_recovery_record",
          "line_start": 1195,
          "line_end": 1217,
          "args": [
            "self",
            "recovery_record"
          ],
          "returns": null,
          "docstring": "Save recovery record to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "get_backup_statistics",
          "line_start": 1219,
          "line_end": 1249,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive backup system statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 233
        },
        {
          "name": "get_backup_details",
          "line_start": 1251,
          "line_end": 1282,
          "args": [
            "self",
            "backup_id"
          ],
          "returns": null,
          "docstring": "Get detailed information about a specific backup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 177
        },
        {
          "name": "force_backup_verification",
          "line_start": 1284,
          "line_end": 1295,
          "args": [
            "self",
            "backup_id"
          ],
          "returns": null,
          "docstring": "Force verification of specific backup.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 54
        },
        {
          "name": "shutdown",
          "line_start": 1297,
          "line_end": 1306,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown emergency backup and recovery system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "backup_priority",
          "line_start": 684,
          "line_end": 704,
          "args": [
            "item"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 116
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "shutil",
          "names": [
            "shutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "zipfile",
          "names": [
            "zipfile"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "platform",
          "names": [
            "platform"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Set",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 24
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "tempfile",
          "names": [
            "tempfile"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 27
        }
      ],
      "external_dependencies": "{'platform', 'pathlib', 'sqlite3', 'typing', 'time', 'dataclasses', 'zipfile', 'tempfile', 'json', 'logging', 'os', 'enum', 'threading', 'shutil', 'hashlib', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1309,
      "complexity_score": 12086,
      "api_surface_area": 17,
      "docstring": "Emergency Analytics Backup and Recovery System\n==============================================\n\nComprehensive emergency backup system with multi-tier storage,\ninstant recovery, and disaster prevention for absolute data safety.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\error_handler.py": {
      "file_path": "dashboard\\dashboard_core\\error_handler.py",
      "component_name": "error_handler",
      "analysis_timestamp": "2025-08-20 21:46:40.724419",
      "classes": [
        {
          "name": "ErrorCode",
          "line_start": 22,
          "line_end": 40,
          "base_classes": [],
          "methods": [],
          "docstring": "Standard error codes for the dashboard.",
          "decorators": []
        },
        {
          "name": "DashboardError",
          "line_start": 42,
          "line_end": 52,
          "base_classes": [
            "Exception"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 45,
              "line_end": 52,
              "args": [
                "self",
                "message",
                "error_code",
                "status_code",
                "details"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            }
          ],
          "docstring": "Base exception for dashboard-specific errors.",
          "decorators": []
        },
        {
          "name": "ValidationError",
          "line_start": 54,
          "line_end": 66,
          "base_classes": [
            "DashboardError"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 57,
              "line_end": 66,
              "args": [
                "self",
                "message",
                "field",
                "details"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 57
            }
          ],
          "docstring": "Error for input validation failures.",
          "decorators": []
        },
        {
          "name": "MonitorError",
          "line_start": 68,
          "line_end": 77,
          "base_classes": [
            "DashboardError"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 71,
              "line_end": 77,
              "args": [
                "self",
                "message",
                "details"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            }
          ],
          "docstring": "Error for monitoring system failures.",
          "decorators": []
        },
        {
          "name": "CacheError",
          "line_start": 79,
          "line_end": 88,
          "base_classes": [
            "DashboardError"
          ],
          "methods": [
            {
              "name": "__init__",
              "line_start": 82,
              "line_end": 88,
              "args": [
                "self",
                "message",
                "details"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 34
            }
          ],
          "docstring": "Error for cache system failures.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "create_error_response",
          "line_start": 90,
          "line_end": 132,
          "args": [
            "error",
            "request_id"
          ],
          "returns": null,
          "docstring": "Create a standardized error response.\n\nArgs:\n    error: The exception that occurred\n    request_id: Optional request ID for tracking\n    \nReturns:\n    Tuple of (response_dict, status_code)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "handle_api_error",
          "line_start": 134,
          "line_end": 166,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": "Decorator to handle API errors consistently.\n\nUsage:\n    @performance_bp.route('/endpoint')\n    @handle_api_error\n    def my_endpoint():\n        # Your code here\n        pass",
          "is_async": false,
          "decorators": [],
          "complexity_score": 212
        },
        {
          "name": "validate_request_params",
          "line_start": 168,
          "line_end": 207,
          "args": [
            "required_params",
            "optional_params"
          ],
          "returns": null,
          "docstring": "Decorator to validate request parameters.\n\nArgs:\n    required_params: List of required parameter names\n    optional_params: Dict of optional params with default values\n    \nUsage:\n    @validate_request_params(['codebase'], {'hours': 1, 'format': 'json'})\n    def my_endpoint():\n        pass",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "monitor_performance",
          "line_start": 209,
          "line_end": 242,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": "Decorator to monitor API endpoint performance.\n\nUsage:\n    @monitor_performance\n    def my_endpoint():\n        pass",
          "is_async": false,
          "decorators": [],
          "complexity_score": 160
        },
        {
          "name": "enhanced_api_endpoint",
          "line_start": 245,
          "line_end": 262,
          "args": [
            "required_params",
            "optional_params"
          ],
          "returns": null,
          "docstring": "Combined decorator for full API enhancement.\n\nUsage:\n    @enhanced_api_endpoint(['codebase'], {'hours': 1})\n    def my_endpoint():\n        pass",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "log_error_stats",
          "line_start": 264,
          "line_end": 267,
          "args": [],
          "returns": null,
          "docstring": "Log error statistics for monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 5
        },
        {
          "name": "__init__",
          "line_start": 45,
          "line_end": 52,
          "args": [
            "self",
            "message",
            "error_code",
            "status_code",
            "details"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "__init__",
          "line_start": 57,
          "line_end": 66,
          "args": [
            "self",
            "message",
            "field",
            "details"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 57
        },
        {
          "name": "__init__",
          "line_start": 71,
          "line_end": 77,
          "args": [
            "self",
            "message",
            "details"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "__init__",
          "line_start": 82,
          "line_end": 88,
          "args": [
            "self",
            "message",
            "details"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 34
        },
        {
          "name": "wrapper",
          "line_start": 146,
          "line_end": 164,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [
            "<ast.Call object at 0x0000019D295A7D30>"
          ],
          "complexity_score": 204
        },
        {
          "name": "decorator",
          "line_start": 181,
          "line_end": 206,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 126
        },
        {
          "name": "wrapper",
          "line_start": 219,
          "line_end": 240,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [
            "<ast.Call object at 0x0000019D29545600>"
          ],
          "complexity_score": 152
        },
        {
          "name": "decorator",
          "line_start": 254,
          "line_end": 261,
          "args": [
            "func"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 47
        },
        {
          "name": "wrapper",
          "line_start": 183,
          "line_end": 205,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [
            "<ast.Call object at 0x0000019D295A5990>"
          ],
          "complexity_score": 120
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "traceback",
          "names": [
            "traceback"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 13
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "Tuple"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 14
        },
        {
          "module": "functools",
          "names": [
            "wraps"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "flask",
          "names": [
            "jsonify",
            "request"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        }
      ],
      "external_dependencies": "{'flask', 'typing', 'functools', 'logging', 'os', 'traceback', 'datetime', 'sys'}",
      "internal_dependencies": "set()",
      "lines_of_code": 267,
      "complexity_score": 1806,
      "api_surface_area": 11,
      "docstring": "Enhanced Error Handling Module\n==============================\n\nCentralized error handling for TestMaster Dashboard APIs.\nProvides consistent error responses, logging, and monitoring.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 0.6,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\metrics_feed.py": {
      "file_path": "dashboard\\dashboard_core\\metrics_feed.py",
      "component_name": "metrics_feed",
      "analysis_timestamp": "2025-08-20 21:46:40.728421",
      "classes": [
        {
          "name": "MetricsFeed",
          "line_start": 26,
          "line_end": 360,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 31,
              "line_end": 55,
              "args": [
                "self",
                "monitor",
                "aggregator",
                "update_interval"
              ],
              "returns": null,
              "docstring": "Initialize the metrics feed.\n\nArgs:\n    monitor: RealTimeMonitor instance to feed data to\n    aggregator: AnalyticsAggregator instance for comprehensive data\n    update_interval: How often to update metrics (seconds)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "start",
              "line_start": 57,
              "line_end": 66,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the metrics feed thread.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 56
            },
            {
              "name": "stop",
              "line_start": 68,
              "line_end": 73,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop the metrics feed thread.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "_feed_loop",
              "line_start": 75,
              "line_end": 95,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main loop that feeds metrics to the monitor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "_collect_metrics",
              "line_start": 97,
              "line_end": 202,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect current system and application metrics.\n\nReturns:\n    Dictionary of metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 653
            },
            {
              "name": "_update_aggregator",
              "line_start": 204,
              "line_end": 278,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Update the analytics aggregator with new metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 393
            },
            {
              "name": "_get_test_data_from_aggregator",
              "line_start": 280,
              "line_end": 300,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get test data from aggregator for storage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "_calculate_trend",
              "line_start": 302,
              "line_end": 318,
              "args": [
                "self",
                "history"
              ],
              "returns": null,
              "docstring": "Calculate trend from historical data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_get_active_agents",
              "line_start": 322,
              "line_end": 325,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get count of active intelligent agents.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "_get_active_bridges",
              "line_start": 327,
              "line_end": 330,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get count of active bridge systems.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "_get_running_workflows",
              "line_start": 332,
              "line_end": 335,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get count of running workflows.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "_get_running_tests",
              "line_start": 337,
              "line_end": 340,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get count of running tests.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            },
            {
              "name": "_get_code_coverage",
              "line_start": 342,
              "line_end": 345,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get current code coverage percentage.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "_get_code_complexity",
              "line_start": 347,
              "line_end": 350,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get average code complexity score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "_get_security_score",
              "line_start": 352,
              "line_end": 355,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get security compliance score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 20
            },
            {
              "name": "_get_vulnerability_count",
              "line_start": 357,
              "line_end": 360,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get count of known vulnerabilities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 15
            }
          ],
          "docstring": "Feeds real-time metrics to the monitoring system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 31,
          "line_end": 55,
          "args": [
            "self",
            "monitor",
            "aggregator",
            "update_interval"
          ],
          "returns": null,
          "docstring": "Initialize the metrics feed.\n\nArgs:\n    monitor: RealTimeMonitor instance to feed data to\n    aggregator: AnalyticsAggregator instance for comprehensive data\n    update_interval: How often to update metrics (seconds)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "start",
          "line_start": 57,
          "line_end": 66,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the metrics feed thread.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 56
        },
        {
          "name": "stop",
          "line_start": 68,
          "line_end": 73,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop the metrics feed thread.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "_feed_loop",
          "line_start": 75,
          "line_end": 95,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main loop that feeds metrics to the monitor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "_collect_metrics",
          "line_start": 97,
          "line_end": 202,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect current system and application metrics.\n\nReturns:\n    Dictionary of metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 653
        },
        {
          "name": "_update_aggregator",
          "line_start": 204,
          "line_end": 278,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Update the analytics aggregator with new metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 393
        },
        {
          "name": "_get_test_data_from_aggregator",
          "line_start": 280,
          "line_end": 300,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get test data from aggregator for storage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "_calculate_trend",
          "line_start": 302,
          "line_end": 318,
          "args": [
            "self",
            "history"
          ],
          "returns": null,
          "docstring": "Calculate trend from historical data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_get_active_agents",
          "line_start": 322,
          "line_end": 325,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get count of active intelligent agents.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "_get_active_bridges",
          "line_start": 327,
          "line_end": 330,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get count of active bridge systems.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "_get_running_workflows",
          "line_start": 332,
          "line_end": 335,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get count of running workflows.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "_get_running_tests",
          "line_start": 337,
          "line_end": 340,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get count of running tests.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        },
        {
          "name": "_get_code_coverage",
          "line_start": 342,
          "line_end": 345,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get current code coverage percentage.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "_get_code_complexity",
          "line_start": 347,
          "line_end": 350,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get average code complexity score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "_get_security_score",
          "line_start": 352,
          "line_end": 355,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get security compliance score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 20
        },
        {
          "name": "_get_vulnerability_count",
          "line_start": 357,
          "line_end": 360,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get count of known vulnerabilities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 15
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "random",
          "names": [
            "random"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        }
      ],
      "external_dependencies": "{'random', 'psutil', 'typing', 'time', 'logging', 'threading', 'os', 'datetime', 'sys'}",
      "internal_dependencies": "set()",
      "lines_of_code": 360,
      "complexity_score": 3398,
      "api_surface_area": 4,
      "docstring": "Real-Time Metrics Feed\n======================\n\nContinuously feeds real-time metrics to the monitor from all TestMaster components.\nEnsures dashboard displays live, accurate data.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0588235294117647,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\monitor.py": {
      "file_path": "dashboard\\dashboard_core\\monitor.py",
      "component_name": "monitor",
      "analysis_timestamp": "2025-08-20 21:46:40.733709",
      "classes": [
        {
          "name": "RealTimeMonitor",
          "line_start": 22,
          "line_end": 311,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 30,
              "line_end": 58,
              "args": [
                "self",
                "max_history_points",
                "collection_interval"
              ],
              "returns": null,
              "docstring": "Initialize the real-time monitor.\n\nArgs:\n    max_history_points: Maximum points to keep in history (default: 300 for 30s at 100ms)\n    collection_interval: Collection interval in seconds (default: 0.1 for 100ms)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 133
            },
            {
              "name": "start_monitoring",
              "line_start": 60,
              "line_end": 72,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Start the monitoring thread.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "stop_monitoring",
              "line_start": 74,
              "line_end": 85,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop the monitoring thread.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 50
            },
            {
              "name": "_monitoring_loop",
              "line_start": 87,
              "line_end": 108,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Main monitoring loop - runs every 100ms.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 102
            },
            {
              "name": "_collect_system_metrics",
              "line_start": 110,
              "line_end": 155,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect current system metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 233
            },
            {
              "name": "_update_codebase_metrics",
              "line_start": 157,
              "line_end": 172,
              "args": [
                "self",
                "codebase",
                "metrics"
              ],
              "returns": null,
              "docstring": "Update metrics for a specific codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 142
            },
            {
              "name": "get_current_metrics",
              "line_start": 174,
              "line_end": 199,
              "args": [
                "self",
                "codebase"
              ],
              "returns": null,
              "docstring": "Get current metrics for a codebase.\n\nArgs:\n    codebase: Codebase identifier\n    \nReturns:\n    Dictionary with current metric arrays for charts",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "_initialize_codebase",
              "line_start": 201,
              "line_end": 209,
              "args": [
                "self",
                "codebase"
              ],
              "returns": null,
              "docstring": "Initialize empty history for a codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "get_metrics_history",
              "line_start": 211,
              "line_end": 250,
              "args": [
                "self",
                "codebase",
                "hours"
              ],
              "returns": null,
              "docstring": "Get historical metrics for a codebase.\n\nArgs:\n    codebase: Codebase identifier\n    hours: Hours of history to return\n    \nReturns:\n    Historical metrics data",
              "is_async": false,
              "decorators": [],
              "complexity_score": 192
            },
            {
              "name": "get_performance_summary",
              "line_start": 252,
              "line_end": 294,
              "args": [
                "self",
                "codebase"
              ],
              "returns": null,
              "docstring": "Get performance summary statistics.\n\nArgs:\n    codebase: Codebase identifier\n    \nReturns:\n    Summary statistics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 191
            },
            {
              "name": "register_codebase",
              "line_start": 296,
              "line_end": 300,
              "args": [
                "self",
                "codebase"
              ],
              "returns": null,
              "docstring": "Register a new codebase for monitoring.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 32
            },
            {
              "name": "get_status",
              "line_start": 302,
              "line_end": 311,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get monitor status information.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            }
          ],
          "docstring": "Real-time system monitoring engine.\n\nCollects performance metrics every 100ms and maintains\ncircular buffers for efficient data access.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 30,
          "line_end": 58,
          "args": [
            "self",
            "max_history_points",
            "collection_interval"
          ],
          "returns": null,
          "docstring": "Initialize the real-time monitor.\n\nArgs:\n    max_history_points: Maximum points to keep in history (default: 300 for 30s at 100ms)\n    collection_interval: Collection interval in seconds (default: 0.1 for 100ms)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 133
        },
        {
          "name": "start_monitoring",
          "line_start": 60,
          "line_end": 72,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Start the monitoring thread.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "stop_monitoring",
          "line_start": 74,
          "line_end": 85,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop the monitoring thread.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 50
        },
        {
          "name": "_monitoring_loop",
          "line_start": 87,
          "line_end": 108,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Main monitoring loop - runs every 100ms.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 102
        },
        {
          "name": "_collect_system_metrics",
          "line_start": 110,
          "line_end": 155,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect current system metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 233
        },
        {
          "name": "_update_codebase_metrics",
          "line_start": 157,
          "line_end": 172,
          "args": [
            "self",
            "codebase",
            "metrics"
          ],
          "returns": null,
          "docstring": "Update metrics for a specific codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 142
        },
        {
          "name": "get_current_metrics",
          "line_start": 174,
          "line_end": 199,
          "args": [
            "self",
            "codebase"
          ],
          "returns": null,
          "docstring": "Get current metrics for a codebase.\n\nArgs:\n    codebase: Codebase identifier\n    \nReturns:\n    Dictionary with current metric arrays for charts",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "_initialize_codebase",
          "line_start": 201,
          "line_end": 209,
          "args": [
            "self",
            "codebase"
          ],
          "returns": null,
          "docstring": "Initialize empty history for a codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "get_metrics_history",
          "line_start": 211,
          "line_end": 250,
          "args": [
            "self",
            "codebase",
            "hours"
          ],
          "returns": null,
          "docstring": "Get historical metrics for a codebase.\n\nArgs:\n    codebase: Codebase identifier\n    hours: Hours of history to return\n    \nReturns:\n    Historical metrics data",
          "is_async": false,
          "decorators": [],
          "complexity_score": 192
        },
        {
          "name": "get_performance_summary",
          "line_start": 252,
          "line_end": 294,
          "args": [
            "self",
            "codebase"
          ],
          "returns": null,
          "docstring": "Get performance summary statistics.\n\nArgs:\n    codebase: Codebase identifier\n    \nReturns:\n    Summary statistics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 191
        },
        {
          "name": "register_codebase",
          "line_start": 296,
          "line_end": 300,
          "args": [
            "self",
            "codebase"
          ],
          "returns": null,
          "docstring": "Register a new codebase for monitoring.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 32
        },
        {
          "name": "get_status",
          "line_start": 302,
          "line_end": 311,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get monitor status information.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        }
      ],
      "imports": [
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 15
        },
        {
          "module": "collections",
          "names": [
            "deque"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        }
      ],
      "external_dependencies": "{'psutil', 'typing', 'time', 'logging', 'threading', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 311,
      "complexity_score": 2782,
      "api_surface_area": 14,
      "docstring": "Real-time Monitoring Core Module\n================================\n\nCore monitoring engine for real-time performance data collection.\nThis module is CRITICAL for the 100ms performance chart updates.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0769230769230769,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\predictive_flow_optimizer.py": {
      "file_path": "dashboard\\dashboard_core\\predictive_flow_optimizer.py",
      "component_name": "predictive_flow_optimizer",
      "analysis_timestamp": "2025-08-20 21:46:40.742714",
      "classes": [
        {
          "name": "OptimizationStrategy",
          "line_start": 27,
          "line_end": 35,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Flow optimization strategies.",
          "decorators": []
        },
        {
          "name": "FlowMetric",
          "line_start": 37,
          "line_end": 45,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Flow performance metrics.",
          "decorators": []
        },
        {
          "name": "PredictionType",
          "line_start": 47,
          "line_end": 53,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of predictions.",
          "decorators": []
        },
        {
          "name": "FlowPrediction",
          "line_start": 56,
          "line_end": 80,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 68,
              "line_end": 80,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 70
            }
          ],
          "docstring": "Flow prediction record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "OptimizationAction",
          "line_start": 83,
          "line_end": 105,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 94,
              "line_end": 105,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 64
            }
          ],
          "docstring": "Optimization action record.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PredictiveFlowOptimizer",
          "line_start": 107,
          "line_end": 1074,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 112,
              "line_end": 208,
              "args": [
                "self",
                "aggregator",
                "delivery_guarantee",
                "realtime_tracker",
                "db_path",
                "optimization_interval"
              ],
              "returns": null,
              "docstring": "Initialize predictive flow optimizer.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    delivery_guarantee: Delivery guarantee system\n    realtime_tracker: Real-time analytics tracker\n    db_path: Database path for optimization records\n    optimization_interval: Seconds between optimization cycles",
              "is_async": false,
              "decorators": [],
              "complexity_score": 415
            },
            {
              "name": "_init_database",
              "line_start": 210,
              "line_end": 262,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize flow optimizer database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 96
            },
            {
              "name": "_monitoring_loop",
              "line_start": 264,
              "line_end": 289,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background flow monitoring loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 103
            },
            {
              "name": "_collect_flow_metrics",
              "line_start": 291,
              "line_end": 335,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect current flow metrics from all systems.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 299
            },
            {
              "name": "_save_metrics_to_db",
              "line_start": 337,
              "line_end": 352,
              "args": [
                "self",
                "metrics"
              ],
              "returns": null,
              "docstring": "Save metrics to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "_update_baseline_metrics",
              "line_start": 354,
              "line_end": 368,
              "args": [
                "self",
                "current_metrics"
              ],
              "returns": null,
              "docstring": "Update baseline metrics for comparison.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 99
            },
            {
              "name": "_prediction_loop",
              "line_start": 370,
              "line_end": 385,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background prediction loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_generate_predictions",
              "line_start": 387,
              "line_end": 409,
              "args": [
                "self",
                "horizon_minutes"
              ],
              "returns": null,
              "docstring": "Generate predictions for specified time horizon.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 125
            },
            {
              "name": "_predict_volume",
              "line_start": 411,
              "line_end": 459,
              "args": [
                "self",
                "horizon_minutes"
              ],
              "returns": null,
              "docstring": "Predict analytics volume for time horizon.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 257
            },
            {
              "name": "_predict_bottlenecks",
              "line_start": 461,
              "line_end": 519,
              "args": [
                "self",
                "horizon_minutes"
              ],
              "returns": null,
              "docstring": "Predict bottleneck probability.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 331
            },
            {
              "name": "_predict_resource_demand",
              "line_start": 521,
              "line_end": 571,
              "args": [
                "self",
                "horizon_minutes"
              ],
              "returns": null,
              "docstring": "Predict resource demand.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 288
            },
            {
              "name": "_calculate_trend_slope",
              "line_start": 573,
              "line_end": 594,
              "args": [
                "self",
                "x_values",
                "y_values"
              ],
              "returns": null,
              "docstring": "Calculate trend slope using simple linear regression.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 184
            },
            {
              "name": "_validate_predictions",
              "line_start": 596,
              "line_end": 637,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Validate previous predictions against actual values.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 246
            },
            {
              "name": "_get_actual_value_for_prediction",
              "line_start": 639,
              "line_end": 671,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Get actual value for prediction validation.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 200
            },
            {
              "name": "_optimization_loop",
              "line_start": 673,
              "line_end": 687,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background optimization loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_identify_optimization_opportunities",
              "line_start": 689,
              "line_end": 702,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify potential optimization opportunities.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 66
            },
            {
              "name": "_evaluate_optimization_opportunity",
              "line_start": 704,
              "line_end": 743,
              "args": [
                "self",
                "strategy",
                "metrics"
              ],
              "returns": null,
              "docstring": "Evaluate optimization opportunity score for a strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 198
            },
            {
              "name": "_trigger_optimization",
              "line_start": 745,
              "line_end": 768,
              "args": [
                "self",
                "strategy",
                "metrics",
                "opportunity_score"
              ],
              "returns": null,
              "docstring": "Trigger an optimization action.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "_calculate_expected_improvement",
              "line_start": 770,
              "line_end": 788,
              "args": [
                "self",
                "strategy",
                "metrics"
              ],
              "returns": null,
              "docstring": "Calculate expected improvement for optimization strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 145
            },
            {
              "name": "_execute_optimizations",
              "line_start": 790,
              "line_end": 820,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Execute pending optimizations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 170
            },
            {
              "name": "_optimize_load_balancing",
              "line_start": 822,
              "line_end": 835,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement load balancing optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_optimize_predictive_caching",
              "line_start": 837,
              "line_end": 849,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement predictive caching optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_optimize_bottleneck_avoidance",
              "line_start": 851,
              "line_end": 863,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement bottleneck avoidance optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_optimize_parallel_processing",
              "line_start": 865,
              "line_end": 877,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement parallel processing optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_optimize_resource_scaling",
              "line_start": 879,
              "line_end": 888,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement resource scaling optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_optimize_priority_queuing",
              "line_start": 890,
              "line_end": 902,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement priority queuing optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            },
            {
              "name": "_optimize_adaptive_routing",
              "line_start": 904,
              "line_end": 913,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Implement adaptive routing optimization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 36
            },
            {
              "name": "_save_prediction",
              "line_start": 915,
              "line_end": 937,
              "args": [
                "self",
                "prediction"
              ],
              "returns": null,
              "docstring": "Save prediction to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 100
            },
            {
              "name": "_save_optimization_action",
              "line_start": 939,
              "line_end": 960,
              "args": [
                "self",
                "action"
              ],
              "returns": null,
              "docstring": "Save optimization action to database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 107
            },
            {
              "name": "get_optimization_statistics",
              "line_start": 962,
              "line_end": 1003,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive optimization statistics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 344
            },
            {
              "name": "force_optimization",
              "line_start": 1005,
              "line_end": 1032,
              "args": [
                "self",
                "strategy"
              ],
              "returns": null,
              "docstring": "Force execution of specific optimization strategy.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "get_prediction_details",
              "line_start": 1034,
              "line_end": 1063,
              "args": [
                "self",
                "prediction_id"
              ],
              "returns": null,
              "docstring": "Get detailed information about a specific prediction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 165
            },
            {
              "name": "shutdown",
              "line_start": 1065,
              "line_end": 1074,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown predictive flow optimizer.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 59
            }
          ],
          "docstring": "AI-powered predictive analytics flow optimization system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 68,
          "line_end": 80,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 70
        },
        {
          "name": "to_dict",
          "line_start": 94,
          "line_end": 105,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 64
        },
        {
          "name": "__init__",
          "line_start": 112,
          "line_end": 208,
          "args": [
            "self",
            "aggregator",
            "delivery_guarantee",
            "realtime_tracker",
            "db_path",
            "optimization_interval"
          ],
          "returns": null,
          "docstring": "Initialize predictive flow optimizer.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    delivery_guarantee: Delivery guarantee system\n    realtime_tracker: Real-time analytics tracker\n    db_path: Database path for optimization records\n    optimization_interval: Seconds between optimization cycles",
          "is_async": false,
          "decorators": [],
          "complexity_score": 415
        },
        {
          "name": "_init_database",
          "line_start": 210,
          "line_end": 262,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize flow optimizer database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 96
        },
        {
          "name": "_monitoring_loop",
          "line_start": 264,
          "line_end": 289,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background flow monitoring loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 103
        },
        {
          "name": "_collect_flow_metrics",
          "line_start": 291,
          "line_end": 335,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect current flow metrics from all systems.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 299
        },
        {
          "name": "_save_metrics_to_db",
          "line_start": 337,
          "line_end": 352,
          "args": [
            "self",
            "metrics"
          ],
          "returns": null,
          "docstring": "Save metrics to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "_update_baseline_metrics",
          "line_start": 354,
          "line_end": 368,
          "args": [
            "self",
            "current_metrics"
          ],
          "returns": null,
          "docstring": "Update baseline metrics for comparison.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 99
        },
        {
          "name": "_prediction_loop",
          "line_start": 370,
          "line_end": 385,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background prediction loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_generate_predictions",
          "line_start": 387,
          "line_end": 409,
          "args": [
            "self",
            "horizon_minutes"
          ],
          "returns": null,
          "docstring": "Generate predictions for specified time horizon.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 125
        },
        {
          "name": "_predict_volume",
          "line_start": 411,
          "line_end": 459,
          "args": [
            "self",
            "horizon_minutes"
          ],
          "returns": null,
          "docstring": "Predict analytics volume for time horizon.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 257
        },
        {
          "name": "_predict_bottlenecks",
          "line_start": 461,
          "line_end": 519,
          "args": [
            "self",
            "horizon_minutes"
          ],
          "returns": null,
          "docstring": "Predict bottleneck probability.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 331
        },
        {
          "name": "_predict_resource_demand",
          "line_start": 521,
          "line_end": 571,
          "args": [
            "self",
            "horizon_minutes"
          ],
          "returns": null,
          "docstring": "Predict resource demand.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 288
        },
        {
          "name": "_calculate_trend_slope",
          "line_start": 573,
          "line_end": 594,
          "args": [
            "self",
            "x_values",
            "y_values"
          ],
          "returns": null,
          "docstring": "Calculate trend slope using simple linear regression.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 184
        },
        {
          "name": "_validate_predictions",
          "line_start": 596,
          "line_end": 637,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Validate previous predictions against actual values.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 246
        },
        {
          "name": "_get_actual_value_for_prediction",
          "line_start": 639,
          "line_end": 671,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Get actual value for prediction validation.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 200
        },
        {
          "name": "_optimization_loop",
          "line_start": 673,
          "line_end": 687,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background optimization loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_identify_optimization_opportunities",
          "line_start": 689,
          "line_end": 702,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify potential optimization opportunities.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 66
        },
        {
          "name": "_evaluate_optimization_opportunity",
          "line_start": 704,
          "line_end": 743,
          "args": [
            "self",
            "strategy",
            "metrics"
          ],
          "returns": null,
          "docstring": "Evaluate optimization opportunity score for a strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 198
        },
        {
          "name": "_trigger_optimization",
          "line_start": 745,
          "line_end": 768,
          "args": [
            "self",
            "strategy",
            "metrics",
            "opportunity_score"
          ],
          "returns": null,
          "docstring": "Trigger an optimization action.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "_calculate_expected_improvement",
          "line_start": 770,
          "line_end": 788,
          "args": [
            "self",
            "strategy",
            "metrics"
          ],
          "returns": null,
          "docstring": "Calculate expected improvement for optimization strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 145
        },
        {
          "name": "_execute_optimizations",
          "line_start": 790,
          "line_end": 820,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Execute pending optimizations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 170
        },
        {
          "name": "_optimize_load_balancing",
          "line_start": 822,
          "line_end": 835,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement load balancing optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_optimize_predictive_caching",
          "line_start": 837,
          "line_end": 849,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement predictive caching optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_optimize_bottleneck_avoidance",
          "line_start": 851,
          "line_end": 863,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement bottleneck avoidance optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_optimize_parallel_processing",
          "line_start": 865,
          "line_end": 877,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement parallel processing optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_optimize_resource_scaling",
          "line_start": 879,
          "line_end": 888,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement resource scaling optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_optimize_priority_queuing",
          "line_start": 890,
          "line_end": 902,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement priority queuing optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        },
        {
          "name": "_optimize_adaptive_routing",
          "line_start": 904,
          "line_end": 913,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Implement adaptive routing optimization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 36
        },
        {
          "name": "_save_prediction",
          "line_start": 915,
          "line_end": 937,
          "args": [
            "self",
            "prediction"
          ],
          "returns": null,
          "docstring": "Save prediction to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 100
        },
        {
          "name": "_save_optimization_action",
          "line_start": 939,
          "line_end": 960,
          "args": [
            "self",
            "action"
          ],
          "returns": null,
          "docstring": "Save optimization action to database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 107
        },
        {
          "name": "get_optimization_statistics",
          "line_start": 962,
          "line_end": 1003,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive optimization statistics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 344
        },
        {
          "name": "force_optimization",
          "line_start": 1005,
          "line_end": 1032,
          "args": [
            "self",
            "strategy"
          ],
          "returns": null,
          "docstring": "Force execution of specific optimization strategy.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "get_prediction_details",
          "line_start": 1034,
          "line_end": 1063,
          "args": [
            "self",
            "prediction_id"
          ],
          "returns": null,
          "docstring": "Get detailed information about a specific prediction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 165
        },
        {
          "name": "shutdown",
          "line_start": 1065,
          "line_end": 1074,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown predictive flow optimizer.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 59
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "math",
          "names": [
            "math"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "sqlite3",
          "names": [
            "sqlite3"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Set",
            "Tuple",
            "Callable"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        }
      ],
      "external_dependencies": "{'sqlite3', 'typing', 'time', 'dataclasses', 'json', 'logging', 'enum', 'threading', 'os', 'math', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 1077,
      "complexity_score": 9998,
      "api_surface_area": 12,
      "docstring": "Predictive Analytics Flow Optimizer\n==================================\n\nAI-powered predictive optimization system that learns from analytics patterns\nto optimize flow, prevent bottlenecks, and maximize system efficiency.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.024390243902439,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\realtime_analytics_tracker.py": {
      "file_path": "dashboard\\dashboard_core\\realtime_analytics_tracker.py",
      "component_name": "realtime_analytics_tracker",
      "analysis_timestamp": "2025-08-20 21:46:40.755716",
      "classes": [
        {
          "name": "TrackingEvent",
          "line_start": 26,
          "line_end": 35,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Analytics tracking event types.",
          "decorators": []
        },
        {
          "name": "TrackingPriority",
          "line_start": 37,
          "line_end": 42,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Tracking priority levels.",
          "decorators": []
        },
        {
          "name": "AnalyticsTrackingEntry",
          "line_start": 45,
          "line_end": 71,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 58,
              "line_end": 71,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary for JSON serialization.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            }
          ],
          "docstring": "Real-time analytics tracking entry.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "RealTimeAnalyticsTracker",
          "line_start": 73,
          "line_end": 605,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 78,
              "line_end": 153,
              "args": [
                "self",
                "aggregator",
                "max_entries",
                "websocket_port"
              ],
              "returns": null,
              "docstring": "Initialize real-time analytics tracker.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    max_entries: Maximum tracking entries to keep\n    websocket_port: WebSocket server port for real-time updates",
              "is_async": false,
              "decorators": [],
              "complexity_score": 320
            },
            {
              "name": "track_event",
              "line_start": 155,
              "line_end": 206,
              "args": [
                "self",
                "analytics_id",
                "event",
                "component",
                "data_size",
                "processing_time",
                "priority",
                "metadata",
                "error_info"
              ],
              "returns": null,
              "docstring": "Track an analytics event.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    event: Type of event\n    component: Component generating the event\n    data_size: Size of data in bytes\n    processing_time: Processing time in seconds\n    priority: Event priority\n    metadata: Additional metadata\n    error_info: Error information if applicable\n    \nReturns:\n    Tracking ID",
              "is_async": false,
              "decorators": [],
              "complexity_score": 157
            },
            {
              "name": "_processing_loop",
              "line_start": 208,
              "line_end": 226,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background event processing loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 67
            },
            {
              "name": "_process_tracking_entry",
              "line_start": 228,
              "line_end": 289,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Process a single tracking entry.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 356
            },
            {
              "name": "_update_component_metrics",
              "line_start": 291,
              "line_end": 308,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Update metrics for a component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 109
            },
            {
              "name": "_schedule_analytics_cleanup",
              "line_start": 310,
              "line_end": 318,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Schedule cleanup of completed analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 53
            },
            {
              "name": "_stats_loop",
              "line_start": 320,
              "line_end": 363,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background statistics calculation loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 260
            },
            {
              "name": "_websocket_server",
              "line_start": 365,
              "line_end": 416,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "WebSocket server for real-time updates.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 236
            },
            {
              "name": "_broadcast_event",
              "line_start": 487,
              "line_end": 523,
              "args": [
                "self",
                "entry"
              ],
              "returns": null,
              "docstring": "Broadcast tracking event to WebSocket clients.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 161
            },
            {
              "name": "get_tracking_summary",
              "line_start": 525,
              "line_end": 541,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get comprehensive tracking summary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 105
            },
            {
              "name": "get_analytics_journey",
              "line_start": 543,
              "line_end": 564,
              "args": [
                "self",
                "analytics_id"
              ],
              "returns": null,
              "docstring": "Get complete journey of specific analytics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 91
            },
            {
              "name": "get_component_performance",
              "line_start": 566,
              "line_end": 584,
              "args": [
                "self",
                "component"
              ],
              "returns": null,
              "docstring": "Get performance metrics for specific component.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 118
            },
            {
              "name": "shutdown",
              "line_start": 586,
              "line_end": 605,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown real-time analytics tracker.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 95
            }
          ],
          "docstring": "Real-time analytics flow tracking and monitoring system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 58,
          "line_end": 71,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary for JSON serialization.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "__init__",
          "line_start": 78,
          "line_end": 153,
          "args": [
            "self",
            "aggregator",
            "max_entries",
            "websocket_port"
          ],
          "returns": null,
          "docstring": "Initialize real-time analytics tracker.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    max_entries: Maximum tracking entries to keep\n    websocket_port: WebSocket server port for real-time updates",
          "is_async": false,
          "decorators": [],
          "complexity_score": 320
        },
        {
          "name": "track_event",
          "line_start": 155,
          "line_end": 206,
          "args": [
            "self",
            "analytics_id",
            "event",
            "component",
            "data_size",
            "processing_time",
            "priority",
            "metadata",
            "error_info"
          ],
          "returns": null,
          "docstring": "Track an analytics event.\n\nArgs:\n    analytics_id: Unique analytics identifier\n    event: Type of event\n    component: Component generating the event\n    data_size: Size of data in bytes\n    processing_time: Processing time in seconds\n    priority: Event priority\n    metadata: Additional metadata\n    error_info: Error information if applicable\n    \nReturns:\n    Tracking ID",
          "is_async": false,
          "decorators": [],
          "complexity_score": 157
        },
        {
          "name": "_processing_loop",
          "line_start": 208,
          "line_end": 226,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background event processing loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 67
        },
        {
          "name": "_process_tracking_entry",
          "line_start": 228,
          "line_end": 289,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Process a single tracking entry.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 356
        },
        {
          "name": "_update_component_metrics",
          "line_start": 291,
          "line_end": 308,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Update metrics for a component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 109
        },
        {
          "name": "_schedule_analytics_cleanup",
          "line_start": 310,
          "line_end": 318,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Schedule cleanup of completed analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 53
        },
        {
          "name": "_stats_loop",
          "line_start": 320,
          "line_end": 363,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background statistics calculation loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 260
        },
        {
          "name": "_websocket_server",
          "line_start": 365,
          "line_end": 416,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "WebSocket server for real-time updates.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 236
        },
        {
          "name": "_broadcast_event",
          "line_start": 487,
          "line_end": 523,
          "args": [
            "self",
            "entry"
          ],
          "returns": null,
          "docstring": "Broadcast tracking event to WebSocket clients.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 161
        },
        {
          "name": "get_tracking_summary",
          "line_start": 525,
          "line_end": 541,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get comprehensive tracking summary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 105
        },
        {
          "name": "get_analytics_journey",
          "line_start": 543,
          "line_end": 564,
          "args": [
            "self",
            "analytics_id"
          ],
          "returns": null,
          "docstring": "Get complete journey of specific analytics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 91
        },
        {
          "name": "get_component_performance",
          "line_start": 566,
          "line_end": 584,
          "args": [
            "self",
            "component"
          ],
          "returns": null,
          "docstring": "Get performance metrics for specific component.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 118
        },
        {
          "name": "shutdown",
          "line_start": 586,
          "line_end": 605,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown real-time analytics tracker.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 95
        },
        {
          "name": "cleanup",
          "line_start": 312,
          "line_end": 315,
          "args": [],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 26
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "websockets",
          "names": [
            "websockets"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "asyncio",
          "names": [
            "asyncio"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 368
        },
        {
          "module": "websockets",
          "names": [
            "websockets"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 369
        }
      ],
      "external_dependencies": "{'typing', 'time', 'dataclasses', 'websockets', 'json', 'logging', 'enum', 'threading', 'queue', 'asyncio', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 608,
      "complexity_score": 4430,
      "api_surface_area": 13,
      "docstring": "Real-Time Analytics Flow Tracker\n=================================\n\nProvides real-time tracking and monitoring of all analytics flowing\nthrough the system with live dashboards and instant notifications.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": true,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\real_data_extractor.py": {
      "file_path": "dashboard\\dashboard_core\\real_data_extractor.py",
      "component_name": "real_data_extractor",
      "analysis_timestamp": "2025-08-20 21:46:40.766226",
      "classes": [
        {
          "name": "RealDataExtractor",
          "line_start": 33,
          "line_end": 558,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 36,
              "line_end": 43,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize real data extractor.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 39
            },
            {
              "name": "_import_testmaster_components",
              "line_start": 45,
              "line_end": 71,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Import real TestMaster components for data extraction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "get_real_intelligence_agents",
              "line_start": 73,
              "line_end": 140,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real intelligence agent data from running system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 368
            },
            {
              "name": "get_real_test_generation_data",
              "line_start": 142,
              "line_end": 180,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real test generation data from the system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "get_real_security_data",
              "line_start": 182,
              "line_end": 241,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real security scan data from the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 259
            },
            {
              "name": "get_real_coverage_data",
              "line_start": 243,
              "line_end": 288,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real coverage data from the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 270
            },
            {
              "name": "get_real_performance_metrics",
              "line_start": 290,
              "line_end": 337,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real performance metrics from the running system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 250
            },
            {
              "name": "get_real_quality_metrics",
              "line_start": 339,
              "line_end": 400,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real quality metrics from code analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 380
            },
            {
              "name": "get_real_workflow_data",
              "line_start": 402,
              "line_end": 465,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real workflow and DAG data from the system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 335
            },
            {
              "name": "get_real_async_data",
              "line_start": 467,
              "line_end": 508,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real async processing data from the system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 171
            },
            {
              "name": "get_real_telemetry_data",
              "line_start": 510,
              "line_end": 558,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get real telemetry data from the system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 282
            }
          ],
          "docstring": "Extracts real data from the running TestMaster system.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_real_data_extractor",
          "line_start": 564,
          "line_end": 569,
          "args": [],
          "returns": null,
          "docstring": "Get singleton instance of real data extractor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 22
        },
        {
          "name": "__init__",
          "line_start": 36,
          "line_end": 43,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize real data extractor.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 39
        },
        {
          "name": "_import_testmaster_components",
          "line_start": 45,
          "line_end": 71,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Import real TestMaster components for data extraction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "get_real_intelligence_agents",
          "line_start": 73,
          "line_end": 140,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real intelligence agent data from running system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 368
        },
        {
          "name": "get_real_test_generation_data",
          "line_start": 142,
          "line_end": 180,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real test generation data from the system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "get_real_security_data",
          "line_start": 182,
          "line_end": 241,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real security scan data from the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 259
        },
        {
          "name": "get_real_coverage_data",
          "line_start": 243,
          "line_end": 288,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real coverage data from the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 270
        },
        {
          "name": "get_real_performance_metrics",
          "line_start": 290,
          "line_end": 337,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real performance metrics from the running system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 250
        },
        {
          "name": "get_real_quality_metrics",
          "line_start": 339,
          "line_end": 400,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real quality metrics from code analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 380
        },
        {
          "name": "get_real_workflow_data",
          "line_start": 402,
          "line_end": 465,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real workflow and DAG data from the system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 335
        },
        {
          "name": "get_real_async_data",
          "line_start": 467,
          "line_end": 508,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real async processing data from the system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 171
        },
        {
          "name": "get_real_telemetry_data",
          "line_start": 510,
          "line_end": 558,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get real telemetry data from the system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 282
        }
      ],
      "imports": [
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "importlib",
          "names": [
            "importlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "subprocess",
          "names": [
            "subprocess"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 23
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "queue",
          "names": [
            "queue"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 25
        },
        {
          "module": "testmaster.core.config",
          "names": [
            "get_config"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 49
        },
        {
          "module": "testmaster.core.test_generator",
          "names": [
            "TestGenerator"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 50
        },
        {
          "module": "testmaster.core.shared_state",
          "names": [
            "get_shared_state"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 51
        },
        {
          "module": "testmaster.intelligence.consensus",
          "names": [
            "ConsensusEngine"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 52
        },
        {
          "module": "testmaster.intelligence.multi_agent",
          "names": [
            "MultiAgentSystem"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 53
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 478
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 211
        }
      ],
      "external_dependencies": "{'pathlib', 'psutil', 'subprocess', 'typing', 'time', 'sys', 'json', 'logging', 're', 'threading', 'importlib', 'os', 'queue', 'ast', 'datetime', 'collections'}",
      "internal_dependencies": "{'testmaster.core.test_generator', 'testmaster.intelligence.multi_agent', 'testmaster.core.config', 'testmaster.core.shared_state', 'testmaster.intelligence.consensus'}",
      "lines_of_code": 569,
      "complexity_score": 5250,
      "api_surface_area": 19,
      "docstring": "Real Data Extractor for TestMaster Dashboard\n============================================\n\nExtracts REAL data from the actual running TestMaster system.\nNO mock data, NO random values - only actual system state.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": true,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0769230769230769,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\real_time_analytics.py": {
      "file_path": "dashboard\\dashboard_core\\real_time_analytics.py",
      "component_name": "real_time_analytics",
      "analysis_timestamp": "2025-08-20 21:46:40.772794",
      "classes": [],
      "functions": [
        {
          "name": "get_analytics_collector",
          "line_start": 12,
          "line_end": 14,
          "args": [],
          "returns": null,
          "docstring": "Get the global analytics collector instance.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 7
        },
        {
          "name": "start_analytics",
          "line_start": 16,
          "line_end": 18,
          "args": [],
          "returns": null,
          "docstring": "Start analytics collection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 10
        },
        {
          "name": "stop_analytics",
          "line_start": 20,
          "line_end": 22,
          "args": [],
          "returns": null,
          "docstring": "Stop analytics collection.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 10
        },
        {
          "name": "get_real_time_metrics",
          "line_start": 24,
          "line_end": 26,
          "args": [],
          "returns": null,
          "docstring": "Get real-time metrics for dashboard.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 10
        },
        {
          "name": "get_test_metrics",
          "line_start": 28,
          "line_end": 30,
          "args": [],
          "returns": null,
          "docstring": "Get test execution metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 10
        }
      ],
      "imports": [
        {
          "module": "enhance_analytics",
          "names": [
            "RealTimeAnalyticsCollector"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 7
        }
      ],
      "external_dependencies": "{'enhance_analytics'}",
      "internal_dependencies": "set()",
      "lines_of_code": 33,
      "complexity_score": 47,
      "api_surface_area": 5,
      "docstring": "Real-Time Analytics Integration\n================================\nEnhanced analytics for dashboard.",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": false,
      "ml_libraries": "set()",
      "documentation_coverage": 1.2,
      "estimated_migration_complexity": "low"
    },
    "dashboard\\dashboard_core\\system_observability_metrics.py": {
      "file_path": "dashboard\\dashboard_core\\system_observability_metrics.py",
      "component_name": "system_observability_metrics",
      "analysis_timestamp": "2025-08-20 21:46:40.776977",
      "classes": [
        {
          "name": "MetricType",
          "line_start": 27,
          "line_end": 33,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Metric type classifications.",
          "decorators": []
        },
        {
          "name": "MetricSeverity",
          "line_start": 35,
          "line_end": 40,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Metric severity levels.",
          "decorators": []
        },
        {
          "name": "MetricPoint",
          "line_start": 43,
          "line_end": 57,
          "base_classes": [],
          "methods": [
            {
              "name": "to_dict",
              "line_start": 50,
              "line_end": 57,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Convert to dictionary.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 42
            }
          ],
          "docstring": "Single metric data point.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "MetricSeries",
          "line_start": 60,
          "line_end": 115,
          "base_classes": [],
          "methods": [
            {
              "name": "__post_init__",
              "line_start": 68,
              "line_end": 70,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": null,
              "is_async": false,
              "decorators": [],
              "complexity_score": 28
            },
            {
              "name": "add_point",
              "line_start": 72,
              "line_end": 80,
              "args": [
                "self",
                "value",
                "labels",
                "severity"
              ],
              "returns": null,
              "docstring": "Add a metric point.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 65
            },
            {
              "name": "get_latest",
              "line_start": 82,
              "line_end": 84,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get latest metric point.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 27
            },
            {
              "name": "get_average",
              "line_start": 86,
              "line_end": 97,
              "args": [
                "self",
                "time_window"
              ],
              "returns": null,
              "docstring": "Get average value over time window.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 89
            },
            {
              "name": "get_percentile",
              "line_start": 99,
              "line_end": 115,
              "args": [
                "self",
                "percentile",
                "time_window"
              ],
              "returns": null,
              "docstring": "Get percentile value over time window.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 129
            }
          ],
          "docstring": "Time series of metric points.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SystemObservabilityMetrics",
          "line_start": 117,
          "line_end": 837,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 122,
              "line_end": 195,
              "args": [
                "self",
                "aggregator",
                "collection_interval",
                "retention_hours"
              ],
              "returns": null,
              "docstring": "Initialize observability metrics.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    collection_interval: Seconds between metric collection\n    retention_hours: Hours to retain metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 232
            },
            {
              "name": "_initialize_metrics",
              "line_start": 197,
              "line_end": 294,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize core metric series.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 701
            },
            {
              "name": "add_alert_handler",
              "line_start": 296,
              "line_end": 303,
              "args": [
                "self",
                "handler"
              ],
              "returns": null,
              "docstring": "Add alert handler.\n\nArgs:\n    handler: Function(metric_name, message, severity, context)",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "record_metric",
              "line_start": 305,
              "line_end": 327,
              "args": [
                "self",
                "name",
                "value",
                "labels",
                "severity"
              ],
              "returns": null,
              "docstring": "Record a metric value.\n\nArgs:\n    name: Metric name\n    value: Metric value\n    labels: Optional labels\n    severity: Severity level",
              "is_async": false,
              "decorators": [],
              "complexity_score": 98
            },
            {
              "name": "_check_threshold",
              "line_start": 329,
              "line_end": 339,
              "args": [
                "self",
                "metric_name",
                "value"
              ],
              "returns": null,
              "docstring": "Check if metric value exceeds thresholds.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 90
            },
            {
              "name": "_trigger_alert",
              "line_start": 341,
              "line_end": 359,
              "args": [
                "self",
                "metric_name",
                "value",
                "severity"
              ],
              "returns": null,
              "docstring": "Trigger alert for metric threshold breach.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 123
            },
            {
              "name": "_collection_loop",
              "line_start": 361,
              "line_end": 399,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background metric collection loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 152
            },
            {
              "name": "_collect_system_metrics",
              "line_start": 401,
              "line_end": 431,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect system-level metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 169
            },
            {
              "name": "_collect_analytics_metrics",
              "line_start": 433,
              "line_end": 482,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect analytics-specific metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 288
            },
            {
              "name": "_collect_robustness_metrics",
              "line_start": 484,
              "line_end": 542,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect robustness-specific metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 325
            },
            {
              "name": "_collect_performance_metrics",
              "line_start": 544,
              "line_end": 568,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect performance-specific metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 155
            },
            {
              "name": "_collect_error_metrics",
              "line_start": 570,
              "line_end": 600,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect error-specific metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 175
            },
            {
              "name": "_collect_business_metrics",
              "line_start": 602,
              "line_end": 644,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect business-specific metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 237
            },
            {
              "name": "_cleanup_loop",
              "line_start": 646,
              "line_end": 669,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Background cleanup loop.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 141
            },
            {
              "name": "get_metric_summary",
              "line_start": 671,
              "line_end": 711,
              "args": [
                "self",
                "group"
              ],
              "returns": null,
              "docstring": "Get metric summary.\n\nArgs:\n    group: Metric group to filter by\n    \nReturns:\n    Metric summary",
              "is_async": false,
              "decorators": [],
              "complexity_score": 222
            },
            {
              "name": "get_metric_data",
              "line_start": 713,
              "line_end": 744,
              "args": [
                "self",
                "metric_name",
                "time_window",
                "limit"
              ],
              "returns": null,
              "docstring": "Get raw metric data points.\n\nArgs:\n    metric_name: Name of metric\n    time_window: Time window to filter\n    limit: Maximum points to return\n    \nReturns:\n    List of metric points",
              "is_async": false,
              "decorators": [],
              "complexity_score": 138
            },
            {
              "name": "get_health_score",
              "line_start": 746,
              "line_end": 792,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Calculate overall system health score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 361
            },
            {
              "name": "export_metrics",
              "line_start": 794,
              "line_end": 825,
              "args": [
                "self",
                "format_type"
              ],
              "returns": null,
              "docstring": "Export metrics in specified format.\n\nArgs:\n    format_type: Export format ('json', 'prometheus', 'csv')\n    \nReturns:\n    Formatted metrics string",
              "is_async": false,
              "decorators": [],
              "complexity_score": 211
            },
            {
              "name": "shutdown",
              "line_start": 827,
              "line_end": 837,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown observability system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 72
            }
          ],
          "docstring": "Comprehensive system observability and metrics collection.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "to_dict",
          "line_start": 50,
          "line_end": 57,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Convert to dictionary.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 42
        },
        {
          "name": "__post_init__",
          "line_start": 68,
          "line_end": 70,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": null,
          "is_async": false,
          "decorators": [],
          "complexity_score": 28
        },
        {
          "name": "add_point",
          "line_start": 72,
          "line_end": 80,
          "args": [
            "self",
            "value",
            "labels",
            "severity"
          ],
          "returns": null,
          "docstring": "Add a metric point.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 65
        },
        {
          "name": "get_latest",
          "line_start": 82,
          "line_end": 84,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get latest metric point.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 27
        },
        {
          "name": "get_average",
          "line_start": 86,
          "line_end": 97,
          "args": [
            "self",
            "time_window"
          ],
          "returns": null,
          "docstring": "Get average value over time window.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 89
        },
        {
          "name": "get_percentile",
          "line_start": 99,
          "line_end": 115,
          "args": [
            "self",
            "percentile",
            "time_window"
          ],
          "returns": null,
          "docstring": "Get percentile value over time window.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 129
        },
        {
          "name": "__init__",
          "line_start": 122,
          "line_end": 195,
          "args": [
            "self",
            "aggregator",
            "collection_interval",
            "retention_hours"
          ],
          "returns": null,
          "docstring": "Initialize observability metrics.\n\nArgs:\n    aggregator: Analytics aggregator instance\n    collection_interval: Seconds between metric collection\n    retention_hours: Hours to retain metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 232
        },
        {
          "name": "_initialize_metrics",
          "line_start": 197,
          "line_end": 294,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize core metric series.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 701
        },
        {
          "name": "add_alert_handler",
          "line_start": 296,
          "line_end": 303,
          "args": [
            "self",
            "handler"
          ],
          "returns": null,
          "docstring": "Add alert handler.\n\nArgs:\n    handler: Function(metric_name, message, severity, context)",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "record_metric",
          "line_start": 305,
          "line_end": 327,
          "args": [
            "self",
            "name",
            "value",
            "labels",
            "severity"
          ],
          "returns": null,
          "docstring": "Record a metric value.\n\nArgs:\n    name: Metric name\n    value: Metric value\n    labels: Optional labels\n    severity: Severity level",
          "is_async": false,
          "decorators": [],
          "complexity_score": 98
        },
        {
          "name": "_check_threshold",
          "line_start": 329,
          "line_end": 339,
          "args": [
            "self",
            "metric_name",
            "value"
          ],
          "returns": null,
          "docstring": "Check if metric value exceeds thresholds.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 90
        },
        {
          "name": "_trigger_alert",
          "line_start": 341,
          "line_end": 359,
          "args": [
            "self",
            "metric_name",
            "value",
            "severity"
          ],
          "returns": null,
          "docstring": "Trigger alert for metric threshold breach.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 123
        },
        {
          "name": "_collection_loop",
          "line_start": 361,
          "line_end": 399,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background metric collection loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 152
        },
        {
          "name": "_collect_system_metrics",
          "line_start": 401,
          "line_end": 431,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect system-level metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 169
        },
        {
          "name": "_collect_analytics_metrics",
          "line_start": 433,
          "line_end": 482,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect analytics-specific metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 288
        },
        {
          "name": "_collect_robustness_metrics",
          "line_start": 484,
          "line_end": 542,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect robustness-specific metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 325
        },
        {
          "name": "_collect_performance_metrics",
          "line_start": 544,
          "line_end": 568,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect performance-specific metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 155
        },
        {
          "name": "_collect_error_metrics",
          "line_start": 570,
          "line_end": 600,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect error-specific metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 175
        },
        {
          "name": "_collect_business_metrics",
          "line_start": 602,
          "line_end": 644,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect business-specific metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 237
        },
        {
          "name": "_cleanup_loop",
          "line_start": 646,
          "line_end": 669,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Background cleanup loop.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 141
        },
        {
          "name": "get_metric_summary",
          "line_start": 671,
          "line_end": 711,
          "args": [
            "self",
            "group"
          ],
          "returns": null,
          "docstring": "Get metric summary.\n\nArgs:\n    group: Metric group to filter by\n    \nReturns:\n    Metric summary",
          "is_async": false,
          "decorators": [],
          "complexity_score": 222
        },
        {
          "name": "get_metric_data",
          "line_start": 713,
          "line_end": 744,
          "args": [
            "self",
            "metric_name",
            "time_window",
            "limit"
          ],
          "returns": null,
          "docstring": "Get raw metric data points.\n\nArgs:\n    metric_name: Name of metric\n    time_window: Time window to filter\n    limit: Maximum points to return\n    \nReturns:\n    List of metric points",
          "is_async": false,
          "decorators": [],
          "complexity_score": 138
        },
        {
          "name": "get_health_score",
          "line_start": 746,
          "line_end": 792,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Calculate overall system health score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 361
        },
        {
          "name": "export_metrics",
          "line_start": 794,
          "line_end": 825,
          "args": [
            "self",
            "format_type"
          ],
          "returns": null,
          "docstring": "Export metrics in specified format.\n\nArgs:\n    format_type: Export format ('json', 'prometheus', 'csv')\n    \nReturns:\n    Formatted metrics string",
          "is_async": false,
          "decorators": [],
          "complexity_score": 211
        },
        {
          "name": "shutdown",
          "line_start": 827,
          "line_end": 837,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown observability system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 72
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "psutil",
          "names": [
            "psutil"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 16
        },
        {
          "module": "platform",
          "names": [
            "platform"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Callable",
            "Tuple",
            "Set"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 19
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 20
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 21
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 22
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        }
      ],
      "external_dependencies": "{'platform', 'psutil', 'dataclasses', 'time', 'typing', 'json', 'logging', 'enum', 'threading', 'os', 'statistics', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 840,
      "complexity_score": 8606,
      "api_surface_area": 24,
      "docstring": "System-Wide Observability Metrics\n==================================\n\nComprehensive observability system providing deep insights into all aspects\nof the analytics pipeline with advanced metrics collection and analysis.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": true,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0,
      "estimated_migration_complexity": "medium"
    },
    "dashboard\\dashboard_core\\test_collector.py": {
      "file_path": "dashboard\\dashboard_core\\test_collector.py",
      "component_name": "test_collector",
      "analysis_timestamp": "2025-08-20 21:46:40.789099",
      "classes": [
        {
          "name": "TestResultsCollector",
          "line_start": 23,
          "line_end": 402,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 28,
              "line_end": 40,
              "args": [
                "self",
                "base_path"
              ],
              "returns": null,
              "docstring": "Initialize the test results collector.\n\nArgs:\n    base_path: Base path to search for test results",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "collect_all_results",
              "line_start": 42,
              "line_end": 61,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect all available test results and coverage data.\n\nReturns:\n    Dictionary containing all test metrics",
              "is_async": false,
              "decorators": [],
              "complexity_score": 78
            },
            {
              "name": "_collect_pytest_results",
              "line_start": 63,
              "line_end": 112,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect pytest results from various formats.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 358
            },
            {
              "name": "_collect_coverage_data",
              "line_start": 114,
              "line_end": 162,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Collect test coverage data.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 272
            },
            {
              "name": "_analyze_test_files",
              "line_start": 164,
              "line_end": 218,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze test files in the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 340
            },
            {
              "name": "_analyze_test_quality",
              "line_start": 220,
              "line_end": 291,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Analyze test quality metrics.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 439
            },
            {
              "name": "_estimate_from_test_files",
              "line_start": 293,
              "line_end": 318,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Estimate test results from test file analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 186
            },
            {
              "name": "_estimate_coverage",
              "line_start": 320,
              "line_end": 347,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Estimate coverage based on test/source ratio.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 228
            },
            {
              "name": "_calculate_summary",
              "line_start": 349,
              "line_end": 380,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "docstring": "Calculate summary metrics from all results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 228
            },
            {
              "name": "get_recent_failures",
              "line_start": 382,
              "line_end": 402,
              "args": [
                "self",
                "limit"
              ],
              "returns": null,
              "docstring": "Get recent test failures for debugging.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 151
            }
          ],
          "docstring": "Collects test results from multiple sources and formats.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 28,
          "line_end": 40,
          "args": [
            "self",
            "base_path"
          ],
          "returns": null,
          "docstring": "Initialize the test results collector.\n\nArgs:\n    base_path: Base path to search for test results",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "collect_all_results",
          "line_start": 42,
          "line_end": 61,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect all available test results and coverage data.\n\nReturns:\n    Dictionary containing all test metrics",
          "is_async": false,
          "decorators": [],
          "complexity_score": 78
        },
        {
          "name": "_collect_pytest_results",
          "line_start": 63,
          "line_end": 112,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect pytest results from various formats.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 358
        },
        {
          "name": "_collect_coverage_data",
          "line_start": 114,
          "line_end": 162,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Collect test coverage data.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 272
        },
        {
          "name": "_analyze_test_files",
          "line_start": 164,
          "line_end": 218,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze test files in the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 340
        },
        {
          "name": "_analyze_test_quality",
          "line_start": 220,
          "line_end": 291,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Analyze test quality metrics.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 439
        },
        {
          "name": "_estimate_from_test_files",
          "line_start": 293,
          "line_end": 318,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Estimate test results from test file analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 186
        },
        {
          "name": "_estimate_coverage",
          "line_start": 320,
          "line_end": 347,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Estimate coverage based on test/source ratio.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 228
        },
        {
          "name": "_calculate_summary",
          "line_start": 349,
          "line_end": 380,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "docstring": "Calculate summary metrics from all results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 228
        },
        {
          "name": "get_recent_failures",
          "line_start": 382,
          "line_end": 402,
          "args": [
            "self",
            "limit"
          ],
          "returns": null,
          "docstring": "Get recent test failures for debugging.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 151
        }
      ],
      "imports": [
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 11
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 12
        },
        {
          "module": "os",
          "names": [
            "os"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 13
        },
        {
          "module": "glob",
          "names": [
            "glob"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 14
        },
        {
          "module": "xml.etree.ElementTree",
          "names": [
            "xml.etree.ElementTree"
          ],
          "alias": "ET",
          "is_from_import": false,
          "line_number": 15
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 16
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 17
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 18
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        }
      ],
      "external_dependencies": "{'pathlib', 'xml.etree.ElementTree', 'typing', 'json', 'logging', 'glob', 're', 'os', 'datetime'}",
      "internal_dependencies": "set()",
      "lines_of_code": 402,
      "complexity_score": 4718,
      "api_surface_area": 4,
      "docstring": "Test Results Collector\n======================\n\nCollects and aggregates test results from various sources.\nProvides real test metrics to the dashboard.\n\nAuthor: TestMaster Team",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.0909090909090908,
      "estimated_migration_complexity": "medium"
    },
    "core\\testing\\advanced_testing_intelligence.py": {
      "file_path": "core\\testing\\advanced_testing_intelligence.py",
      "component_name": "advanced_testing_intelligence",
      "analysis_timestamp": "2025-08-20 21:46:40.808570",
      "classes": [
        {
          "name": "TestQuality",
          "line_start": 37,
          "line_end": 43,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Test quality levels.",
          "decorators": []
        },
        {
          "name": "TestSmell",
          "line_start": 45,
          "line_end": 54,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of test smells.",
          "decorators": []
        },
        {
          "name": "CoverageType",
          "line_start": 56,
          "line_end": 61,
          "base_classes": [
            "Enum"
          ],
          "methods": [],
          "docstring": "Types of code coverage.",
          "decorators": []
        },
        {
          "name": "FunctionCoverage",
          "line_start": 64,
          "line_end": 77,
          "base_classes": [],
          "methods": [],
          "docstring": "Coverage information for a function.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ModuleCoverage",
          "line_start": 80,
          "line_end": 93,
          "base_classes": [],
          "methods": [],
          "docstring": "Coverage information for a module.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TestSmellReport",
          "line_start": 96,
          "line_end": 104,
          "base_classes": [],
          "methods": [],
          "docstring": "Report of test smells detected.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CoverageGap",
          "line_start": 107,
          "line_end": 114,
          "base_classes": [],
          "methods": [],
          "docstring": "Represents a coverage gap.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TestingIntelligenceReport",
          "line_start": 117,
          "line_end": 136,
          "base_classes": [],
          "methods": [],
          "docstring": "Comprehensive testing intelligence report.",
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "AdvancedTestingIntelligence",
          "line_start": 138,
          "line_end": 767,
          "base_classes": [],
          "methods": [
            {
              "name": "__init__",
              "line_start": 146,
              "line_end": 193,
              "args": [
                "self",
                "src_dirs",
                "test_dirs",
                "framework_abstraction",
                "cross_module_tester",
                "monitor"
              ],
              "returns": null,
              "docstring": "Initialize advanced testing intelligence system.\n\nArgs:\n    src_dirs: Source code directories to analyze\n    test_dirs: Test directories to analyze\n    framework_abstraction: Framework abstraction instance\n    cross_module_tester: Cross-module tester instance\n    monitor: Monitoring system instance",
              "is_async": false,
              "decorators": [],
              "complexity_score": 271
            },
            {
              "name": "run_comprehensive_analysis",
              "line_start": 195,
              "line_end": 287,
              "args": [
                "self",
                "enable_deep_analysis",
                "include_mutation_testing"
              ],
              "returns": null,
              "docstring": "Run comprehensive testing intelligence analysis.\n\nArgs:\n    enable_deep_analysis: Enable deep analysis features\n    include_mutation_testing: Include mutation testing analysis\n    \nReturns:\n    Comprehensive testing intelligence report",
              "is_async": false,
              "decorators": [],
              "complexity_score": 332
            },
            {
              "name": "_run_coverage_analysis",
              "line_start": 289,
              "line_end": 317,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Run comprehensive coverage analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 110
            },
            {
              "name": "_run_tests_with_framework",
              "line_start": 319,
              "line_end": 356,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Run tests using framework abstraction.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 186
            },
            {
              "name": "_run_tests_direct",
              "line_start": 358,
              "line_end": 382,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Run tests directly using pytest.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 118
            },
            {
              "name": "_analyze_coverage_data",
              "line_start": 384,
              "line_end": 421,
              "args": [
                "self",
                "cov"
              ],
              "returns": null,
              "docstring": "Analyze coverage data and generate detailed results.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 212
            },
            {
              "name": "_should_analyze_file",
              "line_start": 423,
              "line_end": 433,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "docstring": "Determine if a file should be included in coverage analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 49
            },
            {
              "name": "_analyze_module_coverage",
              "line_start": 435,
              "line_end": 476,
              "args": [
                "self",
                "cov",
                "file_path"
              ],
              "returns": null,
              "docstring": "Analyze coverage for a specific module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 230
            },
            {
              "name": "_analyze_function_coverage",
              "line_start": 478,
              "line_end": 525,
              "args": [
                "self",
                "file_path",
                "executed",
                "missing"
              ],
              "returns": null,
              "docstring": "Analyze coverage for functions in a module.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 296
            },
            {
              "name": "_assess_test_quality",
              "line_start": 527,
              "line_end": 552,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Assess overall test quality across the codebase.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 127
            },
            {
              "name": "_analyze_coverage_gaps",
              "line_start": 554,
              "line_end": 578,
              "args": [
                "self",
                "coverage_results"
              ],
              "returns": null,
              "docstring": "Analyze coverage gaps and prioritize them.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 139
            },
            {
              "name": "_detect_test_smells",
              "line_start": 580,
              "line_end": 595,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Detect test smells across test files.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 81
            },
            {
              "name": "_predict_flaky_tests",
              "line_start": 597,
              "line_end": 614,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Predict potentially flaky tests based on patterns.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 117
            },
            {
              "name": "_identify_property_testing_opportunities",
              "line_start": 616,
              "line_end": 630,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Identify opportunities for property-based testing.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 79
            },
            {
              "name": "_generate_recommendations",
              "line_start": 632,
              "line_end": 671,
              "args": [
                "self",
                "coverage_results",
                "quality_results",
                "coverage_gaps",
                "test_smells"
              ],
              "returns": null,
              "docstring": "Generate intelligent testing recommendations.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 255
            },
            {
              "name": "start_continuous_analysis",
              "line_start": 673,
              "line_end": 684,
              "args": [
                "self",
                "interval"
              ],
              "returns": null,
              "docstring": "Start continuous background analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 74
            },
            {
              "name": "stop_continuous_analysis",
              "line_start": 686,
              "line_end": 692,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Stop continuous background analysis.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 33
            },
            {
              "name": "get_testing_dashboard_data",
              "line_start": 694,
              "line_end": 730,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Get data for testing intelligence dashboard.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 240
            },
            {
              "name": "_load_test_patterns",
              "line_start": 733,
              "line_end": 735,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Load test patterns database.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 17
            },
            {
              "name": "_init_smell_detectors",
              "line_start": 737,
              "line_end": 739,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Initialize test smell detectors.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 17
            },
            {
              "name": "_calculate_function_complexity",
              "line_start": 741,
              "line_end": 747,
              "args": [
                "self",
                "node"
              ],
              "returns": null,
              "docstring": "Calculate cyclomatic complexity of a function.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 62
            },
            {
              "name": "_get_quality_level",
              "line_start": 749,
              "line_end": 760,
              "args": [
                "self",
                "score"
              ],
              "returns": null,
              "docstring": "Get quality level from score.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 69
            },
            {
              "name": "shutdown",
              "line_start": 764,
              "line_end": 767,
              "args": [
                "self"
              ],
              "returns": null,
              "docstring": "Shutdown testing intelligence system.",
              "is_async": false,
              "decorators": [],
              "complexity_score": 18
            }
          ],
          "docstring": "Advanced testing intelligence system for comprehensive test analysis.\n\nProvides intelligent insights into test coverage, quality, and optimization\nopportunities throughout the TestMaster framework.",
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "line_start": 146,
          "line_end": 193,
          "args": [
            "self",
            "src_dirs",
            "test_dirs",
            "framework_abstraction",
            "cross_module_tester",
            "monitor"
          ],
          "returns": null,
          "docstring": "Initialize advanced testing intelligence system.\n\nArgs:\n    src_dirs: Source code directories to analyze\n    test_dirs: Test directories to analyze\n    framework_abstraction: Framework abstraction instance\n    cross_module_tester: Cross-module tester instance\n    monitor: Monitoring system instance",
          "is_async": false,
          "decorators": [],
          "complexity_score": 271
        },
        {
          "name": "run_comprehensive_analysis",
          "line_start": 195,
          "line_end": 287,
          "args": [
            "self",
            "enable_deep_analysis",
            "include_mutation_testing"
          ],
          "returns": null,
          "docstring": "Run comprehensive testing intelligence analysis.\n\nArgs:\n    enable_deep_analysis: Enable deep analysis features\n    include_mutation_testing: Include mutation testing analysis\n    \nReturns:\n    Comprehensive testing intelligence report",
          "is_async": false,
          "decorators": [],
          "complexity_score": 332
        },
        {
          "name": "_run_coverage_analysis",
          "line_start": 289,
          "line_end": 317,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Run comprehensive coverage analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 110
        },
        {
          "name": "_run_tests_with_framework",
          "line_start": 319,
          "line_end": 356,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Run tests using framework abstraction.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 186
        },
        {
          "name": "_run_tests_direct",
          "line_start": 358,
          "line_end": 382,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Run tests directly using pytest.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 118
        },
        {
          "name": "_analyze_coverage_data",
          "line_start": 384,
          "line_end": 421,
          "args": [
            "self",
            "cov"
          ],
          "returns": null,
          "docstring": "Analyze coverage data and generate detailed results.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 212
        },
        {
          "name": "_should_analyze_file",
          "line_start": 423,
          "line_end": 433,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "docstring": "Determine if a file should be included in coverage analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 49
        },
        {
          "name": "_analyze_module_coverage",
          "line_start": 435,
          "line_end": 476,
          "args": [
            "self",
            "cov",
            "file_path"
          ],
          "returns": null,
          "docstring": "Analyze coverage for a specific module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 230
        },
        {
          "name": "_analyze_function_coverage",
          "line_start": 478,
          "line_end": 525,
          "args": [
            "self",
            "file_path",
            "executed",
            "missing"
          ],
          "returns": null,
          "docstring": "Analyze coverage for functions in a module.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 296
        },
        {
          "name": "_assess_test_quality",
          "line_start": 527,
          "line_end": 552,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Assess overall test quality across the codebase.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 127
        },
        {
          "name": "_analyze_coverage_gaps",
          "line_start": 554,
          "line_end": 578,
          "args": [
            "self",
            "coverage_results"
          ],
          "returns": null,
          "docstring": "Analyze coverage gaps and prioritize them.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 139
        },
        {
          "name": "_detect_test_smells",
          "line_start": 580,
          "line_end": 595,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Detect test smells across test files.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 81
        },
        {
          "name": "_predict_flaky_tests",
          "line_start": 597,
          "line_end": 614,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Predict potentially flaky tests based on patterns.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 117
        },
        {
          "name": "_identify_property_testing_opportunities",
          "line_start": 616,
          "line_end": 630,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Identify opportunities for property-based testing.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 79
        },
        {
          "name": "_generate_recommendations",
          "line_start": 632,
          "line_end": 671,
          "args": [
            "self",
            "coverage_results",
            "quality_results",
            "coverage_gaps",
            "test_smells"
          ],
          "returns": null,
          "docstring": "Generate intelligent testing recommendations.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 255
        },
        {
          "name": "start_continuous_analysis",
          "line_start": 673,
          "line_end": 684,
          "args": [
            "self",
            "interval"
          ],
          "returns": null,
          "docstring": "Start continuous background analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 74
        },
        {
          "name": "stop_continuous_analysis",
          "line_start": 686,
          "line_end": 692,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Stop continuous background analysis.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 33
        },
        {
          "name": "get_testing_dashboard_data",
          "line_start": 694,
          "line_end": 730,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Get data for testing intelligence dashboard.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 240
        },
        {
          "name": "_load_test_patterns",
          "line_start": 733,
          "line_end": 735,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Load test patterns database.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 17
        },
        {
          "name": "_init_smell_detectors",
          "line_start": 737,
          "line_end": 739,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Initialize test smell detectors.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 17
        },
        {
          "name": "_calculate_function_complexity",
          "line_start": 741,
          "line_end": 747,
          "args": [
            "self",
            "node"
          ],
          "returns": null,
          "docstring": "Calculate cyclomatic complexity of a function.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 62
        },
        {
          "name": "_get_quality_level",
          "line_start": 749,
          "line_end": 760,
          "args": [
            "self",
            "score"
          ],
          "returns": null,
          "docstring": "Get quality level from score.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 69
        },
        {
          "name": "shutdown",
          "line_start": 764,
          "line_end": 767,
          "args": [
            "self"
          ],
          "returns": null,
          "docstring": "Shutdown testing intelligence system.",
          "is_async": false,
          "decorators": [],
          "complexity_score": 18
        }
      ],
      "imports": [
        {
          "module": "ast",
          "names": [
            "ast"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 17
        },
        {
          "module": "coverage",
          "names": [
            "coverage"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 18
        },
        {
          "module": "subprocess",
          "names": [
            "subprocess"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 19
        },
        {
          "module": "sys",
          "names": [
            "sys"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 20
        },
        {
          "module": "re",
          "names": [
            "re"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 21
        },
        {
          "module": "json",
          "names": [
            "json"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 22
        },
        {
          "module": "hashlib",
          "names": [
            "hashlib"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 23
        },
        {
          "module": "logging",
          "names": [
            "logging"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 24
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Set",
            "Tuple",
            "Union"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 25
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 26
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 27
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 28
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "Counter"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 29
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "alias": null,
          "is_from_import": true,
          "line_number": 30
        },
        {
          "module": "statistics",
          "names": [
            "statistics"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 31
        },
        {
          "module": "threading",
          "names": [
            "threading"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 32
        },
        {
          "module": "time",
          "names": [
            "time"
          ],
          "alias": null,
          "is_from_import": false,
          "line_number": 33
        }
      ],
      "external_dependencies": "{'coverage', 'pathlib', 'subprocess', 'typing', 'dataclasses', 'time', 'sys', 'json', 'logging', 'enum', 're', 'threading', 'hashlib', 'statistics', 'ast', 'datetime', 'collections'}",
      "internal_dependencies": "set()",
      "lines_of_code": 770,
      "complexity_score": 6264,
      "api_surface_area": 10,
      "docstring": "Advanced Testing Intelligence System\n====================================\n\nComprehensive testing analysis and optimization system integrated into the\nTestMaster core framework. Combines coverage analysis, test quality assessment,\nand intelligent test recommendations.\n\nIntegrates with:\n- core/framework_abstraction.py for test execution\n- integration/cross_module_tester.py for cross-system testing\n- core/observability/ for monitoring and metrics\n\nAuthor: TestMaster Core Testing System",
      "has_tests": false,
      "test_files": [],
      "uses_ml": false,
      "uses_async": false,
      "uses_networking": false,
      "uses_database": true,
      "ml_libraries": "set()",
      "documentation_coverage": 1.03125,
      "estimated_migration_complexity": "medium"
    }
  }
}