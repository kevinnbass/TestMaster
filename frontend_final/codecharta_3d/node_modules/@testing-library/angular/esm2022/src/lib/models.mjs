export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../../../../projects/testing-library/src/lib/models.ts"],"names":[],"mappings":"","sourcesContent":["import { Type, DebugElement } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Routes } from '@angular/router';\nimport { BoundFunction, Queries, queries, Config as dtlConfig, PrettyDOMOptions } from '@testing-library/dom';\n\nexport type RenderResultQueries<Q extends Queries = typeof queries> = { [P in keyof Q]: BoundFunction<Q[P]> };\nexport interface RenderResult<ComponentType, WrapperType = ComponentType> extends RenderResultQueries {\n  /**\n   * @description\n   * The containing DOM node of your rendered Angular Component.\n   * This is a regular DOM node, so you can call container.querySelector etc. to inspect the children.\n   */\n  container: Element;\n  /**\n   * @description\n   * Prints out the component's DOM with syntax highlighting.\n   * Accepts an optional parameter, to print out a specific DOM node.\n   *\n   * @param\n   * element: The to be printed HTML element, if not provided it will log the whole component's DOM\n   */\n  debug: (\n    element?: Element | Document | (Element | Document)[],\n    maxLength?: number,\n    options?: PrettyDOMOptions,\n  ) => void;\n  /**\n   * @description\n   * Trigger a change detection cycle for the component.\n   *\n   * For more info see https://angular.io/api/core/testing/ComponentFixture#detectChanges\n   */\n  detectChanges: () => void;\n  /**\n   * @description\n   * The Angular `DebugElement` of the component.\n   *\n   * For more info see https://angular.io/api/core/DebugElement\n   */\n  debugElement: DebugElement;\n  /**\n   * @description\n   * The Angular `ComponentFixture` of the component or the wrapper.\n   * If a template is provided, it will be the fixture of the wrapper.\n   *\n   * For more info see https://angular.io/api/core/testing/ComponentFixture\n   */\n  fixture: ComponentFixture<WrapperType>;\n  /**\n   * @description\n   * Navigates to the href of the element or to the path.\n   *\n   */\n  navigate: (elementOrPath: Element | string, basePath?: string) => Promise<boolean>;\n  /**\n   * @description\n   * Re-render the same component with different properties.\n   * Properties not passed in again are removed.\n   */\n  rerender: (\n    properties?: Pick<\n      RenderTemplateOptions<ComponentType>,\n      'componentProperties' | 'componentInputs' | 'componentOutputs' | 'detectChangesOnRender'\n    >,\n  ) => Promise<void>;\n}\n\nexport interface RenderComponentOptions<ComponentType, Q extends Queries = typeof queries> {\n  /**\n   * @description\n   * Automatically detect changes as a \"real\" running component would do.\n   *\n   * @default\n   * true\n   *\n   * @example\n   * await render(AppComponent, {\n   *  autoDetectChanges: false\n   * })\n   */\n  autoDetectChanges?: boolean;\n  /**\n   * @description\n   * Invokes `detectChanges` after the component is rendered\n   *\n   * @default\n   * true\n   *\n   * @example\n   * await render(AppComponent, {\n   *  detectChangesOnRender: false\n   * })\n   */\n  detectChangesOnRender?: boolean;\n\n  /**\n   * @description\n   * A collection of components, directives and pipes needed to render the component, for example, nested components of the component.\n   *\n   * For more info see https://angular.io/api/core/NgModule#declarations\n   *\n   * @default\n   * []\n   *\n   * @example\n   * await render(AppComponent, {\n   *  declarations: [ CustomerDetailComponent, ButtonComponent ]\n   * })\n   */\n  declarations?: any[];\n  /**\n   * @description\n   * A collection of providers needed to render the component via Dependency Injection, for example, injectable services or tokens.\n   *\n   * For more info see https://angular.io/api/core/NgModule#providers\n   *\n   * @default\n   * []\n   *\n   * @example\n   * await render(AppComponent, {\n   *  providers: [\n   *    CustomersService,\n   *    {\n   *      provide: MAX_CUSTOMERS_TOKEN,\n   *      useValue: 10\n   *    }\n   *  ]\n   * })\n   */\n  providers?: any[];\n  /**\n   * @description\n   * A collection of imports needed to render the component, for example, shared modules.\n   * Adds `NoopAnimationsModule` by default if `BrowserAnimationsModule` isn't added to the collection.\n   *\n   * For more info see https://angular.io/api/core/NgModule#imports\n   *\n   * @default\n   * `[NoopAnimationsModule]`\n   *\n   * @example\n   * await render(AppComponent, {\n   *  imports: [\n   *    AppSharedModule,\n   *    MaterialModule,\n   *  ]\n   * })\n   */\n  imports?: any[];\n  /**\n   * @description\n   * A collection of schemas needed to render the component.\n   * Allowed values are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n   *\n   * For more info see https://angular.io/api/core/NgModule#schemas\n   *\n   * @default\n   * []\n   *\n   * @example\n   * await render(AppComponent, {\n   *  schemas: [\n   *    NO_ERRORS_SCHEMA,\n   *  ]\n   * })\n   */\n  schemas?: any[];\n  /**\n   * @description\n   * An object to set properties of the component\n   *\n   * @default\n   * {}\n   *\n   * @example\n   * await render(AppComponent, {\n   *  componentProperties: {\n   *    counterValue: 10,\n   *    send: (value) => { ... }\n   *  }\n   * })\n   */\n  componentProperties?: Partial<ComponentType>;\n  /**\n   * @description\n   * An object to set `@Input` properties of the component\n   *\n   * @default\n   * {}\n   *\n   * @example\n   * await render(AppComponent, {\n   *  componentInputs: {\n   *    counterValue: 10\n   *  }\n   * })\n   */\n  componentInputs?: Partial<ComponentType> | { [alias: string]: unknown };\n  /**\n   * @description\n   * An object to set `@Output` properties of the component\n   *\n   * @default\n   * {}\n   *\n   * @example\n   * const sendValue = (value) => { ... }\n   * await render(AppComponent, {\n   *  componentOutputs: {\n   *    send: {\n   *      emit: sendValue\n   *    }\n   *  }\n   * })\n   */\n  componentOutputs?: Partial<ComponentType>;\n  /**\n   * @description\n   * A collection of providers to inject dependencies of the component.\n   *\n   * For more info see https://angular.io/api/core/Directive#providers\n   *\n   * @default\n   * []\n   *\n   * @example\n   * await render(AppComponent, {\n   *  componentProviders: [\n   *    AppComponentService\n   *  ]\n   * })\n   */\n  componentProviders?: any[];\n  /**\n   * @description\n   * Collection of child component specified providers to override with\n   *\n   * @default\n   * []\n   *\n   * @example\n   * await render(AppComponent, {\n   *  childComponentOverrides: [\n   *    {\n   *      component: ChildOfAppComponent,\n   *      providers: [{ provide: MyService, useValue: { hello: 'world' } }]\n   *    }\n   *  ]\n   * })\n   *\n   */\n  childComponentOverrides?: ComponentOverride<any>[];\n  /**\n   * @description\n   * A collection of imports to override a standalone component's imports with.\n   *\n   * @default\n   * undefined\n   *\n   * @example\n   * await render(AppComponent, {\n   *   componentImports: [\n   *     MockChildComponent\n   *   ]\n   * })\n   */\n  componentImports?: (Type<any> | any[])[];\n  /**\n   * @description\n   * Queries to bind. Overrides the default set from DOM Testing Library unless merged.\n   *\n   * @default\n   * undefined\n   *\n   * @example\n   * import * as customQueries from 'custom-queries'\n   * import { queries } from '@testing-library/angular'\n   *\n   * await render(AppComponent, {\n   *  queries: { ...queries, ...customQueries }\n   * })\n   */\n  queries?: Q;\n  /**\n   * @description\n   * Exclude the component to be automatically be added as a declaration.\n   * This is needed when the component is declared in an imported module.\n   *\n   * @default\n   * false\n   *\n   * @example\n   * await render(AppComponent, {\n   *  imports: [AppModule], // a module that includes AppComponent\n   *  excludeComponentDeclaration: true\n   * })\n   */\n  excludeComponentDeclaration?: boolean;\n\n  /**\n   * @description\n   * The route configuration to set up the router service via `RouterTestingModule.withRoutes`.\n   * For more info see https://angular.io/api/router/Routes.\n   *\n   * @example\n   * await render(AppComponent, {\n   *  declarations: [ChildComponent],\n   *  routes: [\n   *    {\n   *      path: '',\n   *      children: [\n   *         {\n   *            path: 'child/:id',\n   *            component: ChildComponent\n   *          }\n   *      ]\n   *    }\n   *  ]\n   * })\n   */\n  routes?: Routes;\n\n  /**\n   * @description\n   * Specifies which route should be initially navigated to\n   *\n   * @example\n   * await render(AppComponent, {\n   *  initialRoute: 'myroute',\n   *  routes: [\n   *    { path: '', component: HomeComponent },\n   *    { path: 'myroute', component: SecondaryComponent }\n   *  ]\n   * })\n   */\n  initialRoute?: string;\n\n  /**\n   * @description\n   * Removes the Angular attributes (ng-version, and root-id) from the fixture.\n   *\n   * @default\n   * `false`\n   *\n   * @example\n   * await render(AppComponent, {\n   *  removeAngularAttributes: true\n   * })\n   */\n  removeAngularAttributes?: boolean;\n\n  /**\n   * @description\n   * Callback to configure the testbed before the compilation.\n   *\n   * @default\n   * () => {}\n   *\n   * @example\n   * await render(AppComponent, {\n   *  configureTestBed: (testBed) => { }\n   * })\n   */\n  configureTestBed?: (testbed: TestBed) => void;\n}\n\nexport interface ComponentOverride<T> {\n  component: Type<T>;\n  providers: any[];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface RenderTemplateOptions<WrapperType, Properties extends object = {}, Q extends Queries = typeof queries>\n  extends RenderComponentOptions<Properties, Q> {\n  /**\n   * @description\n   * An Angular component to wrap the component in.\n   * The template will be overridden with the `template` option.\n   *\n   * @default\n   * `WrapperComponent`, an empty component that strips the `ng-version` attribute\n   *\n   * @example\n   * await render(`<div spoiler message='SPOILER'></div>`, {\n   *  declarations: [SpoilerDirective]\n   *  wrapper: CustomWrapperComponent\n   * })\n   */\n  wrapper?: Type<WrapperType>;\n  componentProperties?: Partial<WrapperType & Properties>;\n}\n\nexport interface Config extends Pick<RenderComponentOptions<any>, 'excludeComponentDeclaration'> {\n  /**\n   * DOM Testing Library config\n   * @link https://testing-library.com/docs/dom-testing-library/api-configuration/\n   */\n  dom: Partial<dtlConfig>;\n  /**\n   * Imports that are added to the imports\n   */\n  defaultImports: any[];\n}\n"]}