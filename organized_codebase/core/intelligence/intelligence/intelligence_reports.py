#!/usr/bin/env python3
"""
Intelligence System Report Generation Module
============================================

Handles all report generation and formatting for the intelligence system.
Contains methods for creating comprehensive pipeline reports.

Author: Intelligence-Driven Reorganization System
Version: 4.0
"""

from typing import Dict, List, Any
from datetime import datetime


class IntelligenceReportGenerator:
    """Handles generation of intelligence system reports"""

    def __init__(self, root_dir, output_dir, scanner=None, integration_engine=None, planner=None):
        """Initialize the report generator"""
        self.root_dir = root_dir
        self.output_dir = output_dir
        self.scanner = scanner
        self.integration_engine = integration_engine
        self.planner = planner

    def initialize_report_structure(self) -> tuple:
        """Initialize report structure with safety bounds"""
        MAX_REPORT_LINES = 1000  # Safety bound for report lines
        report = [None] * MAX_REPORT_LINES  # Pre-allocate with placeholder
        report_count = 0
        return report, report_count, MAX_REPORT_LINES

    def add_report_header(self, report: List, report_count: int, MAX_REPORT_LINES: int,
                        results: Dict[str, Any]) -> int:
        """Add report header information"""
        current_count = report_count

        if current_count < MAX_REPORT_LINES:
            report[current_count] = "# Complete Intelligence System Report"
            current_count += 1
        if current_count < MAX_REPORT_LINES:
            report[current_count] = "=" * 50
            current_count += 1
        if current_count < MAX_REPORT_LINES:
            report[current_count] = ""
            current_count += 1

        # Add timestamp
        if current_count < MAX_REPORT_LINES:
            report[current_count] = f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            current_count += 1
        if current_count < MAX_REPORT_LINES:
            report[current_count] = ""
            current_count += 1

        return current_count

    def add_step_results(self, report: List, report_count: int, MAX_REPORT_LINES: int,
                       results: Dict[str, Any]) -> int:
        """Add step results to report"""
        current_count = report_count

        if current_count < MAX_REPORT_LINES:
            report[current_count] = "## Pipeline Results"
            current_count += 1

        # Add overall status
        success_status = "✅ SUCCESS" if results.get('success', False) else "❌ FAILED"
        if current_count < MAX_REPORT_LINES:
            report[current_count] = f"**Overall Status:** {success_status}"
            current_count += 1
        if current_count < MAX_REPORT_LINES:
            report[current_count] = ""
            current_count += 1

        # Add completed steps with bounded loop
        steps_completed = results.get('steps_completed', [])
        for i in range(min(len(steps_completed), 20)):  # Safety bound for steps
            step = steps_completed[i]
            if current_count < MAX_REPORT_LINES:
                report[current_count] = f"- ✅ {step.replace('_', ' ').title()}"
                current_count += 1

        return current_count

    def add_errors_to_report(self, report: List, report_count: int, MAX_REPORT_LINES: int,
                           results: Dict[str, Any]) -> int:
        """Add errors to report"""
        current_count = report_count

        if results.get('errors'):
            if current_count < MAX_REPORT_LINES:
                report[current_count] = ""
                current_count += 1
            if current_count < MAX_REPORT_LINES:
                report[current_count] = "## Errors Encountered"
                current_count += 1

            # Add errors with bounded loop
            errors_list = results.get('errors', [])
            for i in range(min(len(errors_list), 50)):  # Safety bound for errors
                error = errors_list[i]
                if current_count < MAX_REPORT_LINES:
                    report[current_count] = f"- ❌ {error}"
                    current_count += 1

        return current_count

    def finalize_report(self, report: List, report_count: int, MAX_REPORT_LINES: int) -> str:
        """Finalize and return report"""
        if report_count < MAX_REPORT_LINES:
            report[report_count] = ""
            report_count += 1
        if report_count < MAX_REPORT_LINES:
            report[report_count] = "---"
            report_count += 1
        if report_count < MAX_REPORT_LINES:
            report[report_count] = "*Generated by High-Reliability Intelligence System*"
            report_count += 1

        return "\n".join(line for line in report[:report_count] if line is not None)

    def generate_report(self, results: Dict[str, Any]) -> str:
        """Generate a comprehensive report of the pipeline results"""
        # Initialize report structure
        report, report_count, MAX_REPORT_LINES = self.initialize_report_structure()

        # Add basic report content
        report_count = self.add_basic_report_content(report, report_count, MAX_REPORT_LINES, results)

        # Add step results
        report_count = self.add_step_results_simple(report, report_count, MAX_REPORT_LINES, results)

        # Add errors
        report_count = self.add_errors_to_report(report, report_count, MAX_REPORT_LINES, results)

        # Add output files
        report_count = self.add_output_files(report, report_count, MAX_REPORT_LINES, results)

        # Finalize and return report
        return self.finalize_report(report, report_count, MAX_REPORT_LINES)

    def add_basic_report_content(self, report: List, report_count: int, MAX_REPORT_LINES: int,
                               results: Dict[str, Any]) -> int:
        """Add basic report content"""
        current_count = report_count

        if current_count < MAX_REPORT_LINES:
            report[current_count] = "# LLM Intelligence System Report"
            current_count += 1
        if current_count < MAX_REPORT_LINES:
            report[current_count] = f"Generated: {datetime.now().isoformat()}"
            current_count += 1

        # Add pipeline status
        if results.get('success'):
            if current_count < MAX_REPORT_LINES:
                report[current_count] = "## ✅ Pipeline Status: SUCCESS"
                current_count += 1
        else:
            if current_count < MAX_REPORT_LINES:
                report[current_count] = "## ❌ Pipeline Status: FAILED"
                current_count += 1

        return current_count

    def add_step_results_simple(self, report: List, report_count: int, MAX_REPORT_LINES: int,
                              results: Dict[str, Any]) -> int:
        """Add step results"""
        current_count = report_count

        if current_count < MAX_REPORT_LINES:
            report[current_count] = "## Pipeline Steps Completed"
            current_count += 1

        steps_completed = results.get('steps_completed', [])
        for i in range(min(len(steps_completed), 20)):
            step = steps_completed[i]
            if current_count < MAX_REPORT_LINES:
                report[current_count] = f"- ✅ {step.replace('_', ' ').title()}"
                current_count += 1

        return current_count

    def add_output_files(self, report: List, report_count: int, MAX_REPORT_LINES: int,
                       results: Dict[str, Any]) -> int:
        """Add output files section"""
        current_count = report_count

        if current_count < MAX_REPORT_LINES:
            report[current_count] = "## Output Files Generated"
            current_count += 1

        output_files = results.get('output_files', {})
        output_items = list(output_files.items())
        for i in range(min(len(output_items), 20)):
            file_type, file_path = output_items[i]
            if current_count < MAX_REPORT_LINES:
                report[current_count] = f"- {file_type.replace('_', ' ').title()}: `{file_path}`"
                current_count += 1

        return current_count

    def print_system_status(self) -> None:
        """Print the current system status"""
        print("🤖 LLM Intelligence System Status")
        print("=" * 50)

        print(f"Root Directory: {self.root_dir}")
        print(f"Output Directory: {self.output_dir}")

        # Check component availability
        components_available = self.scanner is not None and self.integration_engine is not None and self.planner is not None
        print(f"Components Available: {'✅' if components_available else '❌'}")

        if components_available:
            print("Available Components:")
            print("  ✅ LLM Intelligence Scanner")
            print("  ✅ Intelligence Integration Engine")
            print("  ✅ Reorganization Planner")

            if self.scanner and hasattr(self.scanner, 'config'):
                provider = self.scanner.config.get('llm_provider', 'unknown')
                model = self.scanner.config.get('llm_model', 'unknown')
                print(f"  Scanner Config: {provider} / {model}")
        else:
            print("❌ Components not available - check imports")

        print(f"Output Directory Exists: {'✅' if self.output_dir.exists() else '❌'}")
        print("=" * 50)
