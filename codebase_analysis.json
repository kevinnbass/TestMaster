{
  "summary": {
    "total_files": 11822,
    "total_lines": 3068787,
    "average_lines_per_file": 259.5827271189308
  },
  "largest_files": [
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\archive\\agent_c_processed\\test_tot_output_original_18164_lines_PROCESSED.py",
      {
        "lines": 18165,
        "size_bytes": 714450,
        "imports": [],
        "functions": [],
        "classes": []
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\phidata\\libs\\agno\\agno\\agent\\agent.py",
      {
        "lines": 8315,
        "size_bytes": 381401,
        "imports": [
          "__future__",
          "asyncio",
          "collections",
          "dataclasses",
          "os",
          "textwrap",
          "typing",
          "uuid",
          "pydantic",
          "agno.agent.metrics",
          "agno.exceptions",
          "agno.knowledge.agent",
          "agno.media",
          "agno.memory.agent",
          "agno.memory.v2.memory",
          "agno.memory.v2.schema",
          "agno.models.base",
          "agno.models.message",
          "agno.models.response",
          "agno.reasoning.step",
          "agno.run.base",
          "agno.run.messages",
          "agno.run.response",
          "agno.run.team",
          "agno.storage.base",
          "agno.storage.session.agent",
          "agno.tools.function",
          "agno.tools.toolkit",
          "agno.utils.events",
          "agno.utils.log",
          "agno.utils.message",
          "agno.utils.prompts",
          "agno.utils.response",
          "agno.utils.safe_formatter",
          "agno.utils.string",
          "agno.utils.timer",
          "json",
          "concurrent.futures",
          "inspect",
          "inspect",
          "inspect",
          "time",
          "agno.utils.merge_dict",
          "re",
          "string",
          "dataclasses",
          "copy",
          "agno.document",
          "agno.document",
          "json",
          "json",
          "agno.utils.events",
          "agno.utils.events",
          "json",
          "agno.document",
          "agno.api.agent",
          "agno.api.agent",
          "agno.api.agent",
          "json",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "json",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "inspect",
          "rich.prompt",
          "rich.prompt",
          "agno.run.response",
          "agno.run.response",
          "inspect",
          "datetime",
          "agno.utils.location",
          "copy",
          "copy",
          "inspect",
          "inspect",
          "yaml",
          "copy",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.helpers",
          "agno.reasoning.ollama",
          "agno.reasoning.openai",
          "agno.reasoning.default",
          "agno.reasoning.helpers",
          "copy",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.helpers",
          "agno.reasoning.ollama",
          "agno.reasoning.openai",
          "agno.reasoning.default",
          "agno.reasoning.helpers",
          "json",
          "json",
          "agno.utils.log",
          "agno.utils.log",
          "json",
          "agno.models.openai",
          "copy",
          "inspect",
          "pathlib",
          "agno.run.response",
          "agno.utils.log",
          "inspect",
          "zoneinfo",
          "json",
          "agno.reasoning.deepseek",
          "agno.reasoning.deepseek",
          "agno.run.response",
          "time",
          "time",
          "time",
          "time",
          "agno.memory.summary",
          "agno.memory.memory",
          "agno.memory.v2.memory",
          "agno.memory.v2.memory",
          "agno.reasoning.groq",
          "agno.reasoning.groq",
          "agno.reasoning.openai",
          "agno.reasoning.openai",
          "json",
          "agno.reasoning.ollama",
          "agno.reasoning.ollama",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.azure_ai_foundry"
        ],
        "functions": [
          "__init__",
          "set_agent_id",
          "set_debug",
          "set_storage_mode",
          "set_monitoring",
          "set_default_model",
          "set_defaults",
          "reset_session",
          "reset_run_state",
          "initialize_agent",
          "has_team",
          "is_paused",
          "should_parse_structured_output",
          "add_tool",
          "set_tools",
          "_initialize_session_state",
          "_initialize_session",
          "_run",
          "_run_stream",
          "run",
          "run",
          "run",
          "continue_run",
          "continue_run",
          "continue_run",
          "_continue_run",
          "_continue_run_stream",
          "_handle_agent_run_paused",
          "_handle_agent_run_paused_stream",
          "_convert_response_to_structured_format",
          "_handle_external_execution_update",
          "_handle_user_input_update",
          "_handle_get_user_input_tool_update",
          "_run_tool",
          "_reject_tool_call",
          "_handle_tool_call_updates",
          "_handle_tool_call_updates_stream",
          "_update_run_response",
          "_add_run_to_memory",
          "_set_session_metrics",
          "_update_memory",
          "_handle_model_response_stream",
          "_handle_model_response_chunk",
          "create_run_response",
          "_make_memories_and_summaries",
          "_raise_if_async_tools",
          "get_tools",
          "determine_tools_for_model",
          "_model_should_return_structured_output",
          "_get_response_format",
          "resolve_run_context",
          "get_agent_data",
          "get_session_data",
          "get_agent_session",
          "load_agent_session",
          "read_from_storage",
          "refresh_from_storage",
          "write_to_storage",
          "add_introduction",
          "load_session",
          "new_session",
          "format_message_with_state_variables",
          "get_system_message",
          "get_user_message",
          "get_run_messages",
          "get_continue_run_messages",
          "get_messages_for_parser_model",
          "get_messages_for_parser_model_stream",
          "get_messages_for_output_model",
          "get_session_summary",
          "get_user_memories",
          "deep_copy",
          "_deep_copy_field",
          "get_transfer_function",
          "get_transfer_instructions",
          "get_relevant_docs_from_knowledge",
          "convert_documents_to_string",
          "convert_context_to_string",
          "save_run_response_to_file",
          "update_run_response_with_reasoning",
          "aggregate_metrics_from_messages",
          "calculate_metrics",
          "rename",
          "rename_session",
          "generate_session_name",
          "auto_rename_session",
          "delete_session",
          "get_messages_for_session",
          "add_image",
          "add_video",
          "add_audio",
          "get_images",
          "get_videos",
          "get_audio",
          "_handle_reasoning",
          "_handle_reasoning_stream",
          "_format_reasoning_step_content",
          "reason",
          "_process_parser_response",
          "_parse_response_with_parser_model",
          "_parse_response_with_parser_model_stream",
          "_generate_response_with_output_model",
          "_generate_response_with_output_model_stream",
          "_handle_event",
          "get_update_user_memory_function",
          "get_chat_history_function",
          "get_tool_call_history_function",
          "search_knowledge_base_function",
          "search_knowledge_base_with_agentic_filters_function",
          "_get_agentic_or_user_search_filters",
          "add_to_knowledge",
          "update_memory",
          "_log_agent_session",
          "_create_run_data",
          "_log_agent_run",
          "print_response",
          "update_reasoning_content_from_tool_call",
          "_append_to_reasoning_content",
          "_add_reasoning_step_to_extra_data",
          "_add_reasoning_metrics_to_extra_data",
          "_get_effective_filters",
          "get_previous_sessions_messages_function",
          "cli_app",
          "get_agent_config_dict",
          "_transfer_task_to_agent",
          "update_user_memory",
          "get_chat_history",
          "get_tool_call_history",
          "search_knowledge_base",
          "search_knowledge_base",
          "get_previous_session_messages"
        ],
        "classes": [
          "Agent"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\phidata\\libs\\agno\\agno\\team\\team.py",
      {
        "lines": 8186,
        "size_bytes": 382977,
        "imports": [
          "asyncio",
          "contextlib",
          "json",
          "collections",
          "copy",
          "dataclasses",
          "os",
          "textwrap",
          "typing",
          "uuid",
          "pydantic",
          "agno.agent",
          "agno.agent.metrics",
          "agno.exceptions",
          "agno.knowledge.agent",
          "agno.media",
          "agno.memory.agent",
          "agno.memory.team",
          "agno.memory.v2.memory",
          "agno.models.base",
          "agno.models.message",
          "agno.models.response",
          "agno.reasoning.step",
          "agno.run.base",
          "agno.run.messages",
          "agno.run.response",
          "agno.run.team",
          "agno.storage.base",
          "agno.storage.session.team",
          "agno.tools.function",
          "agno.tools.toolkit",
          "agno.utils.events",
          "agno.utils.log",
          "agno.utils.merge_dict",
          "agno.utils.message",
          "agno.utils.response",
          "agno.utils.safe_formatter",
          "agno.utils.string",
          "agno.utils.timer",
          "concurrent.futures",
          "agno.utils.events",
          "agno.utils.events",
          "textwrap",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "agno.utils.response",
          "textwrap",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "agno.utils.response",
          "textwrap",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "agno.utils.response",
          "textwrap",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "rich.text",
          "rich.json",
          "rich.markdown",
          "rich.prompt",
          "inspect",
          "agno.utils.prompts",
          "agno.utils.prompts",
          "re",
          "string",
          "json",
          "json",
          "agno.utils.merge_dict",
          "agno.document",
          "agno.document",
          "json",
          "time",
          "agno.api.team",
          "agno.api.team",
          "agno.api.team",
          "copy",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.helpers",
          "agno.reasoning.ollama",
          "agno.reasoning.openai",
          "agno.reasoning.default",
          "agno.reasoning.helpers",
          "copy",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.helpers",
          "agno.reasoning.ollama",
          "agno.reasoning.openai",
          "agno.reasoning.default",
          "agno.reasoning.helpers",
          "inspect",
          "datetime",
          "agno.utils.location",
          "copy",
          "json",
          "agno.run.response",
          "inspect",
          "inspect",
          "yaml",
          "agno.models.openai",
          "agno.run.team",
          "agno.run.team",
          "inspect",
          "agno.utils.merge_dict",
          "agno.run.response",
          "time",
          "agno.reasoning.deepseek",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.groq",
          "agno.memory.memory",
          "agno.memory.v2.memory",
          "agno.reasoning.openai",
          "agno.reasoning.openai",
          "agno.memory.v2.memory",
          "agno.memory.v2.memory",
          "agno.reasoning.ollama",
          "agno.reasoning.ollama",
          "json",
          "json",
          "json",
          "json",
          "traceback",
          "traceback",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.azure_ai_foundry",
          "json",
          "json"
        ],
        "functions": [
          "__init__",
          "should_parse_structured_output",
          "_set_team_id",
          "_set_debug",
          "_set_storage_mode",
          "_set_monitoring",
          "_initialize_member",
          "_set_default_model",
          "_set_defaults",
          "_reset_session",
          "_reset_run_state",
          "initialize_team",
          "add_tool",
          "set_tools",
          "_initialize_session_state",
          "_initialize_session",
          "run",
          "run",
          "run",
          "_run",
          "_run_stream",
          "_update_run_response",
          "_add_run_to_memory",
          "_update_memory",
          "_handle_model_response_stream",
          "_handle_model_response_chunk",
          "_convert_response_to_structured_format",
          "_make_memories_and_summaries",
          "_get_response_format",
          "_process_parser_response",
          "_parse_response_with_parser_model",
          "_parse_response_with_parser_model_stream",
          "_parse_response_with_output_model",
          "_generate_response_with_output_model_stream",
          "_handle_event",
          "print_response",
          "_print_response",
          "_print_response_stream",
          "_build_reasoning_step_panel",
          "_get_member_name",
          "_parse_response_content",
          "cli_app",
          "_handle_reasoning",
          "_handle_reasoning_stream",
          "_calculate_session_metrics",
          "_calculate_full_team_session_metrics",
          "_aggregate_metrics_from_messages",
          "_get_reasoning_agent",
          "_format_reasoning_step_content",
          "_reason",
          "_create_run_response",
          "_resolve_run_context",
          "determine_tools_for_model",
          "get_members_system_message_content",
          "get_system_message",
          "get_run_messages",
          "_get_user_message",
          "get_messages_for_parser_model",
          "get_messages_for_parser_model_stream",
          "get_messages_for_output_model",
          "_format_message_with_state_variables",
          "_convert_context_to_string",
          "_get_json_output_prompt",
          "_update_team_media",
          "get_update_user_memory_function",
          "get_member_information",
          "get_team_history_function",
          "get_set_shared_context_function",
          "_update_team_session_state",
          "_update_workflow_session_state",
          "get_run_member_agents_function",
          "_determine_team_context",
          "get_transfer_task_function",
          "_format_member_agent_task",
          "_get_member_id",
          "_find_member_by_id",
          "get_forward_task_function",
          "read_from_storage",
          "write_to_storage",
          "rename_session",
          "delete_session",
          "load_team_session",
          "load_session",
          "get_messages_for_session",
          "get_session_summary",
          "get_user_memories",
          "add_image",
          "add_video",
          "add_audio",
          "get_images",
          "get_videos",
          "get_audio",
          "update_reasoning_content_from_tool_call",
          "_append_to_reasoning_content",
          "_add_reasoning_step_to_extra_data",
          "_add_reasoning_metrics_to_extra_data",
          "get_relevant_docs_from_knowledge",
          "_convert_documents_to_string",
          "_get_team_effective_filters",
          "search_knowledge_base_function",
          "search_knowledge_base_with_agentic_filters_function",
          "_create_run_data",
          "_get_team_data",
          "_get_session_data",
          "_get_team_session",
          "_log_team_run",
          "_log_team_session",
          "_get_agentic_or_user_search_filters",
          "update_user_memory",
          "get_team_history",
          "set_shared_context",
          "run_member_agents",
          "transfer_task_to_member",
          "forward_task_to_member",
          "search_knowledge_base",
          "search_knowledge_base"
        ],
        "classes": [
          "Team"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\TestMaster\\archive\\test_misc_original_6141_lines.py",
      {
        "lines": 6142,
        "size_bytes": 244689,
        "imports": [],
        "functions": [],
        "classes": []
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\crewAI\\tests\\crew_test.py",
      {
        "lines": 4778,
        "size_bytes": 177530,
        "imports": [
          "hashlib",
          "json",
          "concurrent.futures",
          "unittest",
          "unittest.mock",
          "collections",
          "pydantic_core",
          "pytest",
          "crewai.agent",
          "crewai.agents",
          "crewai.crew",
          "crewai.crews.crew_output",
          "crewai.flow",
          "crewai.knowledge.knowledge",
          "crewai.knowledge.source.string_knowledge_source",
          "crewai.llm",
          "crewai.memory.contextual.contextual_memory",
          "crewai.memory.long_term.long_term_memory",
          "crewai.memory.short_term.short_term_memory",
          "crewai.process",
          "crewai.task",
          "crewai.tasks.conditional_task",
          "crewai.tasks.output_format",
          "crewai.tasks.task_output",
          "crewai.types.usage_metrics",
          "crewai.utilities",
          "crewai.utilities.events",
          "crewai.utilities.events.crew_events",
          "crewai.utilities.events.event_listener",
          "crewai.utilities.rpm_controller",
          "crewai.utilities.task_output_storage_handler",
          "crewai.utilities.events.memory_events",
          "crewai.memory.external.external_memory",
          "typing",
          "pydantic",
          "crewai.tools",
          "typing",
          "pydantic",
          "crewai.tools",
          "typing",
          "pydantic",
          "crewai.tools",
          "typing",
          "pydantic",
          "crewai.tools",
          "unittest.mock",
          "crewai.tools",
          "crewai.tools",
          "unittest.mock",
          "crewai",
          "crewai.tools",
          "crewai.tools",
          "crewai_tools",
          "unittest.mock",
          "unittest.mock",
          "unittest.mock",
          "crewai.tools",
          "crewai.tools",
          "typing",
          "crewai_tools",
          "pydantic",
          "crewai.tools",
          "crewai.tools.agent_tools.add_image_tool",
          "crewai.project",
          "crewai.project",
          "typing",
          "crewai.agents.agent_builder.base_agent",
          "crewai.project",
          "crewai.project"
        ],
        "functions": [
          "ceo",
          "researcher",
          "writer",
          "test_crew_with_only_conditional_tasks_raises_error",
          "test_crew_config_conditional_requirement",
          "test_async_task_cannot_include_sequential_async_tasks_in_context",
          "test_context_no_future_tasks",
          "test_crew_config_with_wrong_keys",
          "test_crew_creation",
          "test_sync_task_execution",
          "test_hierarchical_process",
          "test_manager_llm_requirement_for_hierarchical_process",
          "test_manager_agent_delegating_to_assigned_task_agent",
          "test_manager_agent_delegating_to_all_agents",
          "test_manager_agent_delegates_with_varied_role_cases",
          "test_crew_with_delegating_agents",
          "test_crew_with_delegating_agents_should_not_override_task_tools",
          "test_crew_with_delegating_agents_should_not_override_agent_tools",
          "test_task_tools_override_agent_tools",
          "test_task_tools_override_agent_tools_with_allow_delegation",
          "test_crew_verbose_output",
          "test_cache_hitting_between_agents",
          "test_api_calls_throttling",
          "test_crew_kickoff_usage_metrics",
          "test_crew_kickoff_streaming_usage_metrics",
          "test_agents_rpm_is_never_set_if_crew_max_RPM_is_not_set",
          "test_sequential_async_task_execution_completion",
          "test_single_task_with_async_execution",
          "test_three_task_with_async_execution",
          "test_kickoff_for_each_single_input",
          "test_kickoff_for_each_multiple_inputs",
          "test_kickoff_for_each_empty_input",
          "test_kickoff_for_each_invalid_input",
          "test_kickoff_for_each_error_handling",
          "test_set_agents_step_callback",
          "test_dont_set_agents_step_callback_if_already_set",
          "test_crew_function_calling_llm",
          "test_task_with_no_arguments",
          "test_code_execution_flag_adds_code_tool_upon_kickoff",
          "test_delegation_is_not_enabled_if_there_are_only_one_agent",
          "test_agents_do_not_get_delegation_tools_with_there_is_only_one_agent",
          "test_sequential_crew_creation_tasks_without_agents",
          "test_agent_usage_metrics_are_captured_for_hierarchical_process",
          "test_hierarchical_kickoff_usage_metrics_include_manager",
          "test_hierarchical_crew_creation_tasks_with_agents",
          "test_hierarchical_crew_creation_tasks_with_async_execution",
          "test_hierarchical_crew_creation_tasks_with_sync_last",
          "test_crew_inputs_interpolate_both_agents_and_tasks",
          "test_crew_inputs_interpolate_both_agents_and_tasks_diff",
          "test_crew_does_not_interpolate_without_inputs",
          "test_task_callback_on_crew",
          "test_task_callback_both_on_task_and_crew",
          "test_task_same_callback_both_on_task_and_crew",
          "test_tools_with_custom_caching",
          "test_conditional_task_uses_last_output",
          "test_conditional_tasks_result_collection",
          "test_multiple_conditional_tasks",
          "test_using_contextual_memory",
          "test_memory_events_are_emitted",
          "test_using_contextual_memory_with_long_term_memory",
          "test_warning_long_term_memory_without_entity_memory",
          "test_long_term_memory_with_memory_flag",
          "test_using_contextual_memory_with_short_term_memory",
          "test_disabled_memory_using_contextual_memory",
          "test_crew_log_file_output",
          "test_crew_output_file_end_to_end",
          "test_crew_output_file_validation_failures",
          "test_manager_agent",
          "test_manager_agent_in_agents_raises_exception",
          "test_manager_agent_with_tools_raises_exception",
          "test_crew_train_success",
          "test_crew_train_error",
          "test__setup_for_training",
          "test_replay_feature",
          "test_crew_replay_error",
          "test_crew_task_db_init",
          "test_replay_task_with_context",
          "test_replay_with_context",
          "test_replay_with_context_set_to_nullable",
          "test_replay_with_invalid_task_id",
          "test_replay_interpolates_inputs_properly",
          "test_replay_setup_context",
          "test_key",
          "test_key_with_interpolated_inputs",
          "test_conditional_task_requirement_breaks_when_singular_conditional_task",
          "test_conditional_task_last_task_when_conditional_is_true",
          "test_conditional_task_last_task_when_conditional_is_false",
          "test_conditional_task_requirement_breaks_when_task_async",
          "test_conditional_should_skip",
          "test_conditional_should_execute",
          "test_crew_testing_function",
          "test_hierarchical_verbose_manager_agent",
          "test_hierarchical_verbose_false_manager_agent",
          "test_fetch_inputs",
          "test_task_tools_preserve_code_execution_tools",
          "test_multimodal_flag_adds_multimodal_tools",
          "test_multimodal_agent_image_tool_handling",
          "test_multimodal_agent_describing_image_successfully",
          "test_multimodal_agent_live_image_analysis",
          "test_crew_with_failing_task_guardrails",
          "test_crew_guardrail_feedback_in_context",
          "test_before_kickoff_callback",
          "test_before_kickoff_without_inputs",
          "test_crew_with_knowledge_sources_works_with_copy",
          "test_crew_kickoff_for_each_works_with_manager_agent_copy",
          "test_crew_copy_with_memory",
          "test_sets_parent_flow_when_outside_flow",
          "test_sets_parent_flow_when_inside_flow",
          "test_reset_knowledge_with_no_crew_knowledge",
          "test_reset_knowledge_with_only_crew_knowledge",
          "test_reset_knowledge_with_crew_and_agent_knowledge",
          "test_reset_knowledge_with_only_agent_knowledge",
          "test_reset_agent_knowledge_with_no_agent_knowledge",
          "test_reset_agent_knowledge_with_only_crew_knowledge",
          "test_reset_agent_knowledge_with_crew_and_agent_knowledge",
          "test_reset_agent_knowledge_with_only_agent_knowledge",
          "test_default_crew_name",
          "test_ensure_exchanged_messages_are_propagated_to_external_memory",
          "condition_func",
          "multiplier",
          "get_final_answer",
          "agent_callback",
          "crew_callback",
          "look_up_greeting",
          "return_data",
          "multiplcation_tool",
          "cache_func",
          "condition_fails",
          "condition_succeeds",
          "condition_never_met",
          "condition_always_met",
          "condition1",
          "condition2",
          "testing_tool",
          "on_crew_train_started",
          "on_crew_train_completed",
          "condition_fn",
          "condition_fn",
          "condition_fn",
          "my_condition",
          "on_crew_test_started",
          "on_crew_test_completed",
          "strict_format_guardrail",
          "format_guardrail",
          "_run",
          "_run",
          "_run",
          "_run",
          "_run",
          "_run",
          "handle_memory_save_started",
          "handle_memory_save_completed",
          "handle_memory_save_failed",
          "handle_memory_query_started",
          "handle_memory_query_completed",
          "handle_memory_query_failed",
          "handle_memory_retrieval_started",
          "handle_memory_retrieval_completed",
          "_run",
          "side_effect",
          "__init__",
          "modify_inputs",
          "my_agent",
          "my_task",
          "crew",
          "__init__",
          "modify_inputs",
          "my_agent",
          "my_task",
          "crew",
          "start"
        ],
        "classes": [
          "TestToolInput",
          "TestTool",
          "TestToolInput",
          "TestTool",
          "TestToolInput",
          "TestTool",
          "AnotherTestTool",
          "TestToolInput",
          "TestTool",
          "AnotherTestTool",
          "TestToolInput",
          "TestTool",
          "TestCrewClass",
          "TestCrewClass",
          "MyFlow"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\GENERATED_TESTS\\mass_generated\\test___init___comprehensive.py",
      {
        "lines": 4377,
        "size_bytes": 144529,
        "imports": [],
        "functions": [],
        "classes": []
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\PRODUCTION_PACKAGES\\TestMaster_Production_v20250821_200633\\tests\\sample_tests\\test___init___comprehensive.py",
      {
        "lines": 4377,
        "size_bytes": 144529,
        "imports": [],
        "functions": [],
        "classes": []
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\enhanced_linkage_dashboard.py",
      {
        "lines": 3594,
        "size_bytes": 141630,
        "imports": [
          "os",
          "sys",
          "time",
          "threading",
          "webbrowser",
          "ast",
          "pathlib",
          "json",
          "datetime",
          "random",
          "collections",
          "flask",
          "flask_socketio",
          "sys",
          "enhanced_intelligence_linkage"
        ],
        "functions": [
          "quick_linkage_analysis",
          "analyze_file_quick",
          "dashboard",
          "graph_data",
          "linkage_data",
          "health_data",
          "analytics_data",
          "robustness_data",
          "enhanced_linkage_data",
          "security_status",
          "ml_metrics",
          "telemetry_summary",
          "system_health",
          "module_status",
          "quality_metrics",
          "monitoring_status",
          "performance_metrics",
          "reporting_summary",
          "alerts_summary",
          "intelligence_backend",
          "documentation_api",
          "orchestration_status",
          "validation_framework",
          "api_gateway_metrics",
          "analytics_aggregator",
          "web_monitoring",
          "coverage_analysis",
          "handle_connect",
          "handle_join_room",
          "broadcast_live_data",
          "main",
          "__init__",
          "get_health_data",
          "get_analytics_data",
          "get_robustness_data",
          "open_browser"
        ],
        "classes": [
          "LiveDataGenerator"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\PraisonAI\\src\\praisonai-agents\\praisonaiagents\\llm\\llm.py",
      {
        "lines": 3570,
        "size_bytes": 184430,
        "imports": [
          "logging",
          "os",
          "warnings",
          "re",
          "inspect",
          "typing",
          "pydantic",
          "time",
          "json",
          "xml.etree.ElementTree",
          "main",
          "rich.console",
          "rich.live",
          "telemetry.token_collector",
          "litellm",
          "model_capabilities",
          "inspect",
          "litellm",
          "litellm",
          "rich.console",
          "model_capabilities",
          "litellm",
          "litellm",
          "litellm",
          "litellm",
          "litellm",
          "litellm",
          "litellm",
          "logging",
          "litellm",
          "logging",
          "re",
          "json",
          "model_capabilities",
          "__main__",
          "__main__",
          "litellm",
          "re"
        ],
        "functions": [
          "__init__",
          "_is_context_limit_error",
          "_configure_logging",
          "_log_llm_config",
          "__init__",
          "console",
          "_is_ollama_provider",
          "_is_qwen_provider",
          "_supports_xml_tool_format",
          "_generate_ollama_tool_summary",
          "_format_ollama_tool_result_message",
          "_process_stream_delta",
          "_parse_tool_call_arguments",
          "_validate_and_filter_ollama_arguments",
          "_handle_ollama_sequential_logic",
          "_needs_system_message_skip",
          "_supports_streaming_tools",
          "_build_messages",
          "_fix_array_schemas",
          "_get_tools_cache_key",
          "_format_tools_for_litellm",
          "get_response",
          "get_response_stream",
          "_is_gemini_model",
          "_is_streaming_error_recoverable",
          "can_use_tools",
          "can_use_stop_words",
          "get_context_size",
          "_setup_event_tracking",
          "_track_token_usage",
          "set_current_agent",
          "_build_completion_params",
          "_prepare_response_logging",
          "_process_streaming_chunk",
          "_process_tool_calls_from_stream",
          "_serialize_tool_calls",
          "_extract_tool_call_info",
          "response",
          "_generate_tool_definition"
        ],
        "classes": [
          "LLMContextLengthExceededException",
          "LLM"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\autogen\\python\\packages\\autogen-agentchat\\tests\\test_assistant_agent.py",
      {
        "lines": 3563,
        "size_bytes": 136769,
        "imports": [
          "asyncio",
          "json",
          "os",
          "typing",
          "unittest.mock",
          "pytest",
          "autogen_agentchat.agents",
          "autogen_agentchat.agents._assistant_agent",
          "autogen_agentchat.base",
          "autogen_agentchat.messages",
          "autogen_core",
          "autogen_core.memory",
          "autogen_core.memory",
          "autogen_core.model_context",
          "autogen_core.models",
          "autogen_ext.models.anthropic",
          "autogen_ext.models.openai",
          "autogen_ext.models.replay",
          "autogen_ext.tools.mcp",
          "pydantic",
          "autogen_core.models",
          "autogen_agentchat.messages"
        ],
        "functions": [
          "mock_tool_function",
          "_pass_function",
          "_echo_function",
          "__init__",
          "dump_component",
          "test",
          "_get_anthropic_client",
          "duplicate_tool",
          "test_tool",
          "custom_formatter",
          "custom_formatter",
          "error_tool",
          "error_formatter",
          "json_tool",
          "simple_tool",
          "smart_formatter",
          "failing_tool",
          "error_aware_formatter"
        ],
        "classes": [
          "MockMemory",
          "StructuredOutput",
          "TestAssistantAgentToolCallLoop",
          "TestAssistantAgentInitialization",
          "TestAssistantAgentValidation",
          "TestAssistantAgentStateManagement",
          "TestAssistantAgentProperties",
          "TestAssistantAgentErrorHandling",
          "TestAssistantAgentMemoryIntegration",
          "TestAssistantAgentSystemMessage",
          "TestAssistantAgentModelCompatibility",
          "TestAssistantAgentComponentSerialization",
          "TestAssistantAgentThoughtHandling",
          "TestAssistantAgentAdvancedScenarios",
          "TestAssistantAgentAdvancedToolFeatures",
          "TestAssistantAgentCancellationToken",
          "TestAssistantAgentStreamingEdgeCases",
          "TestAssistantAgentWorkbenchIntegration",
          "TestAssistantAgentComplexIntegration",
          "TestAssistantAgentMessageContext",
          "TestAnthropicIntegration",
          "AgentResponse",
          "AgentResponse",
          "AgentResponse"
        ]
      }
    ]
  ],
  "common_imports": [
    [
      "typing",
      5423
    ],
    [
      "json",
      2879
    ],
    [
      "datetime",
      2439
    ],
    [
      "os",
      2384
    ],
    [
      "pathlib",
      2303
    ],
    [
      "dataclasses",
      2083
    ],
    [
      "asyncio",
      2068
    ],
    [
      "logging",
      2026
    ],
    [
      "time",
      1882
    ],
    [
      "agno.agent",
      1462
    ]
  ],
  "most_functions": [
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\crewAI\\tests\\crew_test.py",
      {
        "lines": 4778,
        "size_bytes": 177530,
        "imports": [
          "hashlib",
          "json",
          "concurrent.futures",
          "unittest",
          "unittest.mock",
          "collections",
          "pydantic_core",
          "pytest",
          "crewai.agent",
          "crewai.agents",
          "crewai.crew",
          "crewai.crews.crew_output",
          "crewai.flow",
          "crewai.knowledge.knowledge",
          "crewai.knowledge.source.string_knowledge_source",
          "crewai.llm",
          "crewai.memory.contextual.contextual_memory",
          "crewai.memory.long_term.long_term_memory",
          "crewai.memory.short_term.short_term_memory",
          "crewai.process",
          "crewai.task",
          "crewai.tasks.conditional_task",
          "crewai.tasks.output_format",
          "crewai.tasks.task_output",
          "crewai.types.usage_metrics",
          "crewai.utilities",
          "crewai.utilities.events",
          "crewai.utilities.events.crew_events",
          "crewai.utilities.events.event_listener",
          "crewai.utilities.rpm_controller",
          "crewai.utilities.task_output_storage_handler",
          "crewai.utilities.events.memory_events",
          "crewai.memory.external.external_memory",
          "typing",
          "pydantic",
          "crewai.tools",
          "typing",
          "pydantic",
          "crewai.tools",
          "typing",
          "pydantic",
          "crewai.tools",
          "typing",
          "pydantic",
          "crewai.tools",
          "unittest.mock",
          "crewai.tools",
          "crewai.tools",
          "unittest.mock",
          "crewai",
          "crewai.tools",
          "crewai.tools",
          "crewai_tools",
          "unittest.mock",
          "unittest.mock",
          "unittest.mock",
          "crewai.tools",
          "crewai.tools",
          "typing",
          "crewai_tools",
          "pydantic",
          "crewai.tools",
          "crewai.tools.agent_tools.add_image_tool",
          "crewai.project",
          "crewai.project",
          "typing",
          "crewai.agents.agent_builder.base_agent",
          "crewai.project",
          "crewai.project"
        ],
        "functions": [
          "ceo",
          "researcher",
          "writer",
          "test_crew_with_only_conditional_tasks_raises_error",
          "test_crew_config_conditional_requirement",
          "test_async_task_cannot_include_sequential_async_tasks_in_context",
          "test_context_no_future_tasks",
          "test_crew_config_with_wrong_keys",
          "test_crew_creation",
          "test_sync_task_execution",
          "test_hierarchical_process",
          "test_manager_llm_requirement_for_hierarchical_process",
          "test_manager_agent_delegating_to_assigned_task_agent",
          "test_manager_agent_delegating_to_all_agents",
          "test_manager_agent_delegates_with_varied_role_cases",
          "test_crew_with_delegating_agents",
          "test_crew_with_delegating_agents_should_not_override_task_tools",
          "test_crew_with_delegating_agents_should_not_override_agent_tools",
          "test_task_tools_override_agent_tools",
          "test_task_tools_override_agent_tools_with_allow_delegation",
          "test_crew_verbose_output",
          "test_cache_hitting_between_agents",
          "test_api_calls_throttling",
          "test_crew_kickoff_usage_metrics",
          "test_crew_kickoff_streaming_usage_metrics",
          "test_agents_rpm_is_never_set_if_crew_max_RPM_is_not_set",
          "test_sequential_async_task_execution_completion",
          "test_single_task_with_async_execution",
          "test_three_task_with_async_execution",
          "test_kickoff_for_each_single_input",
          "test_kickoff_for_each_multiple_inputs",
          "test_kickoff_for_each_empty_input",
          "test_kickoff_for_each_invalid_input",
          "test_kickoff_for_each_error_handling",
          "test_set_agents_step_callback",
          "test_dont_set_agents_step_callback_if_already_set",
          "test_crew_function_calling_llm",
          "test_task_with_no_arguments",
          "test_code_execution_flag_adds_code_tool_upon_kickoff",
          "test_delegation_is_not_enabled_if_there_are_only_one_agent",
          "test_agents_do_not_get_delegation_tools_with_there_is_only_one_agent",
          "test_sequential_crew_creation_tasks_without_agents",
          "test_agent_usage_metrics_are_captured_for_hierarchical_process",
          "test_hierarchical_kickoff_usage_metrics_include_manager",
          "test_hierarchical_crew_creation_tasks_with_agents",
          "test_hierarchical_crew_creation_tasks_with_async_execution",
          "test_hierarchical_crew_creation_tasks_with_sync_last",
          "test_crew_inputs_interpolate_both_agents_and_tasks",
          "test_crew_inputs_interpolate_both_agents_and_tasks_diff",
          "test_crew_does_not_interpolate_without_inputs",
          "test_task_callback_on_crew",
          "test_task_callback_both_on_task_and_crew",
          "test_task_same_callback_both_on_task_and_crew",
          "test_tools_with_custom_caching",
          "test_conditional_task_uses_last_output",
          "test_conditional_tasks_result_collection",
          "test_multiple_conditional_tasks",
          "test_using_contextual_memory",
          "test_memory_events_are_emitted",
          "test_using_contextual_memory_with_long_term_memory",
          "test_warning_long_term_memory_without_entity_memory",
          "test_long_term_memory_with_memory_flag",
          "test_using_contextual_memory_with_short_term_memory",
          "test_disabled_memory_using_contextual_memory",
          "test_crew_log_file_output",
          "test_crew_output_file_end_to_end",
          "test_crew_output_file_validation_failures",
          "test_manager_agent",
          "test_manager_agent_in_agents_raises_exception",
          "test_manager_agent_with_tools_raises_exception",
          "test_crew_train_success",
          "test_crew_train_error",
          "test__setup_for_training",
          "test_replay_feature",
          "test_crew_replay_error",
          "test_crew_task_db_init",
          "test_replay_task_with_context",
          "test_replay_with_context",
          "test_replay_with_context_set_to_nullable",
          "test_replay_with_invalid_task_id",
          "test_replay_interpolates_inputs_properly",
          "test_replay_setup_context",
          "test_key",
          "test_key_with_interpolated_inputs",
          "test_conditional_task_requirement_breaks_when_singular_conditional_task",
          "test_conditional_task_last_task_when_conditional_is_true",
          "test_conditional_task_last_task_when_conditional_is_false",
          "test_conditional_task_requirement_breaks_when_task_async",
          "test_conditional_should_skip",
          "test_conditional_should_execute",
          "test_crew_testing_function",
          "test_hierarchical_verbose_manager_agent",
          "test_hierarchical_verbose_false_manager_agent",
          "test_fetch_inputs",
          "test_task_tools_preserve_code_execution_tools",
          "test_multimodal_flag_adds_multimodal_tools",
          "test_multimodal_agent_image_tool_handling",
          "test_multimodal_agent_describing_image_successfully",
          "test_multimodal_agent_live_image_analysis",
          "test_crew_with_failing_task_guardrails",
          "test_crew_guardrail_feedback_in_context",
          "test_before_kickoff_callback",
          "test_before_kickoff_without_inputs",
          "test_crew_with_knowledge_sources_works_with_copy",
          "test_crew_kickoff_for_each_works_with_manager_agent_copy",
          "test_crew_copy_with_memory",
          "test_sets_parent_flow_when_outside_flow",
          "test_sets_parent_flow_when_inside_flow",
          "test_reset_knowledge_with_no_crew_knowledge",
          "test_reset_knowledge_with_only_crew_knowledge",
          "test_reset_knowledge_with_crew_and_agent_knowledge",
          "test_reset_knowledge_with_only_agent_knowledge",
          "test_reset_agent_knowledge_with_no_agent_knowledge",
          "test_reset_agent_knowledge_with_only_crew_knowledge",
          "test_reset_agent_knowledge_with_crew_and_agent_knowledge",
          "test_reset_agent_knowledge_with_only_agent_knowledge",
          "test_default_crew_name",
          "test_ensure_exchanged_messages_are_propagated_to_external_memory",
          "condition_func",
          "multiplier",
          "get_final_answer",
          "agent_callback",
          "crew_callback",
          "look_up_greeting",
          "return_data",
          "multiplcation_tool",
          "cache_func",
          "condition_fails",
          "condition_succeeds",
          "condition_never_met",
          "condition_always_met",
          "condition1",
          "condition2",
          "testing_tool",
          "on_crew_train_started",
          "on_crew_train_completed",
          "condition_fn",
          "condition_fn",
          "condition_fn",
          "my_condition",
          "on_crew_test_started",
          "on_crew_test_completed",
          "strict_format_guardrail",
          "format_guardrail",
          "_run",
          "_run",
          "_run",
          "_run",
          "_run",
          "_run",
          "handle_memory_save_started",
          "handle_memory_save_completed",
          "handle_memory_save_failed",
          "handle_memory_query_started",
          "handle_memory_query_completed",
          "handle_memory_query_failed",
          "handle_memory_retrieval_started",
          "handle_memory_retrieval_completed",
          "_run",
          "side_effect",
          "__init__",
          "modify_inputs",
          "my_agent",
          "my_task",
          "crew",
          "__init__",
          "modify_inputs",
          "my_agent",
          "my_task",
          "crew",
          "start"
        ],
        "classes": [
          "TestToolInput",
          "TestTool",
          "TestToolInput",
          "TestTool",
          "TestToolInput",
          "TestTool",
          "AnotherTestTool",
          "TestToolInput",
          "TestTool",
          "AnotherTestTool",
          "TestToolInput",
          "TestTool",
          "TestCrewClass",
          "TestCrewClass",
          "MyFlow"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\TestMaster\\archive\\coverage_analyzer_original_2697_lines.py",
      {
        "lines": 2698,
        "size_bytes": 119025,
        "imports": [
          "ast",
          "coverage",
          "subprocess",
          "sys",
          "re",
          "math",
          "hashlib",
          "networkx",
          "typing",
          "pathlib",
          "dataclasses",
          "datetime",
          "json",
          "xml.etree.ElementTree",
          "collections",
          "statistics",
          "itertools",
          "difflib",
          "re"
        ],
        "functions": [
          "__init__",
          "run_full_analysis",
          "_run_tests_with_coverage",
          "_analyze_modules",
          "_should_analyze_file",
          "_analyze_module",
          "_analyze_functions",
          "_analyze_function",
          "_calculate_complexity",
          "_find_test_files",
          "_categorize_tests",
          "_calculate_branch_coverage",
          "_calculate_function_coverage",
          "_print_summary",
          "get_uncovered_functions",
          "save_report",
          "__init__",
          "perform_comprehensive_analysis",
          "_analyze_software_metrics",
          "_analyze_graph_structures",
          "_detect_code_clones",
          "_analyze_security_patterns",
          "_analyze_linguistic_features",
          "_analyze_evolution_patterns",
          "_perform_statistical_analysis",
          "_analyze_structural_patterns",
          "_comprehensive_complexity_analysis",
          "_comprehensive_quality_analysis",
          "_calculate_halstead_metrics",
          "_calculate_mccabe_complexity",
          "_calculate_function_complexity",
          "_calculate_sloc_metrics",
          "_detect_exact_clones",
          "_detect_vulnerability_patterns",
          "_analyze_identifiers",
          "_generate_comprehensive_summary",
          "_should_analyze_file",
          "_calculate_maintainability_index",
          "_calculate_coupling_metrics",
          "_calculate_cohesion_metrics",
          "_calculate_lcom",
          "_calculate_distribution",
          "_calculate_inheritance_metrics",
          "_calculate_polymorphism_metrics",
          "_calculate_encapsulation_metrics",
          "_calculate_abstraction_metrics",
          "_build_call_graph",
          "_build_control_flow_graphs",
          "_build_dependency_graph",
          "_analyze_call_graph",
          "_analyze_control_flows",
          "_analyze_dependency_graph",
          "_calculate_centrality_measures",
          "_analyze_graph_clustering",
          "_analyze_graph_connectivity",
          "_detect_graph_cycles",
          "_analyze_critical_paths",
          "_detect_near_clones",
          "_calculate_line_similarity",
          "_calculate_structural_similarity",
          "_extract_code_structure",
          "_detect_structural_clones",
          "_detect_semantic_clones",
          "_group_clone_families",
          "_analyze_clone_evolution",
          "_calculate_clone_metrics",
          "_detect_code_smells",
          "_detect_antipatterns",
          "_identify_security_hotspots",
          "_analyze_input_validation",
          "_analyze_authentication",
          "_analyze_authorization",
          "_analyze_cryptography_usage",
          "_analyze_sql_injection_risks",
          "_analyze_xss_vulnerabilities",
          "_analyze_naming_conventions",
          "_calculate_vocabulary_metrics",
          "_analyze_comments",
          "_assess_documentation_quality",
          "_calculate_readability_metrics",
          "_analyze_abbreviations",
          "_extract_domain_terms",
          "_analyze_nl_patterns",
          "_analyze_file_ages",
          "_analyze_growth_patterns",
          "_detect_refactoring_patterns",
          "_identify_change_hotspots",
          "_calculate_stability_metrics",
          "_analyze_change_frequency",
          "_calculate_code_churn",
          "_analyze_developer_patterns",
          "_analyze_temporal_coupling",
          "_analyze_distributions",
          "_analyze_correlations",
          "_detect_outliers",
          "_perform_clustering",
          "_analyze_trends",
          "_analyze_variance",
          "_calculate_entropy_measures",
          "_apply_information_theory",
          "_perform_statistical_tests",
          "_detect_design_patterns",
          "_is_singleton_pattern",
          "_is_factory_pattern",
          "_is_observer_pattern",
          "_is_decorator_pattern",
          "_is_strategy_pattern",
          "_is_command_pattern",
          "_detect_architectural_patterns",
          "_analyze_layered_architecture",
          "_analyze_modular_structure",
          "_analyze_package_structure",
          "_analyze_interfaces",
          "_analyze_abstract_coupling",
          "_analyze_concrete_coupling",
          "_calculate_fan_metrics",
          "_calculate_quality_metrics",
          "_assess_technical_debt",
          "_analyze_maintainability_factors",
          "_analyze_reliability_indicators",
          "_analyze_performance_indicators",
          "_analyze_portability_metrics",
          "_analyze_usability_metrics",
          "_analyze_testability_metrics",
          "_analyze_reusability_metrics",
          "_detailed_cyclomatic_analysis",
          "_calculate_cognitive_complexity",
          "_calculate_npath_complexity",
          "_calculate_essential_complexity",
          "_calculate_data_complexity",
          "_calculate_system_complexity",
          "_calculate_interface_complexity",
          "_calculate_temporal_complexity",
          "_calculate_structural_complexity",
          "__init__",
          "perform_dependency_analysis",
          "_analyze_import_dependencies",
          "_analyze_function_signatures",
          "_analyze_cross_module_references",
          "_find_orphaned_modules",
          "_detect_circular_dependencies",
          "_analyze_dependency_depth",
          "_should_analyze_file",
          "__init__",
          "assess_codebase_health",
          "_assess_code_quality",
          "_assess_architectural_integrity",
          "_assess_test_coverage_health",
          "_assess_dependency_health",
          "_assess_documentation_health",
          "_analyze_health_trends",
          "_generate_health_recommendations",
          "_should_analyze_file",
          "calculate_depth",
          "has_cycle"
        ],
        "classes": [
          "FunctionCoverage",
          "ModuleCoverage",
          "CoverageReport",
          "CoverageAnalyzer",
          "ComprehensiveCodebaseAnalyzer",
          "AdvancedDependencyMapper",
          "CodebaseHealthAssessment"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\testing_components\\coverage_analyzer.py",
      {
        "lines": 2698,
        "size_bytes": 119025,
        "imports": [
          "ast",
          "coverage",
          "subprocess",
          "sys",
          "re",
          "math",
          "hashlib",
          "networkx",
          "typing",
          "pathlib",
          "dataclasses",
          "datetime",
          "json",
          "xml.etree.ElementTree",
          "collections",
          "statistics",
          "itertools",
          "difflib",
          "re"
        ],
        "functions": [
          "__init__",
          "run_full_analysis",
          "_run_tests_with_coverage",
          "_analyze_modules",
          "_should_analyze_file",
          "_analyze_module",
          "_analyze_functions",
          "_analyze_function",
          "_calculate_complexity",
          "_find_test_files",
          "_categorize_tests",
          "_calculate_branch_coverage",
          "_calculate_function_coverage",
          "_print_summary",
          "get_uncovered_functions",
          "save_report",
          "__init__",
          "perform_comprehensive_analysis",
          "_analyze_software_metrics",
          "_analyze_graph_structures",
          "_detect_code_clones",
          "_analyze_security_patterns",
          "_analyze_linguistic_features",
          "_analyze_evolution_patterns",
          "_perform_statistical_analysis",
          "_analyze_structural_patterns",
          "_comprehensive_complexity_analysis",
          "_comprehensive_quality_analysis",
          "_calculate_halstead_metrics",
          "_calculate_mccabe_complexity",
          "_calculate_function_complexity",
          "_calculate_sloc_metrics",
          "_detect_exact_clones",
          "_detect_vulnerability_patterns",
          "_analyze_identifiers",
          "_generate_comprehensive_summary",
          "_should_analyze_file",
          "_calculate_maintainability_index",
          "_calculate_coupling_metrics",
          "_calculate_cohesion_metrics",
          "_calculate_lcom",
          "_calculate_distribution",
          "_calculate_inheritance_metrics",
          "_calculate_polymorphism_metrics",
          "_calculate_encapsulation_metrics",
          "_calculate_abstraction_metrics",
          "_build_call_graph",
          "_build_control_flow_graphs",
          "_build_dependency_graph",
          "_analyze_call_graph",
          "_analyze_control_flows",
          "_analyze_dependency_graph",
          "_calculate_centrality_measures",
          "_analyze_graph_clustering",
          "_analyze_graph_connectivity",
          "_detect_graph_cycles",
          "_analyze_critical_paths",
          "_detect_near_clones",
          "_calculate_line_similarity",
          "_calculate_structural_similarity",
          "_extract_code_structure",
          "_detect_structural_clones",
          "_detect_semantic_clones",
          "_group_clone_families",
          "_analyze_clone_evolution",
          "_calculate_clone_metrics",
          "_detect_code_smells",
          "_detect_antipatterns",
          "_identify_security_hotspots",
          "_analyze_input_validation",
          "_analyze_authentication",
          "_analyze_authorization",
          "_analyze_cryptography_usage",
          "_analyze_sql_injection_risks",
          "_analyze_xss_vulnerabilities",
          "_analyze_naming_conventions",
          "_calculate_vocabulary_metrics",
          "_analyze_comments",
          "_assess_documentation_quality",
          "_calculate_readability_metrics",
          "_analyze_abbreviations",
          "_extract_domain_terms",
          "_analyze_nl_patterns",
          "_analyze_file_ages",
          "_analyze_growth_patterns",
          "_detect_refactoring_patterns",
          "_identify_change_hotspots",
          "_calculate_stability_metrics",
          "_analyze_change_frequency",
          "_calculate_code_churn",
          "_analyze_developer_patterns",
          "_analyze_temporal_coupling",
          "_analyze_distributions",
          "_analyze_correlations",
          "_detect_outliers",
          "_perform_clustering",
          "_analyze_trends",
          "_analyze_variance",
          "_calculate_entropy_measures",
          "_apply_information_theory",
          "_perform_statistical_tests",
          "_detect_design_patterns",
          "_is_singleton_pattern",
          "_is_factory_pattern",
          "_is_observer_pattern",
          "_is_decorator_pattern",
          "_is_strategy_pattern",
          "_is_command_pattern",
          "_detect_architectural_patterns",
          "_analyze_layered_architecture",
          "_analyze_modular_structure",
          "_analyze_package_structure",
          "_analyze_interfaces",
          "_analyze_abstract_coupling",
          "_analyze_concrete_coupling",
          "_calculate_fan_metrics",
          "_calculate_quality_metrics",
          "_assess_technical_debt",
          "_analyze_maintainability_factors",
          "_analyze_reliability_indicators",
          "_analyze_performance_indicators",
          "_analyze_portability_metrics",
          "_analyze_usability_metrics",
          "_analyze_testability_metrics",
          "_analyze_reusability_metrics",
          "_detailed_cyclomatic_analysis",
          "_calculate_cognitive_complexity",
          "_calculate_npath_complexity",
          "_calculate_essential_complexity",
          "_calculate_data_complexity",
          "_calculate_system_complexity",
          "_calculate_interface_complexity",
          "_calculate_temporal_complexity",
          "_calculate_structural_complexity",
          "__init__",
          "perform_dependency_analysis",
          "_analyze_import_dependencies",
          "_analyze_function_signatures",
          "_analyze_cross_module_references",
          "_find_orphaned_modules",
          "_detect_circular_dependencies",
          "_analyze_dependency_depth",
          "_should_analyze_file",
          "__init__",
          "assess_codebase_health",
          "_assess_code_quality",
          "_assess_architectural_integrity",
          "_assess_test_coverage_health",
          "_assess_dependency_health",
          "_assess_documentation_health",
          "_analyze_health_trends",
          "_generate_health_recommendations",
          "_should_analyze_file",
          "calculate_depth",
          "has_cycle"
        ],
        "classes": [
          "FunctionCoverage",
          "ModuleCoverage",
          "CoverageReport",
          "CoverageAnalyzer",
          "ComprehensiveCodebaseAnalyzer",
          "AdvancedDependencyMapper",
          "CodebaseHealthAssessment"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\phidata\\libs\\agno\\agno\\agent\\agent.py",
      {
        "lines": 8315,
        "size_bytes": 381401,
        "imports": [
          "__future__",
          "asyncio",
          "collections",
          "dataclasses",
          "os",
          "textwrap",
          "typing",
          "uuid",
          "pydantic",
          "agno.agent.metrics",
          "agno.exceptions",
          "agno.knowledge.agent",
          "agno.media",
          "agno.memory.agent",
          "agno.memory.v2.memory",
          "agno.memory.v2.schema",
          "agno.models.base",
          "agno.models.message",
          "agno.models.response",
          "agno.reasoning.step",
          "agno.run.base",
          "agno.run.messages",
          "agno.run.response",
          "agno.run.team",
          "agno.storage.base",
          "agno.storage.session.agent",
          "agno.tools.function",
          "agno.tools.toolkit",
          "agno.utils.events",
          "agno.utils.log",
          "agno.utils.message",
          "agno.utils.prompts",
          "agno.utils.response",
          "agno.utils.safe_formatter",
          "agno.utils.string",
          "agno.utils.timer",
          "json",
          "concurrent.futures",
          "inspect",
          "inspect",
          "inspect",
          "time",
          "agno.utils.merge_dict",
          "re",
          "string",
          "dataclasses",
          "copy",
          "agno.document",
          "agno.document",
          "json",
          "json",
          "agno.utils.events",
          "agno.utils.events",
          "json",
          "agno.document",
          "agno.api.agent",
          "agno.api.agent",
          "agno.api.agent",
          "json",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "json",
          "rich.console",
          "rich.json",
          "rich.live",
          "rich.markdown",
          "rich.status",
          "rich.text",
          "inspect",
          "rich.prompt",
          "rich.prompt",
          "agno.run.response",
          "agno.run.response",
          "inspect",
          "datetime",
          "agno.utils.location",
          "copy",
          "copy",
          "inspect",
          "inspect",
          "yaml",
          "copy",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.helpers",
          "agno.reasoning.ollama",
          "agno.reasoning.openai",
          "agno.reasoning.default",
          "agno.reasoning.helpers",
          "copy",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.deepseek",
          "agno.reasoning.groq",
          "agno.reasoning.helpers",
          "agno.reasoning.ollama",
          "agno.reasoning.openai",
          "agno.reasoning.default",
          "agno.reasoning.helpers",
          "json",
          "json",
          "agno.utils.log",
          "agno.utils.log",
          "json",
          "agno.models.openai",
          "copy",
          "inspect",
          "pathlib",
          "agno.run.response",
          "agno.utils.log",
          "inspect",
          "zoneinfo",
          "json",
          "agno.reasoning.deepseek",
          "agno.reasoning.deepseek",
          "agno.run.response",
          "time",
          "time",
          "time",
          "time",
          "agno.memory.summary",
          "agno.memory.memory",
          "agno.memory.v2.memory",
          "agno.memory.v2.memory",
          "agno.reasoning.groq",
          "agno.reasoning.groq",
          "agno.reasoning.openai",
          "agno.reasoning.openai",
          "json",
          "agno.reasoning.ollama",
          "agno.reasoning.ollama",
          "agno.reasoning.azure_ai_foundry",
          "agno.reasoning.azure_ai_foundry"
        ],
        "functions": [
          "__init__",
          "set_agent_id",
          "set_debug",
          "set_storage_mode",
          "set_monitoring",
          "set_default_model",
          "set_defaults",
          "reset_session",
          "reset_run_state",
          "initialize_agent",
          "has_team",
          "is_paused",
          "should_parse_structured_output",
          "add_tool",
          "set_tools",
          "_initialize_session_state",
          "_initialize_session",
          "_run",
          "_run_stream",
          "run",
          "run",
          "run",
          "continue_run",
          "continue_run",
          "continue_run",
          "_continue_run",
          "_continue_run_stream",
          "_handle_agent_run_paused",
          "_handle_agent_run_paused_stream",
          "_convert_response_to_structured_format",
          "_handle_external_execution_update",
          "_handle_user_input_update",
          "_handle_get_user_input_tool_update",
          "_run_tool",
          "_reject_tool_call",
          "_handle_tool_call_updates",
          "_handle_tool_call_updates_stream",
          "_update_run_response",
          "_add_run_to_memory",
          "_set_session_metrics",
          "_update_memory",
          "_handle_model_response_stream",
          "_handle_model_response_chunk",
          "create_run_response",
          "_make_memories_and_summaries",
          "_raise_if_async_tools",
          "get_tools",
          "determine_tools_for_model",
          "_model_should_return_structured_output",
          "_get_response_format",
          "resolve_run_context",
          "get_agent_data",
          "get_session_data",
          "get_agent_session",
          "load_agent_session",
          "read_from_storage",
          "refresh_from_storage",
          "write_to_storage",
          "add_introduction",
          "load_session",
          "new_session",
          "format_message_with_state_variables",
          "get_system_message",
          "get_user_message",
          "get_run_messages",
          "get_continue_run_messages",
          "get_messages_for_parser_model",
          "get_messages_for_parser_model_stream",
          "get_messages_for_output_model",
          "get_session_summary",
          "get_user_memories",
          "deep_copy",
          "_deep_copy_field",
          "get_transfer_function",
          "get_transfer_instructions",
          "get_relevant_docs_from_knowledge",
          "convert_documents_to_string",
          "convert_context_to_string",
          "save_run_response_to_file",
          "update_run_response_with_reasoning",
          "aggregate_metrics_from_messages",
          "calculate_metrics",
          "rename",
          "rename_session",
          "generate_session_name",
          "auto_rename_session",
          "delete_session",
          "get_messages_for_session",
          "add_image",
          "add_video",
          "add_audio",
          "get_images",
          "get_videos",
          "get_audio",
          "_handle_reasoning",
          "_handle_reasoning_stream",
          "_format_reasoning_step_content",
          "reason",
          "_process_parser_response",
          "_parse_response_with_parser_model",
          "_parse_response_with_parser_model_stream",
          "_generate_response_with_output_model",
          "_generate_response_with_output_model_stream",
          "_handle_event",
          "get_update_user_memory_function",
          "get_chat_history_function",
          "get_tool_call_history_function",
          "search_knowledge_base_function",
          "search_knowledge_base_with_agentic_filters_function",
          "_get_agentic_or_user_search_filters",
          "add_to_knowledge",
          "update_memory",
          "_log_agent_session",
          "_create_run_data",
          "_log_agent_run",
          "print_response",
          "update_reasoning_content_from_tool_call",
          "_append_to_reasoning_content",
          "_add_reasoning_step_to_extra_data",
          "_add_reasoning_metrics_to_extra_data",
          "_get_effective_filters",
          "get_previous_sessions_messages_function",
          "cli_app",
          "get_agent_config_dict",
          "_transfer_task_to_agent",
          "update_user_memory",
          "get_chat_history",
          "get_tool_call_history",
          "search_knowledge_base",
          "search_knowledge_base",
          "get_previous_session_messages"
        ],
        "classes": [
          "Agent"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\swarms\\tests\\structs\\test_agent.py",
      {
        "lines": 1335,
        "size_bytes": 42731,
        "imports": [
          "json",
          "os",
          "unittest",
          "unittest.mock",
          "pytest",
          "dotenv",
          "swarm_models",
          "swarms.structs.agent",
          "swarms.utils.loguru_logger",
          "threading",
          "time"
        ],
        "functions": [
          "mocked_llm",
          "basic_flow",
          "flow_with_condition",
          "test_stop_when_repeats",
          "test_flow_initialization",
          "test_provide_feedback",
          "test_run_without_stopping_condition",
          "test_run_with_stopping_condition",
          "test_run_with_exception",
          "test_bulk_run",
          "test_save_and_load",
          "test_env_variable_handling",
          "test_flow_with_custom_stopping_condition",
          "test_flow_call",
          "test_format_prompt",
          "test_max_loops",
          "test_stopping_token",
          "test_interactive",
          "test_bulk_run_varied_inputs",
          "test_load_non_existent_file",
          "test_save_different_memory",
          "test_check_stopping_condition",
          "test_default_max_loops",
          "test_from_llm_and_template",
          "test_mocked_openai_chat",
          "test_retry_attempts",
          "test_different_loop_intervals",
          "test_different_retry_intervals",
          "test_flow_call_with_kwargs",
          "test_flow_initialization_all_params",
          "test_stopping_token_in_response",
          "flow_instance",
          "test_flow_run",
          "test_flow_interactive",
          "test_flow_dashboard_mode",
          "test_flow_autosave",
          "test_flow_response_filtering",
          "test_flow_undo_last",
          "test_flow_dynamic_temperature",
          "test_flow_streamed_generation",
          "test_flow_step",
          "test_flow_graceful_shutdown",
          "test_flow_max_loops",
          "test_flow_autosave_path",
          "test_flow_response_length",
          "test_flow_set_response_length_threshold",
          "test_flow_add_custom_filter",
          "test_flow_remove_custom_filter",
          "test_flow_dynamic_pacing",
          "test_flow_disable_dynamic_pacing",
          "test_flow_change_prompt",
          "test_flow_add_instruction",
          "test_flow_clear_instructions",
          "test_flow_add_user_message",
          "test_flow_clear_user_messages",
          "test_flow_get_response_history",
          "test_flow_clear_response_history",
          "test_flow_get_conversation_log",
          "test_flow_clear_conversation_log",
          "test_flow_get_state",
          "test_flow_load_state",
          "test_flow_save_state",
          "test_flow_rollback",
          "test_flow_contextual_intent",
          "test_flow_contextual_intent_override",
          "test_flow_contextual_intent_reset",
          "test_flow_interruptible",
          "test_flow_non_interruptible",
          "test_flow_timeout",
          "test_flow_no_timeout",
          "test_flow_custom_delimiter",
          "test_flow_message_history",
          "test_flow_clear_message_history",
          "test_flow_save_and_load_conversation",
          "test_flow_inject_custom_system_message",
          "test_flow_inject_custom_user_message",
          "test_flow_inject_custom_response",
          "test_flow_clear_injected_messages",
          "test_flow_disable_message_history",
          "test_flow_enable_message_history",
          "test_flow_custom_logger",
          "test_flow_batch_processing",
          "test_flow_custom_metrics",
          "test_flow_reset_metrics",
          "test_flow_retrieve_context",
          "test_flow_update_context",
          "test_flow_remove_context",
          "test_flow_clear_context",
          "test_flow_input_validation",
          "test_flow_conversation_reset",
          "test_flow_conversation_persistence",
          "test_flow_custom_event_listener",
          "test_flow_multiple_event_listeners",
          "test_flow_error_handling",
          "test_flow_context_operations",
          "test_flow_long_messages",
          "test_flow_custom_response",
          "test_flow_message_validation",
          "test_flow_custom_logging",
          "test_flow_performance",
          "test_flow_complex_use_case",
          "test_flow_context_handling",
          "test_flow_concurrent_requests",
          "test_flow_custom_timeout",
          "test_flow_interactive_run",
          "test_flow_agent_history_prompt",
          "test_flow_bulk_run",
          "test_flow_from_llm_and_template",
          "test_flow_from_llm_and_template_file",
          "test_flow_save_and_load",
          "test_flow_validate_response",
          "test_flow_print_history_and_memory",
          "test_flow_run_with_timeout",
          "stopping_condition",
          "custom_response_generator",
          "custom_message_validator",
          "send_messages",
          "simulate_user_input",
          "on_message_received",
          "on_response_generated",
          "on_message_received",
          "on_response_generated",
          "on_message_received",
          "on_response_generated"
        ],
        "classes": [
          "CustomEventListener",
          "FirstEventListener",
          "SecondEventListener"
        ]
      }
    ]
  ],
  "most_classes": [
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\MetaGPT\\metagpt\\rag\\schema.py",
      {
        "lines": 275,
        "size_bytes": 10412,
        "imports": [
          "enum",
          "pathlib",
          "typing",
          "chromadb.api.types",
          "llama_index.core.embeddings",
          "llama_index.core.indices.base",
          "llama_index.core.prompts",
          "llama_index.core.schema",
          "llama_index.core.vector_stores.types",
          "pydantic",
          "metagpt.config2",
          "metagpt.configs.embedding_config",
          "metagpt.logs",
          "metagpt.rag.interface",
          "metagpt.rag.prompts.default_prompts"
        ],
        "functions": [
          "check_dimensions",
          "__init__",
          "get_obj_metadata",
          "set_markdown"
        ],
        "classes": [
          "BaseRetrieverConfig",
          "IndexRetrieverConfig",
          "FAISSRetrieverConfig",
          "BM25RetrieverConfig",
          "ChromaRetrieverConfig",
          "ElasticsearchStoreConfig",
          "ElasticsearchRetrieverConfig",
          "ElasticsearchKeywordRetrieverConfig",
          "BaseRankerConfig",
          "LLMRankerConfig",
          "ColbertRerankConfig",
          "CohereRerankConfig",
          "BGERerankConfig",
          "ObjectRankerConfig",
          "BaseIndexConfig",
          "VectorIndexConfig",
          "FAISSIndexConfig",
          "ChromaIndexConfig",
          "BM25IndexConfig",
          "ElasticsearchIndexConfig",
          "ElasticsearchKeywordIndexConfig",
          "ObjectNodeMetadata",
          "ObjectNode",
          "OmniParseType",
          "ParseResultType",
          "OmniParseOptions",
          "OminParseImage",
          "OmniParsedResult"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\TestMaster\\core\\intelligence\\pattern_recognition_engine.py",
      {
        "lines": 1085,
        "size_bytes": 42520,
        "imports": [
          "numpy",
          "logging",
          "datetime",
          "typing",
          "dataclasses",
          "collections",
          "enum",
          "pathlib",
          "json",
          "hashlib",
          "pickle",
          "abc",
          "sklearn.cluster",
          "sklearn.decomposition",
          "sklearn.preprocessing",
          "sklearn.ensemble",
          "sklearn.neural_network",
          "sklearn.metrics"
        ],
        "functions": [
          "to_dict",
          "get_recognizer_info",
          "__init__",
          "_calculate_average_confidence",
          "_get_complexity_distribution",
          "fit_predict",
          "fit_predict",
          "__init__",
          "fit",
          "predict",
          "analyze_trend",
          "_calculate_skewness",
          "_calculate_kurtosis",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info",
          "get_recognizer_info"
        ],
        "classes": [
          "PatternType",
          "PatternComplexity",
          "Pattern",
          "PatternPrediction",
          "BasePatternRecognizer",
          "AdvancedPatternRecognitionEngine",
          "SimplifiedClusterer",
          "SimplifiedAnomalyDetector",
          "SimplifiedClassifier",
          "SimplifiedTrendAnalyzer",
          "StatisticalFeatureExtractor",
          "TemporalFeatureExtractor",
          "SpectralFeatureExtractor",
          "GeometricFeatureExtractor",
          "InformationTheoreticFeatureExtractor",
          "TemporalPatternRecognizer",
          "BehavioralPatternRecognizer",
          "PerformancePatternRecognizer",
          "AnomalyPatternRecognizer",
          "CorrelationPatternRecognizer",
          "CyclicalPatternRecognizer",
          "TrendPatternRecognizer",
          "ClusterPatternRecognizer",
          "SequencePatternRecognizer",
          "TrendPredictor",
          "CyclicalPredictor",
          "PerformancePredictor"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\AgentVerse\\agentverse\\output_parser\\output_parser.py",
      {
        "lines": 650,
        "size_bytes": 26373,
        "imports": [
          "__future__",
          "re",
          "abc",
          "json",
          "typing",
          "agentverse.utils",
          "agentverse.llms",
          "agentverse.logging",
          "pydantic",
          "agentverse.agents.base",
          "agentverse.environments.base"
        ],
        "functions": [
          "__init__",
          "__str__",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse",
          "parse"
        ],
        "classes": [
          "OutputParserError",
          "OutputParser",
          "AliceHomeParser",
          "CommonParser1",
          "MathProblem2PlayersToolsParser",
          "NlpClassroom3PlayersParser",
          "NlpClassroom9PlayersParser",
          "NlpClassroom9PlayersGroupParser",
          "PokemonParser",
          "PrisonerDilemmaParser",
          "CommonParser2",
          "RoleAssignerParser",
          "EvaluatorParser",
          "HumanevalSolverParser",
          "HumanevalSolverParser",
          "HumanevalEvaluatorParser",
          "HumanevalyCriticParser",
          "MGSMEvaluatorParser",
          "MGSMCriticAgreeParser",
          "ResponseGenEvaluatorParser",
          "CommonParser3",
          "ResponseGenCriticParser",
          "RoleAssignerParser",
          "SolverParser",
          "ToolUsingSolverParser",
          "HumanevalEvaluatorParser"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\MetaGPT\\metagpt\\schema.py",
      {
        "lines": 977,
        "size_bytes": 33086,
        "imports": [
          "__future__",
          "asyncio",
          "json",
          "os.path",
          "time",
          "uuid",
          "abc",
          "asyncio",
          "enum",
          "json",
          "pathlib",
          "typing",
          "pydantic",
          "metagpt.base.base_serialization",
          "metagpt.const",
          "metagpt.logs",
          "metagpt.repo_parser",
          "metagpt.tools.tool_registry",
          "metagpt.utils.common",
          "metagpt.utils.exceptions",
          "metagpt.utils.report",
          "metagpt.utils.serialize",
          "metagpt.actions.action_output"
        ],
        "functions": [
          "serialize",
          "deserialize",
          "get_serialization_path",
          "get_meta",
          "root_relative_path",
          "__str__",
          "__repr__",
          "from_iterable",
          "to_action_output",
          "check_id",
          "check_instruct_content",
          "check_cause_by",
          "check_sent_from",
          "check_send_to",
          "ser_send_to",
          "ser_instruct_content",
          "__init__",
          "__setattr__",
          "__str__",
          "__repr__",
          "rag_key",
          "to_dict",
          "dump",
          "load",
          "add_metadata",
          "create_instruct_value",
          "is_user_message",
          "is_ai_message",
          "__init__",
          "__init__",
          "__init__",
          "with_agent",
          "agent",
          "reset",
          "update_task_result",
          "_topological_sort",
          "add_tasks",
          "reset_task",
          "_replace_task",
          "_append_task",
          "has_task_id",
          "_update_current_task",
          "current_task",
          "finish_current_task",
          "finish_all_tasks",
          "is_plan_finished",
          "get_finished_tasks",
          "append_task",
          "replace_task",
          "pop",
          "pop_all",
          "push",
          "empty",
          "load",
          "loads",
          "loads",
          "__hash__",
          "name_to_visibility",
          "get_mermaid",
          "get_mermaid",
          "get_mermaid",
          "load_dot_class_info",
          "__new__",
          "rag_key",
          "visit"
        ],
        "classes": [
          "SerializationMixin",
          "SimpleMessage",
          "Document",
          "Documents",
          "Resource",
          "Message",
          "UserMessage",
          "SystemMessage",
          "AIMessage",
          "Task",
          "TaskResult",
          "Plan",
          "MessageQueue",
          "BaseContext",
          "CodingContext",
          "TestingContext",
          "RunCodeContext",
          "RunCodeResult",
          "CodeSummarizeContext",
          "CodePlanAndChangeContext",
          "UMLClassMeta",
          "UMLClassAttribute",
          "UMLClassMethod",
          "UMLClassView",
          "BaseEnum",
          "LongTermMemoryItem"
        ]
      }
    ],
    [
      "C:\\Users\\kbass\\OneDrive\\Documents\\testmaster\\TestMaster\\archive\\oversized_modules_20250821_042018\\api\\ml_api.py",
      {
        "lines": 1151,
        "size_bytes": 45084,
        "imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "typing",
          "dataclasses",
          "flask",
          "flask_restx",
          "marshmallow",
          "ml.ml_orchestrator",
          "ml.integration_analysis",
          "ml.enterprise.ml_monitoring_dashboard",
          "ml.enterprise.ml_auto_scaling",
          "ml.enterprise.ml_infrastructure_orchestrator",
          "ml.enterprise.ml_infrastructure_orchestrator"
        ],
        "functions": [
          "not_found",
          "internal_error",
          "health_check",
          "api_documentation",
          "get",
          "get",
          "post",
          "get",
          "get",
          "post",
          "get",
          "get",
          "post",
          "get",
          "get",
          "get",
          "get",
          "get",
          "put",
          "get_monitoring_dashboard",
          "get_auto_scaling_system",
          "get_infrastructure_orchestrator",
          "get",
          "get",
          "get",
          "get",
          "get",
          "post",
          "get",
          "get",
          "get"
        ],
        "classes": [
          "PredictionRequestSchema",
          "OptimizationRequestSchema",
          "OrchestrationStatus",
          "OrchestrationInsights",
          "OrchestrationOptimize",
          "ModulesList",
          "ModuleDetails",
          "ModulePredict",
          "ModuleHealth",
          "PerformanceAnalytics",
          "BatchPredictions",
          "ModelComparison",
          "SystemMonitoring",
          "AlertsMonitoring",
          "ModuleMetrics",
          "SystemConfiguration",
          "MonitoringDashboard",
          "MonitoringConsole",
          "AutoScalingSummary",
          "ModuleScalingMetrics",
          "InfrastructureStatus",
          "ServiceDeployment",
          "InfrastructureNodes",
          "RealTimeMetrics",
          "EnterpriseStatus"
        ]
      }
    ]
  ]
}