import { CommonModule } from '@angular/common';
import { Component, EventEmitter, forwardRef, Input, isDevMode, NgModule, Output, } from '@angular/core';
import { Subscription } from 'rxjs';
import { debounceTime, tap } from 'rxjs/operators';
import { simpleCheckForValidColor, toState } from './helpers/color';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
export var ColorMode;
(function (ColorMode) {
    ColorMode["HEX"] = "hex";
    ColorMode["HSL"] = "hsl";
    ColorMode["HSV"] = "hsv";
    ColorMode["RGB"] = "rgb";
})(ColorMode || (ColorMode = {}));
export class ColorWrap {
    constructor() {
        /**
         * Descriptors the return color format if the component is used with two-way binding
         */
        this.mode = ColorMode.HEX;
        this.color = {
            h: 250,
            s: 0.5,
            l: 0.2,
            a: 1,
        };
        this.colorChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onChangeComplete = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this._onChangeCompleteSubscription = new Subscription();
        this._onSwatchHoverSubscription = new Subscription();
    }
    ngOnInit() {
        this.changes = this.onChange
            .pipe(debounceTime(100), tap(event => {
            this.onChangeComplete.emit(event);
            switch (this.mode) {
                case ColorMode.HEX:
                    this.colorChange.emit(event.color.hex);
                    break;
                case ColorMode.HSL:
                    this.colorChange.emit(event.color.hsl);
                    break;
                case ColorMode.HSV:
                    this.colorChange.emit(event.color.hsv);
                    break;
                case ColorMode.RGB:
                    this.colorChange.emit(event.color.rgb);
                    break;
                default:
                    const msg = `The mode '${this.mode}' is not supported`;
                    if (isDevMode()) {
                        throw new Error(msg);
                    }
                    else {
                        console.warn(msg);
                    }
                    break;
            }
        }))
            .subscribe();
        this.setState(toState(this.color, 0));
        this.currentColor = this.hex;
    }
    ngOnChanges() {
        this.setState(toState(this.color, this.oldHue));
    }
    ngOnDestroy() {
        this.changes?.unsubscribe();
        this._onChangeCompleteSubscription.unsubscribe();
        this._onSwatchHoverSubscription.unsubscribe();
    }
    setState(data) {
        this.oldHue = data.oldHue;
        this.hsl = data.hsl;
        this.hsv = data.hsv;
        this.rgb = data.rgb;
        this.hex = data.hex;
        this.source = data.source;
        this.afterValidChange();
    }
    handleChange(data, $event) {
        const isValidColor = simpleCheckForValidColor(data);
        if (isValidColor) {
            const color = toState(data, data.h || this.oldHue, this.disableAlpha);
            this.setState(color);
            this.onChange.emit({ color, $event });
            this.afterValidChange();
        }
    }
    /** hook for components after a complete change */
    afterValidChange() { }
    handleSwatchHover(data, $event) {
        const isValidColor = simpleCheckForValidColor(data);
        if (isValidColor) {
            const color = toState(data, data.h || this.oldHue);
            this.setState(color);
            this.onSwatchHover.emit({ color, $event });
        }
    }
    registerOnChange(fn) {
        this._onChangeCompleteSubscription.add(this.onChangeComplete.pipe(tap(event => fn(event.color.hex))).subscribe());
    }
    registerOnTouched(fn) {
        this._onSwatchHoverSubscription.add(this.onSwatchHover.pipe(tap(() => fn())).subscribe());
    }
    setDisabledState(isDisabled) { }
    writeValue(hex) {
        this.color = hex;
    }
}
ColorWrap.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: ColorWrap, deps: [], target: i0.ɵɵFactoryTarget.Component });
ColorWrap.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: ColorWrap, selector: "color-wrap", inputs: { className: "className", mode: "mode", color: "color" }, outputs: { colorChange: "colorChange", onChange: "onChange", onChangeComplete: "onChangeComplete", onSwatchHover: "onSwatchHover" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => ColorWrap),
            multi: true,
        }
    ], usesOnChanges: true, ngImport: i0, template: ``, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: ColorWrap, decorators: [{
            type: Component,
            args: [{
                    // create seletor base for test override property
                    selector: 'color-wrap',
                    template: ``,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => ColorWrap),
                            multi: true,
                        }
                    ]
                }]
        }], propDecorators: { className: [{
                type: Input
            }], mode: [{
                type: Input
            }], color: [{
                type: Input
            }], colorChange: [{
                type: Output
            }], onChange: [{
                type: Output
            }], onChangeComplete: [{
                type: Output
            }], onSwatchHover: [{
                type: Output
            }] } });
export class ColorWrapModule {
}
ColorWrapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: ColorWrapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ColorWrapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: ColorWrapModule, declarations: [ColorWrap], imports: [CommonModule], exports: [ColorWrap] });
ColorWrapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: ColorWrapModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: ColorWrapModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ColorWrap],
                    exports: [ColorWrap],
                    imports: [CommonModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,