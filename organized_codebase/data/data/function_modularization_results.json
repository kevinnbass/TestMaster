{
  "analysis_metadata": {
    "analyzer": "Agent B - Function Modularization Analysis",
    "phase": "Hours 51-55",
    "timestamp": "2025-08-21T20:48:17.617939",
    "functions_analyzed": 3448,
    "recommendations_generated": 246
  },
  "function_metrics": [
    {
      "name": "get_intelligence_hub",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_intelligence_capabilities",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "initialize_intelligence_hub",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 28,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_logging",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_capabilities",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_compatibility_layer",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_analytics_hub",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_testing_hub",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_integration_hub",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analytics",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "testing",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "integration",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_legacy_component",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "migrate_to_unified_interface",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 40,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "rollback_migration",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 23,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_comprehensive_intelligence",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 30,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_hub_status",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_migration_backup",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_verify_functionality_preservation",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_enhanced_features",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": ".\\core/intelligence/__init__.py",
      "line_count": 25,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_logging",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_coverage",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_coverage_report",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_test_suite",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "predict_test_failures",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_integration_tests",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_integration_coverage",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "execute_test",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "execute_test_suite",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "execute_unified_test_analysis",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 59,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_testing_intelligence",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_unified_confidence",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_error_analysis",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "initialize",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_capabilities",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_status",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": ".\\core/intelligence/testing/__init__.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 32,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "LOW"
    },
    {
      "name": "initialize",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_initialize_original_components",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 21,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_dashboard_analytics",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_enhanced_components",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_metrics",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 85,
      "complexity_score": 13,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_with_cross_system_engine",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 27,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_with_predictive_engine",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 25,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_basic_analysis",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 26,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_statistical_analysis",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_trend_analysis",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_correlation_analysis",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_predictions",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_model_performance",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_intelligent_decisions",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_analysis_results",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_recommendations",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 30,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_memory_usage",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_cpu_usage",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cross_system_analytics",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_predictive_analytics",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dashboard_analytics",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_analytics_intelligence",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_capabilities",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_status",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 21,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_correlations",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_insights",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "process_real_time",
      "file_path": ".\\core/intelligence/analytics/__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 32,
      "complexity_score": 5,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__hash__",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__lt__",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_task",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_ready_tasks",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "has_cycles",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 36,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_config",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_handlers",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_test_generation_workflow",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 86,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_execute_task",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_generate_test",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_self_heal",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_verify_quality",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_fix_imports",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_deduplicate",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_analyze_coverage",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_generate_report",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 31,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_handle_monitor_changes",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_batch_convert",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_incremental_update",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_save_progress",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "load_progress",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_status",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "visit",
      "file_path": ".\\testmaster_orchestrator.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "api",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generation",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "security",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitoring",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "caching",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "execution",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reporting",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "quality",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimization",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "testing",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "ml",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "infrastructure",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "integration",
      "file_path": ".\\config/__init__.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_layer2_example",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 31,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 57,
      "complexity_score": 3,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "start",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_integration_callbacks",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 82,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_perform_initial_scan",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_schedule_related_tests",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_claude_directive",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_is_source_file",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_send_startup_notification",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_send_shutdown_notification",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_system_status",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_test_coverage_update",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "force_idle_scan",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "schedule_test_batch",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dashboard_url",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_file_changed",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_module_idle",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_test_completed",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_directive_received",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_alert_created",
      "file_path": "TestMaster\\layer2_integration.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_orchestration_config",
      "file_path": "TestMaster\\main.py",
      "line_count": 52,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "cmd_orchestrate",
      "file_path": "TestMaster\\main.py",
      "line_count": 28,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cmd_security_scan",
      "file_path": "TestMaster\\main.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "cmd_compliance_check",
      "file_path": "TestMaster\\main.py",
      "line_count": 37,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "cmd_intelligence_test",
      "file_path": "TestMaster\\main.py",
      "line_count": 28,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cmd_analyze",
      "file_path": "TestMaster\\main.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\main.py",
      "line_count": 69,
      "complexity_score": 5,
      "parameter_count": 0,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_benchmarking_suite",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_thresholds",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_benchmarks",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 45,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_run_single_benchmark",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 26,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_execute_benchmark",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 18,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 8,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_benchmark_response_time",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_benchmark_throughput",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_benchmark_memory_usage",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_benchmark_cpu_utilization",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_benchmark_accuracy",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_benchmark_scalability",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_benchmark_reliability",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_metric_unit",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_baseline",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_overall_benchmark_score",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_metric_weight",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_benchmark_status",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "set_baseline",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_benchmark_history",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_performance_trends",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "line_count": 24,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_quality_inspector",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "inspect_agent",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 56,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_check_syntax_quality",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_semantic_quality",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_performance_quality",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_security_quality",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_reliability_quality",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_overall_score",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_quality_status",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 16,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_inspection_history",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_quality_trends",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_quality_monitor",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_thresholds",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 36,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_monitoring",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_monitoring_loop",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_all_agents",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_agent_quality",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_threshold_breach",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_trend_anomaly",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_alert",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_trend_alert",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_raise_alert",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_metric",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_threshold",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_alert_callback",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_alerts",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "acknowledge_alert",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_status",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_agent_status",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_old_alerts",
      "file_path": "TestMaster\\agent_qa\\quality_monitor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_scoring_system",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_grade",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 24,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 11,
      "nested_depth": 10,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_weights",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "calculate_score",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 51,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_category_score",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_filter_metrics_by_category",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_metric_weight",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_category_details",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_custom_weights",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_score_status",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_percentile",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_scoring_history",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_score_trends",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_benchmark",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "compare_to_benchmark",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_agent_qa_enabled",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure_agent_qa",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 37,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "inspect_agent_quality",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_agent_output",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "score_agent_quality",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "benchmark_agent_performance",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_quality_status",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_agent_qa",
      "file_path": "TestMaster\\agent_qa\\__init__.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "apply_security_middleware",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_rest_apis",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 40,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_rest_endpoints",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 26,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_parse_flask_route",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 28,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_parse_fastapi_route",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_django_route",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_graphql_schemas",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 37,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_graphql_schemas",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 16,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_graphql_resolvers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_n_plus_one_risk",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 13,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_function_signatures",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 40,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_single_signature",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 32,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_interface_segregation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 33,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_interface",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 16,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_interface",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 24,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_interface_cohesion",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 27,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_track_api_evolution",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_deprecated_apis",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 24,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_versioning_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_versioning_strategy",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 10,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_authentication_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 16,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_rate_limiting",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_endpoint_consistency",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 38,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_check_openapi_compliance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 27,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_websocket_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 32,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_sdk_generation_readiness",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 42,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_function_parameters",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_function_parameters_with_types",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_graphql_fields",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_resolver_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_graphql_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_api_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "line_count": 25,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_file_content",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_ast",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_should_analyze_file",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 6,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_python_files",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_distribution",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_function_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_identifiers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_similarity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_exact_clones",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 48,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_near_clones",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 75,
      "complexity_score": 14,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_structural_clones",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 36,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_structural_signature",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 19,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_semantic_clones",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 38,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_behavior_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 28,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_validation_check",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 12,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_group_clone_families",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_clone_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 34,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_function_name",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_cyclomatic_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 51,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_detailed_cyclomatic_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 56,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 11,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_categorize_complexities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_cognitive_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 40,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_cognitive_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 60,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_structural_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 27,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_module_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 26,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_categorize_module_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_class_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 37,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_categorize_class_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_inheritance_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_computational_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 63,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_nested_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_recursive_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_recursion_type",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_sorting_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_search_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_interface_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 56,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_categorize_interface_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_complexity_distribution",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_complexity_hotspots",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_complexity_trends",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_node",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 42,
      "complexity_score": 13,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 6,
      "docstring_present": false,
      "modularization_priority": "HIGH"
    },
    {
      "name": "count_loop_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_gil_bottlenecks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 37,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_cpu_bound_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 46,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_thread_safety",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 37,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_shared_state",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 36,
      "complexity_score": 14,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_unprotected_mutations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 28,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_race_conditions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 38,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_check_then_act",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 31,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_read_modify_write",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_deadlock_potential",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 32,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_nested_locks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 20,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_async_await_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 43,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_coroutines",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_blocking_in_async",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 41,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_lock_contention",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 32,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_concurrent_data_structures",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 35,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_identify_parallelization_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 35,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_find_parallel_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_concurrency_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 37,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_count_math_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 12,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_comprehension_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_recursive_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_string_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_gil_contentious_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 22,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_multiprocessing_candidates",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_gil_bypass_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_gil_impact",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_synchronization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_protected_by_lock",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_lock_acquisition",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 11,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_thread_safe_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_unsafe_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_synchronization_coverage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_performs_state_change",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_existence_check",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_creates_resource",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_test_and_set",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_double_checked_locking",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_race_condition_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_lock_ordering_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_circular_lock_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_deadlock_risk",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_async_context_managers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_concurrent_tasks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_async_antipatterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 18,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_async_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_async_error_handling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_async_best_practices",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_lock_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_lock_duration",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_lock_granularity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_suggest_lock_free_alternatives",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_thread_safe_structures",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_unsafe_structures",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_queue_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_atomic_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_structure_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_loop_independence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_map_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_estimate_speedup",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_map_reduce_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_find_pipeline_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_vectorization_candidates",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_parallelization_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_parent",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_coupling_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "line_count": 74,
      "complexity_score": 22,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 11,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_cohesion_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "line_count": 36,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_lcom",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "line_count": 39,
      "complexity_score": 18,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_crypto_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 182,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_crypto_libraries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_assess_algorithms",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 32,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_crypto_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_key_management",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_ssl_tls",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 35,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_random_generation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 34,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_certificates",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 33,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_crypto_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 37,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_algorithm_from_line",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_algorithm_strength",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_crypto_issue_severity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_crypto_issue_description",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_crypto_issue_recommendation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_issue_confidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 9,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_library_security",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_summarize_algorithm_strength",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_key_issue_severity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_key_issue_description",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_key_security_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_ssl_config",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_summarize_ssl_security",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_random_security",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 8,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_random_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_randomness_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_certificate_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_crypto_grade",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 14,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_improvement_priorities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "line_count": 22,
      "complexity_score": 7,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 29,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_n_plus_one_queries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 31,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_queries_in_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_database_query",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_sqlalchemy_n_plus_one",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 20,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_django_n_plus_one",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 21,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_query_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 44,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_sql_queries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_sql_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_index_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 44,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_queries_without_where",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_filter_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 15,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_transaction_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 43,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_transaction_blocks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 25,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_connection_pooling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 35,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_pool_configurations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 28,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_connection_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_orm_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 37,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_orm_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_raw_sql",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 36,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_sql_injection_risks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 33,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_optimization_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 36,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_identify_caching_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_batch_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_database_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 35,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_assess_query_severity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_query_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_n_plus_one_fix",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_relationship_access",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_eager_loading",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_django_queryset",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_foreign_key_access",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_django_optimization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_query_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 13,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_orm_query_chains",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 18,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_join_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_subqueries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_needs_index",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_index_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_nested_transactions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 15,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_commit_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_rollback_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_count_statements_until_commit",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_pool_exhaustion_risks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_connection_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_pool_config",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_connection_cleanup",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_query_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_bulk_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 10,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_loading_strategies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_orm_best_practices",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_query_parameterization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 10,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_sql_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_n_plus_one_hotspots",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_db_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_retry_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 39,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_retry_decorators",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 24,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_manual_retry_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_retry_loop",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 15,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_circuit_breakers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_circuit_breakers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_exception_handling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 56,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 10,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_error_propagation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_error_bubbling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 21,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_error_transformation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 17,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_error_suppression",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 24,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_logging_completeness",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 39,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_error_logging",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 29,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_validation_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 39,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_input_validation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 27,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_validation_check",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 14,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_graceful_degradation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_fallback_values",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 30,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_recovery_strategies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 33,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_recovery_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 26,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_error_handling_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 37,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_retry_config",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 15,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_has_try_except",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_break",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_sleep_call",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 11,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_retry_risk",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_backoff_strategies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 13,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_retry_conditions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_max_retry_configs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 16,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_check_retry_best_practices",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_circuit_states",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 9,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_threshold_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 7,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_timeout_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_circuit_states",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_threshold_configs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_fallback_mechanisms",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_exception_chains",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_exception_coverage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_exception_name",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_log_levels",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_unlogged_errors",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 20,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_uses_structured_logging",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 3,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_logging_coverage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_type_checking",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_boundary_checking",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_sanitization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 22,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_validation_coverage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_validation_error_handling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_default_behaviors",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 22,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_feature_flags",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_compensation_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_rollback_mechanisms",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_recovery_effectiveness",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_git_availability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_without_git",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 33,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_file_ages",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 45,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_categorize_age",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_age_distribution",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_growth_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 60,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_change_hotspots",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 29,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_categorize_hotness",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_refactoring_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 38,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_classify_refactoring_type",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 7,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_developer_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 56,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_classify_development_model",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_temporal_coupling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 45,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_categorize_coupling_strength",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_stability_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 39,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_grade_stability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_evolution_trends",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 46,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_maturity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 12,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_classify_activity_level",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_size_distribution",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_call_graphs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 57,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_function_name",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_dependency_graphs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 39,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_cycles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_control_flow",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 34,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_function_control_flow",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 28,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_nesting_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_graph_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_networkx_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_basic_graph_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_basic_dependency_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_most_connected_nodes",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "dfs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "calculate_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_inheritance_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "line_count": 67,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_resolve_class_name",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_dit",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_polymorphism_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "line_count": 74,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_abstract_method",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "line_count": 19,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_linguistic_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_naming_conventions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 110,
      "complexity_score": 20,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_get_expected_convention",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_abbreviation_ratio",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_most_common_violation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_identifier_length_stats",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_vocabulary_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 58,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_words_from_content",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 28,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_vocabulary_diversity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_comments",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 61,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_comment_quality_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 39,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_assess_documentation_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 81,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_docstring_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 29,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_readability_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 40,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_max_nesting_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_line_length_distribution",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_readability_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_abbreviations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 49,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_domain_terms",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 41,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_nl_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 36,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_text_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 28,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_comprehensive",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 79,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "analyze_category",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 41,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_available_categories",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_comprehensive_summary",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 67,
      "complexity_score": 16,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_comprehensive_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 86,
      "complexity_score": 18,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_perform_cross_analysis",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 52,
      "complexity_score": 17,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_key_findings",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 31,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_critical_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 32,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_count_python_files",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "LOW"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_memory_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 31,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_large_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 44,
      "complexity_score": 12,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_memory_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 39,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_resource_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 53,
      "complexity_score": 19,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_reference_cycles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 36,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_self_references",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 27,
      "complexity_score": 13,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_circular_relationships",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 23,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_event_listener_cycles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 27,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_cache_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 47,
      "complexity_score": 20,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_global_accumulation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 32,
      "complexity_score": 13,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_memory_growth_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_unbounded_growth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 31,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_quadratic_growth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 21,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_recursive_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_object_lifetime",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_short_lived_large_objects",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 35,
      "complexity_score": 13,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_unnecessary_temporaries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_gc_pressure",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 36,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_high_allocation_rate",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_reference_counting_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 23,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_memory_optimizations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 33,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_find_generator_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 28,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_find_string_optimizations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_find_collection_optimizations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 20,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_memory_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_array_size",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_large_comprehension",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 11,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_has_string_concatenation_in_loop",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_in_with_statement",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_matching_close",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_thread_join",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_init_method",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_cache_eviction",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_module_level",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_infinite_loop",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_large_range",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 9,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_recursive_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_large_allocation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_parent_node",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_leak_risk_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_gc_pressure_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_memory_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_algorithmic_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 77,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_big_o_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 63,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 37,
      "complexity_score": 18,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_recursive",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_recursion",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 20,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_memoization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 16,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_binary_search_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 18,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_divide_and_conquer_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 16,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_factorial_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 12,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_sorting_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_classify_sorting_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 23,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 9,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_search_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_search_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_uses_dynamic_programming",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 14,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_space_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_graph_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_graph_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 16,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 7,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_memory_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 45,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_memory_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 39,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_memory_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 35,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_in_with_statement",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_large_objects",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 26,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_circular_references",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 23,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 10,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_pooling_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_memory_optimization_suggestions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_database_performance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 38,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_n_plus_one_queries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_missing_indexes",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 24,
      "complexity_score": 12,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_inefficient_queries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 40,
      "complexity_score": 14,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_transaction_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_concurrency_performance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 36,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_gil_bottlenecks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 25,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_async_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 24,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_thread_safety_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_parallelization_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 24,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_cpu_intensive_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 44,
      "complexity_score": 15,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_performance_anti_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 36,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_optimization_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 33,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_pure_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 17,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_vectorization_opportunity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_performance_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 42,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "analyze_node",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "line_count": 27,
      "complexity_score": 17,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 7,
      "docstring_present": false,
      "modularization_priority": "HIGH"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_quality_factors",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_readability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 67,
      "complexity_score": 18,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_max_nesting_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_testability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 50,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_side_effects",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 16,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_uses_global_state",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_modularity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 40,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_reusability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 54,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_utility_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_generic_name",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_reliability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 47,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_validation_check",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 14,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_is_potentially_unsafe_call",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_performance_indicators",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_security_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_documentation_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_quality_grade",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_quality_strengths",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_quality_weaknesses",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_technical_debt",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_code_smells",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 53,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_complexity_debt",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_maintainability_debt",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_test_debt",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_documentation_debt",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_categorize_debt_level",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_priority_debt_areas",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_maintainability_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_code_health",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_quality_trends",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_improvement_suggestions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_file_io_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 58,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_file_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 62,
      "complexity_score": 24,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_inefficient_file_ops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 31,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_large_file_handling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_file_locking",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_temp_file_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_check_path_safety",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 35,
      "complexity_score": 18,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_network_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 54,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_http_calls",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 42,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_check_timeout_configuration",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 30,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_retry_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 44,
      "complexity_score": 18,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_check_connection_pooling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_rate_limiting",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_circuit_breakers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_batch_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_database_connections",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 37,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_db_connections",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 39,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_db_connection_pooling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_transaction_management",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 32,
      "complexity_score": 15,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_check_cursor_management",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 24,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_memory_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_memory_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 29,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_large_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 30,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_check_object_reuse",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_cache_effectiveness",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 36,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_cache_implementations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 45,
      "complexity_score": 14,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_cache_strategies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_cache_invalidation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_cache_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 26,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_stream_processing",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 33,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_resource_cleanup",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 43,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_external_services",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 31,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_external_services",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 39,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_resource_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "line_count": 38,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_security_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 170,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_vulnerability_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 56,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_get_severity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_vulnerability_description",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_vulnerability_recommendation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_input_validation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 77,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_authentication",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 74,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_authorization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 74,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_cryptography_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 90,
      "complexity_score": 16,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_injection_vulnerabilities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 78,
      "complexity_score": 14,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_security_hotspots",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_security_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 39,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_get_security_grade",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 7,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_halstead_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "line_count": 52,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_mccabe_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "line_count": 27,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_sloc_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "line_count": 50,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_find_docstring_lines",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "line_count": 20,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_maintainability_index",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_code_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 63,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_max_nesting_depth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_distributions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 53,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_classify_distribution_shape",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 8,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_correlations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 46,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_pearson_correlation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_correlation_strength",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_outliers",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 39,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_classify_outlier_severity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_percentile",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_clustering",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_simple_kmeans",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 41,
      "complexity_score": 9,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_evaluate_cluster_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_within_cluster_variance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_between_cluster_variance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_trends",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 38,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_variance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 38,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_classify_variability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 14,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_entropy_measures",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 37,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_bins",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_information_theory",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 32,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_mutual_information",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 20,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_dependency",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_information_redundancy",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_information_density",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_information_efficiency",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_statistical_tests",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 45,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_approximate_normality_test",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_design_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 169,
      "complexity_score": 22,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_singleton_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 20,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_get_singleton_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 10,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_factory_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_factory_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_observer_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_observer_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_decorator_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 20,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_decorator_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 13,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_strategy_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_strategy_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_command_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_command_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_builder_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_builder_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_adapter_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 20,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_adapter_evidence",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_architectural_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_mvc_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 32,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_layered_architecture",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 29,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_repository_pattern",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 32,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_dependency_injection",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 30,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_architecture_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_architecture_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_module_organization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 44,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_code_structure",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "line_count": 39,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_pip_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 56,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_conda_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 42,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 10,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_poetry_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 40,
      "complexity_score": 14,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_direct_imports",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 22,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_scan_vulnerabilities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 36,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_license_compliance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 38,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_outdated_packages",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 30,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_transitive_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_package_reputation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_typosquatting",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_dependency_confusion",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 34,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_supply_chain_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 34,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_load_vulnerability_database",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_typosquatting_list",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_trusted_packages",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_stdlib_modules",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_setup_py",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 29,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_parse_pipfile",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_dependency_tree",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_package_license",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_latest_version",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_update_priority",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_reputation_score",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_reputation_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_string_similarity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_risk_level",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_test_coverage_potential",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 64,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_test_files",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_test_file",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_tested_functions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 28,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_branches",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_count_conditions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_exception_paths",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 25,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_edge_cases",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 24,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_boundary_conditions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 30,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_integration_points",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 30,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_test_priority",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 20,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_test_pyramid",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 61,
      "complexity_score": 16,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_classify_test_type",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 27,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_estimate_test_execution_time",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_mock_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 54,
      "complexity_score": 14,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_count_mocks_in_test",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 12,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_classify_test_doubles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_mock_smells",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_test_smells",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 75,
      "complexity_score": 14,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_count_assertions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 18,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_has_file_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 11,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_conditional_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_test_signature",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_ignored_test",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 10,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_mutation_testing_readiness",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 48,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_count_mutation_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_property_testing_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 35,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_pure_function",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_function_properties",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 17,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_suggest_hypothesis_strategies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 23,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_identify_invariants",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_test_data_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 59,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_fixtures",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 23,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_fixture_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_predict_flaky_tests",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 66,
      "complexity_score": 16,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_has_time_dependency",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 11,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_network_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_uses_random_data",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 11,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_threading",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 10,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_external_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 13,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_order_dependency",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_float_comparisons",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 13,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_calculate_testability_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "line_count": 44,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\analysis\\coverage\\interface.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_coverage",
      "file_path": "TestMaster\\analysis\\coverage\\interface.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_codebase",
      "file_path": "TestMaster\\analysis\\coverage\\interface.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "map_dependencies",
      "file_path": "TestMaster\\analysis\\coverage\\interface.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_health",
      "file_path": "TestMaster\\analysis\\coverage\\interface.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_comprehensive_report",
      "file_path": "TestMaster\\analysis\\coverage\\interface.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_async_executor",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "async_execute",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 31,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 46,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_start_event_loop",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 21,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_task_failure",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "submit_async_task",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 38,
      "complexity_score": 4,
      "parameter_count": 6,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "submit_sync_task",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 30,
      "complexity_score": 3,
      "parameter_count": 6,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_task_status",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cancel_task",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_executor_statistics",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_tasks",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_completed_tasks",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 19,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "loop_worker",
      "file_path": "TestMaster\\async_processing\\async_executor.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_async_monitor",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_async_execution",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 28,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 45,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 25,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_monitoring",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_task_start",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 50,
      "complexity_score": 6,
      "parameter_count": 6,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "track_task_running",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_task_completion",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 73,
      "complexity_score": 13,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "track_task_cancellation",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_task_timeout",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_task_info",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_tasks",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_component_stats",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_performance_summary",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_update_component_stats",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_performance_alerts",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 37,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_alert",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 45,
      "complexity_score": 5,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_cleanup_old_tasks",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_send_monitoring_telemetry",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "tracking_context",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_worker",
      "file_path": "TestMaster\\async_processing\\async_monitor.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_concurrent_scheduler",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "schedule_task",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 9,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 40,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_scheduler",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_should_run_task",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_next_run",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 28,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 9,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "schedule_task",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_task_info",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_scheduled_tasks",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "pause_task",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "resume_task",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cancel_task",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_scheduler_statistics",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 23,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_completed_tasks",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 12,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_send_scheduler_telemetry",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "loop_worker",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_thread_pool_manager",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "submit_task",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 34,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_initialize_default_pools",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 34,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_pool",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 43,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "configure_pool",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "submit_task",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 51,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_execute_with_monitoring",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 84,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_pool_metrics",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_tasks",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_pool_status",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 29,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_monitoring",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_auto_scale_pools",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 31,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_update_pool_metrics",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_completed_tasks",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_pool",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_all_pools",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_worker",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitored_func",
      "file_path": "TestMaster\\async_processing\\thread_pool_manager.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_async_enabled",
      "file_path": "TestMaster\\async_processing\\__init__.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure_async_processing",
      "file_path": "TestMaster\\async_processing\\__init__.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_async_processing",
      "file_path": "TestMaster\\async_processing\\__init__.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_test_execution",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_test_with_monitoring",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 43,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_record_success",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_failure",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_test_failure",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_timeout_failure",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_execution_failure",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_store_failure",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_categorize_exception",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_categorize_error_output",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 15,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_error_message",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_pattern",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_capture_environment",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_failure_report",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 38,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_flaky_test",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_fix_suggestions",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 32,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_failure_statistics",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 31,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "clear_history",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "decorator",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "wrapper",
      "file_path": "TestMaster\\breaking\\failure_detector.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_test_failure_info",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_module_attention_info",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_coverage_gap_info",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 38,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_monitoring",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_status_update",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 6,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_breaking_test_alert",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_idle_module_alert",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_coverage_gap_report",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_system_alert",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_send_message",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 41,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_message_to_dict",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_monitor_directives",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_directive_file",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_process_acknowledgment_file",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 25,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_cleanup_old_messages",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 14,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_message_id",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_sent_messages",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_received_directives",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_pending_acknowledgments",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "mark_message_acknowledged",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_attempt_dynamic_handoff",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 30,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_message_for_routing",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 43,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_message_context",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_communication_statistics",
      "file_path": "TestMaster\\communication\\claude_messenger.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dynamic_handoff_system",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 29,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "determine_handoff",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "execute_handoff",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 45,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_handoff_context",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_handoff_package",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_agent_instructions",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 33,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_define_expected_deliverables",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 24,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_handoff",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_attempt_fallback",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 29,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_learning_adjustments",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_handoff_decision",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_handoff_outcome",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_handoff_history",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_handoff_statistics",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_capabilities",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 40,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "route_message",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 34,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_agent_score",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_reasoning",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_agent_capability",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_handoff",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_agent_performance",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_overall_stats",
      "file_path": "TestMaster\\communication\\dynamic_handoff.py",
      "line_count": 21,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_quick_message",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 47,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_message",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 62,
      "complexity_score": 6,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "acknowledge_message",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 40,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_message_status",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_conversation_history",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_outbound_queue",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_inbound_queue",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_send_message_to_recipient",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 51,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_scan_for_inbound_messages",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 26,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_inbound_message",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_expired_messages",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 21,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_message_to_dict",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_dict_to_message",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 28,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_persisted_messages",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 23,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_persist_active_messages",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_move_to_failed",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_message_id",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_queue_statistics",
      "file_path": "TestMaster\\communication\\message_queue.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "wait_if_needed",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_module",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_remaining_modules",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "validate_test_syntax",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "count_test_methods",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_test_file",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_stats",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_stats",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "print_stats",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_modules_parallel",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_modules_batch",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "load_cache",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_cache",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cache_key",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cached_result",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cache_result",
      "file_path": "TestMaster\\converters\\base.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 24,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_module",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_broken_tests",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 27,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_by_priority",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 26,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "convert_week_range",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_incremental_save",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 48,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_find_broken_test_files",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_module_for_test",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_save_results",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_print_broken_test_summary",
      "file_path": "TestMaster\\converters\\batch.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 24,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_auto_initialize",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_provider_mode",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_sdk_mode",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_template_mode",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_module",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 66,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_test_code",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_with_ai",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 61,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_template",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 87,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_attempt_self_healing",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 47,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_estimate_quality_score",
      "file_path": "TestMaster\\converters\\intelligent.py",
      "line_count": 27,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_module",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_all_remaining",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_priority_modules",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_batch_with_progress",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 45,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "convert_with_retry",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 48,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_print_conversion_summary",
      "file_path": "TestMaster\\converters\\parallel.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_config",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reset_config",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_configuration",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 131,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_load_configuration_profiles",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 53,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_optimal_profile",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_profile",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_config_file",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 38,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_flatten_config",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_env_overrides",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 27,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_parse_env_value",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_profile_info",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_observer",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_notify_observers",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_all",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_config",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_default_config",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_env_overrides",
      "file_path": "TestMaster\\core\\config.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_context_manager",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "preserve_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "retrieve_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "inject_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "push_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "pop_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_snapshot",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_recent",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 29,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "preserve",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 54,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "retrieve",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "inject_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 23,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_context_header",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 20,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_docstring_end",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 14,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "push_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "pop_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "peek_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "merge_contexts",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 25,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "update",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 40,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_compress_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_decompress_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_transformer",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "apply_transformer",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_context_statistics",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cleanup_old_contexts",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "export_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "import_context",
      "file_path": "TestMaster\\core\\context_manager.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "feature_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_shared_state_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_performance_monitoring_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_graph_workflows_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_async_processing_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_dashboard_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_telemetry_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__new__",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "initialize",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_config",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_default_config",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 87,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "is_enabled",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_config",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "disable",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_feature",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_features",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "show_status",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_config",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 22,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "reload_config",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_clear_cache",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable_layer_enhancements",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "disable_layer_enhancements",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "decorator",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "wrapper",
      "file_path": "TestMaster\\core\\feature_flags.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_layer_manager",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_layer_enabled",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "requires_layer",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "import_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "from_dict",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 24,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_default_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_validate_dependencies",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 10,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_enabled",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_features",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable_layer",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "disable_layer",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_disable_dependent_layers",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 33,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_status",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_advanced_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_hot_reload",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_schema_validator",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 28,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_env_overrides",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 18,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_merge_inherited_configs",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 27,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_sync_with_shared_state",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "reload_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_config_changes",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 24,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_callback",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_notify_callbacks",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_add_audit_entry",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_audit_trail",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_config",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 42,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "decorator",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "has_cycle",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "wrapper",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_modified",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_performance",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 79,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "monitor_class",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 21,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_performance_summary",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reset_performance_metrics",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_critical",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_api",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_generator",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_verifier",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__new__",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_execution",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_summary",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reset_metrics",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "decorator",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 66,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "wrapper",
      "file_path": "TestMaster\\core\\monitoring_decorators.py",
      "line_count": 60,
      "complexity_score": 11,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_orchestrator",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__hash__",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__lt__",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_task",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_ready_tasks",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "has_cycles",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 20,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 24,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_handlers",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_connect_integrations",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_test_generation_workflow",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 50,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "execute_pipeline",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_execute_task",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_generate_test",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_self_heal",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_verify_quality",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_fix_imports",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_security_scan",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_optimize_flow",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_status",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "visit",
      "file_path": "TestMaster\\core\\orchestrator.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_tracking_manager",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_operation",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 66,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 32,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_initialize_database",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 51,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "start_chain",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 53,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "end_chain",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 42,
      "complexity_score": 7,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "track_operation",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 55,
      "complexity_score": 12,
      "parameter_count": 12,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_record_event",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 32,
      "complexity_score": 8,
      "parameter_count": 14,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_store_event_to_db",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 33,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_store_chain_to_db",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 31,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_chain_depth",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_chains",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_tracking_statistics",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 78,
      "complexity_score": 20,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "cleanup_old_data",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 26,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "decorator",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 58,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "wrapper",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "line_count": 56,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "create_test_monitoring_workflow",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 24,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_parallel_test_generation_workflow",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 26,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_workflow_graph",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_workflow_graph",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 34,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_add_default_nodes",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_node",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 30,
      "complexity_score": 5,
      "parameter_count": 9,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_edge",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_conditional_edge",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_nodes_exist",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 5,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "invoke",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 60,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_execute_workflow",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 69,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_execute_action_node",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_execute_parallel_node",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_next_node",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_execute_linear_fallback",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_workflow_statistics",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_execution_status",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cancel_execution",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "supports_language",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_location",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 6,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_python_ast",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 41,
      "complexity_score": 9,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_convert_python_function",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 73,
      "complexity_score": 18,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_convert_python_class",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 44,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_convert_python_import",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 30,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_convert_python_assignment",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_convert_python_expression",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 25,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_annotation_string",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_node_string",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_complexity",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cyclomatic_complexity",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_fallback_parse",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_js_functions",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 44,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_js_classes",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_js_imports",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 35,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_js_variables",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_js_parameters",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 21,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_class_contexts",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 18,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_methods_from_class_body",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_function_calls",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_variable_accesses",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_ts_interfaces",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_interface_properties",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_java_classes",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_java_methods",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 24,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_java_imports",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_csharp_classes",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_csharp_usings",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_go_functions",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_go_structs",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_go_imports",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 26,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_rust_functions",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_rust_structs",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_rust_uses",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_parser",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_parser",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_parsers",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "supports_language",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_parsers",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_functions",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_classes",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "find_function",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "find_class",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_parsers",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_universal_ast",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 26,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_project_ast",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 38,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_parse_file",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generic_parse",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_functions_generic",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_classes_generic",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_imports_generic",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 27,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_variables_generic",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 21,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_file_language",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 24,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_primary_language",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_source_files",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_semantic_analysis",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_cross_references",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_complexity",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_dependencies",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_patterns",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_quality_metrics",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_circular_dependencies",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_dependency_depth",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_highly_coupled_modules",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_design_patterns",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 17,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_naming_patterns",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_function_naming",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_class_naming",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_naming_consistency",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_code_smells",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_architectural_patterns",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 16,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_type_coverage",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_python_ast",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 26,
      "complexity_score": 7,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_convert_function",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_class",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 26,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_convert_import",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_assignment",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_fallback_parse",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_js_functions",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_js_classes",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_js_imports",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "parse_to_universal",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_ts_interfaces",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "dfs",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "calculate_depth",
      "file_path": "TestMaster\\core\\ast_abstraction\\universal_ast.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_file_extension",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_imports",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "indent",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 29,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_test_case",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 43,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 51,
      "complexity_score": 17,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_convert_fixture",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 30,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 28,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 35,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_test_case",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 40,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 32,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_test_case",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 38,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 28,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_test_case_mocha",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 20,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_test_mocha",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_convert_chai_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_target_language",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_test_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_adapter",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_adapter",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_adapters",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "supports_framework",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "list_supported_frameworks",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_adapters",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_assertion",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_parameter",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "mark_skip",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "mark_only",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_fixture",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_nested_suite",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_tests",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "count_tests",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_test_case",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_global_fixture",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_import",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_helper_function",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_tests",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "count_tests",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "count_assertions",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "calculate_metrics",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 42,
      "complexity_score": 14,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_simple_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_exception_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_async_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_parameterized_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\universal_test.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_codebase",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 55,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_scan_files",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_languages",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 36,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_file_language",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 27,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_content_for_language",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 51,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_count_lines",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 14,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_syntax_features",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 32,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_frameworks",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 23,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_file_frameworks",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 23,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_detect_framework_configs",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 21,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_build_systems",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 21,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_dependencies",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_parse_requirements_txt",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 24,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_parse_package_json",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 26,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_pom_xml",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_cargo_toml",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_go_mod",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_file_profiles",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 32,
      "complexity_score": 7,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_source_file",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_file_complexity",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_architectural_patterns",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 20,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_complexity_metrics",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_testing_capabilities",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_ci_cd_capabilities",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_default_languages",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_extension_map",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_build_framework_patterns",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_build_system_patterns",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dependency_resolver",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "resolve_dependencies",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 37,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_task_nodes",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_dependency_rules",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_build_dependency_map",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_topological_sort",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 29,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_find_critical_path",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 45,
      "complexity_score": 12,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_total_time",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_dependency_graph",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 33,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_remove_redundant_dependencies",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 24,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_all_dependencies",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_parallelization_opportunities",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_execution_router",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable_adaptive_routing",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "find_optimal_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_performance_data",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_select_routing_strategy",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adaptive_strategy_selection",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_round_robin_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_performance_based_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_balanced_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_shortest_queue_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adaptive_route",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 29,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_route_performance",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 18,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_routing_statistics",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\flow_optimizer\\execution_router.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_flow_analyzer",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_flow",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 42,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_performance_metrics",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 51,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_bottlenecks",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 75,
      "complexity_score": 11,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_dependency_chains",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_efficiency_score",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 28,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_optimization_recommendations",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_performance_baseline",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_analysis_history",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_efficiency_trends",
      "file_path": "TestMaster\\flow_optimizer\\flow_analyzer.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_parallel_executor",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_execution_plan",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 48,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_execution_batches",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 35,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_create_single_batch",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_resource_aware_batches",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_adaptive_batches",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_group_tasks_by_resources",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_resource_efficiency",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_average_strategy_performance",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_strategy_performance",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_execution_statistics",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_resource_optimizer",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_pools",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_allocation",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 45,
      "complexity_score": 5,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_requirements",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 32,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_select_optimization_policy",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 6,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_allocation_plan",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 20,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_allocate_resource_type",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 42,
      "complexity_score": 11,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_total_cost",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_efficiency_score",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_constraints",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_resource_pool",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_pool_capacity",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_optimization_policy",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_allocation_history",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_resource_utilization",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_pool_sizes",
      "file_path": "TestMaster\\flow_optimizer\\resource_optimizer.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "is_flow_optimizer_enabled",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure_flow_optimizer",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 38,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "analyze_execution_flow",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_execution_route",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_resource_allocation",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "resolve_dependencies",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_parallel_execution_plan",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_optimization_status",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_flow_optimizer",
      "file_path": "TestMaster\\flow_optimizer\\__init__.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 27,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_module",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_test_code",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_test_code",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_test_for_module",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 282,
      "complexity_score": 35,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_stats",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 38,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "print_stats",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_module_ast",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 60,
      "complexity_score": 16,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_unparse_node",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_import_path",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_test_template",
      "file_path": "TestMaster\\generators\\base.py",
      "line_count": 76,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "test_gemini_connection",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_auto_initialize",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_provider_mode",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_init_sdk_mode",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_template_mode",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_module",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_module_with_ai",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 68,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "generate_test_code",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_test_with_ai",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 62,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_test_template",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 131,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "test_connection",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_final_integration",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 27,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_complete_integration_test",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 32,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_component_initialization",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 48,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_bridge_communication",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_test_protocol_bridge_messaging",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 38,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_event_bridge_correlation",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 59,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_session_bridge_persistence",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 66,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_sop_bridge_workflows",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 67,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_context_bridge_inheritance",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 61,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_intelligence_coordination",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_test_hierarchical_planning_coordination",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 40,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_consensus_mechanism_integration",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 40,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_security_intelligence_integration",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 36,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_multi_agent_optimization",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 39,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_end_to_end_workflows",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_test_complete_test_generation_workflow",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 78,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_security_analysis_workflow",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 47,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_performance_optimization_workflow",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 40,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_test_performance_scalability",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_test_message_throughput",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 60,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_context_resolution_performance",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 63,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_event_processing_scalability",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 56,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_resource_usage",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 63,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_security_reliability",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_test_security_compliance",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 72,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_error_handling_recovery",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 69,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_test_concurrent_access_safety",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 56,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_perform_system_validation",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_component_integration",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 57,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_validate_performance_standards",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 41,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_validate_security_requirements",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 43,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_validate_functional_requirements",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 61,
      "complexity_score": 18,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 12,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_final_report",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 69,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "run_full_suite",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "concurrent_context_operations",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_event_monitoring_bridge",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "from_dict",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_processing",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_processing",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 16,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "publish_event",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_distribute_event",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 21,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_matches_subscription",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 26,
      "complexity_score": 3,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "unsubscribe",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_publisher",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 6,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_database",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 47,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "store_event",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 36,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "retrieve_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 64,
      "complexity_score": 12,
      "parameter_count": 6,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "store_correlation",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cleanup_expired_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_storage_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_correlation_rules",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_correlation_rule",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 30,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_error_burst",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_performance_degradation",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 27,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_security_incident",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_correlation_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_system_integrations",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe_to_workflow_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe_to_performance_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe_to_security_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_correlation_monitoring",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "publish_event",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 32,
      "complexity_score": 3,
      "parameter_count": 11,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_alert_event",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable_cross_system_events",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "ingest_external_event",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 24,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_comprehensive_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_event_system",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "workflow_event_handler",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "performance_event_handler",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "security_event_handler",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "correlation_worker",
      "file_path": "TestMaster\\intelligence\\bridges\\event_monitoring_bridge.py",
      "line_count": 29,
      "complexity_score": 5,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_protocol_bridge",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_channel",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 54,
      "complexity_score": 4,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_find_or_create_channel",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 15,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_route_direct",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_broadcast",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_multicast",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_publish_subscribe",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_load_balanced",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_priority_based",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "receive_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "unsubscribe",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_routing_rule",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "route_with_intelligence",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_routing",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_routing_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_channel",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "receive_messages",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_handler",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "broadcast",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "request_response",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 25,
      "complexity_score": 5,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_communication_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_routing_rules",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_high_priority",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_consensus_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_route_monitoring_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_system_channels",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_agent",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "authenticate_agent",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "send_system_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable_cross_system_messaging",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_translate_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_communication",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_comprehensive_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_session_tracking_bridge",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_storage",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 44,
      "complexity_score": 3,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_session_status",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_session_state",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 50,
      "complexity_score": 9,
      "parameter_count": 7,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_session_state",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 4,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "create_checkpoint",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 55,
      "complexity_score": 9,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "restore_from_checkpoint",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 77,
      "complexity_score": 21,
      "parameter_count": 4,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "close_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_performance_score",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_persist_session_metadata",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_session_metadata",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_persist_session_state",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_session_state",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 4,
      "return_statements": 6,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_persist_checkpoint",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_latest_checkpoint",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_archive_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_session_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_session_integrations",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_background_tasks",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 32,
      "complexity_score": 2,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "save_component_state",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 23,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "load_component_state",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_session_checkpoint",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "resume_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "end_session",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 29,
      "complexity_score": 3,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "subscribe_to_session_events",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_notify_session_event",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_auto_checkpoints",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_expired_sessions",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 10,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_session_analytics",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_session_info",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 40,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_comprehensive_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_session_storage",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "background_worker",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_sop_workflow_bridge",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_common_patterns",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 28,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_patterns",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_matches_pattern",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_pattern_confidence",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_sequence_similarity",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_parameter_similarity",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_common_parameters",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_success_indicators",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "recommend_reuse",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_register_default_tasks",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "convert_sop_to_dag",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 22,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_task_from_step",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_parallel_groups",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 15,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_default_task_function",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_code_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_tests_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_tests_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_fix_imports_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_vulnerability_scan_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_dependency_check_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_performance_analysis_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_deployment_check_task",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 30,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_existing_sops",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 25,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_bridge_integrations",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_sop_template",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 59,
      "complexity_score": 7,
      "parameter_count": 9,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "execute_sop",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 51,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_execute_dag_simulation",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_sop_analytics",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 34,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_sop_recommendations",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 31,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "optimize_sop_patterns",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_optimize_sop_template",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_persist_sop_template",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_execution_status",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_comprehensive_metrics",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\intelligence\\bridges\\sop_workflow_bridge.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "test_agent_coordination",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 59,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 26,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_agent",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 21,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "unregister_agent",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_coordination_task",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 21,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "submit_vote",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 53,
      "complexity_score": 11,
      "parameter_count": 6,
      "return_statements": 6,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_coordination_result",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_and_process_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 38,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_select_consensus_strategy",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_agent_performance",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 23,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_coordination_stats",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cleanup_expired_tasks",
      "file_path": "TestMaster\\intelligence\\consensus\\agent_coordination.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "test_consensus_engine",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 48,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reach_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 36,
      "complexity_score": 9,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_first_past_post_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 34,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_weighted_average_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 33,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_median_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 28,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_iterative_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_byzantine_fault_tolerant_consensus",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_simulate_agent_adjustment",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_choice",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_consensus_stats",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_strategy_usage_stats",
      "file_path": "TestMaster\\intelligence\\consensus\\consensus_engine.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_documentation_engine",
      "file_path": "TestMaster\\intelligence\\documentation\\__init__.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "quick_docstring_generation",
      "file_path": "TestMaster\\intelligence\\documentation\\__init__.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "quick_readme_generation",
      "file_path": "TestMaster\\intelligence\\documentation\\__init__.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_module_context",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 42,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "build_function_context",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_class_context",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_project_context",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 38,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_run_comprehensive_analysis",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_fallback_analysis",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_module_info",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_function_contexts",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_class_contexts",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_architectural_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_function_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_class_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_security_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_performance_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_quality_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_infer_module_type",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_infer_architecture_role",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_dependencies",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_exports",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_function_complexity",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_function_security_issues",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_function_performance_notes",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_function_usage_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_related_functions",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_class_design_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_class_responsibilities",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_class_usage_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_python_files",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_project_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_infer_tech_stack",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 15,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_infer_architecture_style",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_infer_primary_domain",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_key_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_quality_metrics",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_project_description",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_import_name",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "format_context_for_llm",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_format_project_context_for_llm",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_module_context_for_llm",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_class_context_for_llm",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_function_context_for_llm",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_insights_for_llm",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\context_builder.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\doc_generator.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_project_structure_representation",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\doc_generator.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_module_structure_representation",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\doc_generator.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_public_api_structure",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\doc_generator.py",
      "line_count": 35,
      "complexity_score": 14,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_generation_stats",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\doc_generator.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_cache",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\doc_generator.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_default_llm_integration",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 40,
      "complexity_score": 5,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 92,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "build_prompt",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 24,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enhance_context",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_cost_estimate",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 30,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_select_best_provider",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_cache_key",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_cache",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cache_stats",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\llm_integration.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_style_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_quality_keywords",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_docstring_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 78,
      "complexity_score": 21,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_assess_style_compliance",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 37,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_assess_clarity",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 43,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_assess_technical_depth",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 41,
      "complexity_score": 17,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_assess_usefulness",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 31,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_assess_readme_structure",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_readme_accuracy",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_api_coverage",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_api_accuracy",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 14,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_api_structure",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_module_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_api_structure",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 97,
      "complexity_score": 21,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_post_process_api_doc",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_api_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_function_info",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_class_info",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_function_signature",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_class_signature",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\architecture_doc_generator.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_is_local_import",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\architecture_doc_generator.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_architecture_documentation_prompt",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\architecture_doc_generator.py",
      "line_count": 47,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_fallback_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\architecture_doc_generator.py",
      "line_count": 46,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_style_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 70,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "apply_docstrings_to_file",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 55,
      "complexity_score": 12,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_function_signature",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 27,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_class_signature",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_post_process_docstring",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 17,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_format_google_style",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_numpy_style",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_sphinx_style",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enhance_context_for_retry",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_indentation",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_docstring_for_insertion",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_docstring_style",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\docstring_generator.py",
      "line_count": 28,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\readme_generator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_badges_section",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\readme_generator.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_toc_section",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\readme_generator.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_license_section",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\readme_generator.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assemble_readme",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\readme_generator.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_readme",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\readme_generator.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_is_relevant_to_topic",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_code_complexity",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_concepts_from_code",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_dependencies_from_code",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 23,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_docstring_from_node",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 9,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_sort_examples_by_concept_progression",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "render_tutorial_to_markdown",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 49,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_concept_priority",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_ci_integration",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_ci_config",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 14,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_github_actions_config",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 56,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_gitlab_ci_config",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 40,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_jenkins_config",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 55,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_azure_devops_config",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 28,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_circleci_config",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 34,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "setup_ci_environment",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_config_file_path",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 14,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_cli_script",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 81,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_requirements_snippet",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_documentation_pipeline",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
      "line_count": 34,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 24,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enhance_commit_message",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "suggest_commit_message",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_staged_changes",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 73,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_file_changes",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 39,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_get_line_counts",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_change_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 57,
      "complexity_score": 20,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_get_analysis_insights",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 16,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_build_commit_context",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_post_process_commit_message",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_commit_template",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 43,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "install_commit_hook",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "line_count": 50,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "check_project_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 50,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "check_file_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 66,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "check_function_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "check_class_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_module_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 37,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_function_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 60,
      "complexity_score": 16,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_check_class_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 68,
      "complexity_score": 21,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_find_python_files",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_completeness_level",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_project_recommendations",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 28,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_file_recommendations",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 23,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_empty_report",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_report",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_export_markdown_report",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "line_count": 40,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_builtin_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_google_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 113,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_create_numpy_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 134,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_create_sphinx_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 115,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_create_epytext_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 60,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "list_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_docstring",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_prepare_template_variables",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_list_variables",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 53,
      "complexity_score": 13,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "create_custom_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 43,
      "complexity_score": 4,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "validate_docstring_style",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_google_style",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 23,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_validate_numpy_style",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 20,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_validate_sphinx_style",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "line_count": 14,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "process",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "process",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "process",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "process",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_builtin_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "list_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "render_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 29,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "suggest_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_template_score",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 29,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_template_from_example",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 35,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "validate_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "import_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "save_templates_to_file",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "load_templates_from_file",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_template_statistics",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\template_engine.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\base.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\base.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\base.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\grpc_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_grpc_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\grpc_templates.py",
      "line_count": 294,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\grpc_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\grpc_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\manager.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "list_available_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\manager.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\manager.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\rest_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_rest_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\rest_templates.py",
      "line_count": 487,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\rest_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\rest_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\websocket_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_websocket_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\websocket_templates.py",
      "line_count": 419,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\websocket_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\websocket_templates.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\readme_template_modules\\data_models.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_comprehensive_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\readme_template_modules\\generic_templates.py",
      "line_count": 171,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "create_minimal_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\readme_template_modules\\generic_templates.py",
      "line_count": 58,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "create_all",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\readme_template_modules\\generic_templates.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_hierarchical_planner",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_child",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_score",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "calculate_aggregate_score",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_path",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "prune",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_node",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_leaf_nodes",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 7,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_best_plan",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_statistics",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_avg_branching",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 7,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_criterion",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "plan",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_breadth_first_search",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_best_first_search",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_beam_search",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 21,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_expand_node",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_llm_powered_planner",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 42,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "test_llm_integration",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 54,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_providers",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 27,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_planning_prompt",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 46,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_query_llm",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_llm_response",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 29,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_json",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 33,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_fallback_generation",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_evaluation_prompt",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 33,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_query_llm_for_evaluation",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_parse_evaluation_response",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_json",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 29,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_fallback_evaluation",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cache_llm_response",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cached_llm_response",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 24,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 39,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_tot_config",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "thought_tree",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "total_thoughts_generated",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "total_thoughts_evaluated",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reasoning_depth_achieved",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reasoning_time",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 21,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_tot_result",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 30,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "generate_tests",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 38,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_tot_config",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enhance_with_htp",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enhance_with_llm",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_dependencies",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\unified_integration.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_best_planner",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\__init__.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_integration_system",
      "file_path": "TestMaster\\intelligence\\integration\\__init__.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_documentation_intelligence_agent",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_quality_score",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_analysis_config_for_context_depth",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 24,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_start_time",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_old_requests",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_performance_metrics",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_agent_status",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_learned_patterns",
      "file_path": "TestMaster\\intelligence\\integration\\agents\\documentation_agent.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_classical_analysis_task",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_documentation_task",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_security_audit_task",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 34,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "LOW"
    },
    {
      "name": "_initialize_core_agents",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 40,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "register_agent",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "unregister_agent",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_task_status",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 16,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_system_status",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 24,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_next_ready_task",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_are_dependencies_satisfied",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_select_best_agent_for_task",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 21,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_capable_agents",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_prioritize_task_queue",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_performance_metrics",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enforce_resource_constraints",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_old_tasks",
      "file_path": "TestMaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_event_system",
      "file_path": "TestMaster\\intelligence\\integration\\events\\event_system.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\events\\event_system.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\integration\\events\\event_system.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_handler",
      "file_path": "TestMaster\\intelligence\\integration\\events\\event_system.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "unregister_handler",
      "file_path": "TestMaster\\intelligence\\integration\\events\\event_system.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics",
      "file_path": "TestMaster\\intelligence\\integration\\events\\event_system.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_simple_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_percentage_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_conditional_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 32,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 10,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_apply_operator",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 25,
      "complexity_score": 11,
      "parameter_count": 5,
      "return_statements": 11,
      "nested_depth": 10,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 7,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_evaluate_percentage_rollout",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_gradual_rollout",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 21,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 25,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_flags",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 72,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "create_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 29,
      "complexity_score": 4,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 36,
      "complexity_score": 9,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "delete_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_enabled",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_flag_value",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_evaluation_context",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 21,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_cache_key",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_clear_cache_for_flag",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_analytics",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_context_provider",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_flags",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_flag_analytics",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cache_hit_rate",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_configuration",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "import_configuration",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 40,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "save_to_file",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "load_from_file",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_layer_manager",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 24,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_standard_layers",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 71,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "register_layer",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_layer_factory",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_communication_handler",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_initialization_order",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 26,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_communication",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_system_metrics",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 21,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_layer_status",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_system_status",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_recent_success_rate",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_communication_history",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "visit",
      "file_path": "TestMaster\\intelligence\\integration\\layers\\layer_manager.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_unified_storage",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 25,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_row_to_metadata",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evict_from_memory_cache",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_indexes",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "search_results",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 38,
      "complexity_score": 15,
      "parameter_count": 7,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_remove_from_indexes",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 20,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_storage_stats",
      "file_path": "TestMaster\\intelligence\\integration\\storage\\unified_storage.py",
      "line_count": 21,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_sync",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 48,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_message",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cost",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_sync",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cost",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_sync",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_messages_to_prompt",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_sync",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_implementations.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_from_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_optimization_objective",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "update_provider_metrics",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "benchmark_providers",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 42,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_optimal_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_provider_score",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 32,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "optimize_provider_allocation",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 41,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_metrics_summary",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 23,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cheapest_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "estimate_cost",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_fastest_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_highest_quality_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate_response_quality",
      "file_path": "TestMaster\\intelligence\\llm_providers\\provider_optimization.py",
      "line_count": 20,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "from_dict",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_sync",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_request",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_rate_limits",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_tokens",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_cost",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_record_request",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reset_metrics",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set_fallback_order",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_sync",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_provider_order",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 21,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_provider_metrics",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_best_provider",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_provider_selection",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "health_check",
      "file_path": "TestMaster\\intelligence\\llm_providers\\universal_llm_provider.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_adaptive_resource_bridge",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_resource_sync",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_sync_thread",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_sync_worker",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_sync",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_sync_predictions",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_cross_optimization",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_suggest_pool_optimization",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "make_unified_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 61,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_agent_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_optimizer_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_combine_decisions",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 5,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_hybrid_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 32,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_consensus_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 43,
      "complexity_score": 7,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_agent_only_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_optimizer_only_decision",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 29,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_consensus_history",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_bridge_metrics",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 23,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_bridge_configuration",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 30,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "test_adaptive_resource_management",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 61,
      "complexity_score": 8,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_observation",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "predict_demand",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 36,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_time_based_prediction",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 18,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_trend_adjustment",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_prediction_confidence",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 21,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_prediction_factors",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 27,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_historical_accuracy",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_prediction_accuracy",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "can_scale",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "execute_scaling",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 34,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_scale_up_resource",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 27,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_scale_down_resource",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 32,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_store_scaling_result",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 34,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_adaptive_management",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_adaptive_management",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_management_loop",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_resource_metrics",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 52,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_historical_utilization",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_resource_efficiency",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cost_per_hour",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_performance_impact",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_predictor",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_and_decide",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 18,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_resource_scaling_need",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 69,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_estimate_cost_impact",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_performance_impact",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_execution_priority",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_coordinate_scaling_consensus",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 41,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_execute_scaling_decisions",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 23,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_resource_status",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 27,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_resource_optimization_report",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 38,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_optimization_recommendations",
      "file_path": "TestMaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
      "line_count": 36,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "test_bottleneck_detection_resolution",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 38,
      "complexity_score": 7,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 28,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_flow_analysis_data",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_dependency_data",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_sample_tasks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 29,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_dependency_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 55,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_resource_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 32,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_serialization_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 30,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_hotspot_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 29,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_queue_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 31,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_get_queue_metrics",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_severity",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_resolution_strategies",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "generate_resolution_plan",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 45,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_resolution_action",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 104,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 6,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_create_fallback_action",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_resolution_priority",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_implementation_plan",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_define_success_metrics",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_risks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 27,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 25,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_and_resolve_bottlenecks",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 40,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "execute_resolution",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 43,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_coordinate_resolution_consensus",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 31,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_store_analysis_results",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 14,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_bottleneck_to_dict",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_resolution_to_dict",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 27,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_agent_status",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "test_workflow_performance_monitor",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 56,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collect_workflow_metrics",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 53,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_legacy_execution_data",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_telemetry_stats",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 29,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_performance_score",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_thresholds",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 29,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_baselines",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_adaptive_thresholds",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 32,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_thresholds",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "check_threshold_breach",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 5,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_exceeds_threshold",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_alert",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 35,
      "complexity_score": 6,
      "parameter_count": 8,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "resolve_alert",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_alerts",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_alert_summary",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 31,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_monitoring",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_monitoring_loop",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_monitor_workflow",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_and_create_alerts",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 58,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_store_metrics",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_coordinate_performance_consensus",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 25,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_monitoring_status",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_workflow_performance_report",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_performance_recommendations",
      "file_path": "TestMaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
      "line_count": 32,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "test_multi_objective_optimization",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 47,
      "complexity_score": 6,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "normalize",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 61,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_initialize_population",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_population",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_candidate",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 38,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_evaluate_coverage",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_performance",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_security",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_maintainability",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_resource_efficiency",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_execution_speed",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_reliability",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_comprehensiveness",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_nsga_ii_step",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 34,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_pareto_ranks",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 36,
      "complexity_score": 13,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_dominates",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_crowding_distances",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 33,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_tournament_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_crossover",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_mutate",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_nsga_ii_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_pareto_optimization_step",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_weighted_sum_step",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evolutionary_step",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_random_solution",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_diversity",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 3,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_base_solutions",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 48,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 33,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize_test_generation",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 59,
      "complexity_score": 9,
      "parameter_count": 5,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_optimization_plan",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 34,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_fallback_optimization_plan",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_coordinate_optimization_consensus",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 35,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_optimization_recommendations",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 31,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "optimize",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__bool__",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "normalize",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "fitness",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 19,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 7,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "dominates",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_best",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_balanced",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "optimize",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 48,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_initialize_population",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_random_genes",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_population",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_fitness",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_tournament_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_roulette_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_crossover",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_single_point_crossover",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_mutation",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_mutate_genes",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_environmental_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_select_diverse",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 28,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_solution_distance",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_pareto_front",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_track_metrics",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_diversity",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_convergence",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_result",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 33,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_hypervolume",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimizer.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_environmental_selection",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_fast_non_dominated_sort",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 40,
      "complexity_score": 13,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_crowding_distance",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 27,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_weight_vectors",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_define_neighborhoods",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_reference_point",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_tchebycheff_scalarization",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_population",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_particles",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_accept_solution",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cool_down",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perturb_solution",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_crossover",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_two_point_crossover",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_uniform_crossover",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_mutation",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_gaussian_mutation",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_uniform_mutation",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_boundary_mutation",
      "file_path": "TestMaster\\intelligence\\optimization\\optimization_algorithms.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "test_security_intelligence",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 46,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 27,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_security_context",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 35,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_vulnerability_pattern",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 10,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_severity",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_impact",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_remediation",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_determine_security_strategies",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_security_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_create_vulnerability_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_compliance_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_threat_model_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_code_review_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_default_security_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_test_scenarios",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 24,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_coverage",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_detection_capability",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_compliance",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_evaluate_feasibility",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_vulnerability_tests",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_test_templates",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 40,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_generic_test",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "check_compliance",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_compliance_recommendations",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 19,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_security",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 46,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_scan_results",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_security_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 31,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_fallback_security_plan",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_finding_to_dict",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_highest_severity",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "coordinate_security_consensus",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "scan_vulnerabilities",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__bool__",
      "file_path": "TestMaster\\intelligence\\security\\security_intelligence_agent.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_child",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_path",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "prune_subtree",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_node",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_leaf_nodes",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 7,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_best_path",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_statistics",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_avg_branching",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "visualize",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_visualize_node",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 7,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_criterion",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reason",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_breadth_first_search",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 19,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_depth_first_search",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_best_first_search",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_beam_search",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_monte_carlo_search",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 35,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_expand_node",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "evaluate",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "ucb1_score",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_tests",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 59,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_add_evaluation_criteria",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 70,
      "complexity_score": 14,
      "parameter_count": 2,
      "return_statements": 16,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_test_suite",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 44,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_convert_to_universal_test",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_test_function",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_assertion",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_fallback_tests",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_quality_metrics",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_insights",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 34,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_print_summary",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "coverage_evaluator",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "quality_evaluator",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "strategy_evaluator",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 15,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 6,
      "nested_depth": 6,
      "docstring_present": false,
      "modularization_priority": "HIGH"
    },
    {
      "name": "complexity_evaluator",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_dependency_graph",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 24,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_discover_modules",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_should_analyze_module",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_module_name",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_module_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_import_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 34,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_function_call_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_inheritance_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 21,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_type_hint_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_internal_module",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 14,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_build_graph_edges",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_impact",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 49,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_build_order",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_circular_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_critical_modules",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_isolated_modules",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_print_dependency_summary",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 32,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_print_impact_analysis",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\mapping\\mapping_cache.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get",
      "file_path": "TestMaster\\mapping\\mapping_cache.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "set",
      "file_path": "TestMaster\\mapping\\mapping_cache.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear",
      "file_path": "TestMaster\\mapping\\mapping_cache.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_cache_info",
      "file_path": "TestMaster\\mapping\\mapping_cache.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_test_watcher",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_created",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_modified",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_deleted",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_moved",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_should_process_event",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_change_event",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 32,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_setup_enhanced_features",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_handle_event",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_events",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_dispatch_event",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 56,
      "complexity_score": 16,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_is_test_file",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_source_file",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_git_available",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_current_commit_hash",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_git_info_for_file",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_git_monitoring",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 19,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_commit_info",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 37,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_statistics",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_watch_path",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "remove_watch_path",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_git",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "line_count": 15,
      "complexity_score": 8,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "quick_idle_scan",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 36,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_monitoring",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_monitoring_loop",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 23,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "scan_for_idle_modules",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 32,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_should_monitor_file",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 23,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 6,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_analyze_module",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 47,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_idle_state",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_priority_score",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_statistics",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 33,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_log_summary",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_idle_modules",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_all_idle_modules",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_statistics",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_statistics_history",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_idle_report",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 34,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "clear_statistics",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "adapt_test_suite",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 30,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_to_framework",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 25,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_test_case",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_test",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_framework_test_function",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_test_content",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_adapt_assertion",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_assertion_code",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_assertion_code",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_test_name",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_framework_mappings",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 85,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_default_test_template",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_to_javascript",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_adapt_to_java",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_supported_frameworks",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_frameworks_for_language",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_frameworks_in_directory",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "line_count": 27,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 34,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_outputs",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 38,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_output_directories",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_format_output",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_programming_language_output",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_universal_output",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_structured_output",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_documentation_output",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_markdown_documentation",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 35,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_html_documentation",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 50,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_imports",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_test_content",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_test_case_content",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_test_method_content",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_assertion_code",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_write_output_bundle",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 25,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_filename",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 28,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_output_templates",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 44,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_load_language_configs",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 38,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_detect_suite_language",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_additional_content",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_pytest_config",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_jest_config",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_output_metrics",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_apply_language_formatting",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_supported_formats",
      "file_path": "TestMaster\\orchestration\\output_system.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__post_init__",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 37,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "orchestrate",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 70,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_initialize_components",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 24,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_codebase",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_perform_security_analysis",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_intelligent_tests",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 62,
      "complexity_score": 16,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_outputs",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 28,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_average_quality",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_coverage",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_orchestration_modes",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_supported_compliance_standards",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "validate_config",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "classify_directory",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_high_priority_files_in_directory",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 21,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_patterns",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 51,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "add_tagging_rule",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 6,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "classify_file",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 54,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "classify_all_files",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "update_classification_from_test_results",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 31,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "update_classification_from_idle_detection",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_files_by_type",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_files_by_status",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_files_by_priority",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_files_with_tag",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_high_priority_files",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_claude_directives",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 55,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_file_structure",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 49,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_classify_module_type",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 32,
      "complexity_score": 15,
      "parameter_count": 3,
      "return_statements": 9,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_determine_module_status",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_priority",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 43,
      "complexity_score": 7,
      "parameter_count": 5,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_complexity_score",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_importance_score",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 32,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_stability_score",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 22,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_dependencies",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_apply_tagging_rules",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 53,
      "complexity_score": 29,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 11,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 23,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_nesting_depth",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_should_classify_file",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_needs_reclassification",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_source_file_for_test",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_classification_statistics",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 36,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_classification_report",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 38,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_depth",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_test_failure_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_coverage_improvement_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "batch_handoffs",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 46,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 85,
      "complexity_score": 11,
      "parameter_count": 11,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "create_investigation_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 42,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_work_delegation_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 32,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_escalation_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 35,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "receive_response",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 54,
      "complexity_score": 8,
      "parameter_count": 9,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_active_handoffs",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_handoff_by_id",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_overdue_handoffs",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cancel_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 27,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enrich_handoff_context",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 63,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_enrich_file_analysis",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_context_enrichers",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 42,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_get_pattern_recommendations",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_learn_from_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 40,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_persist_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 29,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_persist_response",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_advanced_tools",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_handoff",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 30,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_compress_context",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 21,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_decompress_context",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_handoff_id",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_response_id",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_handoff_statistics",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 51,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "export_handoff_report",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 59,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_next",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_priority",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "should_retry",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_retry_delay",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_attempt",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "reset",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_to_batch",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 15,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_batch",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enrich_file_analysis",
      "file_path": "TestMaster\\orchestrator\\handoff_manager.py",
      "line_count": 39,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "investigate_idle_modules_in_directory",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_investigation",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 40,
      "complexity_score": 5,
      "parameter_count": 6,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "investigate_idle_module",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "investigate_coverage_gap",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "investigate_test_failure",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_execute_investigation",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 57,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_setup_investigators",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 269,
      "complexity_score": 33,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_setup_evidence_collectors",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 214,
      "complexity_score": 38,
      "parameter_count": 1,
      "return_statements": 14,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_collect_evidence",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_categorize_test_error",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_investigation_summary",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_investigation_id",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_investigation_result",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_investigations",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_recent_investigations",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_investigation_statistics",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 38,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_investigation_report",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 46,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "investigate_idle_module_impl",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 67,
      "complexity_score": 12,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "investigate_coverage_gap_impl",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 89,
      "complexity_score": 13,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "investigate_test_failure_impl",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 105,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "collect_file_analysis",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "collect_git_history",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 45,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "collect_dependency_map",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 54,
      "complexity_score": 18,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "collect_test_results",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "collect_code_metrics",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "line_count": 42,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_test_failure_work",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_coverage_gap_work",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_idle_module_work",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_work_item",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 36,
      "complexity_score": 2,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "make_handoff_decision",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 35,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "batch_similar_items",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 51,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_work_for_target",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_high_priority_work",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_decision_rules",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 137,
      "complexity_score": 15,
      "parameter_count": 1,
      "return_statements": 18,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_setup_complexity_assessors",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 75,
      "complexity_score": 16,
      "parameter_count": 1,
      "return_statements": 18,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_assess_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_estimate_effort",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_make_default_decision",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_work_id",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_distribution_statistics",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 35,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_distribution_report",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 54,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "test_failure_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "coverage_gap_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "idle_module_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "breaking_change_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "refactoring_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "new_feature_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "documentation_rule",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 20,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_test_failure_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_coverage_gap_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 17,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 4,
      "nested_depth": 5,
      "docstring_present": false,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "assess_idle_module_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_breaking_change_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_refactoring_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_default_complexity",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_directory_coverage",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "find_critical_coverage_gaps",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_module_risk",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 37,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "analyze_coverage_intelligence",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 46,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_module_coverage",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 29,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_critical_paths",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 31,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_assess_path_criticality",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 35,
      "complexity_score": 14,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_path_risk",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 37,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_path_complexity",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_execution_flow",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 15,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_find_decision_points",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_find_exception_handlers",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_function_calls",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_is_user_facing",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_data_sensitive",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_business_impact",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 18,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_find_test_files",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 22,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_function_coverage",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_module_risk",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 38,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_critical_paths",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 20,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_coverage_gaps",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 58,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_gap_priority",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_gap_priority_from_path",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 28,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_assess_risks_and_priorities",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 34,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_overall_metrics",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_should_analyze_file",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_module_critical_paths",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_high_priority_gaps",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_modules_by_risk_level",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_coverage_statistics",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 36,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_coverage_report",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "line_count": 71,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_performance_dashboard",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_dashboard_metric",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "dashboard_alert",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 41,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_setup_flask_app",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 25,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 7,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_panels",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 44,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_server",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_server",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_metric",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 36,
      "complexity_score": 6,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_update_component_stats",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 28,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_panel",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_panel",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_alert",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_metrics_data",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_components_data",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_panel_data",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_health_data",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 34,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_render_dashboard",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 132,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_dashboard_statistics",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "dashboard_home",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "api_metrics",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "api_components",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "api_panel",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "api_health",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "api_alerts",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "run_server",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_test_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_high_risk_predictions",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_module_regression_risk",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 26,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 35,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "record_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 47,
      "complexity_score": 2,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "mark_failure_resolved",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 24,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_regression_trends",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 54,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "predict_potential_failures",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 34,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "validate_prediction",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_failure_id",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 28,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 8,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_assess_failure_severity",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 21,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_infer_module_under_test",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 12,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_affected_files",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_classify_regression_type",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 26,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 7,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_setup_pattern_extractors",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 45,
      "complexity_score": 11,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_update_patterns",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_pattern_from_failures",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 58,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_update_pattern_resolutions",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 22,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_predictions_for_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_prediction_from_pattern",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 65,
      "complexity_score": 16,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_preventive_actions",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 24,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_failure_trend",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_resolution_trend",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 23,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_high_risk_modules",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 34,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_prediction_accuracy",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_update_prediction_accuracy",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_all_modules",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_historical_data",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 26,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_persist_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_persist_pattern",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_persist_prediction",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_serialize_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 25,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_deserialize_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 26,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_serialize_pattern",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_deserialize_pattern",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_serialize_prediction",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 21,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_deserialize_prediction",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_regression_statistics",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 31,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_regression_report",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 53,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "extract_error_message_patterns",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "extract_module_patterns",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "extract_temporal_patterns",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_directory_structure",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "find_critical_modules",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 26,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_dashboard_panels",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 46,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "analyze_structure",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 45,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_update_dashboard_metrics",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 63,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_module",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 30,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_categorize_module",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 46,
      "complexity_score": 16,
      "parameter_count": 3,
      "return_statements": 10,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_extract_imports",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 11,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_functions",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_classes",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 62,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_constants",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 9,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_determine_access_level",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 10,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_decorator_name",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_count_node_lines",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cyclomatic_complexity",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_extract_function_calls",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 13,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_identify_api_surface",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_module_complexity",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_relationships",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 66,
      "complexity_score": 21,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_build_dependency_graph",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_architectural_elements",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 28,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_detect_patterns_and_issues",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 51,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_should_analyze_file",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 13,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_module_dependencies",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_module_dependents",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_critical_modules",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_structure_statistics",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 33,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_structure_report",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "line_count": 48,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_hierarchical_analyzer",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_codebase",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_scan_metadata",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 40,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_extract_imports_quick",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_classes_quick",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_extract_functions_quick",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_module_name",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_hash_file_content",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_functional_clusters",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 39,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_infer_module_purpose",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 30,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_cross_cutting_concerns",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 20,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_merge_small_clusters",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 25,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_clusters_progressively",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 20,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_single_cluster",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_file_detailed",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 16,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_large_file_chunked",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 27,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_long_methods",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_check_complex_classes",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 30,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_code_duplication",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_god_objects",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 27,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 7,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_similarity_score",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_cluster_refactoring",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 41,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_find_circular_dependencies",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 22,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_has_cycle_dfs",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 6,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_cluster_metrics",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 26,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_build_hierarchy",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_codebase_summary",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_refactor_roadmap",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 37,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_refactoring_phases",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 49,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_build_dependency_graph",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 13,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_priority_score",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 10,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_assess_refactoring_risk",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_analysis",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "line_count": 28,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dashboard_builder",
      "file_path": "TestMaster\\reporting\\dashboard_builder.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_performance_dashboard",
      "file_path": "TestMaster\\reporting\\dashboard_builder.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\reporting\\dashboard_builder.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "build_dashboard",
      "file_path": "TestMaster\\reporting\\dashboard_builder.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_data_collector",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collect_system_metrics",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_collection",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_collection",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collect_data",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 16,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_collect_async_data",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_streaming_data",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_telemetry_data",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_system_data",
      "file_path": "TestMaster\\reporting\\data_collector.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics_analyzer",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_performance_metrics",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_analysis",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_trends",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_anomalies",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\reporting\\metrics_analyzer.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_report_generator",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_performance_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 21,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 34,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_initialize_templates",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 90,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_collect_report_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_system_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_component_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 41,
      "complexity_score": 9,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_collect_async_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 30,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 8,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_collect_streaming_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_collect_test_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_sections",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 39,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_executive_summary",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_system_overview_sections",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_component_performance_sections",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_async_processing_sections",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_streaming_generation_sections",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_system_metrics",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_component_status",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_component_performance",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 11,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_format_async_component",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_format_streaming_component",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_trends_section",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_recommendations_section",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_report_content",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 5,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_create_json_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 22,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_csv_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_html_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 37,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_create_markdown_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_save_report",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_report_info",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_recent_reports",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_generator_statistics",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 17,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_system_overview_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_component_performance_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_async_processing_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_streaming_generation_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_test_execution_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_telemetry_summary_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_trend_analysis_template",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_report_scheduler",
      "file_path": "TestMaster\\reporting\\report_scheduler.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "schedule_automated_reports",
      "file_path": "TestMaster\\reporting\\report_scheduler.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\reporting\\report_scheduler.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_scheduler",
      "file_path": "TestMaster\\reporting\\report_scheduler.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "schedule_report",
      "file_path": "TestMaster\\reporting\\report_scheduler.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\reporting\\report_scheduler.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_reporting_enabled",
      "file_path": "TestMaster\\reporting\\__init__.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure_reporting",
      "file_path": "TestMaster\\reporting\\__init__.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_reporting",
      "file_path": "TestMaster\\reporting\\__init__.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "calculate_summary",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 32,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "assess_compliance",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 28,
      "complexity_score": 3,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_compliance_rule",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 28,
      "complexity_score": 4,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generic_compliance_check",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 33,
      "complexity_score": 5,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_is_finding_relevant_to_rule",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 27,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_load_compliance_rules",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 145,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_generate_remediation_plan",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_access_control",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_audit_logging",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_data_integrity",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_supported_standards",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_rules_for_standard",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_security_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 68,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_owasp_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 39,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_injection_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 46,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_authentication_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 35,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_vulnerability_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 24,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_vulnerability_test",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 26,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_auth_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 22,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_crypto_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 21,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_business_logic_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 21,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_compliance_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 18,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_create_compliance_test",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_access_sensitive_function",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_sql_function",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_auth_function",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_crypto_function",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_business_logic_function",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_auth_function_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 28,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_crypto_function_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_business_logic_tests",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_threat_models",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_attack_patterns",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_test_templates",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_applicable_threat_models",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_security_coverage",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_calculate_threat_coverage",
      "file_path": "TestMaster\\security\\security_test_generator.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 23,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 19,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "calculate_statistics",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 22,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_risk_score",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "to_dict",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 24,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "scan_directory",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 37,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "scan_ast",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_files",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 19,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_matches_patterns",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_scan_file",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 23,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_scan_ast_module",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_scan_ast_function",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 38,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_scan_ast_class",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_scan_line",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 46,
      "complexity_score": 12,
      "parameter_count": 6,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_dataflow",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 52,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_detect_file_language",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_security_patterns",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 76,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_load_cwe_database",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_owasp_mappings",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 15,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_security_sensitive_function",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_security_sensitive_class",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 8,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_security_checks",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_parameterized_queries",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_has_security_methods",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_vulnerability_title",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_vulnerability_description",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_vulnerability_recommendation",
      "file_path": "TestMaster\\security\\universal_scanner.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_collaborative_generator",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_collaboratively",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_initialize_default_agents",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_syntax_generator",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_logic_generator",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_coverage_generator",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "generate_collaboratively",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 13,
      "complexity_score": 5,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "initialize",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\streaming\\collaborative_generator.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_incremental_enhancer",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enhance_test_incrementally",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 34,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "enhance_test_incrementally",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 50,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_enhancement_worker",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 65,
      "complexity_score": 14,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_apply_refinement_stage",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 16,
      "complexity_score": 7,
      "parameter_count": 5,
      "return_statements": 7,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_refine_syntax",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 15,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enhance_logic",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_expand_coverage",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 25,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_improve_assertions",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 11,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enhance_documentation",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 18,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_optimize_test",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 25,
      "complexity_score": 8,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_calculate_quality_score",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 27,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_enhancement_result",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_refinement_history",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_enhancer_statistics",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "line_count": 19,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_feedback_collector",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collect_live_feedback",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 40,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_feedback_session",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 35,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "submit_feedback",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 50,
      "complexity_score": 8,
      "parameter_count": 6,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_collection",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_collection",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 8,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_feedback_queue",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 14,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_process_single_feedback",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 27,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_old_sessions",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_feedback_processor",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_session_feedback",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_feedback_summary",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 45,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get_active_sessions",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "close_session",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_collector_statistics",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_send_feedback_telemetry",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collection_worker",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "line_count": 16,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_stream_generator",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stream_generate_test",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 20,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 35,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_streaming_generation",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 49,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generation_worker",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 53,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_execute_generation_stage",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 15,
      "complexity_score": 7,
      "parameter_count": 6,
      "return_statements": 0,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_source",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 23,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_skeleton",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 27,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_implement_tests",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 28,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_enhance_tests",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 21,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_validate_tests",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_finalize_tests",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_emit_chunk",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 25,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_stream_chunks",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 20,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_session_progress",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_chunk_callback",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cancel_session",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_generator_statistics",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_stream_monitor",
      "file_path": "TestMaster\\streaming\\stream_monitor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_streaming",
      "file_path": "TestMaster\\streaming\\stream_monitor.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\streaming\\stream_monitor.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\streaming\\stream_monitor.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\streaming\\stream_monitor.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_streaming_enabled",
      "file_path": "TestMaster\\streaming\\__init__.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "configure_streaming",
      "file_path": "TestMaster\\streaming\\__init__.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown_streaming",
      "file_path": "TestMaster\\streaming\\__init__.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_flow_analyzer",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_execution_flow",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "visualize_flow",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "detect_bottlenecks",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 35,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start_flow",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 47,
      "complexity_score": 11,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "end_flow",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 46,
      "complexity_score": 9,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "analyze_flows",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 74,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_build_flow_paths",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_path_nodes",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 12,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_create_flow_path",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 27,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_critical_paths",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_bottlenecks",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 20,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_analyze_parallelism",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 28,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 34,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "visualize_flow",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 20,
      "complexity_score": 7,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_flow_statistics",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_data",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_analyzer_thread",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collect_children",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyzer_worker",
      "file_path": "TestMaster\\telemetry\\flow_analyzer.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_performance_monitor",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_execution",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 13,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 4,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_operation",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 37,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_system_monitoring",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_memory_usage",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_get_cpu_percent",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "track_operation",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 62,
      "complexity_score": 8,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_update_component_stats",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 44,
      "complexity_score": 12,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_component_stats",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_bottlenecks",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 40,
      "complexity_score": 10,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_performance_trends",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 48,
      "complexity_score": 12,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_active_operations",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_metrics",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_metrics",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_monitoring_thread",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 15,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_periodic_analysis",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "decorator",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitoring_worker",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 9,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "wrapper",
      "file_path": "TestMaster\\telemetry\\performance_monitor.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_system_profiler",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "profile_system",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_system_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_resources",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 40,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_psutil",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_monitoring",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 25,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop_monitoring",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_system_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 84,
      "complexity_score": 10,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_collect_basic_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 22,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_process_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 32,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_check_resource_alerts",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 27,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_threshold_alert",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 47,
      "complexity_score": 5,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_current_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 5,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_metrics_history",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_resource_trends",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_active_alerts",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "resolve_alert",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_profiler_statistics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 19,
      "complexity_score": 4,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_metrics",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "monitor_worker",
      "file_path": "TestMaster\\telemetry\\system_profiler.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_telemetry_collector",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 35,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_generate_user_hash",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 8,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_system_info",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 27,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "record_event",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 46,
      "complexity_score": 9,
      "parameter_count": 8,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_sanitize_metadata",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 32,
      "complexity_score": 11,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_sanitize_error",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 14,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_event_listener",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 6,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "remove_event_listener",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 7,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_events",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 24,
      "complexity_score": 6,
      "parameter_count": 4,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_statistics",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 24,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_events",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 18,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_events",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_collection_thread",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_periodic_maintenance",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 7,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "collection_worker",
      "file_path": "TestMaster\\telemetry\\telemetry_collector.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_telemetry_dashboard",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_telemetry_report",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_telemetry_data",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 36,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "generate_report",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 62,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_collect_telemetry_data",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 31,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_collect_performance_data",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 35,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_collect_flow_analysis",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_collect_system_metrics",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 24,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_alerts",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 56,
      "complexity_score": 12,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_recommendations",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 31,
      "complexity_score": 14,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_health_score",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 31,
      "complexity_score": 11,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_create_summary",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 26,
      "complexity_score": 1,
      "parameter_count": 5,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dashboard_data",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 31,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "export_report",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 28,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_dashboard_statistics",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_start_refresh_thread",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 16,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "shutdown",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 8,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "refresh_worker",
      "file_path": "TestMaster\\telemetry\\telemetry_dashboard.py",
      "line_count": 10,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_is_telemetry_disabled",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 7,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "is_telemetry_enabled",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "enable_telemetry",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "disable_telemetry",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 6,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_ensure_atexit_handler",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 8,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "cleanup_telemetry",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 22,
      "complexity_score": 12,
      "parameter_count": 0,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_telemetry_status",
      "file_path": "TestMaster\\telemetry\\__init__.py",
      "line_count": 41,
      "complexity_score": 3,
      "parameter_count": 0,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "create_test_failure_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_idle_module_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 11,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_coverage_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "setup_alert_system",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 46,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "start",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 13,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "stop",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "create_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 61,
      "complexity_score": 7,
      "parameter_count": 9,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "acknowledge_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "resolve_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 35,
      "complexity_score": 6,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "add_alert_rule",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 27,
      "complexity_score": 2,
      "parameter_count": 7,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "remove_alert_rule",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "register_channel_handler",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 9,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_setup_default_handlers",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 45,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_process_alerts",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_send_alert_to_channels",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 12,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_apply_alert_rules",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 17,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_should_suppress_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_check_escalations",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 9,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_escalate_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_cleanup_old_alerts",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 12,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_alert_id",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_load_persisted_alerts",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 17,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_persist_alerts",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 22,
      "complexity_score": 7,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_dict_to_alert",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 32,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "get_active_alerts",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 18,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_alert_statistics",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 16,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "clear_resolved_alerts",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 23,
      "complexity_score": 9,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "console_handler",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "file_handler",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 22,
      "complexity_score": 6,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "dashboard_handler",
      "file_path": "TestMaster\\ui\\alert_system.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start_dashboard",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_system_status",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_test_result",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_coverage_data",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_idle_modules",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_breaking_tests",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_alert",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dashboard_state",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 15,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "open",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 10,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_close",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "on_message",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 18,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "broadcast_update",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 17,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_generate_dashboard_html",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 64,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_get_css_styles",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 102,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_get_javascript",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 213,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "get",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 19,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "start",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 33,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "stop",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 11,
      "complexity_score": 4,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_run_server",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_system_status",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_test_result",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_coverage_data",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_idle_modules",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_breaking_tests",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "add_alert",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 4,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_broadcast_update",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 4,
      "complexity_score": 3,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_dashboard_url",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_connected_clients_count",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "line_count": 5,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "setup_metrics_display",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 0,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 40,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "update_coverage_metrics",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 30,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_quality_metrics",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 28,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_performance_metrics",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 27,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_trim_history",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 4,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_coverage_widget_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 16,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_quality_widget_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 18,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_performance_widget_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 17,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_coverage_heatmap_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 27,
      "complexity_score": 5,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "get_trend_analysis",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 62,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_calculate_trend",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 17,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_prepare_chart_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 46,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_prepare_heatmap_chart_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 14,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_prepare_trend_chart_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 18,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_all_widget_data",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 12,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "export_metrics_report",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 46,
      "complexity_score": 3,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_widget_html",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 2,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_widget_html",
      "file_path": "TestMaster\\ui\\metrics_display.py",
      "line_count": 33,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 5,
      "complexity_score": 1,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": false,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "wait_if_needed",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 9,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 12,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "verify_test",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "analyze_test_structure",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 41,
      "complexity_score": 16,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 9,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "calculate_quality_score",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 24,
      "complexity_score": 5,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "find_module_for_test",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 23,
      "complexity_score": 6,
      "parameter_count": 2,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "update_stats",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 9,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "get_stats",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "print_stats",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 13,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "heal_syntax_errors",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 24,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_heal_with_ai",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 3,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_basic_syntax_healing",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 25,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "analyze_test_quality",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 25,
      "complexity_score": 2,
      "parameter_count": 3,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_identify_issues",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 17,
      "complexity_score": 11,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_generate_suggestions",
      "file_path": "TestMaster\\verification\\base.py",
      "line_count": 15,
      "complexity_score": 7,
      "parameter_count": 4,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 31,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 31,
      "complexity_score": 7,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_auto_initialize",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 15,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_provider_mode",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 6,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_sdk_mode",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 7,
      "complexity_score": 2,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "verify_test",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 68,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_analyze_coverage",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 41,
      "complexity_score": 16,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 6,
      "docstring_present": true,
      "modularization_priority": "HIGH"
    },
    {
      "name": "_analyze_complexity",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 34,
      "complexity_score": 10,
      "parameter_count": 2,
      "return_statements": 2,
      "nested_depth": 5,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "generate_quality_report",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 76,
      "complexity_score": 7,
      "parameter_count": 3,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_print_quality_report_summary",
      "file_path": "TestMaster\\verification\\quality.py",
      "line_count": 22,
      "complexity_score": 4,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "main",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 31,
      "complexity_score": 4,
      "parameter_count": 0,
      "return_statements": 3,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "__init__",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 30,
      "complexity_score": 6,
      "parameter_count": 5,
      "return_statements": 0,
      "nested_depth": 4,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_auto_initialize",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 23,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 2,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_provider_mode",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 10,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_sdk_mode",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 11,
      "complexity_score": 3,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_init_template_mode",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 3,
      "complexity_score": 1,
      "parameter_count": 1,
      "return_statements": 0,
      "nested_depth": 0,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "verify_test",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 96,
      "complexity_score": 9,
      "parameter_count": 3,
      "return_statements": 4,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "_heal_with_ai",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 50,
      "complexity_score": 8,
      "parameter_count": 3,
      "return_statements": 3,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "LOW"
    },
    {
      "name": "_iterative_improvement",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 79,
      "complexity_score": 13,
      "parameter_count": 3,
      "return_statements": 5,
      "nested_depth": 3,
      "docstring_present": true,
      "modularization_priority": "MEDIUM"
    },
    {
      "name": "verify_batch",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 17,
      "complexity_score": 2,
      "parameter_count": 2,
      "return_statements": 1,
      "nested_depth": 1,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    },
    {
      "name": "_print_batch_summary",
      "file_path": "TestMaster\\verification\\self_healing.py",
      "line_count": 28,
      "complexity_score": 5,
      "parameter_count": 2,
      "return_statements": 0,
      "nested_depth": 2,
      "docstring_present": true,
      "modularization_priority": "MINIMAL"
    }
  ],
  "modularization_recommendations": [
    {
      "original_function": "_execute_benchmark",
      "file_path": "TestMaster\\agent_qa\\benchmarking_suite.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__execute_benchmark_should_continue",
        "__execute_benchmark_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_generate_recommendations",
      "file_path": "TestMaster\\agent_qa\\quality_inspector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__generate_recommendations_should_continue",
        "__generate_recommendations_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_grade",
      "file_path": "TestMaster\\agent_qa\\scoring_system.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_grade_should_continue",
        "__calculate_grade_process_item"
      ],
      "rationale": "Function has nesting depth 10, exceeds 5 levels"
    },
    {
      "original_function": "_detect_rest_endpoints",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_rest_endpoints_should_continue",
        "__detect_rest_endpoints_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_has_n_plus_one_risk",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__has_n_plus_one_risk_should_continue",
        "__has_n_plus_one_risk_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_interface_segregation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_interface_segregation_should_continue",
        "__analyze_interface_segregation_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_interface",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\api_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_interface_should_continue",
        "__analyze_interface_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_extract_structural_signature",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\clone_detection.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_structural_signature_should_continue",
        "__extract_structural_signature_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_detailed_cyclomatic_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_detailed_cyclomatic_complexity_should_continue",
        "__calculate_detailed_cyclomatic_complexity_process_item"
      ],
      "rationale": "Function has nesting depth 11, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_cognitive_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_cognitive_complexity_should_continue",
        "__calculate_cognitive_complexity_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_class_complexity",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_class_complexity_should_continue",
        "__calculate_class_complexity_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "analyze_node",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_analyze_node_should_continue",
        "_analyze_node_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_cpu_bound_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_cpu_bound_operations_should_continue",
        "__detect_cpu_bound_operations_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_shared_state",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_shared_state_should_continue",
        "__detect_shared_state_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_unprotected_mutations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_unprotected_mutations_should_continue",
        "__detect_unprotected_mutations_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_check_then_act",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_check_then_act_should_continue",
        "__detect_check_then_act_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_read_modify_write",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_read_modify_write_should_continue",
        "__detect_read_modify_write_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_nested_locks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_nested_locks_should_continue",
        "__detect_nested_locks_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_blocking_in_async",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_blocking_in_async_should_continue",
        "__detect_blocking_in_async_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_gil_contentious_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_gil_contentious_patterns_should_continue",
        "__detect_gil_contentious_patterns_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_double_checked_locking",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_double_checked_locking_should_continue",
        "__detect_double_checked_locking_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_coupling_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__calculate_coupling_metrics_check_conditions",
        "__calculate_coupling_metrics_execute",
        "__calculate_coupling_metrics_handle_errors"
      ],
      "rationale": "Function has complexity score 22, exceeds 15 threshold"
    },
    {
      "original_function": "_calculate_coupling_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_coupling_metrics_should_continue",
        "__calculate_coupling_metrics_process_item"
      ],
      "rationale": "Function has nesting depth 11, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_lcom",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__calculate_lcom_check_conditions",
        "__calculate_lcom_execute",
        "__calculate_lcom_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_calculate_lcom",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_lcom_should_continue",
        "__calculate_lcom_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_init_crypto_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__init_crypto_patterns_validate_input",
        "__init_crypto_patterns_process",
        "__init_crypto_patterns_format_output"
      ],
      "rationale": "Function has 182 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_analyze_crypto_libraries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_crypto_libraries_should_continue",
        "__analyze_crypto_libraries_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_assess_algorithms",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__assess_algorithms_should_continue",
        "__assess_algorithms_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_identify_crypto_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_crypto_issues_should_continue",
        "__identify_crypto_issues_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_key_management",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_key_management_should_continue",
        "__analyze_key_management_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_ssl_tls",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_ssl_tls_should_continue",
        "__analyze_ssl_tls_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_random_generation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_random_generation_should_continue",
        "__analyze_random_generation_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_certificates",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_certificates_should_continue",
        "__analyze_certificates_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_sqlalchemy_n_plus_one",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_sqlalchemy_n_plus_one_should_continue",
        "__detect_sqlalchemy_n_plus_one_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_django_n_plus_one",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_django_n_plus_one_should_continue",
        "__detect_django_n_plus_one_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_transaction_blocks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_transaction_blocks_should_continue",
        "__detect_transaction_blocks_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_pool_configurations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_pool_configurations_should_continue",
        "__detect_pool_configurations_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_sql_injection_risks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_sql_injection_risks_should_continue",
        "__detect_sql_injection_risks_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_pool_exhaustion_risks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\database_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_pool_exhaustion_risks_should_continue",
        "__detect_pool_exhaustion_risks_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_retry_decorators",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_retry_decorators_should_continue",
        "__detect_retry_decorators_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_exception_handling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_exception_handling_should_continue",
        "__analyze_exception_handling_process_item"
      ],
      "rationale": "Function has nesting depth 10, exceeds 5 levels"
    },
    {
      "original_function": "_detect_error_transformation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_error_transformation_should_continue",
        "__detect_error_transformation_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_error_suppression",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_error_suppression_should_continue",
        "__detect_error_suppression_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_error_logging",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_error_logging_should_continue",
        "__detect_error_logging_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_fallback_values",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_fallback_values_should_continue",
        "__detect_fallback_values_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_extract_retry_config",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_retry_config_should_continue",
        "__extract_retry_config_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_extract_max_retry_configs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_max_retry_configs_should_continue",
        "__extract_max_retry_configs_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_extract_threshold_configs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_threshold_configs_should_continue",
        "__extract_threshold_configs_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_unlogged_errors",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_unlogged_errors_should_continue",
        "__detect_unlogged_errors_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_classify_refactoring_type",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_refactoring_type_should_continue",
        "__classify_refactoring_type_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_temporal_coupling",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_temporal_coupling_should_continue",
        "__analyze_temporal_coupling_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_call_graphs",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_call_graphs_should_continue",
        "__analyze_call_graphs_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_inheritance_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_inheritance_metrics_should_continue",
        "__calculate_inheritance_metrics_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_polymorphism_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_polymorphism_metrics_should_continue",
        "__calculate_polymorphism_metrics_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_is_abstract_method",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__is_abstract_method_should_continue",
        "__is_abstract_method_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_naming_conventions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__analyze_naming_conventions_validate_input",
        "__analyze_naming_conventions_process",
        "__analyze_naming_conventions_format_output"
      ],
      "rationale": "Function has 110 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_analyze_naming_conventions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_naming_conventions_check_conditions",
        "__analyze_naming_conventions_execute",
        "__analyze_naming_conventions_handle_errors"
      ],
      "rationale": "Function has complexity score 20, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_naming_conventions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_naming_conventions_should_continue",
        "__analyze_naming_conventions_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_vocabulary_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_vocabulary_metrics_should_continue",
        "__calculate_vocabulary_metrics_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_comments",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_comments_should_continue",
        "__analyze_comments_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_assess_documentation_quality",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__assess_documentation_quality_should_continue",
        "__assess_documentation_quality_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_abbreviations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_abbreviations_should_continue",
        "__analyze_abbreviations_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_extract_domain_terms",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_domain_terms_should_continue",
        "__extract_domain_terms_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_generate_comprehensive_summary",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__generate_comprehensive_summary_check_conditions",
        "__generate_comprehensive_summary_execute",
        "__generate_comprehensive_summary_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_generate_comprehensive_recommendations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__generate_comprehensive_recommendations_check_conditions",
        "__generate_comprehensive_recommendations_execute",
        "__generate_comprehensive_recommendations_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_perform_cross_analysis",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__perform_cross_analysis_check_conditions",
        "__perform_cross_analysis_execute",
        "__perform_cross_analysis_handle_errors"
      ],
      "rationale": "Function has complexity score 17, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_resource_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__detect_resource_leaks_check_conditions",
        "__detect_resource_leaks_execute",
        "__detect_resource_leaks_handle_errors"
      ],
      "rationale": "Function has complexity score 19, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_resource_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_resource_leaks_should_continue",
        "__detect_resource_leaks_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_reference_cycles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_reference_cycles_should_continue",
        "__detect_reference_cycles_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_self_references",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_self_references_should_continue",
        "__detect_self_references_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_detect_circular_relationships",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_circular_relationships_should_continue",
        "__detect_circular_relationships_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_detect_event_listener_cycles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_event_listener_cycles_should_continue",
        "__detect_event_listener_cycles_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_cache_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__detect_cache_leaks_check_conditions",
        "__detect_cache_leaks_execute",
        "__detect_cache_leaks_handle_errors"
      ],
      "rationale": "Function has complexity score 20, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_cache_leaks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_cache_leaks_should_continue",
        "__detect_cache_leaks_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_detect_global_accumulation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_global_accumulation_should_continue",
        "__detect_global_accumulation_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_unbounded_growth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_unbounded_growth_should_continue",
        "__detect_unbounded_growth_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_quadratic_growth",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_quadratic_growth_should_continue",
        "__detect_quadratic_growth_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_short_lived_large_objects",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_short_lived_large_objects_should_continue",
        "__detect_short_lived_large_objects_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_unnecessary_temporaries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_unnecessary_temporaries_should_continue",
        "__detect_unnecessary_temporaries_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_high_allocation_rate",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_high_allocation_rate_should_continue",
        "__detect_high_allocation_rate_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_reference_counting_issues",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_reference_counting_issues_should_continue",
        "__detect_reference_counting_issues_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_find_generator_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__find_generator_opportunities_should_continue",
        "__find_generator_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_find_string_optimizations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__find_string_optimizations_should_continue",
        "__find_string_optimizations_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_find_collection_optimizations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__find_collection_optimizations_should_continue",
        "__find_collection_optimizations_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_is_large_comprehension",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__is_large_comprehension_should_continue",
        "__is_large_comprehension_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_loops_check_conditions",
        "__analyze_loops_execute",
        "__analyze_loops_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_loops",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_loops_should_continue",
        "__analyze_loops_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_classify_sorting_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_sorting_algorithm_should_continue",
        "__classify_sorting_algorithm_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_classify_graph_algorithm",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_graph_algorithm_should_continue",
        "__classify_graph_algorithm_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_memory_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_memory_allocations_should_continue",
        "__detect_memory_allocations_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_detect_large_objects",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_large_objects_should_continue",
        "__detect_large_objects_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_circular_references",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_circular_references_should_continue",
        "__detect_circular_references_process_item"
      ],
      "rationale": "Function has nesting depth 10, exceeds 5 levels"
    },
    {
      "original_function": "_identify_pooling_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_pooling_opportunities_should_continue",
        "__identify_pooling_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_n_plus_one_queries",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_n_plus_one_queries_should_continue",
        "__detect_n_plus_one_queries_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_missing_indexes",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_missing_indexes_should_continue",
        "__detect_missing_indexes_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_gil_bottlenecks",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_gil_bottlenecks_should_continue",
        "__detect_gil_bottlenecks_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_identify_async_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_async_opportunities_should_continue",
        "__identify_async_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_identify_parallelization_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_parallelization_opportunities_should_continue",
        "__identify_parallelization_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_identify_cpu_intensive_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_cpu_intensive_operations_should_continue",
        "__identify_cpu_intensive_operations_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_performance_anti_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_performance_anti_patterns_should_continue",
        "__detect_performance_anti_patterns_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "analyze_node",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_analyze_node_check_conditions",
        "_analyze_node_execute",
        "_analyze_node_handle_errors"
      ],
      "rationale": "Function has complexity score 17, exceeds 15 threshold"
    },
    {
      "original_function": "analyze_node",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_analyze_node_should_continue",
        "_analyze_node_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_assess_readability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__assess_readability_check_conditions",
        "__assess_readability_execute",
        "__assess_readability_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_assess_reusability",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__assess_reusability_should_continue",
        "__assess_reusability_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_code_smells",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_code_smells_should_continue",
        "__detect_code_smells_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_file_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__detect_file_operations_check_conditions",
        "__detect_file_operations_execute",
        "__detect_file_operations_handle_errors"
      ],
      "rationale": "Function has complexity score 24, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_file_operations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_file_operations_should_continue",
        "__detect_file_operations_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_check_path_safety",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__check_path_safety_check_conditions",
        "__check_path_safety_execute",
        "__check_path_safety_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_check_path_safety",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__check_path_safety_should_continue",
        "__check_path_safety_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_http_calls",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_http_calls_should_continue",
        "__detect_http_calls_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_check_timeout_configuration",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__check_timeout_configuration_should_continue",
        "__check_timeout_configuration_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_detect_retry_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__detect_retry_logic_check_conditions",
        "__detect_retry_logic_execute",
        "__detect_retry_logic_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_retry_logic",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_retry_logic_should_continue",
        "__detect_retry_logic_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_identify_batch_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_batch_opportunities_should_continue",
        "__identify_batch_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_check_transaction_management",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__check_transaction_management_should_continue",
        "__check_transaction_management_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_check_cursor_management",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__check_cursor_management_should_continue",
        "__check_cursor_management_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_memory_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_memory_allocations_should_continue",
        "__detect_memory_allocations_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_large_allocations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_large_allocations_should_continue",
        "__detect_large_allocations_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_cache_implementations",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_cache_implementations_should_continue",
        "__detect_cache_implementations_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_identify_cache_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_cache_opportunities_should_continue",
        "__identify_cache_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_stream_processing",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_stream_processing_should_continue",
        "__analyze_stream_processing_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_resource_cleanup",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_resource_cleanup_should_continue",
        "__analyze_resource_cleanup_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_init_security_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__init_security_patterns_validate_input",
        "__init_security_patterns_process",
        "__init_security_patterns_format_output"
      ],
      "rationale": "Function has 170 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_detect_vulnerability_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_vulnerability_patterns_should_continue",
        "__detect_vulnerability_patterns_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_input_validation",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_input_validation_should_continue",
        "__analyze_input_validation_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_authorization",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_authorization_should_continue",
        "__analyze_authorization_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_cryptography_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_cryptography_usage_check_conditions",
        "__analyze_cryptography_usage_execute",
        "__analyze_cryptography_usage_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_cryptography_usage",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_cryptography_usage_should_continue",
        "__analyze_cryptography_usage_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_get_security_grade",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\security_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__get_security_grade_should_continue",
        "__get_security_grade_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_sloc_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_sloc_metrics_should_continue",
        "__calculate_sloc_metrics_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_find_docstring_lines",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\software_metrics.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__find_docstring_lines_should_continue",
        "__find_docstring_lines_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_collect_code_metrics",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__collect_code_metrics_should_continue",
        "__collect_code_metrics_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_classify_distribution_shape",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_distribution_shape_should_continue",
        "__classify_distribution_shape_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_detect_design_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__detect_design_patterns_validate_input",
        "__detect_design_patterns_process",
        "__detect_design_patterns_format_output"
      ],
      "rationale": "Function has 169 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_detect_design_patterns",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__detect_design_patterns_check_conditions",
        "__detect_design_patterns_execute",
        "__detect_design_patterns_handle_errors"
      ],
      "rationale": "Function has complexity score 22, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_dependency_injection",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_dependency_injection_should_continue",
        "__detect_dependency_injection_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_code_structure",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_code_structure_should_continue",
        "__analyze_code_structure_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_pip_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_pip_dependencies_should_continue",
        "__analyze_pip_dependencies_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_conda_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_conda_dependencies_should_continue",
        "__analyze_conda_dependencies_process_item"
      ],
      "rationale": "Function has nesting depth 10, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_poetry_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_poetry_dependencies_should_continue",
        "__analyze_poetry_dependencies_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_direct_imports",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_direct_imports_should_continue",
        "__analyze_direct_imports_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_check_license_compliance",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__check_license_compliance_should_continue",
        "__check_license_compliance_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_identify_outdated_packages",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_outdated_packages_should_continue",
        "__identify_outdated_packages_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_get_tested_functions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__get_tested_functions_should_continue",
        "__get_tested_functions_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_exception_paths",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_exception_paths_should_continue",
        "__analyze_exception_paths_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_test_pyramid",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_test_pyramid_check_conditions",
        "__analyze_test_pyramid_execute",
        "__analyze_test_pyramid_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_test_pyramid",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_test_pyramid_should_continue",
        "__analyze_test_pyramid_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_mock_dependencies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_mock_dependencies_should_continue",
        "__analyze_mock_dependencies_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_classify_test_doubles",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_test_doubles_should_continue",
        "__classify_test_doubles_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_count_assertions",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__count_assertions_should_continue",
        "__count_assertions_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_count_mutation_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__count_mutation_opportunities_should_continue",
        "__count_mutation_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_identify_property_testing_opportunities",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__identify_property_testing_opportunities_should_continue",
        "__identify_property_testing_opportunities_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_suggest_hypothesis_strategies",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__suggest_hypothesis_strategies_should_continue",
        "__suggest_hypothesis_strategies_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_predict_flaky_tests",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__predict_flaky_tests_check_conditions",
        "__predict_flaky_tests_execute",
        "__predict_flaky_tests_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_predict_flaky_tests",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__predict_flaky_tests_should_continue",
        "__predict_flaky_tests_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_has_float_comparisons",
      "file_path": "TestMaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__has_float_comparisons_should_continue",
        "__has_float_comparisons_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_calculate_next_run",
      "file_path": "TestMaster\\async_processing\\concurrent_scheduler.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__calculate_next_run_should_continue",
        "__calculate_next_run_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_initialize_default_configuration",
      "file_path": "TestMaster\\core\\config.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__initialize_default_configuration_validate_input",
        "__initialize_default_configuration_process",
        "__initialize_default_configuration_format_output"
      ],
      "rationale": "Function has 131 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "merge_contexts",
      "file_path": "TestMaster\\core\\context_manager.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_merge_contexts_should_continue",
        "_merge_contexts_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_apply_env_overrides",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__apply_env_overrides_should_continue",
        "__apply_env_overrides_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_merge_inherited_configs",
      "file_path": "TestMaster\\core\\layer_manager.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__merge_inherited_configs_should_continue",
        "__merge_inherited_configs_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "get_tracking_statistics",
      "file_path": "TestMaster\\core\\tracking_manager.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_get_tracking_statistics_check_conditions",
        "_get_tracking_statistics_execute",
        "_get_tracking_statistics_handle_errors"
      ],
      "rationale": "Function has complexity score 20, exceeds 15 threshold"
    },
    {
      "original_function": "_execute_workflow",
      "file_path": "TestMaster\\core\\workflow_graph.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__execute_workflow_should_continue",
        "__execute_workflow_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_convert_python_ast",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__convert_python_ast_should_continue",
        "__convert_python_ast_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_convert_python_function",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__convert_python_function_check_conditions",
        "__convert_python_function_execute",
        "__convert_python_function_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_convert_python_function",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__convert_python_function_should_continue",
        "__convert_python_function_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_convert_python_class",
      "file_path": "TestMaster\\core\\ast_abstraction\\language_parsers.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__convert_python_class_should_continue",
        "__convert_python_class_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_convert_test",
      "file_path": "TestMaster\\core\\framework_abstraction\\framework_adapters.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__convert_test_check_conditions",
        "__convert_test_execute",
        "__convert_test_handle_errors"
      ],
      "rationale": "Function has complexity score 17, exceeds 15 threshold"
    },
    {
      "original_function": "_detect_file_language",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_file_language_should_continue",
        "__detect_file_language_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_syntax_features",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_syntax_features_should_continue",
        "__analyze_syntax_features_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_detect_file_frameworks",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__detect_file_frameworks_should_continue",
        "__detect_file_frameworks_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_dependencies",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_dependencies_should_continue",
        "__analyze_dependencies_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_parse_requirements_txt",
      "file_path": "TestMaster\\core\\language_detection\\universal_detector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__parse_requirements_txt_should_continue",
        "__parse_requirements_txt_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_topological_sort",
      "file_path": "TestMaster\\flow_optimizer\\dependency_resolver.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__topological_sort_should_continue",
        "__topological_sort_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_create_execution_batches",
      "file_path": "TestMaster\\flow_optimizer\\parallel_executor.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__create_execution_batches_should_continue",
        "__create_execution_batches_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "build_test_for_module",
      "file_path": "TestMaster\\generators\\base.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "_build_test_for_module_validate_input",
        "_build_test_for_module_process",
        "_build_test_for_module_format_output"
      ],
      "rationale": "Function has 282 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "build_test_for_module",
      "file_path": "TestMaster\\generators\\base.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_build_test_for_module_check_conditions",
        "_build_test_for_module_execute",
        "_build_test_for_module_handle_errors"
      ],
      "rationale": "Function has complexity score 35, exceeds 15 threshold"
    },
    {
      "original_function": "analyze_module_ast",
      "file_path": "TestMaster\\generators\\base.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_analyze_module_ast_check_conditions",
        "_analyze_module_ast_execute",
        "_analyze_module_ast_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "analyze_module_ast",
      "file_path": "TestMaster\\generators\\base.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_analyze_module_ast_should_continue",
        "_analyze_module_ast_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_generate_test_template",
      "file_path": "TestMaster\\generators\\intelligent.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__generate_test_template_validate_input",
        "__generate_test_template_process",
        "__generate_test_template_format_output"
      ],
      "rationale": "Function has 131 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_validate_performance_standards",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__validate_performance_standards_should_continue",
        "__validate_performance_standards_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_validate_functional_requirements",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__validate_functional_requirements_check_conditions",
        "__validate_functional_requirements_execute",
        "__validate_functional_requirements_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "_validate_functional_requirements",
      "file_path": "TestMaster\\integration\\final_integration_test.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__validate_functional_requirements_should_continue",
        "__validate_functional_requirements_process_item"
      ],
      "rationale": "Function has nesting depth 12, exceeds 5 levels"
    },
    {
      "original_function": "_route_message",
      "file_path": "TestMaster\\intelligence\\bridges\\protocol_communication_bridge.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__route_message_should_continue",
        "__route_message_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "restore_from_checkpoint",
      "file_path": "TestMaster\\intelligence\\bridges\\session_tracking_bridge.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_restore_from_checkpoint_check_conditions",
        "_restore_from_checkpoint_execute",
        "_restore_from_checkpoint_handle_errors"
      ],
      "rationale": "Function has complexity score 21, exceeds 15 threshold"
    },
    {
      "original_function": "_assess_docstring_completeness",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__assess_docstring_completeness_check_conditions",
        "__assess_docstring_completeness_execute",
        "__assess_docstring_completeness_handle_errors"
      ],
      "rationale": "Function has complexity score 21, exceeds 15 threshold"
    },
    {
      "original_function": "_assess_technical_depth",
      "file_path": "TestMaster\\intelligence\\documentation\\core\\quality_assessor.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__assess_technical_depth_check_conditions",
        "__assess_technical_depth_execute",
        "__assess_technical_depth_handle_errors"
      ],
      "rationale": "Function has complexity score 17, exceeds 15 threshold"
    },
    {
      "original_function": "_build_api_structure",
      "file_path": "TestMaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__build_api_structure_check_conditions",
        "__build_api_structure_execute",
        "__build_api_structure_handle_errors"
      ],
      "rationale": "Function has complexity score 21, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_staged_changes",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_staged_changes_should_continue",
        "__analyze_staged_changes_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_change_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_change_patterns_check_conditions",
        "__analyze_change_patterns_execute",
        "__analyze_change_patterns_handle_errors"
      ],
      "rationale": "Function has complexity score 20, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_change_patterns",
      "file_path": "TestMaster\\intelligence\\documentation\\integrations\\git_integration.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_change_patterns_should_continue",
        "__analyze_change_patterns_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_check_function_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__check_function_documentation_check_conditions",
        "__check_function_documentation_execute",
        "__check_function_documentation_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_check_class_documentation",
      "file_path": "TestMaster\\intelligence\\documentation\\quality\\completeness_checker.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__check_class_documentation_check_conditions",
        "__check_class_documentation_execute",
        "__check_class_documentation_handle_errors"
      ],
      "rationale": "Function has complexity score 21, exceeds 15 threshold"
    },
    {
      "original_function": "_create_google_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_google_templates_validate_input",
        "__create_google_templates_process",
        "__create_google_templates_format_output"
      ],
      "rationale": "Function has 113 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_create_numpy_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_numpy_templates_validate_input",
        "__create_numpy_templates_process",
        "__create_numpy_templates_format_output"
      ],
      "rationale": "Function has 134 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_create_sphinx_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\docstring_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_sphinx_templates_validate_input",
        "__create_sphinx_templates_process",
        "__create_sphinx_templates_format_output"
      ],
      "rationale": "Function has 115 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_create_grpc_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\grpc_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_grpc_templates_validate_input",
        "__create_grpc_templates_process",
        "__create_grpc_templates_format_output"
      ],
      "rationale": "Function has 294 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_create_rest_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\rest_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_rest_templates_validate_input",
        "__create_rest_templates_process",
        "__create_rest_templates_format_output"
      ],
      "rationale": "Function has 487 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_create_websocket_templates",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\api\\websocket_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_websocket_templates_validate_input",
        "__create_websocket_templates_process",
        "__create_websocket_templates_format_output"
      ],
      "rationale": "Function has 419 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "create_comprehensive_template",
      "file_path": "TestMaster\\intelligence\\documentation\\templates\\readme_template_modules\\generic_templates.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "_create_comprehensive_template_validate_input",
        "_create_comprehensive_template_process",
        "_create_comprehensive_template_format_output"
      ],
      "rationale": "Function has 171 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_extract_json",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_json_should_continue",
        "__extract_json_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_extract_json",
      "file_path": "TestMaster\\intelligence\\hierarchical_planning\\llm_integration.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_json_should_continue",
        "__extract_json_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "evaluate",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_evaluate_should_continue",
        "_evaluate_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_apply_operator",
      "file_path": "TestMaster\\intelligence\\integration\\features\\feature_flags.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__apply_operator_should_continue",
        "__apply_operator_process_item"
      ],
      "rationale": "Function has nesting depth 10, exceeds 5 levels"
    },
    {
      "original_function": "_create_resolution_action",
      "file_path": "TestMaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__create_resolution_action_validate_input",
        "__create_resolution_action_process",
        "__create_resolution_action_format_output"
      ],
      "rationale": "Function has 104 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_evaluate_candidate",
      "file_path": "TestMaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__evaluate_candidate_should_continue",
        "__evaluate_candidate_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_add_evaluation_criteria",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__add_evaluation_criteria_should_continue",
        "__add_evaluation_criteria_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "strategy_evaluator",
      "file_path": "TestMaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_strategy_evaluator_should_continue",
        "_strategy_evaluator_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_extract_inheritance_dependencies",
      "file_path": "TestMaster\\mapping\\dependency_tracker.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_inheritance_dependencies_should_continue",
        "__extract_inheritance_dependencies_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_dispatch_event",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__dispatch_event_check_conditions",
        "__dispatch_event_execute",
        "__dispatch_event_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_get_commit_info",
      "file_path": "TestMaster\\monitoring\\file_watcher.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__get_commit_info_should_continue",
        "__get_commit_info_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "scan_for_idle_modules",
      "file_path": "TestMaster\\monitoring\\idle_detector.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_scan_for_idle_modules_should_continue",
        "_scan_for_idle_modules_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "detect_frameworks_in_directory",
      "file_path": "TestMaster\\orchestration\\framework_adapter.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_detect_frameworks_in_directory_should_continue",
        "_detect_frameworks_in_directory_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_generate_intelligent_tests",
      "file_path": "TestMaster\\orchestration\\universal_orchestrator.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__generate_intelligent_tests_check_conditions",
        "__generate_intelligent_tests_execute",
        "__generate_intelligent_tests_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_apply_tagging_rules",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__apply_tagging_rules_check_conditions",
        "__apply_tagging_rules_execute",
        "__apply_tagging_rules_handle_errors"
      ],
      "rationale": "Function has complexity score 29, exceeds 15 threshold"
    },
    {
      "original_function": "_apply_tagging_rules",
      "file_path": "TestMaster\\orchestrator\\file_tagger.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__apply_tagging_rules_should_continue",
        "__apply_tagging_rules_process_item"
      ],
      "rationale": "Function has nesting depth 11, exceeds 5 levels"
    },
    {
      "original_function": "_setup_investigators",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__setup_investigators_validate_input",
        "__setup_investigators_process",
        "__setup_investigators_format_output"
      ],
      "rationale": "Function has 269 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_setup_investigators",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__setup_investigators_check_conditions",
        "__setup_investigators_execute",
        "__setup_investigators_handle_errors"
      ],
      "rationale": "Function has complexity score 33, exceeds 15 threshold"
    },
    {
      "original_function": "_setup_evidence_collectors",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__setup_evidence_collectors_validate_input",
        "__setup_evidence_collectors_process",
        "__setup_evidence_collectors_format_output"
      ],
      "rationale": "Function has 214 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_setup_evidence_collectors",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__setup_evidence_collectors_check_conditions",
        "__setup_evidence_collectors_execute",
        "__setup_evidence_collectors_handle_errors"
      ],
      "rationale": "Function has complexity score 38, exceeds 15 threshold"
    },
    {
      "original_function": "_setup_evidence_collectors",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__setup_evidence_collectors_should_continue",
        "__setup_evidence_collectors_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "investigate_test_failure_impl",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "_investigate_test_failure_impl_validate_input",
        "_investigate_test_failure_impl_process",
        "_investigate_test_failure_impl_format_output"
      ],
      "rationale": "Function has 105 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "collect_dependency_map",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_collect_dependency_map_check_conditions",
        "_collect_dependency_map_execute",
        "_collect_dependency_map_handle_errors"
      ],
      "rationale": "Function has complexity score 18, exceeds 15 threshold"
    },
    {
      "original_function": "collect_dependency_map",
      "file_path": "TestMaster\\orchestrator\\investigator.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_collect_dependency_map_should_continue",
        "_collect_dependency_map_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_setup_default_decision_rules",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__setup_default_decision_rules_validate_input",
        "__setup_default_decision_rules_process",
        "__setup_default_decision_rules_format_output"
      ],
      "rationale": "Function has 137 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_setup_complexity_assessors",
      "file_path": "TestMaster\\orchestrator\\work_distributor.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__setup_complexity_assessors_check_conditions",
        "__setup_complexity_assessors_execute",
        "__setup_complexity_assessors_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_extract_execution_flow",
      "file_path": "TestMaster\\overview\\coverage_intelligence.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__extract_execution_flow_should_continue",
        "__extract_execution_flow_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_render_dashboard",
      "file_path": "TestMaster\\overview\\performance_dashboard.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__render_dashboard_validate_input",
        "__render_dashboard_process",
        "__render_dashboard_format_output"
      ],
      "rationale": "Function has 132 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_classify_failure",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_failure_should_continue",
        "__classify_failure_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_classify_regression_type",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__classify_regression_type_should_continue",
        "__classify_regression_type_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_generate_prediction_from_pattern",
      "file_path": "TestMaster\\overview\\regression_tracker.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__generate_prediction_from_pattern_check_conditions",
        "__generate_prediction_from_pattern_execute",
        "__generate_prediction_from_pattern_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_categorize_module",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__categorize_module_check_conditions",
        "__categorize_module_execute",
        "__categorize_module_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_relationships",
      "file_path": "TestMaster\\overview\\structure_mapper.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_relationships_check_conditions",
        "__analyze_relationships_execute",
        "__analyze_relationships_handle_errors"
      ],
      "rationale": "Function has complexity score 21, exceeds 15 threshold"
    },
    {
      "original_function": "_check_god_objects",
      "file_path": "TestMaster\\refactoring\\hierarchical_analyzer.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__check_god_objects_should_continue",
        "__check_god_objects_process_item"
      ],
      "rationale": "Function has nesting depth 7, exceeds 5 levels"
    },
    {
      "original_function": "_collect_async_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__collect_async_data_should_continue",
        "__collect_async_data_process_item"
      ],
      "rationale": "Function has nesting depth 8, exceeds 5 levels"
    },
    {
      "original_function": "_collect_streaming_data",
      "file_path": "TestMaster\\reporting\\report_generator.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__collect_streaming_data_should_continue",
        "__collect_streaming_data_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_load_compliance_rules",
      "file_path": "TestMaster\\security\\compliance_framework.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__load_compliance_rules_validate_input",
        "__load_compliance_rules_process",
        "__load_compliance_rules_format_output"
      ],
      "rationale": "Function has 145 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_apply_refinement_stage",
      "file_path": "TestMaster\\streaming\\incremental_enhancer.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__apply_refinement_stage_should_continue",
        "__apply_refinement_stage_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "get_feedback_summary",
      "file_path": "TestMaster\\streaming\\live_feedback.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_get_feedback_summary_should_continue",
        "_get_feedback_summary_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_execute_generation_stage",
      "file_path": "TestMaster\\streaming\\stream_generator.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__execute_generation_stage_should_continue",
        "__execute_generation_stage_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    },
    {
      "original_function": "_get_css_styles",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__get_css_styles_validate_input",
        "__get_css_styles_process",
        "__get_css_styles_format_output"
      ],
      "rationale": "Function has 102 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "_get_javascript",
      "file_path": "TestMaster\\ui\\dashboard.py",
      "issue_type": "OVERSIZED_FUNCTION",
      "priority": "HIGH",
      "recommended_splits": [
        "input_validation",
        "core_logic",
        "output_formatting"
      ],
      "new_function_names": [
        "__get_javascript_validate_input",
        "__get_javascript_process",
        "__get_javascript_format_output"
      ],
      "rationale": "Function has 213 lines, exceeds 100-line guideline"
    },
    {
      "original_function": "analyze_test_structure",
      "file_path": "TestMaster\\verification\\base.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "_analyze_test_structure_check_conditions",
        "_analyze_test_structure_execute",
        "_analyze_test_structure_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "analyze_test_structure",
      "file_path": "TestMaster\\verification\\base.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "_analyze_test_structure_should_continue",
        "_analyze_test_structure_process_item"
      ],
      "rationale": "Function has nesting depth 9, exceeds 5 levels"
    },
    {
      "original_function": "_analyze_coverage",
      "file_path": "TestMaster\\verification\\quality.py",
      "issue_type": "HIGH_COMPLEXITY",
      "priority": "HIGH",
      "recommended_splits": [
        "condition_checks",
        "main_processing",
        "error_handling"
      ],
      "new_function_names": [
        "__analyze_coverage_check_conditions",
        "__analyze_coverage_execute",
        "__analyze_coverage_handle_errors"
      ],
      "rationale": "Function has complexity score 16, exceeds 15 threshold"
    },
    {
      "original_function": "_analyze_coverage",
      "file_path": "TestMaster\\verification\\quality.py",
      "issue_type": "DEEP_NESTING",
      "priority": "MEDIUM",
      "recommended_splits": [
        "early_returns",
        "extracted_conditions"
      ],
      "new_function_names": [
        "__analyze_coverage_should_continue",
        "__analyze_coverage_process_item"
      ],
      "rationale": "Function has nesting depth 6, exceeds 5 levels"
    }
  ],
  "summary": {
    "total_functions_analyzed": 3448,
    "modularization_priorities": {
      "high_priority": 219,
      "medium_priority": 454,
      "low_priority": 362,
      "minimal_priority": 2413
    },
    "average_metrics": {
      "average_line_count": 20.59,
      "average_complexity": 4.01
    },
    "recommendations_generated": 246,
    "modularization_readiness": "READY"
  }
}