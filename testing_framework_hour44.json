{
  "analysis_metadata": {
    "tool": "testing_framework_analyzer",
    "version": "1.0",
    "agent": "Agent_C",
    "hours": "44-46",
    "phase": "Utility_Component_Extraction"
  },
  "analysis_results": {
    "files_analyzed": [
      {
        "file": "TestMaster\\accelerated_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\achieve_100_percent.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agentic_test_monitor.py",
        "error": "f-string expression part cannot include a backslash (agentic_test_monitor.py, line 297)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\api_dependency_mapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\architecture_centralization_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ARCHIVE_PROTECTION_SYSTEM.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\auto_readme_updater.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\batch_convert_broken_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\class_inheritance_mapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\comprehensive_classical_analysis_methods.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\comprehensive_codebase_analysis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\comprehensive_feature_audit.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\configuration_settings_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\contribution_analysis_detailed.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\convert_batch_small.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\convert_with_genai_sdk.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\convert_with_generativeai.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core_library_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\coupling_analysis_detailed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\create_real_implementations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\database_relationship_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\data_flow_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\debug_feature_flags.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\debug_integration_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\DEMONSTRATION_OF_SUPERIORITY.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dependency_graph_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\design_pattern_recognizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\documentation_cli.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\duplicate_code_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enable_deep_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enable_features.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhanced_context_aware_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhanced_incremental_ast_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhanced_intelligent_test_builder.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhanced_security_dashboard_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhanced_self_healing_verifier.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhance_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhance_auto_generated_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\enhance_missing_robust_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\event_flow_mapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\exhaustive_stub_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\finalize_module_splits.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\final_100_percent_fix.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\final_archive_sweep.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\final_integration_fix.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\find_all_stubs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\find_critical_stubs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_all_integration_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_analytics_aggregator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_backend_issues.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_dashboard_imports.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_enhanced_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_failing_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_final_four_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_final_issues.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_integration_issues_final.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_integration_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_integration_tests_simple.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_syntax.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_testmaster_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_tests_for_real_modules.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_to_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\fix_week2_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\function_call_graph_builder.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\IMPLEMENTATION_STATUS_CHECK.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\implement_test_stubs.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\independent_test_verifier.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\intelligent_test_builder.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\intelligent_test_builder_offline.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\intelligent_test_builder_v2.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\interface_analysis_detailed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\layer3_integration_example.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\llm_analysis_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\modularize_api_templates.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\modularize_coverage_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\monitor_progress.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\monitor_to_100.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\parallel_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\parallel_converter_fixed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\pattern_analysis_detailed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\performance_profiler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\phase7_validation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\quick_test_summary.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\realtime_metrics_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\refine_misc_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\relationship_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\relationship_synthesizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\replace_stubs_with_archive_implementations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_asyncio_4.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_asyncio_5.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_asyncio_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_json_4.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_json_5.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_json_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_logging_4.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_logging_5.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_logging_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_os_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_random_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_sys_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_threading_4.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_threading_5.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_threading_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_time_4.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_time_5.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_time_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_uuid_4.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_uuid_5.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restored_uuid_6.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restore_missing_methods.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restore_real_implementations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\restore_robust_implementations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\risk_based_test_targeter.py",
        "error": "invalid syntax. Perhaps you forgot a comma? (risk_based_test_targeter.py, line 393)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\run_debt_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\run_integration_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\run_intelligent_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\run_security_scan.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\shared_component_identifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\simple_consolidation_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\simple_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\simple_test_runner.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\simple_web_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\specialized_test_generators.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\split_massive_test_file.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\split_oversized_modules.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testing_framework_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_100_percent_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_after_refactor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_agent_b_integrations.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_agent_qa_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_agent_qa_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_analyzer_tab.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_api_functionality.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_async_processing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_backend_health.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_before_refactor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_classical_analysis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_complexity_prioritizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_comprehensive_analysis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_config_intelligence.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_dependency_orderer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_dynamic_handoff_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_enhanced_analysis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_enhanced_core_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_enhanced_server.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_enhancements.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_exhaustive_features.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_final_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_flow_optimizer_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_hierarchical_planning_complete.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_integration_systems.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_intelligence_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_llm_intelligence.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_multi_objective_optimization.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_our_implementations.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_performance_dashboard_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase1_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase1_simple.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase2_exhaustive_validation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase2_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase2_simple.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase2_simple_validation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase3_complete.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase3_deployment.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_phase3_ui.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_reporting_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_routes.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_safe_consolidation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_security_api_server.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_streaming_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_streaming_simple.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_tot_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_unified_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_universal_ast_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\test_universal_language_detector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\turbo_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\unified_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\unified_orchestration_example.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\utility_analysis_report.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\utility_function_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\validate_api_endpoints.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\validate_dashboard_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\validate_newton_destroyer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\validate_phase_1_7.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\web_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\week_5_8_batch_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\week_7_8_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\write_real_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\base_role.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\quality_assurance.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\test_architect.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\test_coordinator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\test_engineer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\test_executor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\roles\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\supervisor\\testing_supervisor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\supervisor\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\team\\testing_team.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\agents\\team\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\anomaly_detection\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\business_core_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\business_domain_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\business_rule_analysis_wrapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\business_validation_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\business_workflow_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\_shared_utils.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\business_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\cognitive_load\\cognitive_load_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\cognitive_load\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\data_pipeline\\data_pipeline_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\data_pipeline\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\data_security\\data_leakage_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\data_security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\debt_analysis\\debt_category_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\debt_analysis\\debt_core_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\debt_analysis\\debt_financial_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\debt_analysis\\technical_debt_analysis_wrapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\debt_analysis\\_shared_utils.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\debt_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\domain_modeling\\domain_model_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\domain_modeling\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\energy_analysis\\energy_algorithm_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\energy_analysis\\energy_carbon_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\energy_analysis\\energy_consumption_analysis_wrapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\energy_analysis\\energy_core_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\energy_analysis\\_shared_utils.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\energy_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\metaprog_analysis\\metaprogramming_analysis_wrapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\metaprog_analysis\\metaprog_core_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\metaprog_analysis\\metaprog_reflection_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\metaprog_analysis\\metaprog_security_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\metaprog_analysis\\_shared_utils.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\metaprog_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_code_analysis_wrapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_data_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\ml_tensor_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\ml_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\pattern_mining\\cross_repo_pattern_miner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\pattern_mining\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\pattern_recognition\\ml_pattern_recognition.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\pattern_recognition\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\realtime_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\security_monitoring\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\semantic_analysis\\semantic_analysis_wrapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\semantic_analysis\\semantic_context_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\semantic_analysis\\semantic_core_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\semantic_analysis\\semantic_pattern_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\semantic_analysis\\_shared_utils.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\semantic_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\workflow_analysis\\workflow_pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analysis\\comprehensive_analysis\\workflow_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\analytics\\failure_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\api\\orchestration_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\api\\orchestration_flask.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\api\\phase2_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\api\\phase3_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\api_templates_original_2813_lines.py",
        "error": "invalid syntax. Perhaps you forgot a comma? (api_templates_original_2813_lines.py, line 749)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\architectural_decision_engine_original_2388_lines_20250821_130612.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\architectural_evolution_predictor_original_2410_lines_20250821_113953.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\archive_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\coverage_analyzer_original_2697_lines.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\from_subarchive_business_rule_analysis_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\from_subarchive_energy_consumption_analysis_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\from_subarchive_ml_code_analysis_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\from_subarchive_semantic_analysis_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\from_subarchive_technical_debt_analysis_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_hub_original_20250820_220939.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_replacement_20250820_011555_cross_system_communication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_replacement_20250820_011704_predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\real_impl_backup_1755670819_distributed_task_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\superseded_toplevel_energy_consumption_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\superseded_toplevel_ml_code_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\superseded_toplevel_technical_debt_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\test_misc_original_6141_lines.py",
        "error": "unexpected indent (test_misc_original_6141_lines.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\test_tot_output_original_18164_lines_20250821_040109.py",
        "error": "(unicode error) 'unicodeescape' codec can't decode bytes in position 25-26: truncated \\UXXXXXXXX escape (test_tot_output_original_18164_lines_20250821_040109.py, line 4)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\test_uncategorized_original_3557_lines_20250821_113530.py",
        "error": "unexpected indent (test_uncategorized_original_3557_lines_20250821_113530.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\20250818\\web_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_aggregator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_anomaly_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_backup.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_batch_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_circuit_breaker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_compressor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_connectivity_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_correlator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_data_sanitizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_dead_letter_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_deduplication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_deduplication_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_delivery_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_delivery_guarantee.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_delivery_verifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_error_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_event_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_export_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_fallback_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_flow_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_health_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_heartbeat_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_integrity_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_integrity_verifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_metrics_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_normalizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_performance_booster.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_pipeline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_pipeline_health_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_priority_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_quality_assurance.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_quantum_retry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_rate_limiter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_receipt_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_recovery_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_redundancy.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_retry_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_sla_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_smart_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_streaming.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_telemetry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_watchdog.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\cross_system_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\testing_components\\coverage_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_enhanced_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_failing_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_syntax.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_tests_for_real_modules.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_week2_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\web_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\automatic_scaling_system_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\comprehensive_error_recovery_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\cross_system_analytics_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\cross_system_apis_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\intelligent_caching_layer_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\predictive_analytics_engine_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\realtime_performance_monitoring_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\integration_robust_duplicates_20250821_083109\\workflow_execution_engine_robust.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\accelerated_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\achieve_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\achieve_100_percent_coverage.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\agentic_test_monitor.py",
        "error": "f-string expression part cannot include a backslash (agentic_test_monitor.py, line 216)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\ai_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\automated_test_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\batch_gemini_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\branch_coverage_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\check_what_needs_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\comprehensive_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\convert_batch_small.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\convert_with_genai_sdk.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\convert_with_generativeai.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\coverage_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\coverage_baseline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\coverage_improver.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\diagnose_final_five.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\enhanced_context_aware_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\enhanced_self_healing_verifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\enhance_auto_generated_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fast_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\final_five_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\find_truly_missing.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_all_imports.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_enhanced_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_failing_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_import_paths.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_remaining_issues.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_tests_for_real_modules.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_test_infrastructure.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_week2_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\gemini_powered_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\gemini_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\generate_coverage_sequential.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\implement_test_stubs.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\independent_test_verifier.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_matrix.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder_offline.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder_v2.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\measure_final_coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\monitor_progress.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\monitor_to_100.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\parallel_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\parallel_converter_fixed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\parallel_converter_working.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\parallel_coverage_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\quick_coverage_boost.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\quick_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\quick_test_summary.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\run_intelligent_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\run_limited_coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\self_healing_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\simple_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\simple_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\simple_test_runner.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\smart_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\systematic_coverage.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\testmaster_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_gemini_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_gemini_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_gemini_correct.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_single_api_call.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_single_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_updated_prompt.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\turbo_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\week_5_8_batch_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\week_7_8_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\working_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\write_real_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\modularization_20250820_222253\\testing_hub_original_1375_lines.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\modularization_20250821\\business_analyzer_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\modularization_20250821\\debt_analyzer_original_1546_lines.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\modularization_20250821\\semantic_analyzer_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\modularization_integration\\integration_hub_original_1876_lines.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\accelerated_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\agentic_test_monitor.py",
        "error": "f-string expression part cannot include a backslash (agentic_test_monitor.py, line 216)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\original_backup\\convert_batch_small.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\convert_with_genai_sdk.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\convert_with_generativeai.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\enhanced_context_aware_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\enhanced_self_healing_verifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\enhance_auto_generated_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_enhanced_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_failing_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_import_paths.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_tests_for_real_modules.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_week2_test_imports.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\implement_test_stubs.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\independent_test_verifier.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\integration_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder_offline.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder_v2.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\monitor_progress.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\monitor_to_100.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\parallel_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\parallel_converter_fixed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\quick_test_summary.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\run_intelligent_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\simple_test_runner.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\testmaster_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\turbo_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\week_5_8_batch_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\week_7_8_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\write_real_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\analytics\\failure_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\cache\\intelligent_cache.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\dashboard\\quality_dashboard.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\deduplication\\test_deduplicator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\incremental\\dependency_tracker.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\optimization\\execution_optimizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\achieve_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\achieve_100_percent_coverage.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\ai_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\batch_gemini_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\branch_coverage_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\check_what_needs_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\coverage_baseline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\coverage_improver.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\diagnose_final_five.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fast_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\final_five_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\find_truly_missing.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_all_imports.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_remaining_issues.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_test_infrastructure.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\gemini_powered_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\gemini_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\generate_coverage_sequential.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\intelligent_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\measure_final_coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\parallel_converter_working.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\parallel_coverage_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\parallel_coverage_converter_fixed.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\quick_coverage_boost.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\quick_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\run_limited_coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\self_healing_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\simple_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\simple_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\smart_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\systematic_coverage.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_gemini_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_gemini_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_gemini_correct.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_single_api_call.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_single_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_updated_prompt.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\working_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\automated_test_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\comprehensive_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\coverage_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\integration_test_matrix.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\analysis\\business_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\analysis\\debt_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\api\\enterprise_integration_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\api\\ml_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\coordination\\agent_coordination_protocols.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\coordination\\resource_coordination_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\coordination\\unified_workflow_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\documentation\\revolutionary\\neo4j_dominator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\ml\\advanced\\circuit_breaker_ml.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\ml\\advanced\\delivery_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\ml\\advanced\\integrity_ml_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\ml\\advanced\\performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\ml\\advanced\\sla_ml_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\ml\\enterprise\\ml_infrastructure_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\monitoring\\performance_optimization_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\system_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\agent_ops.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\async_state_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\cross_system_apis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\enhanced_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\shared_state.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\unified_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\automatic_scaling_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\comprehensive_error_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\cross_module_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\cross_system_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\cross_system_apis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\intelligent_caching_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\realtime_performance_monitoring.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\visual_workflow_designer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\workflow_execution_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\workflow_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195114.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195132.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\enhanced_monitor_20250819_195132.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\agent_graph_20250819_195602.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\enterprise_deployment_20250819_195602.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\testing_team_20250819_195602.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase6_archive\\replaced_code\\agent_graph_20250819_200928.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase6_archive\\replaced_code\\swarm_orchestration_20250819_200929.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase6_archive\\replaced_code\\swarm_orchestrator_20250819_200929.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase7_archive\\replaced_code\\enhanced_monitor_20250819_202006.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\phase7_archive\\replaced_code\\interactive_dashboard_20250819_202006.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_backups_20250820_011745\\integration\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_backups_20250820_011745\\integration\\workflow_execution_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_backups_20250820_011745\\integration\\workflow_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_backups_20250820_011817\\integration\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_backups_20250820_011817\\integration\\workflow_execution_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\placeholder_backups_20250820_011817\\integration\\workflow_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\state_cache_consolidation_20250821_084236\\parallel_coverage_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\archive\\state_cache_consolidation_20250821_084236\\shared_state.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\cache\\intelligent_cache.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\config_migration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\enhanced_unified_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\hierarchical_config_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\testmaster_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\unified_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\yaml_config_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\api_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\data_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\infrastructure_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\integration_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\ml_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\monitoring_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\security_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\testing_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\config\\modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\consolidation\\feature_discovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\ast_abstraction.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\async_state_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\context_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\feature_flags.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\language_detection.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\shared_state.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\tracking_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\autonomous_decision_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination_protocol_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\cross_system_semantic_learner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\cross_system_trend_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\intelligence_command_center.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\intelligent_resource_allocator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\predictive_intelligence_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ultimate_intelligence_nexus.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\advanced_pattern_recognizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_analyzer_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_constraint_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_rule_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_workflow_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_code_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_quantifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_test_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\ml_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\semantic_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\semantic_analyzer_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\semantic_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\semantic_intent_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\semantic_pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\semantic_relationship_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\technical_debt_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_analyzer_modules\\business_analyzer_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 439) (business_analyzer_analysis.py, line 412)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_analyzer_modules\\business_analyzer_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_analyzer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_analysis.py",
        "error": "unexpected indent (debt_analyzer_analysis.py, line 21)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 531) (debt_analyzer_core.py, line 525)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\adaptive_prediction_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\advanced_anomaly_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\analytics_anomaly_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\analytics_deduplication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\analytics_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\statistical_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\advanced\\correlation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\realtime\\streaming_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\app.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\endpoints.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\enterprise_integration_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\intelligence_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\intelligence_endpoints.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\monitoring_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\orchestration_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\performance_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\qa_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\security_blueprint.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\serializers.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\testing_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ultimate_nexus_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\unified_api_gateway.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\unified_intelligence_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_core.py, line 576)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_processing.py, line 553)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\enterprise_integration_layer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\ml_api_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_core.py, line 382)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\ml_api_endpoints.py",
        "error": "unterminated triple-quoted string literal (detected at line 400) (ml_api_endpoints.py, line 393)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\ml_api_monitoring.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_monitoring.py, line 351)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\base\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\caching\\distributed_smart_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\communication\\unified_communication_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\communication\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\compatibility\\__init__.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\config\\enterprise_config_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\cross_agent_bridge.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\distributed_lock_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\service_discovery_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_coordination_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part1.py, line 642)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part2.py, line 614)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part1.py, line 491)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part2.py, line 498)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part1.py, line 637)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part2.py, line 641)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\correlation\\cross_system_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\dashboard\\intelligence_backend.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\data_pipeline\\advanced_data_pipeline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\adaptive_template_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\agency_swarm_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\api_docs_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\api_interface_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\api_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\architecture_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\auto_api_docs_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\auto_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\bilingual_docs_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\comprehensive_visualization_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\cookbook_organization_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\cross_framework_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\design_first_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\diagram_creator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docstring_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_testing_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\doc_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\enterprise_api_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\example_docs_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\faq_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\hierarchical_docs_organizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligent_content_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\interactive_docs.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\interactive_docs_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\json_docs_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\knowledge_management_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\legacy_integration_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\live_architecture.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\markdown_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\master_documentation_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\mdx_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\metrics_reporter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\migration_guide_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\multilingual_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\multimodal_recipe_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\multi_agent_pattern_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\performance_quality_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\phase_1_7_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\production_ready_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\quality_assessment_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\recipe_based_learning.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\roadmap_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\service_oriented_arch_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\swarms_auto_generation_adapter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\swarms_doc_intelligence_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\swarms_navigation_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\swarms_self_healing_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\system_integration_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\tracking_integration_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\tutorial_grid_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\tutorial_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\unified_doc_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\ux_excellence_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\workflow_recipe_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\yaml_config_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\enterprise\\documentation_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\enterprise\\documentation_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\enterprise\\enterprise_doc_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\enterprise\\workflow_automation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\metrics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\project_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\optimization\\content_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\optimization\\strategy_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\intelligence\\optimization\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\ai_documentation_synthesizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\codesee_annihilator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\falkordb_obliterator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\interactive_chat_interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\living_documentation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\newton_graph_destroyer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part1.py",
        "error": "unterminated string literal (detected at line 25) (neo4j_dominator_part1.py, line 25)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part2.py",
        "error": "unterminated string literal (detected at line 20) (neo4j_dominator_part2.py, line 20)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\api_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\integration_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\reporting_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\api\\endpoint_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\api\\request_router.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\api\\service_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\enterprise\\api\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\infrastructure\\unified_infrastructure_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\infrastructure\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\integration\\base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\integration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\integration\\components\\cross_system_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\integration\\components\\endpoint_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\integration\\components\\event_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\integration\\components\\performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\ai_code_explorer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\code_knowledge_graph_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\instant_graph_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\multi_language_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\predictive_code_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\visual_relationship_mapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\knowledge_graph\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\anomaly_algorithms.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\correlation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\explainability.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\feature_engineering.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\gpu_accelerator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\integration_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\ml_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\model_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\online_learning.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\self_optimizing_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\statistical_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\adaptive_configuration_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\adaptive_load_balancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\anomaly_detection.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\batch_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\distributed_ml_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\ensemble_meta_learner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\intelligent_data_pipeline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\intelligent_resource_scheduler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\ml_network_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\ml_security_guardian.py",
        "error": "unexpected character after line continuation character (ml_security_guardian.py, line 222)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_execution_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_ml_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\predictive_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\predictive_maintenance_ai.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\smart_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\telemetry_export_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\telemetry_ml_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\telemetry_observability_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\watchdog_ml_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\watchdog_process_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\watchdog_recovery_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 446) (circuit_breaker_ml_algorithms.py, line 425)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_core.py, line 406)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_management.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_management.py, line 436)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_algorithms.py, line 424)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_core.py, line 435)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_optimization.py, line 438)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_algorithms.py, line 486)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_core.py, line 471)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 498) (integrity_ml_guardian_models.py, line 482)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 397) (performance_optimizer_algorithms.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_core.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_optimization.py, line 376)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 557) (sla_ml_optimizer_algorithms.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_core.py, line 546)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_optimization.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_auto_scaling.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_monitoring_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_algorithms.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_core.py, line 336)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 387) (ml_infrastructure_orchestrator_models.py, line 363)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\advanced_monitoring_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\enterprise_performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\qa_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\qa_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\qa_scorer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\unified_performance_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\unified_qa_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 701) (agent_qa_part1.py, line 662)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part2.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part2b.py",
        "error": "unexpected indent (agent_qa_part2b.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_analysis.py, line 383)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_core.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 392) (performance_optimization_engine_processing.py, line 342)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\orchestration\\agent_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\orchestration\\cross_system_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\orchestration\\integration_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\prediction\\forecaster.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\queuing\\express_priority_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\reliability\\enterprise_error_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\reliability\\quantum_retry_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\reliability\\quantum_retry_strategies.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\reliability\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\advanced_security_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\ai_security_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\audit_logger.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\code_vulnerability_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\compliance_checker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\dependency_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\knowledge_graph_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\security_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\security_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\security_compliance_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\security_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\threat_intelligence_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\threat_modeler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\ultimate_security_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\unified_security_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\vulnerability_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\audit\\audit_events.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\audit\\audit_interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\audit\\audit_reporter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\audit\\audit_storage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\audit\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\compliance_automation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\governance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\security_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\security_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\intelligence\\incident_responder.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\intelligence\\threat_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\validation\\compliance_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\validation\\integration_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\validation\\penetration_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\streaming\\event_streaming_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\base.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\chaos_engineer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\contract_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\flaky_test_detector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\fuzzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\load_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\mutation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\property_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\quality_dashboard.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\regression_detector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security_fuzzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\testing_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_analytics.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_intelligence.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_quality_scorer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_selector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\statistical_coverage_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\universal_ai_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\coverage_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\execution_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\ml_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\quality_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\quality_gate_automation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\api_security_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\compliance_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\system_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\unified_validation_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_core.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_processing.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 370) (integration_test_suite_validation.py, line 346)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_core.py, line 645)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_validation.py, line 609)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\system_validation_framework_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\agent_interface_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\dashboard_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\data_visualization_engines.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\development_tools_ui.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\interactive_visualizations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\observability_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\realtime_ui_components.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\user_experience_frameworks.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\adaptive_fallback_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\adaptive_security_resilience.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\agent_communication_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\api_security_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\authentication_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\byzantine_consensus_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\circuit_breaker_matrix.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\cloud_event_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\code_generation_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\compliance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\configuration_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\container_security_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\data_integrity_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\distributed_agent_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\distributed_communication_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\distributed_coordination_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\distributed_key_management_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\document_classification_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\enterprise_audit_logging.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\enterprise_authentication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\enterprise_auth_gateway.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\enum_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\error_handler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\error_isolation_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\error_recovery_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\exception_monitoring.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\fault_tolerance_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\file_security_handler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\flow_persistence_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\graceful_degradation_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\guardrail_security_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\health_monitoring_nexus.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\identity_validation_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\license_compliance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\message_context_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\multi_agent_access_control.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\multi_agent_evaluation_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\network_security_controls.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\operational_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\quantum_retry_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\rate_limiter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\resilience_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\retry_mechanism_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\secure_message_delivery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\secure_performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\security_monitoring_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\self_healing_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\service_mesh_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\thread_safety_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\threat_intelligence_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\validation_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\vulnerability_detection_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\competitive_analysis_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_async_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\mcp_testing.py",
        "error": "unmatched ')' (mcp_testing.py, line 93)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\parallel_test_executor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\pattern_consolidation_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\performance_test_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\run_all_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_coverage_optimizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_intelligence_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_quality_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\abstractions\\ast_abstraction.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\abstractions\\language_detection.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\abstractions\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\configuration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\configuration\\base\\config_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\configuration\\base\\validation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\configuration\\base\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\context\\tracking_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\context\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\agent_ops_separate.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor_enhanced.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor_enhanced.stub_backup.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\shared\\context_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\shared\\feature_flags.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\shared\\shared_state.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\foundation\\shared\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\integration\\foundations\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\integration\\foundations\\abstractions\\adapter_abstractions.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\integration\\foundations\\abstractions\\communication_context.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\integration\\foundations\\abstractions\\integration_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\integration\\foundations\\abstractions\\service_abstractions.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\integration\\foundations\\abstractions\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_engine_consolidated.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution_predictor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\autonomous_decision_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\autonomous_governance_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\autonomous_replication_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\continuous_validation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination_protocol_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\cross_system_semantic_learner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\cross_system_trend_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\emergent_intelligence_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\final_validation_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligence_certification_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligence_command_center.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligence_integration_master.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligence_perfection_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligent_resource_allocator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligent_workflow_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\meta_intelligence_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\meta_intelligence_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\predictive_intelligence_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\prescriptive_intelligence_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\quantum_prediction_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\recursive_intelligence_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\semantic_code_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\temporal_intelligence_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ultimate_integration_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ultimate_intelligence_nexus.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\unified_architecture_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\unified_architecture_intelligence_complete.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\unified_architecture_intelligence_part2.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\advanced_pattern_recognizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_analyzer_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_constraint_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_rule_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_workflow_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\comprehensive_analysis_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_code_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_quantifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_test_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\ml_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\safe_comprehensive_analysis_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\semantic_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\semantic_analyzer_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\semantic_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\semantic_intent_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\semantic_pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\semantic_relationship_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\technical_debt_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_analyzer_modules\\business_analyzer_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 439) (business_analyzer_analysis.py, line 412)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_analyzer_modules\\business_analyzer_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_analyzer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_analysis.py",
        "error": "unexpected indent (debt_analyzer_analysis.py, line 21)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 531) (debt_analyzer_core.py, line 525)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\adaptive_prediction_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\advanced_anomaly_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\analytics_anomaly_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\analytics_deduplication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\analytics_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\statistical_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\advanced\\correlation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\analytics\\realtime\\streaming_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\app.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\endpoints.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\enterprise_integration_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\intelligence_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\intelligence_endpoints.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\monitoring_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\orchestration_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\performance_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\qa_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\security_blueprint.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\serializers.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\testing_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ultimate_nexus_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\unified_api_gateway.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\unified_intelligence_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_core.py, line 576)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_processing.py, line 553)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\enterprise_integration_layer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\ml_api_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_core.py, line 382)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\ml_api_endpoints.py",
        "error": "unterminated triple-quoted string literal (detected at line 400) (ml_api_endpoints.py, line 393)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\ml_api_monitoring.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_monitoring.py, line 351)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_modules\\data_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_modules\\decision_scorer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_modules\\microservice_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_modules\\pattern_evolution_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_modules\\performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_decision_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution\\growth_modeler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution\\predictor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution\\types_and_structures.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution_modules\\data_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution_modules\\scalability_forecaster.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution_modules\\system_growth_modeler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution_modules\\technology_trend_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\architectural_evolution_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\archive\\architectural_evolution_predictor_original.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\base\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\caching\\distributed_smart_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\communication\\unified_communication_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\communication\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\compatibility\\__init__.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\config\\enterprise_config_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\cross_agent_bridge.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\distributed_lock_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\service_discovery_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_coordination_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part1.py, line 642)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part2.py, line 614)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part1.py, line 491)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part2.py, line 498)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part1.py, line 637)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part2.py, line 641)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\correlation\\cross_system_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\dashboard\\intelligence_backend.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\data_pipeline\\advanced_data_pipeline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\adaptive_template_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\agency_swarm_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\api_docs_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\api_interface_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\api_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\architecture_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\auto_api_docs_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\auto_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\bilingual_docs_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\comprehensive_visualization_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\cookbook_organization_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\cross_framework_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\cross_system_dependency_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\design_first_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\diagram_creator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\docstring_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_testing_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\documentation_api_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\doc_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\enterprise_api_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\example_docs_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\faq_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\hierarchical_docs_organizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligent_content_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\interactive_docs.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\interactive_docs_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\json_docs_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\knowledge_management_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\legacy_integration_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\live_architecture.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\markdown_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\master_documentation_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\mdx_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\metrics_reporter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\migration_guide_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\multilingual_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\multimodal_recipe_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\multi_agent_pattern_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\performance_quality_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\phase_1_7_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\production_ready_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\quality_assessment_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\recipe_based_learning.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\roadmap_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\service_oriented_arch_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\swarms_auto_generation_adapter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\swarms_doc_intelligence_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\swarms_navigation_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\swarms_self_healing_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\system_integration_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\tracking_integration_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\tutorial_grid_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\tutorial_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\unified_doc_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\ux_excellence_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\validation_dashboard_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\workflow_recipe_docs.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\yaml_config_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\enterprise\\documentation_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\enterprise\\documentation_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\enterprise\\enterprise_doc_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\enterprise\\workflow_automation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\metrics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\project_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\optimization\\content_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\optimization\\strategy_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\intelligence\\optimization\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\ai_documentation_synthesizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\codesee_annihilator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\falkordb_obliterator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\interactive_chat_interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\living_documentation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\newton_graph_destroyer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part1.py",
        "error": "unterminated string literal (detected at line 25) (neo4j_dominator_part1.py, line 25)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part2.py",
        "error": "unterminated string literal (detected at line 20) (neo4j_dominator_part2.py, line 20)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\api_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\integration_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\reporting_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\api\\endpoint_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\api\\request_router.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\api\\service_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\enterprise\\api\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\infrastructure\\unified_infrastructure_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\infrastructure\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\integration\\base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\integration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\integration\\components\\cross_system_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\integration\\components\\endpoint_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\integration\\components\\event_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\integration\\components\\performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\ai_code_explorer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\code_knowledge_graph_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\instant_graph_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\multi_language_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\predictive_code_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\visual_relationship_mapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\knowledge_graph\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\anomaly_algorithms.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\correlation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\explainability.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\feature_engineering.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\gpu_accelerator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\integration_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\ml_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\model_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\online_learning.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\self_optimizing_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\statistical_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\adaptive_configuration_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\adaptive_load_balancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\anomaly_detection.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\batch_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\distributed_ml_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\ensemble_meta_learner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\intelligent_data_pipeline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\intelligent_resource_scheduler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\ml_network_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\ml_security_guardian.py",
        "error": "unexpected character after line continuation character (ml_security_guardian.py, line 222)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_execution_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_ml_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\predictive_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\predictive_maintenance_ai.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\smart_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\telemetry_export_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\telemetry_ml_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\telemetry_observability_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\watchdog_ml_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\watchdog_process_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\watchdog_recovery_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 446) (circuit_breaker_ml_algorithms.py, line 425)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_core.py, line 406)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_management.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_management.py, line 436)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_algorithms.py, line 424)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_core.py, line 435)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_optimization.py, line 438)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_algorithms.py, line 486)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_core.py, line 471)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 498) (integrity_ml_guardian_models.py, line 482)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 397) (performance_optimizer_algorithms.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_core.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_optimization.py, line 376)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 557) (sla_ml_optimizer_algorithms.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_core.py, line 546)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_optimization.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_auto_scaling.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_monitoring_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_algorithms.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_core.py, line 336)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 387) (ml_infrastructure_orchestrator_models.py, line 363)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\advanced_monitoring_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modular.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\enterprise_performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\pattern_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\qa_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\qa_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\qa_scorer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\unified_performance_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\unified_qa_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_core.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 701) (agent_qa_part1.py, line 662)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part2.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part2b.py",
        "error": "unexpected indent (agent_qa_part2b.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_analysis.py, line 383)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_core.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 392) (performance_optimization_engine_processing.py, line 342)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\orchestration\\agent_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\orchestration\\cross_system_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\orchestration\\integration_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\prediction\\forecaster.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\queuing\\express_priority_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\reliability\\enterprise_error_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\reliability\\quantum_retry_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\reliability\\quantum_retry_strategies.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\reliability\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\advanced_security_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\ai_security_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\audit_logger.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\code_vulnerability_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\compliance_checker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\dependency_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\knowledge_graph_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\security_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\security_api.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\security_compliance_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\security_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\threat_intelligence_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\threat_modeler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\ultimate_security_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\unified_security_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\vulnerability_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\audit\\audit_events.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\audit\\audit_interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\audit\\audit_reporter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\audit\\audit_storage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\audit\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\compliance_automation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\governance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\security_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\security_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\intelligence\\incident_responder.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\intelligence\\threat_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\validation\\compliance_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\validation\\integration_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\validation\\penetration_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\streaming\\event_streaming_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\base.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\chaos_engineer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\contract_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\flaky_test_detector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\fuzzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\load_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\mutation_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\property_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\quality_dashboard.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\regression_detector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security_fuzzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\testing_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_analytics.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_intelligence.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_quality_scorer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_selector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\statistical_coverage_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\universal_ai_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\coverage_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\execution_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\ml_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\quality_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\quality_gate_automation.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security\\api_security_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security\\compliance_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\system_validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\unified_validation_service.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_core.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_processing.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 370) (integration_test_suite_validation.py, line 346)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_core.py, line 645)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_validation.py, line 609)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\system_validation_framework_modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\agent_interface_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\dashboard_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\data_visualization_engines.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\development_tools_ui.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\interactive_visualizations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\observability_systems.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\realtime_ui_components.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\user_experience_frameworks.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\observability\\agent_ops_separate.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\observability\\unified_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\observability\\unified_monitor_enhanced.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\observability\\unified_monitor_enhanced.stub_backup.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\observability\\__init__.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\agent_graph.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\enhanced_agent_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\configuration\\orchestration_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\configuration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\coordination\\discovery\\orchestration_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\coordination\\master\\master_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\engines\\workflow\\workflow_orchestration_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\abstractions\\agent_abstractions.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\abstractions\\execution_context.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\abstractions\\orchestrator_base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\abstractions\\task_abstractions.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\abstractions\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\patterns\\hybrid_patterns.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\patterns\\intelligence_patterns.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\patterns\\swarm_patterns.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\patterns\\workflow_patterns.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\patterns\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\protocols\\communication_protocols.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\protocols\\coordination_protocols.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\protocols\\integration_protocols.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\foundations\\protocols\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\orchestration\\integration\\hub\\integration_hub.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\reliability\\emergency_backup_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\adaptive_fallback_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\adaptive_security_resilience.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\agent_communication_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\api_security_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\authentication_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\byzantine_consensus_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\circuit_breaker_matrix.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\cloud_event_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\code_generation_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\compliance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\configuration_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\container_security_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\data_integrity_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\deployment_pipeline_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\distributed_agent_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\distributed_communication_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\distributed_coordination_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\distributed_key_management_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\document_classification_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\enterprise_audit_logging.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\enterprise_authentication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\enterprise_auth_gateway.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\enum_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\error_handler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\error_isolation_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\error_recovery_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\exception_monitoring.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\fault_tolerance_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\file_security_handler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\flow_persistence_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\graceful_degradation_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\guardrail_security_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\health_monitoring_nexus.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\identity_validation_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\license_compliance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\message_context_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\multi_agent_access_control.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\multi_agent_evaluation_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\network_security_controls.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\operational_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\quantum_retry_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\rate_limiter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\resilience_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\retry_mechanism_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\secure_message_delivery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\secure_performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\security_monitoring_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\self_healing_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\service_mesh_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\thread_safety_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\threat_intelligence_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\validation_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\validation_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\vulnerability_detection_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\services\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\state\\enhanced_state_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\competitive_analysis_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\embedding_cache_testing.py",
        "error": "expected '(' (embedding_cache_testing.py, line 164)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\graph_async_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\mcp_testing.py",
        "error": "unmatched ')' (mcp_testing.py, line 93)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\parallel_test_executor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\pattern_consolidation_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\performance_test_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\run_all_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_coverage_optimizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_intelligence_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_quality_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\tools\\type_safe_tools.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\core\\tools\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\automated_frontend_simulator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\comprehensive_frontend_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\comprehensive_frontend_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\debug_blueprints.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\demo_automated_frontend_testing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\discover_backend_features.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\frontend_display_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\gunicorn_config.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\integration_gap_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\quality_dashboard.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\quick_frontend_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\quick_integration_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\quick_validation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\server.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\simple_robustness_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_analytics_import.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_api_endpoints.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_frontend_without_browser.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_new_robustness_features.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_new_visualization_apis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_robustness_verification.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\ultimate_frontend_validator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\validate_100_percent_real_data.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\validate_all_endpoints.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\wsgi.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\async_processing.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\backend_health_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\comprehensive_monitoring.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\crew_orchestration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\enhanced_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\enhanced_telemetry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\flow_optimization.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\frontend_data_contracts.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\health.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\intelligence_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\knowledge_graph.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\llm.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\monitoring.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\observability.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\orchestration_flask.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\performance.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\phase2_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\production_deployment.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\quality_assurance.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\real_codebase_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\real_codebase_scanner.stub_backup.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\refactor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\swarm_orchestration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\telemetry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\test_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\websocket_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\workflow.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\api\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_aggregator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_anomaly_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_backup.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_batch_processor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_circuit_breaker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_compressor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_connectivity_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_correlator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_data_sanitizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_dead_letter_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_deduplication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_deduplication_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_delivery_enhancer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_delivery_guarantee.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_delivery_verifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_error_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_event_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_export_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_fallback_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_flow_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_health_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_heartbeat_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_integrity_guardian.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_integrity_verifier.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_metrics_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_normalizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_performance_booster.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_performance_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_pipeline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_pipeline_health_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_priority_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_quality_assurance.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_quantum_retry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_rate_limiter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_receipt_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_recovery_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_redundancy.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_retry_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_sla_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_smart_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_streaming.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_telemetry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_watchdog.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\emergency_backup_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\error_handler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\metrics_feed.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\predictive_flow_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\realtime_analytics_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\real_data_extractor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\real_time_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\system_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\system_observability_metrics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\test_collector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\dashboard\\utils\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\deduplication\\test_deduplicator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\deployment\\enterprise_deployment.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\deployment\\service_registry.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\deployment\\swarm_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\deployment\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\documentation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\documentation\\generators\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\incremental\\dependency_tracker.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\automatic_scaling_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\comprehensive_error_recovery.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\cross_system_analytics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\cross_system_apis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\cross_system_communication.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\distributed_task_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\intelligent_caching_layer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\load_balancing_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\multi_environment_support.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\predictive_analytics_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\realtime_performance_monitoring.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\resource_optimization_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\service_mesh_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\visual_workflow_designer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\workflow_execution_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\workflow_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\modules\\alert_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\modules\\health_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\modules\\metric_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\modules\\monitoring_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\integration\\modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\monitoring\\enhanced_monitor_separate.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\monitoring\\monitoring_agents.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\monitoring\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\unified_observability.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\core\\conversational_interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\core\\cost_management.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\core\\event_monitoring.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\core\\multimodal_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\core\\session_tracking.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\observability\\replay\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\agent_integration_validator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\cross_agent_integration_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\infrastructure_completion_report.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\infrastructure_validation_suite.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\perfected_state_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\streamlined_workflow_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\operational\\ultimate_perfection_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\optimization\\execution_optimizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\swarm_router_enhancement.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\unified_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\modules\\data_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\modules\\graph_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\modules\\swarm_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\modules\\swarm_router.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\modules\\unified_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\orchestration\\modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\prioritization\\test_prioritizer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\achieve_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\achieve_100_percent_coverage.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\ai_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\analyze_components.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\api_documenter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\batch_gemini_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\branch_coverage_analyzer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\check_what_needs_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\coverage_baseline.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\coverage_improver.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\dependency_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\diagnose_final_five.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\fast_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\final_five_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\find_truly_missing.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\fix_all_imports.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\fix_remaining_issues.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\fix_test_infrastructure.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\gemini_powered_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\gemini_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\generate_coverage_sequential.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\intelligent_converter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\measure_final_coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\quick_coverage_boost.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\quick_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\run_limited_coverage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\self_healing_converter.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\simple_100_percent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\simple_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\smart_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\systematic_coverage.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\test_gemini_api.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\test_gemini_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\test_gemini_correct.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\test_single_api_call.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\test_single_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\test_updated_prompt.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\scripts\\working_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\src\\automated_test_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\src\\comprehensive_test_framework.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\src\\coverage_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\src\\data_flow_tests.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\src\\integration_test_matrix.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\state\\unified_state_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\layer2_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\main.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\__main__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\agent_qa\\benchmarking_suite.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\agent_qa\\quality_inspector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\agent_qa\\quality_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\agent_qa\\scoring_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\agent_qa\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\api_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\base_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\clone_detection.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\complexity_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\concurrency_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\coupling_cohesion.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\crypto_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\database_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\error_handling_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\evolution_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\graph_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\inheritance_polymorphism.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\linguistic_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\main_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\memory_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\performance_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\quality_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\resource_io_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\security_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\software_metrics.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\statistical_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\structural_analysis.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\supply_chain_security.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\analyzer.py",
        "error": "unexpected indent (analyzer.py, line 5)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\codebase_analyzer.py",
        "error": "unexpected indent (codebase_analyzer.py, line 7)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\dependency_mapper.py",
        "error": "unexpected indent (dependency_mapper.py, line 7)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\health_assessment.py",
        "error": "unexpected indent (health_assessment.py, line 7)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\async_processing\\async_executor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\async_processing\\async_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\async_processing\\concurrent_scheduler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\async_processing\\thread_pool_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\async_processing\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\breaking\\failure_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\breaking\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\cli\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\communication\\claude_messenger.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\communication\\dynamic_handoff.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\communication\\message_queue.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\communication\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\converters\\base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\converters\\batch.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\converters\\intelligent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\converters\\parallel.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\converters\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\ast_abstraction.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\context_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\exceptions.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\feature_flags.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\language_detection.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\layer_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\monitoring_decorators.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\tracking_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\workflow_graph.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\ast_abstraction\\language_parsers.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\ast_abstraction\\universal_ast.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\ast_abstraction\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\__init__.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\language_detection\\universal_detector.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\core\\language_detection\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\execution\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\flow_optimizer\\dependency_resolver.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\flow_optimizer\\execution_router.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\flow_optimizer\\flow_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\flow_optimizer\\parallel_executor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\flow_optimizer\\resource_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\flow_optimizer\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\generators\\base.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\generators\\intelligent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\generators\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\integration\\final_integration_test.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\integration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\event_monitoring_bridge.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\protocol_communication_bridge.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\session_tracking_bridge.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\sop_workflow_bridge.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\agent_coordination.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\consensus_engine.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\core\\context_builder.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\core\\doc_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\core\\llm_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\core\\quality_assessor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\core\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\generators\\api_doc_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\generators\\architecture_doc_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\generators\\docstring_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\generators\\readme_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\generators\\tutorial_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\generators\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\integrations\\ci_cd_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\integrations\\git_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\integrations\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\quality\\completeness_checker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\quality\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\docstring_templates.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\template_engine.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\graphql_templates.py",
        "error": "invalid syntax. Perhaps you forgot a comma? (graphql_templates.py, line 33)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\grpc_templates.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\rest_templates.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\webhook_templates.py",
        "error": "unterminated triple-quoted string literal (detected at line 110) (webhook_templates.py, line 63)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\websocket_templates.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\readme_template_modules\\data_models.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\readme_template_modules\\generic_templates.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\llm_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\unified_integration.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\agents\\documentation_agent.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\agents\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\coordination\\analysis_coordinator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\coordination\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\events\\event_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\events\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\features\\feature_flags.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\features\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\layers\\layer_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\layers\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\storage\\unified_storage.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\integration\\storage\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\llm_providers\\provider_implementations.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\llm_providers\\provider_optimization.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\llm_providers\\universal_llm_provider.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\llm_providers\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\adaptive_resource_bridge.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\multi_objective_optimizer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\optimization_algorithms.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\test_optimization_objectives.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\tot_reasoning.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\maintenance\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\mapping\\dependency_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\mapping\\mapping_cache.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\mapping\\test_mapper.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\mapping\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\file_watcher.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\idle_detector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\test_monitor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\test_scheduler.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestration\\framework_adapter.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestration\\output_system.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestration\\universal_orchestrator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestration\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestrator\\file_tagger.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestrator\\handoff_manager.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestrator\\investigator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestrator\\work_distributor.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\orchestrator\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\overview\\coverage_intelligence.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\overview\\performance_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\overview\\regression_tracker.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\overview\\structure_mapper.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\overview\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\refactoring\\hierarchical_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\reporting\\dashboard_builder.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\reporting\\data_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\reporting\\metrics_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\reporting\\report_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\reporting\\report_scheduler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\reporting\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\security\\compliance_framework.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\security\\security_test_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\security\\universal_scanner.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\security\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\collaborative_generator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\incremental_enhancer.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\live_feedback.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\stream_generator.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\stream_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\telemetry\\flow_analyzer.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\telemetry\\performance_monitor.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\telemetry\\system_profiler.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\telemetry\\telemetry_collector.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\telemetry\\telemetry_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\telemetry\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\ui\\alert_system.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\ui\\dashboard.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\ui\\metrics_display.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\ui\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\utils\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\verification\\base.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\verification\\quality.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\verification\\self_healing.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\testmaster\\verification\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\test_phase2_e2e_validation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_simple.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_analysis.py",
        "error": "expected an indented block after function definition on line 12 (test_analysis.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_base.py",
        "error": "expected an indented block after function definition on line 12 (test_base.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_core.py",
        "error": "expected an indented block after function definition on line 12 (test_core.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_dashboard.py",
        "error": "unexpected indent (test_dashboard.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_execution.py",
        "error": "unexpected indent (test_execution.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_generation.py",
        "error": "expected an indented block after function definition on line 12 (test_generation.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_integration.py",
        "error": "expected an indented block after function definition on line 12 (test_integration.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_intelligence.py",
        "error": "expected an indented block after function definition on line 360 (test_intelligence.py, line 363)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_language.py",
        "error": "expected an indented block after function definition on line 12 (test_language.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_messaging.py",
        "error": "expected an indented block after function definition on line 12 (test_messaging.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_monitoring.py",
        "error": "unexpected indent (test_monitoring.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_performance.py",
        "error": "expected an indented block after function definition on line 12 (test_performance.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_quality.py",
        "error": "expected an indented block after function definition on line 12 (test_quality.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_reasoning.py",
        "error": "expected an indented block after function definition on line 12 (test_reasoning.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_reporting.py",
        "error": "expected an indented block after function definition on line 12 (test_reporting.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_self_healing.py",
        "error": "expected an indented block after function definition on line 12 (test_self_healing.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_streaming.py",
        "error": "expected an indented block after function definition on line 12 (test_streaming.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_tagging.py",
        "error": "expected an indented block after function definition on line 12 (test_tagging.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_telemetry.py",
        "error": "expected an indented block after function definition on line 12 (test_telemetry.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_workflow.py",
        "error": "expected an indented block after function definition on line 12 (test_workflow.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_builders.py",
        "error": "unexpected indent (test_builders.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_converters.py",
        "error": "unexpected indent (test_converters.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_engines.py",
        "error": "unexpected indent (test_engines.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_frameworks.py",
        "error": "unexpected indent (test_frameworks.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_handlers.py",
        "error": "unexpected indent (test_handlers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_integrations.py",
        "error": "unexpected indent (test_integrations.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_layers.py",
        "error": "unexpected indent (test_layers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_managers.py",
        "error": "unexpected indent (test_managers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_parsers.py",
        "error": "unexpected indent (test_parsers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_systems.py",
        "error": "unexpected indent (test_systems.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_trackers.py",
        "error": "unexpected indent (test_trackers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_uncategorized.py",
        "error": "unexpected indent (test_uncategorized.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\archive\\test_uncategorized_original.py",
        "error": "unexpected indent (test_uncategorized_original.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\tools\\migration\\analyze_legacy_code.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ui\\nocode_enhancement.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ui\\unified_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ui_ux\\agent_verse_ui.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ui_ux\\interactive_dashboard.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ui_ux\\studio_interface.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\ui_ux\\__init__.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\unified_tools\\coverage_analysis_master.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "is_test_file": true,
        "analyzed": true
      },
      {
        "file": "TestMaster\\validation\\phase_validator.py",
        "is_test_file": false,
        "analyzed": true
      },
      {
        "file": "TestMaster\\web_monitor\\core.py",
        "error": "expected an indented block after function definition on line 399 (core.py, line 399)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\handlers.py",
        "error": "unexpected indent (handlers.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\utils.py",
        "error": "unexpected indent (utils.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\validators.py",
        "error": "unexpected indent (validators.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\workflow\\consolidation_workflow.py",
        "is_test_file": false,
        "analyzed": true
      }
    ],
    "total_files": 2239,
    "successful_analyses": 2095,
    "errors": [
      {
        "file": "TestMaster\\agentic_test_monitor.py",
        "error": "f-string expression part cannot include a backslash (agentic_test_monitor.py, line 297)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\risk_based_test_targeter.py",
        "error": "invalid syntax. Perhaps you forgot a comma? (risk_based_test_targeter.py, line 393)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\api_templates_original_2813_lines.py",
        "error": "invalid syntax. Perhaps you forgot a comma? (api_templates_original_2813_lines.py, line 749)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\test_misc_original_6141_lines.py",
        "error": "unexpected indent (test_misc_original_6141_lines.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\test_tot_output_original_18164_lines_20250821_040109.py",
        "error": "(unicode error) 'unicodeescape' codec can't decode bytes in position 25-26: truncated \\UXXXXXXXX escape (test_tot_output_original_18164_lines_20250821_040109.py, line 4)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\test_uncategorized_original_3557_lines_20250821_113530.py",
        "error": "unexpected indent (test_uncategorized_original_3557_lines_20250821_113530.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\agentic_test_monitor.py",
        "error": "f-string expression part cannot include a backslash (agentic_test_monitor.py, line 216)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\archive\\original_backup\\agentic_test_monitor.py",
        "error": "f-string expression part cannot include a backslash (agentic_test_monitor.py, line 216)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\business_analyzer_modules\\business_analyzer_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 439) (business_analyzer_analysis.py, line 412)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_analysis.py",
        "error": "unexpected indent (debt_analyzer_analysis.py, line 21)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 531) (debt_analyzer_core.py, line 525)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_core.py, line 576)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_processing.py, line 553)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\ml_api_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_core.py, line 382)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\ml_api_endpoints.py",
        "error": "unterminated triple-quoted string literal (detected at line 400) (ml_api_endpoints.py, line 393)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\ml_api_modules\\ml_api_monitoring.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_monitoring.py, line 351)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part1.py, line 642)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part2.py, line 614)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part1.py, line 491)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part2.py, line 498)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part1.py, line 637)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part2.py, line 641)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part1.py",
        "error": "unterminated string literal (detected at line 25) (neo4j_dominator_part1.py, line 25)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part2.py",
        "error": "unterminated string literal (detected at line 20) (neo4j_dominator_part2.py, line 20)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\ml_security_guardian.py",
        "error": "unexpected character after line continuation character (ml_security_guardian.py, line 222)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 446) (circuit_breaker_ml_algorithms.py, line 425)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_core.py, line 406)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_management.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_management.py, line 436)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_algorithms.py, line 424)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_core.py, line 435)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_optimization.py, line 438)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_algorithms.py, line 486)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_core.py, line 471)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 498) (integrity_ml_guardian_models.py, line 482)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 397) (performance_optimizer_algorithms.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_core.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_optimization.py, line 376)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 557) (sla_ml_optimizer_algorithms.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_core.py, line 546)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_optimization.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_algorithms.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_core.py, line 336)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 387) (ml_infrastructure_orchestrator_models.py, line 363)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 701) (agent_qa_part1.py, line 662)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part2b.py",
        "error": "unexpected indent (agent_qa_part2b.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_analysis.py, line 383)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_core.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 392) (performance_optimization_engine_processing.py, line 342)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_core.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_processing.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 370) (integration_test_suite_validation.py, line 346)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_core.py, line 645)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_validation.py, line 609)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\mcp_testing.py",
        "error": "unmatched ')' (mcp_testing.py, line 93)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\business_analyzer_modules\\business_analyzer_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 439) (business_analyzer_analysis.py, line 412)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_analysis.py",
        "error": "unexpected indent (debt_analyzer_analysis.py, line 21)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_analyzer_modules\\debt_analyzer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 531) (debt_analyzer_core.py, line 525)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_core.py, line 576)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\enterprise_integration_layer_modules\\enterprise_integration_layer_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 591) (enterprise_integration_layer_processing.py, line 553)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\ml_api_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_core.py, line 382)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\ml_api_endpoints.py",
        "error": "unterminated triple-quoted string literal (detected at line 400) (ml_api_endpoints.py, line 393)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\ml_api_modules\\ml_api_monitoring.py",
        "error": "unterminated triple-quoted string literal (detected at line 398) (ml_api_monitoring.py, line 351)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part1.py, line 642)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\agent_coordination_protocols_modules\\agent_coordination_protocols_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 653) (agent_coordination_protocols_part2.py, line 614)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part1.py, line 491)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\resource_coordination_system_modules\\resource_coordination_system_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 509) (resource_coordination_system_part2.py, line 498)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part1.py, line 637)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\coordination\\unified_workflow_orchestrator_modules\\unified_workflow_orchestrator_part2.py",
        "error": "unterminated triple-quoted string literal (detected at line 675) (unified_workflow_orchestrator_part2.py, line 641)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part1.py",
        "error": "unterminated string literal (detected at line 25) (neo4j_dominator_part1.py, line 25)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\revolutionary\\neo4j_dominator_modules\\neo4j_dominator_part2.py",
        "error": "unterminated string literal (detected at line 20) (neo4j_dominator_part2.py, line 20)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\ml_security_guardian.py",
        "error": "unexpected character after line continuation character (ml_security_guardian.py, line 222)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 446) (circuit_breaker_ml_algorithms.py, line 425)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_core.py, line 406)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\circuit_breaker_ml_modules\\circuit_breaker_ml_management.py",
        "error": "unterminated triple-quoted string literal (detected at line 445) (circuit_breaker_ml_management.py, line 436)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_algorithms.py, line 424)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_core.py, line 435)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\delivery_optimizer_modules\\delivery_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 440) (delivery_optimizer_optimization.py, line 438)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_algorithms.py, line 486)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 496) (integrity_ml_guardian_core.py, line 471)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\integrity_ml_guardian_modules\\integrity_ml_guardian_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 498) (integrity_ml_guardian_models.py, line 482)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 397) (performance_optimizer_algorithms.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_core.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\performance_optimizer_modules\\performance_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 396) (performance_optimizer_optimization.py, line 376)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 557) (sla_ml_optimizer_algorithms.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_core.py, line 546)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\advanced\\sla_ml_optimizer_modules\\sla_ml_optimizer_optimization.py",
        "error": "unterminated triple-quoted string literal (detected at line 556) (sla_ml_optimizer_optimization.py, line 538)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_algorithms.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_algorithms.py, line 360)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 385) (ml_infrastructure_orchestrator_core.py, line 336)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\ml\\enterprise\\ml_infrastructure_orchestrator_modules\\ml_infrastructure_orchestrator_models.py",
        "error": "unterminated triple-quoted string literal (detected at line 387) (ml_infrastructure_orchestrator_models.py, line 363)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part1.py",
        "error": "unterminated triple-quoted string literal (detected at line 701) (agent_qa_part1.py, line 662)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\agent_qa_modules\\agent_qa_part2b.py",
        "error": "unexpected indent (agent_qa_part2b.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_analysis.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_analysis.py, line 383)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 391) (performance_optimization_engine_core.py, line 380)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\monitoring\\performance_optimization_engine_modules\\performance_optimization_engine_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 392) (performance_optimization_engine_processing.py, line 342)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_core.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_processing.py",
        "error": "unterminated triple-quoted string literal (detected at line 368) (integration_test_suite_processing.py, line 368)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 370) (integration_test_suite_validation.py, line 346)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_core.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_core.py, line 645)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\system_validation_framework_modules\\system_validation_framework_validation.py",
        "error": "unterminated triple-quoted string literal (detected at line 657) (system_validation_framework_validation.py, line 609)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\testing\\embedding_cache_testing.py",
        "error": "expected '(' (embedding_cache_testing.py, line 164)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\core\\testing\\mcp_testing.py",
        "error": "unmatched ')' (mcp_testing.py, line 93)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\analyzer.py",
        "error": "unexpected indent (analyzer.py, line 5)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\codebase_analyzer.py",
        "error": "unexpected indent (codebase_analyzer.py, line 7)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\dependency_mapper.py",
        "error": "unexpected indent (dependency_mapper.py, line 7)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\coverage\\health_assessment.py",
        "error": "unexpected indent (health_assessment.py, line 7)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\graphql_templates.py",
        "error": "invalid syntax. Perhaps you forgot a comma? (graphql_templates.py, line 33)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\documentation\\templates\\api\\webhook_templates.py",
        "error": "unterminated triple-quoted string literal (detected at line 110) (webhook_templates.py, line 63)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_analysis.py",
        "error": "expected an indented block after function definition on line 12 (test_analysis.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_base.py",
        "error": "expected an indented block after function definition on line 12 (test_base.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_core.py",
        "error": "expected an indented block after function definition on line 12 (test_core.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_dashboard.py",
        "error": "unexpected indent (test_dashboard.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_execution.py",
        "error": "unexpected indent (test_execution.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_generation.py",
        "error": "expected an indented block after function definition on line 12 (test_generation.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_integration.py",
        "error": "expected an indented block after function definition on line 12 (test_integration.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_intelligence.py",
        "error": "expected an indented block after function definition on line 360 (test_intelligence.py, line 363)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_language.py",
        "error": "expected an indented block after function definition on line 12 (test_language.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_messaging.py",
        "error": "expected an indented block after function definition on line 12 (test_messaging.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_monitoring.py",
        "error": "unexpected indent (test_monitoring.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_performance.py",
        "error": "expected an indented block after function definition on line 12 (test_performance.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_quality.py",
        "error": "expected an indented block after function definition on line 12 (test_quality.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_reasoning.py",
        "error": "expected an indented block after function definition on line 12 (test_reasoning.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_reporting.py",
        "error": "expected an indented block after function definition on line 12 (test_reporting.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_self_healing.py",
        "error": "expected an indented block after function definition on line 12 (test_self_healing.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_streaming.py",
        "error": "expected an indented block after function definition on line 12 (test_streaming.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_tagging.py",
        "error": "expected an indented block after function definition on line 12 (test_tagging.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_telemetry.py",
        "error": "expected an indented block after function definition on line 12 (test_telemetry.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_workflow.py",
        "error": "expected an indented block after function definition on line 12 (test_workflow.py, line 15)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_builders.py",
        "error": "unexpected indent (test_builders.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_converters.py",
        "error": "unexpected indent (test_converters.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_engines.py",
        "error": "unexpected indent (test_engines.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_frameworks.py",
        "error": "unexpected indent (test_frameworks.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_handlers.py",
        "error": "unexpected indent (test_handlers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_integrations.py",
        "error": "unexpected indent (test_integrations.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_layers.py",
        "error": "unexpected indent (test_layers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_managers.py",
        "error": "unexpected indent (test_managers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_parsers.py",
        "error": "unexpected indent (test_parsers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_systems.py",
        "error": "unexpected indent (test_systems.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_trackers.py",
        "error": "unexpected indent (test_trackers.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_uncategorized.py",
        "error": "unexpected indent (test_uncategorized.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\archive\\test_uncategorized_original.py",
        "error": "unexpected indent (test_uncategorized_original.py, line 9)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\core.py",
        "error": "expected an indented block after function definition on line 399 (core.py, line 399)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\handlers.py",
        "error": "unexpected indent (handlers.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\utils.py",
        "error": "unexpected indent (utils.py, line 1)",
        "analyzed": false
      },
      {
        "file": "TestMaster\\web_monitor\\validators.py",
        "error": "unexpected indent (validators.py, line 1)",
        "analyzed": false
      }
    ]
  },
  "summary": {
    "testing_statistics": {
      "total_test_files": 629,
      "total_test_functions": 1368,
      "total_test_classes": 1007,
      "testing_frameworks": {
        "unittest": 221,
        "pytest": 242,
        "mock": 180,
        "nose": 2,
        "doctest": 1,
        "hypothesis": 1,
        "faker": 1,
        "factory_boy": 1,
        "responses": 1
      },
      "assertion_patterns": {
        "assertIsNotNone": 62,
        "assertTrue": 57,
        "assertIn": 146,
        "assertNotIn": 4,
        "assertGreater": 128,
        "assertEqual": 113,
        "assertFalse": 22,
        "assertLess": 35,
        "assertLessEqual": 3,
        "assertGreaterEqual": 7,
        "assertIsInstance": 13,
        "assert_called_once": 5
      },
      "mock_usage_patterns": {
        "improve_mock_behavior": 4,
        "add_mock_helpers": 4,
        "Patch": 1,
        "_count_mocks": 1,
        "_generate_mock_test": 3,
        "_generate_mock_tests": 3,
        "fix_mock_issues": 3,
        "_dispatch_step_execution": 1,
        "_mock_api_call": 4,
        "_mock_workflow_execution": 1,
        "_mock_dependency_validation": 1,
        "_mock_task_execution": 1,
        "_mock_error_handling": 1,
        "_mock_protocol_adapter_test": 1,
        "_mock_data_transformation": 1,
        "_mock_message_routing": 1,
        "_mock_enterprise_pattern": 1,
        "_mock_service_discovery": 1,
        "_mock_distributed_locking": 1,
        "_mock_resource_coordination": 1,
        "_mock_load_balancer_request": 1,
        "_get_mock_metrics": 2,
        "_initialize_mock_components": 2,
        "_create_mock_module_set": 14,
        "_uses_mocking": 2,
        "MockAgent": 4,
        "MockMessage": 6,
        "MockSequentialPipeline": 2,
        "MockModel": 4,
        "MockReActAgent": 4,
        "MockFormatter": 2,
        "MockEmbeddingCache": 6,
        "MockTool": 6,
        "MockToolkit": 2,
        "create_mock_guardrail": 4,
        "MockGraph": 2,
        "MockDatabase": 12,
        "MockNode": 34,
        "MockEdge": 36,
        "MockPath": 2,
        "MockConstraint": 6,
        "MockIndex": 10,
        "MockProfiler": 4,
        "_generate_mock_chart": 12,
        "_create_mock_result": 6,
        "create_mock_media_file": 4,
        "create_mock_database": 6,
        "create_mock_graph": 8,
        "create_mock_event": 4,
        "_create_mock_codebase": 2,
        "_mock_ingest_codebase": 2,
        "_mock_parse_languages": 2,
        "_mock_build_graph": 2,
        "_mock_ai_analysis": 2,
        "_mock_generate_visualization": 2,
        "_mock_start_monitoring": 2,
        "_mock_detect_change": 2,
        "_mock_update_graph": 2,
        "_mock_analyze_impact": 2,
        "_mock_process_nl_query": 2,
        "_mock_semantic_search": 2,
        "_mock_rank_results": 2,
        "_mock_generate_response": 2,
        "_mock_present_results": 2,
        "_mock_security_scan": 2,
        "_mock_ai_vulnerability_analysis": 2,
        "_mock_predict_zero_days": 2,
        "_mock_generate_fixes": 2,
        "_mock_create_security_report": 2,
        "_mock_analyze_for_testing": 2,
        "_mock_generate_tests": 2,
        "_mock_self_heal_tests": 2,
        "_mock_execute_tests": 2,
        "_mock_calculate_coverage": 2,
        "_mock_test_integration": 2,
        "create_mock_structured_models": 4,
        "_analyze_mock_dependencies": 2,
        "_count_mocks_in_test": 1,
        "_detect_mock_smells": 1,
        "_dispatch_event": 1,
        "_create_mock_archive_system": 1
      },
      "average_assertions_per_test": 1.5818713450292399,
      "average_test_complexity": 2.2923976608187133
    },
    "framework_analysis": {
      "frameworks_in_use": 9,
      "framework_distribution": {
        "unittest": 221,
        "pytest": 242,
        "mock": 180,
        "nose": 2,
        "doctest": 1,
        "hypothesis": 1,
        "faker": 1,
        "factory_boy": 1,
        "responses": 1
      },
      "consolidation_recommendation": "consolidate",
      "primary_framework": "pytest",
      "consolidation_benefit": "Reduce from 9 to 1-2 frameworks"
    },
    "quality_analysis": {
      "coverage_gaps": 2,
      "quality_issues": 2,
      "duplicate_patterns": 10
    },
    "testing_opportunities": {
      "framework_consolidation": {
        "frameworks_in_use": 9,
        "framework_distribution": {
          "unittest": 221,
          "pytest": 242,
          "mock": 180,
          "nose": 2,
          "doctest": 1,
          "hypothesis": 1,
          "faker": 1,
          "factory_boy": 1,
          "responses": 1
        },
        "consolidation_recommendation": "consolidate",
        "primary_framework": "pytest",
        "consolidation_benefit": "Reduce from 9 to 1-2 frameworks"
      },
      "test_coverage_gaps": [
        {
          "type": "no_coverage_indicators",
          "count": 628,
          "files": [
            "TestMaster\\agentic_test_monitor.py",
            "TestMaster\\batch_convert_broken_tests.py",
            "TestMaster\\comprehensive_codebase_analysis.py",
            "TestMaster\\contribution_analysis_detailed.py",
            "TestMaster\\convert_batch_small.py",
            "TestMaster\\convert_with_genai_sdk.py",
            "TestMaster\\convert_with_generativeai.py",
            "TestMaster\\debug_integration_tests.py",
            "TestMaster\\enable_deep_integration.py",
            "TestMaster\\enhanced_context_aware_test_generator.py"
          ]
        },
        {
          "type": "tests_without_assertions",
          "count": 445,
          "examples": [
            "TestMaster\\debug_integration_tests.py::test_cross_system_communication",
            "TestMaster\\debug_integration_tests.py::test_distributed_task_queue",
            "TestMaster\\debug_integration_tests.py::test_intelligent_caching_layer",
            "TestMaster\\debug_integration_tests.py::test_load_balancing_system",
            "TestMaster\\enable_deep_integration.py::test_integration_workflow"
          ]
        }
      ],
      "test_quality_issues": [
        {
          "type": "complex_test_functions",
          "count": 99,
          "examples": [
            "TestMaster\\enable_deep_integration.py::test_integration_workflow (complexity: 6)",
            "TestMaster\\quick_test_summary.py::test_file (complexity: 6)",
            "TestMaster\\simple_test.py::test_implementations (complexity: 11)",
            "TestMaster\\test_advanced_telemetry_system.py::test_system_profiler (complexity: 6)",
            "TestMaster\\test_api_functionality.py::test_api_blueprints (complexity: 7)"
          ]
        },
        {
          "type": "assertion_heavy_tests",
          "count": 8,
          "examples": [
            "TestMaster\\test_dynamic_handoff_integration.py::test_dynamic_handoff_integration (17 assertions)",
            "TestMaster\\test_exhaustive_features.py::test_actual_functionality (14 assertions)",
            "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py::test_complete_generation_flow (12 assertions)",
            "TestMaster\\archive\\legacy_scripts\\simple_100_percent.py::test_all_modules (11 assertions)",
            "TestMaster\\archive\\original_backup\\scripts\\simple_100_percent.py::test_all_modules (11 assertions)"
          ]
        }
      ],
      "duplicate_test_patterns": [
        {
          "pattern": "test_endpoint",
          "test_count": 9,
          "files": [
            "TestMaster\\core\\domains\\intelligence\\testing\\security_fuzzer.py",
            "TestMaster\\dashboard\\test_api_endpoints.py",
            "TestMaster\\core\\domains\\intelligence\\documentation\\interactive_docs.py",
            "TestMaster\\core\\intelligence\\documentation\\interactive_docs.py",
            "TestMaster\\dashboard\\test_new_robustness_features.py",
            "TestMaster\\core\\intelligence\\testing\\security_fuzzer.py",
            "TestMaster\\core\\domains\\intelligence\\documentation\\docs_api.py",
            "TestMaster\\core\\intelligence\\documentation\\docs_api.py",
            "TestMaster\\dashboard\\test_robustness_verification.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_error_handling",
          "test_count": 6,
          "files": [
            "TestMaster\\test_agent_qa_integration.py",
            "TestMaster\\dashboard\\test_frontend_integration.py",
            "TestMaster\\dashboard\\demo_automated_frontend_testing.py",
            "TestMaster\\core\\testing\\multimodal_validation_testing.py",
            "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
            "TestMaster\\dashboard\\automated_frontend_tester.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_integration",
          "test_count": 5,
          "files": [
            "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\web_monitor.py",
            "TestMaster\\simple_consolidation_test.py",
            "TestMaster\\web_monitor.py",
            "TestMaster\\test_backend_health.py",
            "TestMaster\\archive\\20250818\\web_monitor.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_test_generate_tests_returns_value",
          "test_count": 5,
          "files": [
            "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_test_generate_tests_handles_none",
          "test_count": 5,
          "files": [
            "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_gemini_connection",
          "test_count": 4,
          "files": [
            "TestMaster\\intelligent_test_builder.py",
            "TestMaster\\archive\\original_backup\\intelligent_test_builder.py",
            "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder.py",
            "TestMaster\\testmaster\\generators\\intelligent.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_imports",
          "test_count": 4,
          "files": [
            "TestMaster\\test_phase2_simple.py",
            "TestMaster\\test_phase1_simple.py",
            "TestMaster\\test_intelligence_integration.py",
            "TestMaster\\simple_consolidation_test.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_basic_functionality",
          "test_count": 4,
          "files": [
            "TestMaster\\test_agent_qa_integration.py",
            "TestMaster\\test_phase2_simple.py",
            "TestMaster\\test_phase1_simple.py",
            "TestMaster\\test_phase2_simple_validation.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_api_endpoints",
          "test_count": 4,
          "files": [
            "TestMaster\\test_backend_health.py",
            "TestMaster\\dashboard\\test_frontend_integration.py",
            "TestMaster\\dashboard\\automated_frontend_tester.py",
            "TestMaster\\test_intelligence_integration.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        },
        {
          "pattern": "test_performance_monitoring",
          "test_count": 4,
          "files": [
            "TestMaster\\test_enhancements.py",
            "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
            "TestMaster\\core\\testing\\graph_performance_testing.py",
            "TestMaster\\dashboard\\test_multi_agent_integration.py"
          ],
          "consolidation_opportunity": "parametrize_tests"
        }
      ],
      "testing_best_practices": {
        "practice_metrics": {
          "fixture_usage": 78,
          "mock_usage": 169,
          "parametrized_tests": 38,
          "async_test_coverage": 109,
          "setup_teardown_usage": 44
        },
        "recommendations": [
          "Consider using more fixtures for test setup",
          "Consider using more mocks for unit test isolation"
        ]
      }
    },
    "testing_health_score": 25.0,
    "recommendations": [
      "Consolidate from 9 testing frameworks to 1-2",
      "Add assertions to 445 test functions",
      "Simplify 99 overly complex test functions"
    ]
  },
  "raw_data": {
    "test_files": [
      {
        "file": "TestMaster\\agentic_test_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\batch_convert_broken_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\comprehensive_codebase_analysis.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\contribution_analysis_detailed.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\convert_batch_small.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\convert_with_genai_sdk.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\convert_with_generativeai.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\debug_integration_tests.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\enable_deep_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\enhanced_context_aware_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "property_based_tests"
        ]
      },
      {
        "file": "TestMaster\\enhanced_incremental_ast_engine.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\enhanced_intelligent_test_builder.py",
        "type": "unittest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\enhanced_self_healing_verifier.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\enhance_auto_generated_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\fix_backend_issues.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\fix_enhanced_test_imports.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\fix_failing_tests.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\fix_integration_tests.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\fix_integration_tests_simple.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\fix_testmaster_imports.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\fix_tests_for_real_modules.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\fix_to_100_percent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\fix_week2_test_imports.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\implement_test_stubs.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\independent_test_verifier.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\integration_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\intelligent_test_builder.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\intelligent_test_builder_offline.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\intelligent_test_builder_v2.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\quick_test_summary.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\refine_misc_tests.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\restored_asyncio_5.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\restored_logging_5.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\restored_threading_4.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\restored_threading_5.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\restored_time_5.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\restored_uuid_5.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\risk_based_test_targeter.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\run_integration_test.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\run_intelligent_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\simple_consolidation_test.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\simple_test.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\simple_test_runner.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\specialized_test_generators.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_decorators"
        ]
      },
      {
        "file": "TestMaster\\split_massive_test_file.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testing_framework_analyzer.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "nose",
          "doctest",
          "hypothesis",
          "mock",
          "faker",
          "factory_boy",
          "responses"
        ],
        "patterns": [
          "pytest_fixtures",
          "unittest_setup_teardown",
          "parametrized_tests",
          "mock_decorators",
          "mock_objects",
          "skipped_tests",
          "async_tests",
          "property_based_tests"
        ]
      },
      {
        "file": "TestMaster\\testmaster_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_100_percent_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_after_refactor.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_agent_b_integrations.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_agent_qa_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_agent_qa_system.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_analyzer_tab.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_api_functionality.py",
        "type": "functional_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_async_processing.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_backend_health.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_before_refactor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_classical_analysis.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_complexity_prioritizer.py",
        "type": "unittest",
        "framework": [],
        "patterns": [
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\test_comprehensive_analysis.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_config_intelligence.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_dependency_orderer.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_dynamic_handoff_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_enhanced_analysis.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_enhanced_core_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_enhanced_server.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_enhancements.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_exhaustive_features.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_final_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_flow_optimizer_system.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_hierarchical_planning_complete.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_integration_systems.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_intelligence_integration.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_llm_intelligence.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_multi_objective_optimization.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_our_implementations.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_performance_dashboard_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_phase1_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_phase1_simple.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_phase2_exhaustive_validation.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_phase2_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_phase2_simple.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_phase2_simple_validation.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_phase3_complete.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_phase3_deployment.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_phase3_ui.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_reporting_system.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_routes.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_safe_consolidation.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_security_api_server.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_streaming_generation.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_streaming_simple.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_tot_integration.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_unified_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\test_universal_ast_system.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\test_universal_language_detector.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\web_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\write_real_tests.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\agents\\roles\\base_role.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\agents\\roles\\test_architect.py",
        "type": "unittest",
        "framework": [
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\agents\\roles\\test_coordinator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\agents\\roles\\test_engineer.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\agents\\roles\\test_executor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\agents\\supervisor\\testing_supervisor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\agents\\team\\testing_team.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\api_templates_original_2813_lines.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\test_misc_original_6141_lines.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\test_tot_output_original_18164_lines_20250821_040109.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\test_uncategorized_original_3557_lines_20250821_113530.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\20250818\\web_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_enhanced_test_imports.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_failing_tests.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_tests_for_real_modules.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_week2_test_imports.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\web_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\achieve_100_percent.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\achieve_100_percent_coverage.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\agentic_test_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\ai_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\automated_test_generation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "parametrized_tests",
          "mock_decorators",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\batch_gemini_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\branch_coverage_analyzer.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\check_what_needs_tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\comprehensive_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_decorators",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\convert_batch_small.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\convert_with_genai_sdk.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\convert_with_generativeai.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\coverage_improver.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\enhanced_context_aware_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "property_based_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\enhance_auto_generated_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fast_converter.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_enhanced_test_imports.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_failing_tests.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_remaining_issues.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_tests_for_real_modules.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_test_infrastructure.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\fix_week2_test_imports.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\gemini_powered_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\gemini_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\generate_coverage_sequential.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\implement_test_stubs.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\independent_test_verifier.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_matrix.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_converter.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder_offline.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder_v2.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\parallel_coverage_converter.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\quick_coverage_boost.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\quick_test_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\quick_test_summary.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\run_intelligent_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\simple_100_percent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\simple_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\simple_test_runner.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\smart_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_decorators"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\systematic_coverage.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\testmaster_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_gemini_api.py",
        "type": "nose",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_gemini_config.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_gemini_correct.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_single_api_call.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_single_generation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\test_updated_prompt.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\working_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\legacy_scripts\\write_real_tests.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\modularization_20250820_222253\\testing_hub_original_1375_lines.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\agentic_test_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\convert_batch_small.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\convert_with_genai_sdk.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\convert_with_generativeai.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\enhanced_context_aware_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "property_based_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\enhance_auto_generated_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_enhanced_test_imports.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_failing_tests.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_tests_for_real_modules.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\fix_week2_test_imports.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\implement_test_stubs.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\independent_test_verifier.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\integration_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder_offline.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder_v2.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\quick_test_summary.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\run_intelligent_tests.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\simple_test_runner.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_decorators"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\testmaster_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\write_real_tests.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\cache\\intelligent_cache.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\dashboard\\quality_dashboard.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\deduplication\\test_deduplicator.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\incremental\\dependency_tracker.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\optimization\\execution_optimizer.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\achieve_100_percent.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\achieve_100_percent_coverage.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\ai_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\batch_gemini_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\branch_coverage_analyzer.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\check_what_needs_tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\coverage_improver.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fast_converter.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_remaining_issues.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_test_infrastructure.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\gemini_powered_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\gemini_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\generate_coverage_sequential.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\intelligent_converter.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\parallel_coverage_converter.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\parallel_coverage_converter_fixed.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\quick_coverage_boost.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\quick_test_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\simple_100_percent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\simple_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\smart_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\systematic_coverage.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_gemini_api.py",
        "type": "nose",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_gemini_config.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_gemini_correct.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_single_api_call.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_single_generation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_updated_prompt.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\scripts\\working_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\automated_test_generation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "parametrized_tests",
          "mock_decorators",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\comprehensive_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_decorators",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\original_backup\\src\\integration_test_matrix.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\agent_ops.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\unified_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\cross_module_tester.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195114.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195132.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\agent_graph_20250819_195602.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\testing_team_20250819_195602.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\phase6_archive\\replaced_code\\agent_graph_20250819_200928.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\archive\\state_cache_consolidation_20250821_084236\\parallel_coverage_converter.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\cache\\intelligent_cache.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\config\\enhanced_unified_config.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\config\\testmaster_config.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\config\\unified_config.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\config\\modules\\testing_config.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_test_analyzer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\qa_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\serializers.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\api\\testing_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\compatibility\\__init__.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_testing_framework.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\interactive_docs.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\validation\\penetration_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation_engine.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\base.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\contract_tester.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\flaky_test_detector.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\load_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\property_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\quality_dashboard.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\regression_detector.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security_fuzzer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\testing_api.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_analytics.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_intelligence.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_quality_scorer.py",
        "type": "unittest",
        "framework": [],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_selector.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\universal_ai_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\coverage_analyzer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\execution_engine.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\api_security_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_core.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_processing.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_validation.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\development_tools_ui.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_decorators",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_async_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "parametrized_tests",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "parametrized_tests",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\mcp_testing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\parallel_test_executor.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\pattern_consolidation_engine.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\performance_test_suite.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_decorators",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\run_all_tests.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "property_based_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "parametrized_tests",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_coverage_optimizer.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "type": "unittest",
        "framework": [],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_intelligence_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_quality_analyzer.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\agent_ops_separate.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor_enhanced.stub_backup.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\final_validation_suite.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_test_analyzer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\qa_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\serializers.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\api\\testing_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\compatibility\\__init__.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_testing_framework.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\documentation\\interactive_docs.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\validation\\penetration_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation_engine.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\base.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\contract_tester.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\flaky_test_detector.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\load_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\property_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\quality_dashboard.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\regression_detector.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security_fuzzer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\testing_api.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_analytics.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_intelligence.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_quality_scorer.py",
        "type": "unittest",
        "framework": [],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\test_selector.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\universal_ai_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\coverage_analyzer.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\execution_engine.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\testing\\security\\api_security_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_core.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_processing.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\validation\\integration_test_suite_modules\\integration_test_suite_validation.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\intelligence\\visualization\\development_tools_ui.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\observability\\agent_ops_separate.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\observability\\unified_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\observability\\unified_monitor_enhanced.stub_backup.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\observability\\__init__.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\orchestration\\agent_graph.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_decorators",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\embedding_cache_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\graph_async_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "parametrized_tests",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "parametrized_tests",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\mcp_testing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\parallel_test_executor.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\pattern_consolidation_engine.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\performance_test_suite.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_decorators",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\run_all_tests.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "property_based_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "parametrized_tests",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_coverage_optimizer.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "type": "unittest",
        "framework": [],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_intelligence_orchestrator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_quality_analyzer.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\core\\tools\\type_safe_tools.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\dashboard\\comprehensive_frontend_test.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\debug_blueprints.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\demo_automated_frontend_testing.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\quality_dashboard.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\quick_frontend_test.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\quick_integration_test.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\quick_validation.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\simple_robustness_test.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_analytics_import.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_api_endpoints.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\dashboard\\test_frontend_without_browser.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_new_robustness_features.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_new_visualization_apis.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_robustness_verification.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "type": "unittest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\ultimate_frontend_validator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\crew_orchestration.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\monitoring.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\observability.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\phase2_api.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\production_deployment.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\api\\test_generation.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\dashboard\\dashboard_core\\test_collector.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "nose"
        ],
        "patterns": [
          "pytest_fixtures",
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\deduplication\\test_deduplicator.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\incremental\\dependency_tracker.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\observability\\core\\session_tracking.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\operational\\agent_integration_validator.py",
        "type": "pytest",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\operational\\infrastructure_validation_suite.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\optimization\\execution_optimizer.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\prioritization\\test_prioritizer.py",
        "type": "mock_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\achieve_100_percent.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\achieve_100_percent_coverage.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\ai_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\batch_gemini_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\branch_coverage_analyzer.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\check_what_needs_tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\coverage_improver.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\fast_converter.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\fix_remaining_issues.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\fix_test_infrastructure.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\gemini_powered_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\gemini_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\generate_coverage_sequential.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\intelligent_converter.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\quick_coverage_boost.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\quick_test_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\simple_100_percent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\simple_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\smart_test_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\systematic_coverage.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\test_gemini_api.py",
        "type": "nose",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\test_gemini_config.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\scripts\\test_gemini_correct.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\test_single_api_call.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\test_single_generation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\scripts\\test_updated_prompt.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\scripts\\working_test_generator.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\src\\automated_test_generation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "parametrized_tests",
          "mock_decorators",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\src\\comprehensive_test_framework.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "mock_decorators",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\src\\data_flow_tests.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\src\\integration_test_matrix.py",
        "type": "mock_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\layer2_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
        "type": "unittest",
        "framework": [
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\testmaster\\communication\\claude_messenger.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\converters\\intelligent.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\core\\config.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\core\\exceptions.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "pytest_fixtures",
          "unittest_setup_teardown",
          "parametrized_tests",
          "skipped_tests"
        ]
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "type": "pytest",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\__init__.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\core\\language_detection\\universal_detector.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\generators\\base.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\generators\\intelligent.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\integration\\final_integration_test.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\event_monitoring_bridge.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\agent_coordination.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\consensus_engine.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\llm_integration.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\test_optimization_objectives.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
        "type": "integration_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\mapping\\test_mapper.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\file_watcher.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\test_monitor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\monitoring\\test_scheduler.py",
        "type": "pytest",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\orchestration\\framework_adapter.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\orchestration\\output_system.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\orchestrator\\work_distributor.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\security\\security_test_generator.py",
        "type": "unknown_test",
        "framework": [
          "unittest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\incremental_enhancer.py",
        "type": "unittest",
        "framework": [
          "unittest"
        ],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\testmaster\\streaming\\stream_generator.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown"
        ]
      },
      {
        "file": "TestMaster\\testmaster\\ui\\dashboard.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\testmaster\\verification\\quality.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "mock"
        ],
        "patterns": [
          "unittest_setup_teardown",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\test_phase2_e2e_validation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "unittest_setup_teardown",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures",
          "mock_objects",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_simple.py",
        "type": "integration_test",
        "framework": [],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_analysis.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_base.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_core.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_dashboard.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_execution.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_generation.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_integration.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_intelligence.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "parametrized_tests",
          "mock_objects"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_language.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_messaging.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_monitoring.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_performance.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_quality.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_reasoning.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_reporting.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_self_healing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_streaming.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_tagging.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_telemetry.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\test_workflow.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_builders.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_converters.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_engines.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_frameworks.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_handlers.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_integrations.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_layers.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "parametrized_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_managers.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_parsers.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_systems.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_trackers.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\test_uncategorized.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\archive\\test_uncategorized_original.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": [
          "parametrized_tests",
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "type": "pytest",
        "framework": [
          "unittest",
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": [
          "async_tests"
        ]
      },
      {
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "type": "pytest",
        "framework": [
          "pytest"
        ],
        "patterns": []
      },
      {
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "type": "unittest",
        "framework": [
          "unittest",
          "pytest",
          "mock"
        ],
        "patterns": [
          "pytest_fixtures"
        ]
      },
      {
        "file": "TestMaster\\web_monitor\\handlers.py",
        "type": "unknown_test",
        "framework": [],
        "patterns": []
      }
    ],
    "test_functions": [
      {
        "name": "test_cross_system_communication",
        "file": "TestMaster\\debug_integration_tests.py",
        "line": 9,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_distributed_task_queue",
        "file": "TestMaster\\debug_integration_tests.py",
        "line": 45,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_intelligent_caching_layer",
        "file": "TestMaster\\debug_integration_tests.py",
        "line": 85,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_load_balancing_system",
        "file": "TestMaster\\debug_integration_tests.py",
        "line": 125,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_integration_workflow",
        "file": "TestMaster\\enable_deep_integration.py",
        "line": 167,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_gemini_connection",
        "file": "TestMaster\\intelligent_test_builder.py",
        "line": 418,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_file",
        "file": "TestMaster\\quick_test_summary.py",
        "line": 10,
        "args": [
          "test_path"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_imports",
        "file": "TestMaster\\simple_consolidation_test.py",
        "line": 16,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_integration",
        "file": "TestMaster\\simple_consolidation_test.py",
        "line": 36,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_implementations",
        "file": "TestMaster\\simple_test.py",
        "line": 13,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 11
      },
      {
        "name": "test_telemetry_collector",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 18,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_listener",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 76,
        "args": [
          "event"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_performance_monitor",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 95,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_function",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 115,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_flow_analyzer",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 151,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_system_profiler",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 213,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_telemetry_dashboard",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 269,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_telemetry_integration",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 317,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_telemetry_performance",
        "file": "TestMaster\\test_advanced_telemetry_system.py",
        "line": 380,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_new_names_work",
        "file": "TestMaster\\test_after_refactor.py",
        "line": 13,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_old_names_still_work",
        "file": "TestMaster\\test_after_refactor.py",
        "line": 42,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_orchestrator_with_new_names",
        "file": "TestMaster\\test_after_refactor.py",
        "line": 71,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_orchestrator_backward_compat",
        "file": "TestMaster\\test_after_refactor.py",
        "line": 102,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_main_module_updated",
        "file": "TestMaster\\test_after_refactor.py",
        "line": 136,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_aliases_are_same",
        "file": "TestMaster\\test_after_refactor.py",
        "line": 181,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_ml_analyzer",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 19,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_semantic_analyzer",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 45,
        "args": [],
        "decorators": [],
        "assertions": 9,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_business_analyzer",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 80,
        "args": [],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_debt_analyzer",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 106,
        "args": [],
        "decorators": [],
        "assertions": 9,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_analysis_hub",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 139,
        "args": [],
        "decorators": [],
        "assertions": 10,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_agent_qa",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 172,
        "args": [],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_convenience_functions",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 203,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_monitoring_hub",
        "file": "TestMaster\\test_agent_b_integrations.py",
        "line": 232,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_basic_functionality",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 40,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_inspection",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 70,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_output_validation",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 105,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_quality_scoring",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 152,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_performance_benchmarking",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 220,
        "args": [],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_monitoring",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 263,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_history_and_trends",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 304,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_custom_rules_and_configuration",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 345,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_error_handling",
        "file": "TestMaster\\test_agent_qa_integration.py",
        "line": 401,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_module_imports",
        "file": "TestMaster\\test_api_functionality.py",
        "line": 20,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_api_blueprints",
        "file": "TestMaster\\test_api_functionality.py",
        "line": 66,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_endpoint_registration",
        "file": "TestMaster\\test_api_functionality.py",
        "line": 118,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_functionality_execution",
        "file": "TestMaster\\test_api_functionality.py",
        "line": 140,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_sync_task",
        "file": "TestMaster\\test_async_processing.py",
        "line": 89,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_component",
        "file": "TestMaster\\test_backend_health.py",
        "line": 39,
        "args": [
          "self",
          "name",
          "test_func"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_core_components",
        "file": "TestMaster\\test_backend_health.py",
        "line": 60,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_orchestration",
        "file": "TestMaster\\test_backend_health.py",
        "line": 69,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_observability",
        "file": "TestMaster\\test_backend_health.py",
        "line": 79,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_tools",
        "file": "TestMaster\\test_backend_health.py",
        "line": 89,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_state_managers",
        "file": "TestMaster\\test_backend_health.py",
        "line": 101,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_shared_state",
        "file": "TestMaster\\test_backend_health.py",
        "line": 110,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_async_state",
        "file": "TestMaster\\test_backend_health.py",
        "line": 121,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_unified_state",
        "file": "TestMaster\\test_backend_health.py",
        "line": 131,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_feature_flags",
        "file": "TestMaster\\test_backend_health.py",
        "line": 141,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_integration_systems",
        "file": "TestMaster\\test_backend_health.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_integration",
        "file": "TestMaster\\test_backend_health.py",
        "line": 177,
        "args": [
          "mod"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_monitoring_systems",
        "file": "TestMaster\\test_backend_health.py",
        "line": 189,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_realtime_monitor",
        "file": "TestMaster\\test_backend_health.py",
        "line": 198,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_metrics_cache",
        "file": "TestMaster\\test_backend_health.py",
        "line": 212,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_analytics",
        "file": "TestMaster\\test_backend_health.py",
        "line": 223,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_api_endpoints",
        "file": "TestMaster\\test_backend_health.py",
        "line": 235,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_blueprint",
        "file": "TestMaster\\test_backend_health.py",
        "line": 275,
        "args": [
          "mod",
          "bp"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_intelligence_agents",
        "file": "TestMaster\\test_backend_health.py",
        "line": 304,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_consensus",
        "file": "TestMaster\\test_backend_health.py",
        "line": 313,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_security",
        "file": "TestMaster\\test_backend_health.py",
        "line": 323,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_optimization",
        "file": "TestMaster\\test_backend_health.py",
        "line": 333,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_orchestrator_functionality",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 13,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_main_module",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 44,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_intelligence_imports",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 82,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_config_creation",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 113,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_tot_generator",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 151,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_reasoning_components",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 180,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_strategies",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 228,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_orchestration_modes",
        "file": "TestMaster\\test_before_refactor.py",
        "line": 252,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_classical_analysis",
        "file": "TestMaster\\test_classical_analysis.py",
        "line": 19,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 23
      },
      {
        "name": "test_specific_module",
        "file": "TestMaster\\test_classical_analysis.py",
        "line": 228,
        "args": [
          "module_name"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_comprehensive_analysis",
        "file": "TestMaster\\test_comprehensive_analysis.py",
        "line": 16,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_individual_components",
        "file": "TestMaster\\test_comprehensive_analysis.py",
        "line": 85,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_configuration_intelligence",
        "file": "TestMaster\\test_config_intelligence.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_observer",
        "file": "TestMaster\\test_config_intelligence.py",
        "line": 94,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_dynamic_handoff_integration",
        "file": "TestMaster\\test_dynamic_handoff_integration.py",
        "line": 16,
        "args": [],
        "decorators": [],
        "assertions": 17,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_handoff_fallback_behavior",
        "file": "TestMaster\\test_dynamic_handoff_integration.py",
        "line": 134,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_performance_monitoring_integration",
        "file": "TestMaster\\test_dynamic_handoff_integration.py",
        "line": 170,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_enhanced_analysis",
        "file": "TestMaster\\test_enhanced_analysis.py",
        "line": 16,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_enhanced_core_integration",
        "file": "TestMaster\\test_enhanced_core_integration.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 27
      },
      {
        "name": "test_feature_flags",
        "file": "TestMaster\\test_enhancements.py",
        "line": 24,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_shared_state",
        "file": "TestMaster\\test_enhancements.py",
        "line": 53,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_performance_monitoring",
        "file": "TestMaster\\test_enhancements.py",
        "line": 95,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_func",
        "file": "TestMaster\\test_enhancements.py",
        "line": 108,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_context_preservation",
        "file": "TestMaster\\test_enhancements.py",
        "line": 128,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_advanced_configuration",
        "file": "TestMaster\\test_enhancements.py",
        "line": 174,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_handoff_manager",
        "file": "TestMaster\\test_enhancements.py",
        "line": 209,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_base_generator_integration",
        "file": "TestMaster\\test_enhancements.py",
        "line": 253,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_feature_toggles",
        "file": "TestMaster\\test_enhancements.py",
        "line": 297,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_func_disabled",
        "file": "TestMaster\\test_enhancements.py",
        "line": 314,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_all_tot_classes",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_all_methods",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 61,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_all_enums",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 124,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_config_fields",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 165,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_actual_functionality",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 210,
        "args": [],
        "decorators": [],
        "assertions": 14,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_backward_compatibility",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 333,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_htp_specific_features",
        "file": "TestMaster\\test_exhaustive_features.py",
        "line": 382,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_orchestrator_usage",
        "file": "TestMaster\\test_final_integration.py",
        "line": 11,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_main_module_usage",
        "file": "TestMaster\\test_final_integration.py",
        "line": 39,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_all_features_available",
        "file": "TestMaster\\test_final_integration.py",
        "line": 61,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_generation_with_unified",
        "file": "TestMaster\\test_final_integration.py",
        "line": 111,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_workflow_graph_basic",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 19,
        "args": [],
        "decorators": [],
        "assertions": 10,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_action",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 40,
        "args": [
          "context"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_condition",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 43,
        "args": [
          "context"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_workflow_graph_parallel",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 83,
        "args": [],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_monitor_integration",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 143,
        "args": [],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_file_watcher_integration",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 196,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_callback",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 219,
        "args": [
          "event"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_workflow_error_handling",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 239,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_workflow_async_execution",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 280,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_workflow_disabled_fallback",
        "file": "TestMaster\\test_graph_workflow_integration.py",
        "line": 321,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_component",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 42,
        "args": [
          "self",
          "name",
          "test_func",
          "timeout"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_automatic_scaling_system",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 78,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_comprehensive_error_recovery",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cross_system_communication",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 135,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_distributed_task_queue",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 164,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_intelligent_caching_layer",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 196,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_load_balancing_system",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 229,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multi_environment_support",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 261,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_predictive_analytics_engine",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 296,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_realtime_performance_monitoring",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 329,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_resource_optimization_engine",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 363,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_service_mesh_integration",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 399,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cross_system_integration",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 442,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_system_performance_under_load",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 477,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_fault_tolerance",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 509,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_imports",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 18,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_hub_initialization",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 76,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_component_delegation",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 111,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_api_endpoints",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 166,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_data_serialization",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 195,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_request_validation",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 239,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cross_component_interaction",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 274,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_backward_compatibility",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 317,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_module_sizes",
        "file": "TestMaster\\test_intelligence_integration.py",
        "line": 371,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_basic_optimization",
        "file": "TestMaster\\test_multi_objective_optimization.py",
        "line": 82,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_nsga2_optimization",
        "file": "TestMaster\\test_multi_objective_optimization.py",
        "line": 157,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_balanced_optimization",
        "file": "TestMaster\\test_multi_objective_optimization.py",
        "line": 219,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_realtime_metrics_collector",
        "file": "TestMaster\\test_our_implementations.py",
        "line": 14,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_performance_profiler",
        "file": "TestMaster\\test_our_implementations.py",
        "line": 41,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_function",
        "file": "TestMaster\\test_our_implementations.py",
        "line": 51,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_live_code_quality_monitor",
        "file": "TestMaster\\test_our_implementations.py",
        "line": 72,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_enhanced_incremental_ast_engine",
        "file": "TestMaster\\test_our_implementations.py",
        "line": 91,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_risk_based_test_targeter",
        "file": "TestMaster\\test_our_implementations.py",
        "line": 129,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_performance_dashboard_integration",
        "file": "TestMaster\\test_performance_dashboard_integration.py",
        "line": 19,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 11
      },
      {
        "name": "test_dashboard_server_integration",
        "file": "TestMaster\\test_performance_dashboard_integration.py",
        "line": 222,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_orchestration_components",
        "file": "TestMaster\\test_phase1_integration.py",
        "line": 22,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_observability_components",
        "file": "TestMaster\\test_phase1_integration.py",
        "line": 58,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_type_safe_tools",
        "file": "TestMaster\\test_phase1_integration.py",
        "line": 103,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_concrete_tools",
        "file": "TestMaster\\test_phase1_integration.py",
        "line": 138,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_imports",
        "file": "TestMaster\\test_phase1_simple.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_basic_functionality",
        "file": "TestMaster\\test_phase1_simple.py",
        "line": 42,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_all_components",
        "file": "TestMaster\\test_phase2_exhaustive_validation.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 27
      },
      {
        "name": "test_phase2_imports",
        "file": "TestMaster\\test_phase2_integration.py",
        "line": 20,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_role_functionality",
        "file": "TestMaster\\test_phase2_integration.py",
        "line": 54,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_supervisor_functionality",
        "file": "TestMaster\\test_phase2_integration.py",
        "line": 82,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_team_functionality",
        "file": "TestMaster\\test_phase2_integration.py",
        "line": 105,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_monitoring_functionality",
        "file": "TestMaster\\test_phase2_integration.py",
        "line": 128,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_imports",
        "file": "TestMaster\\test_phase2_simple.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_basic_functionality",
        "file": "TestMaster\\test_phase2_simple.py",
        "line": 42,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_component_imports",
        "file": "TestMaster\\test_phase2_simple_validation.py",
        "line": 14,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_component_initialization",
        "file": "TestMaster\\test_phase2_simple_validation.py",
        "line": 55,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_basic_functionality",
        "file": "TestMaster\\test_phase2_simple_validation.py",
        "line": 82,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_studio_interface",
        "file": "TestMaster\\test_phase3_ui.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_agentverse_ui",
        "file": "TestMaster\\test_phase3_ui.py",
        "line": 54,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_safe_import",
        "file": "TestMaster\\test_safe_consolidation.py",
        "line": 17,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_security_api_instantiation",
        "file": "TestMaster\\test_security_api_server.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_tot_generation",
        "file": "TestMaster\\test_tot_integration.py",
        "line": 20,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_different_strategies",
        "file": "TestMaster\\test_tot_integration.py",
        "line": 103,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_tracking_manager_basic",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 17,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_tracking_manager_generator_integration",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 75,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_tracking_manager_chain_depth",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 132,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_tracking_manager_decorator",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 181,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_function",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 194,
        "args": [
          "x",
          "y"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_function_disabled",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 206,
        "args": [
          "x"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_tracking_manager_error_handling",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 220,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_tracking_manager_disabled",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 268,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_backward_compatibility",
        "file": "TestMaster\\test_unified_integration.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_new_naming",
        "file": "TestMaster\\test_unified_integration.py",
        "line": 42,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_feature_preservation",
        "file": "TestMaster\\test_unified_integration.py",
        "line": 72,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_config_compatibility",
        "file": "TestMaster\\test_unified_integration.py",
        "line": 132,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_orchestrator_compatibility",
        "file": "TestMaster\\test_unified_integration.py",
        "line": 167,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_integration",
        "file": "TestMaster\\web_monitor.py",
        "line": 487,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_integration",
        "file": "TestMaster\\archive\\20250818\\web_monitor.py",
        "line": 487,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_integration",
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\web_monitor.py",
        "line": 487,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_complete_generation_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 12,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_concurrent_generation_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_pipeline_data_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 255,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_resource_cleanup_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 341,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_error_recovery_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 414,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_high_throughput_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 505,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_export_data_flow",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 573,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_gemini_connection",
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder.py",
        "line": 285,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_file",
        "file": "TestMaster\\archive\\legacy_scripts\\quick_test_summary.py",
        "line": 10,
        "args": [
          "test_path"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_all_modules",
        "file": "TestMaster\\archive\\legacy_scripts\\simple_100_percent.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 11,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_single_generation",
        "file": "TestMaster\\archive\\legacy_scripts\\test_single_api_call.py",
        "line": 29,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_with_correct_imports",
        "file": "TestMaster\\archive\\legacy_scripts\\test_updated_prompt.py",
        "line": 30,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_gemini_connection",
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder.py",
        "line": 285,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_file",
        "file": "TestMaster\\archive\\original_backup\\quick_test_summary.py",
        "line": 10,
        "args": [
          "test_path"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_all_modules",
        "file": "TestMaster\\archive\\original_backup\\scripts\\simple_100_percent.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 11,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_single_generation",
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_single_api_call.py",
        "line": 29,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_with_correct_imports",
        "file": "TestMaster\\archive\\original_backup\\scripts\\test_updated_prompt.py",
        "line": 30,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_complete_generation_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 12,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_concurrent_generation_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_pipeline_data_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 255,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_resource_cleanup_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 341,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_error_recovery_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 414,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_high_throughput_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 505,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_export_data_flow",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 573,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_operation",
        "file": "TestMaster\\core\\domains\\intelligence\\api\\qa_api.py",
        "line": 596,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_api.py",
        "line": 174,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\interactive_docs.py",
        "line": 93,
        "args": [
          "self",
          "endpoint",
          "method",
          "parameters",
          "headers",
          "body"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_property",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\property_tester.py",
        "line": 152,
        "args": [
          "self",
          "prop",
          "strategy",
          "target_func"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security_fuzzer.py",
        "line": 201,
        "args": [
          "self",
          "endpoint",
          "payloads"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_run_async_sync_basic",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 36,
        "args": [
          "func"
        ],
        "decorators": [
          "staticmethod"
        ],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_message_routing_with_timeout",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 75,
        "args": [
          "self",
          "agency",
          "message",
          "expected_agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_conversation_continuity",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 126,
        "args": [
          "self",
          "agency",
          "messages"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_concurrent_routing_error_detection",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 155,
        "args": [
          "self",
          "agency",
          "concurrent_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_mcp_tool_execution",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 192,
        "args": [
          "tool_class",
          "test_data"
        ],
        "decorators": [
          "staticmethod"
        ],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_with_exponential_backoff",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 260,
        "args": [
          "self",
          "func"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_tool_factory",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 326,
        "args": [
          "tool_class",
          "test_cases"
        ],
        "decorators": [
          "staticmethod"
        ],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_parallel_crews_thread_safety",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 83,
        "args": [
          "self",
          "crew_factory",
          "num_crews"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_no_context_leakage",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 188,
        "args": [
          "self",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_guardrail_initialization",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 261,
        "args": [
          "self",
          "config"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_guardrail_behavior",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 273,
        "args": [
          "self",
          "config",
          "task_outputs"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 3
      },
      {
        "name": "test_parametrized_guardrail_scenarios",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 312,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_flow_execution",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 389,
        "args": [
          "self",
          "flow"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_flow_with_conditional_steps",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 434,
        "args": [
          "self",
          "flow",
          "conditions"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_multimodal_agent_response",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 495,
        "args": [
          "self",
          "agent_responses"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_task_guardrails",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 582,
        "args": [
          "self",
          "task_outputs",
          "guardrail_rules"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_graph_creation_sync",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 243,
        "args": [
          "self",
          "graph_name"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_edge_initialization",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 410,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 6,
        "complexity": 4
      },
      {
        "name": "test_edge_string_representation",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 452,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_edge_stringify_full",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 483,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_edge_comparison",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 545,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 10,
        "complexity": 2
      },
      {
        "name": "test_pattern_registration",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 813,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_pattern_execution",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 836,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_pattern_adaptation",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 865,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_basic_reasoning",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 198,
        "args": [
          "self",
          "agent",
          "task_description",
          "expected_output"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_reasoning_refinement",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 225,
        "args": [
          "self",
          "agent",
          "task_description"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 5
      },
      {
        "name": "test_max_attempts_exhaustion",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 272,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 4
      },
      {
        "name": "test_function_calling_reasoning",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 316,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_function_calling_fallback",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 345,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_reasoning_error_handling",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 371,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 3
      },
      {
        "name": "test_agent_with_basic_reasoning",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 510,
        "args": [
          "self",
          "reasoning_framework",
          "mock_llm_responses"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_reasoning_refinement_process",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 526,
        "args": [
          "self",
          "reasoning_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_max_reasoning_attempts",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 537,
        "args": [
          "self",
          "reasoning_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_function_calling_integration",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 546,
        "args": [
          "self",
          "reasoning_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_archive_discovery",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 439,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_file_analysis",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 454,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_pattern_extraction",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 479,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_intelligence_mining",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 504,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_basic_async_sync_execution",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_running_loop_detection",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 91,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_error_propagation",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 104,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_sync_context",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 147,
        "args": [
          "self",
          "async_manager",
          "async_fixtures"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_platform_initialization",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 999,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_team_member_registration",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1006,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_collaboration_session",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1022,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_knowledge_sharing",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1045,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_code_review_system",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1062,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_notification_system",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1088,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_team_analytics",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1107,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_platform_dashboard",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1132,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_team_overview",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 1141,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_message_routing",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 55,
        "args": [
          "self",
          "agency",
          "message",
          "expected_recipient",
          "timeout"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_timeout_handling",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 81,
        "args": [
          "self",
          "agency",
          "timeout"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_error_detection",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 107,
        "args": [
          "self",
          "agency",
          "error_pattern"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_agents",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 256,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_send_message_routing",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 273,
        "args": [
          "self",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_double_recipient_error",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 285,
        "args": [
          "self",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_parallel_crews_context_isolation",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 196,
        "args": [
          "self",
          "num_crews"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_for_each_context_uniqueness",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 324,
        "args": [
          "self",
          "inputs"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_context_leakage_prevention",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 354,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_parallel_crews_thread_safety",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 532,
        "args": [
          "self",
          "mock_execute_task",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_concurrent_kickoff_for_each",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 566,
        "args": [
          "self",
          "mock_execute_task",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_no_context_leakage_between_crews",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 577,
        "args": [
          "self",
          "mock_execute_task",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_coordinator_initialization",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 816,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_node_registration",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 823,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_job_submission",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 839,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_dependency_resolution",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 853,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_load_balancing",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 867,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_fault_tolerance",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 896,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_execution_plan_validation",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 917,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_framework_initialization",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 618,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_suite_registration",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 624,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_security_context_creation",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 645,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_resource_scaling",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 659,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_executive_report_generation",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 670,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_flow_execution",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 482,
        "args": [
          "self",
          "flow",
          "inputs"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_flow_restart",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 522,
        "args": [
          "self",
          "flow"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_simple_sequential_flow",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 672,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_flow_with_multiple_starts",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 680,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cyclic_flow",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 693,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_flow_restart",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 724,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_formatter_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "line": 496,
        "args": [
          "formatter_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_mock_block_creation",
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "line": 503,
        "args": [
          "formatter_framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_format_validation",
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "line": 514,
        "args": [
          "formatter_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_constraint_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 231,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_constraint_duplication_prevention",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 253,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_constraint_deletion",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 267,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_constraint_validation",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 287,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multi_property_constraints",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 314,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_node_constraint_lifecycle",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 360,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_edge_constraint_lifecycle",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 380,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_index_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 1017,
        "args": [
          "index_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_index_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 1024,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_database_basic_operations",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 1039,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_index_validation_functions",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 1056,
        "args": [
          "index_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_index_structure_validation",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 1087,
        "args": [
          "index_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_graph_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 975,
        "args": [
          "graph_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_node_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 982,
        "args": [],
        "decorators": [],
        "assertions": 6,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_edge_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 1001,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_node_structure_validation",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 1017,
        "args": [
          "graph_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_edge_structure_validation",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 1032,
        "args": [
          "graph_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_query_result_validation",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 1053,
        "args": [
          "graph_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_query_profiling",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 415,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cartesian_product_profiling",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 437,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_performance_regression_detection",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 457,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_load_testing",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 481,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_query_complexity_analysis",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 502,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_memory_usage_tracking",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 518,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_benchmark_comparison",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 531,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_slow_query_identification",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 555,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_execution_plan_analysis",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 615,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_performance_monitoring",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 623,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_load_test_execution",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 637,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_vector_index_creation",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_vector_index_operations",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 291,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_similarity_calculations",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 326,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_vecf32_parsing",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 351,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_vector_normalization",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 370,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_high_dimensional_vectors",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 389,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_multiple_similarity_functions",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 415,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_vector_lifecycle",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 485,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_similarity_metrics",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 506,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_vector_search_ranking",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 519,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_guardrail_initialization",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 76,
        "args": [
          "self",
          "context",
          "threshold",
          "tool_response"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_no_op_behavior",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 95,
        "args": [
          "self",
          "guardrail",
          "task_output_text"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_guardrail_description",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 121,
        "args": [
          "self",
          "guardrail"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_various_input_scenarios",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 131,
        "args": [
          "self",
          "guardrail"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_threshold_ignored",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 184,
        "args": [
          "self",
          "context",
          "threshold"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_tool_response_ignored",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 199,
        "args": [
          "self",
          "context",
          "tool_response"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_event_description_in_events",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 238,
        "args": [
          "self",
          "guardrail"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_task_integration",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 258,
        "args": [
          "self",
          "context"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_validation_error_handling",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 284,
        "args": [
          "self",
          "context"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_hallucination_guardrail_initialization",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 469,
        "args": [
          "self",
          "mock_llm"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hallucination_guardrail_no_op_behavior",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 481,
        "args": [
          "self",
          "mock_llm"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_hallucination_guardrail_description",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 501,
        "args": [
          "self",
          "mock_llm"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hallucination_guardrail_always_passes",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 533,
        "args": [
          "self",
          "mock_llm",
          "context",
          "task_output_text",
          "threshold",
          "tool_response"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_hook_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 897,
        "args": [
          "hook_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_pre_hook_creation",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 904,
        "args": [
          "hook_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_post_hook_creation",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 911,
        "args": [
          "hook_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hook_execution_order_validation",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 918,
        "args": [
          "hook_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_message_content_validation",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 928,
        "args": [
          "hook_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_complete_codebase_analysis_integration",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 8,
        "mocks": 6,
        "complexity": 1
      },
      {
        "name": "test_real_time_monitoring_integration",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 183,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_natural_language_exploration_integration",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 214,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_security_vulnerability_workflow_integration",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 242,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_test_generation_workflow_integration",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_cross_component_integration",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 301,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 4
      },
      {
        "name": "test_performance_under_load",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 326,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_intelligence_ingestion",
        "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
        "line": 741,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_knowledge_synthesis",
        "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
        "line": 767,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_correlation_analysis",
        "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
        "line": 798,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_code_analysis",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 956,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_template_library",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 995,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generation",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 1022,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_basic_supervisor_workflow",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 282,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 12,
        "complexity": 2
      },
      {
        "name": "test_supervisor_message_forwarding",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 345,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 9,
        "complexity": 2
      },
      {
        "name": "test_supervisor_output_modes",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 384,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 12,
        "complexity": 2
      },
      {
        "name": "test_supervisor_error_handling",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 434,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 5,
        "complexity": 4
      },
      {
        "name": "test_supervisor_metadata_passing",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 472,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 7,
        "complexity": 2
      },
      {
        "name": "test_concurrent_agent_execution",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 510,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 7,
        "complexity": 3
      },
      {
        "name": "test_supervisor_performance_metrics",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 550,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 7,
        "complexity": 3
      },
      {
        "name": "test_agents",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 624,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 6,
        "complexity": 1
      },
      {
        "name": "test_supervisor_workflow_execution",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 641,
        "args": [
          "self",
          "framework",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_multi_agent_handoffs",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 664,
        "args": [
          "self",
          "framework",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 6,
        "complexity": 1
      },
      {
        "name": "test_multimodal_agent_initialization",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 238,
        "args": [
          "self",
          "api_key"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_image_processing_capability",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 259,
        "args": [
          "self",
          "image_url",
          "api_key"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_crew_multimodal_execution",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 290,
        "args": [
          "self",
          "image_url",
          "api_key"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_api_key_validation",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 319,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_model_compatibility",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 337,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 3,
        "complexity": 5
      },
      {
        "name": "test_error_handling",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 398,
        "args": [
          "self",
          "image_url"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 3
      },
      {
        "name": "test_image_url",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 579,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_multimodal_agent_with_image_url",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 589,
        "args": [
          "self",
          "mock_api_key",
          "test_image_url"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multimodal_agent_initialization",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 601,
        "args": [
          "self",
          "multimodal_framework",
          "mock_api_key"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_model_compatibility_detection",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 610,
        "args": [
          "self",
          "multimodal_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_image_content_detection",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 617,
        "args": [
          "self",
          "multimodal_framework",
          "test_image_url"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_crew_multimodal_integration",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 625,
        "args": [
          "self",
          "multimodal_framework",
          "test_image_url",
          "mock_api_key"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cross_language_generation",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 1038,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_porting",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 1069,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_language_config",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 1099,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_pattern_extraction",
        "file": "TestMaster\\core\\domains\\testing\\pattern_consolidation_engine.py",
        "line": 658,
        "args": [
          "self",
          "directory_path"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_consolidation_analysis",
        "file": "TestMaster\\core\\domains\\testing\\pattern_consolidation_engine.py",
        "line": 689,
        "args": [
          "self",
          "directory_path"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_plan_generation",
        "file": "TestMaster\\core\\domains\\testing\\pattern_consolidation_engine.py",
        "line": 712,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_arithmetic_agent_creation",
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "line": 595,
        "args": [
          "pipeline_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_sequential_pipeline_creation",
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "line": 603,
        "args": [
          "pipeline_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_message_structure_validation",
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "line": 625,
        "args": [
          "pipeline_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_react_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "line": 805,
        "args": [
          "react_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_model_creation",
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "line": 812,
        "args": [
          "react_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_toolkit_creation",
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "line": 819,
        "args": [
          "react_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hook_validation",
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "line": 845,
        "args": [
          "hook_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_repository_registration",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 860,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_repository_scanner",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 876,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cross_repository_analyzer",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 884,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_testing_intelligence_creation",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 903,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cross_repo_insight_creation",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 922,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_successful_validation",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 166,
        "args": [
          "self",
          "agent",
          "message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_validation_retry",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 184,
        "args": [
          "self",
          "agent",
          "invalid_message",
          "valid_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_validation_exhaustion",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 213,
        "args": [
          "self",
          "agent",
          "invalid_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_json_validation_success",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 407,
        "args": [
          "self",
          "json_validator_agent"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_json_validation_failure",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 415,
        "args": [
          "self",
          "json_validator_agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_content_policy_validation",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 420,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_session_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "line": 806,
        "args": [
          "session_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_agent_creation",
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "line": 813,
        "args": [
          "session_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_session_file_validation",
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "line": 840,
        "args": [
          "session_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_session_metadata_validation",
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "line": 848,
        "args": [
          "session_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_task_without_guardrail",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 236,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_successful_guardrail",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 261,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_failing_guardrail_with_retries",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 293,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_guardrail_retry_with_context",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 327,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 4
      },
      {
        "name": "test_llm_guardrail_processing",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 375,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_guardrail_events_emission",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 407,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_error_during_validation",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 471,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_task_without_guardrail",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 663,
        "args": [
          "self",
          "guardrail_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_task_with_successful_guardrail_func",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 671,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_task_with_failing_guardrail",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 687,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_guardrail_respects_max_retries",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 710,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_llm_guardrail_process_output",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 734,
        "args": [
          "self",
          "task_output"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_gateway_initialization",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 1144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_user_authentication",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 1151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_rate_limiting",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 1166,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_openapi_spec_generation",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 1224,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_api_statistics",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 1233,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_natural_language_queries",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 57,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_interactive_chat_interface",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_intelligent_code_suggestions",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 135,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_code_pattern_recognition",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_semantic_code_search",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 218,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_real_time_code_insights",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 252,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cross_language_understanding",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 284,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_performance_vs_newton_graph",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 316,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_git_analysis",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 597,
        "args": [
          "self",
          "repo_path"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_file_analysis",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 614,
        "args": [
          "self",
          "repo_path"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_evolution_analysis",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 639,
        "args": [
          "self",
          "repo_path"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_hub_initialization",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 522,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_event_bus_subscription",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 528,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_configuration_management",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 544,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_module_manifest_creation",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 556,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_integration_status_tracking",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 570,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_graph_construction_speed",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_relationship_accuracy_validation",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_semantic_mapping_intelligence",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 99,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_real_time_graph_updates",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multi_language_code_analysis",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_graph_visualization_data",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 174,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_ai_powered_code_exploration",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 202,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_performance_scaling",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 230,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_language_detection_accuracy",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_cross_language_relationship_detection",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_framework_specific_analysis",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 162,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_performance_across_languages",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 203,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_semantic_understanding_multi_language",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 247,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_competitor_feature_gaps",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 292,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_zero_setup_multi_language_processing",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 336,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_interface_accessibility",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 71,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_interactive_exploration_features",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 142,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_real_time_updates",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 196,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_natural_language_interface",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 233,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_visual_graph_superiority",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 302,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_responsive_design",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 361,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_accessibility_compliance",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 403,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_user_onboarding_experience",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 447,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_instant_graph_creation",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_no_external_dependencies",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 113,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_technical_expertise_requirements",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 140,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_setup_time_comparison",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 185,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_configuration_complexity",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 213,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_instant_scaling",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 271,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_scaling",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 282,
        "args": [
          "file_count"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_offline_capability",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 306,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_network_independence",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 312,
        "args": [
          "network_state"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_storage_requirements",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 331,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_rate_limit_retry",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 104,
        "args": [
          "self",
          "thread",
          "rate_limit_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_non_retryable_error",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 133,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_max_retries_exceeded",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 153,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_exponential_backoff",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 172,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_custom_delay_extraction",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 186,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_rate_limit_retry_mechanism",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 390,
        "args": [
          "self",
          "mock_thread",
          "retry_framework",
          "monkeypatch"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_non_retryable_error_handling",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 409,
        "args": [
          "self",
          "mock_thread",
          "retry_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_exponential_backoff_calculation",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 419,
        "args": [
          "self",
          "retry_framework"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_langchain_tool_creation",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 184,
        "args": [
          "self",
          "tool_class"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_openai_schema_creation",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 211,
        "args": [
          "self",
          "schema"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_file_based_tool_creation",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 275,
        "args": [
          "self",
          "file_path"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_langchain_tool_creation",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 594,
        "args": [
          "self",
          "tool_factory_framework",
          "mock_langchain_tool"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_complex_schema_handling",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 602,
        "args": [
          "self",
          "tool_factory_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_file_tool_import",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 619,
        "args": [
          "self",
          "tool_factory_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_tool_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "line": 873,
        "args": [
          "tool_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_temp_file_creation",
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "line": 880,
        "args": [
          "tool_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_return_code_validation",
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "line": 897,
        "args": [
          "tool_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_output_format_validation",
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "line": 907,
        "args": [
          "tool_validator"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_tracing_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 1063,
        "args": [
          "tracing_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_trace_record_creation",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 1070,
        "args": [],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_tracing_manager",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 1089,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_trace_validation",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 1129,
        "args": [
          "tracing_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_trace_sequence_validation",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 1143,
        "args": [
          "tracing_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_workload_submission",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 365,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_resource_allocation",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 379,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_dependency_handling",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 396,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_execution_result_tracking",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 424,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_report_generation",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 438,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_input_framework_creation",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 767,
        "args": [
          "input_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_input_simulator_creation",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 774,
        "args": [
          "input_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_mock_choice_validation",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 784,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_message_structure_validation",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 803,
        "args": [
          "input_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_structured_metadata_validation",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 813,
        "args": [
          "input_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_input_scenario_result_validation",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 842,
        "args": [
          "input_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_operation",
        "file": "TestMaster\\core\\intelligence\\api\\qa_api.py",
        "line": 596,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_api.py",
        "line": 174,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\core\\intelligence\\documentation\\interactive_docs.py",
        "line": 93,
        "args": [
          "self",
          "endpoint",
          "method",
          "parameters",
          "headers",
          "body"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_property",
        "file": "TestMaster\\core\\intelligence\\testing\\property_tester.py",
        "line": 152,
        "args": [
          "self",
          "prop",
          "strategy",
          "target_func"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\core\\intelligence\\testing\\security_fuzzer.py",
        "line": 201,
        "args": [
          "self",
          "endpoint",
          "payloads"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_run_async_sync_basic",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 36,
        "args": [
          "func"
        ],
        "decorators": [
          "staticmethod"
        ],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_message_routing_with_timeout",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 75,
        "args": [
          "self",
          "agency",
          "message",
          "expected_agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_conversation_continuity",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 126,
        "args": [
          "self",
          "agency",
          "messages"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_concurrent_routing_error_detection",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 155,
        "args": [
          "self",
          "agency",
          "concurrent_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_mcp_tool_execution",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 192,
        "args": [
          "tool_class",
          "test_data"
        ],
        "decorators": [
          "staticmethod"
        ],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_with_exponential_backoff",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 260,
        "args": [
          "self",
          "func"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_tool_factory",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 326,
        "args": [
          "tool_class",
          "test_cases"
        ],
        "decorators": [
          "staticmethod"
        ],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_parallel_crews_thread_safety",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 83,
        "args": [
          "self",
          "crew_factory",
          "num_crews"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_no_context_leakage",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 188,
        "args": [
          "self",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_guardrail_initialization",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 261,
        "args": [
          "self",
          "config"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_guardrail_behavior",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 273,
        "args": [
          "self",
          "config",
          "task_outputs"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 3
      },
      {
        "name": "test_parametrized_guardrail_scenarios",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 312,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_flow_execution",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 389,
        "args": [
          "self",
          "flow"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_flow_with_conditional_steps",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 434,
        "args": [
          "self",
          "flow",
          "conditions"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_multimodal_agent_response",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 495,
        "args": [
          "self",
          "agent_responses"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_task_guardrails",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 582,
        "args": [
          "self",
          "task_outputs",
          "guardrail_rules"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_graph_creation_sync",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 243,
        "args": [
          "self",
          "graph_name"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_edge_initialization",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 410,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 6,
        "complexity": 4
      },
      {
        "name": "test_edge_string_representation",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 452,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_edge_stringify_full",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 483,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_edge_comparison",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 545,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 10,
        "complexity": 2
      },
      {
        "name": "test_pattern_registration",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 813,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_pattern_execution",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 836,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_pattern_adaptation",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 865,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_basic_reasoning",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 198,
        "args": [
          "self",
          "agent",
          "task_description",
          "expected_output"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_reasoning_refinement",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 225,
        "args": [
          "self",
          "agent",
          "task_description"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 5
      },
      {
        "name": "test_max_attempts_exhaustion",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 272,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 4
      },
      {
        "name": "test_function_calling_reasoning",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 316,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_function_calling_fallback",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 345,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_reasoning_error_handling",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 371,
        "args": [
          "self",
          "agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 3
      },
      {
        "name": "test_agent_with_basic_reasoning",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 510,
        "args": [
          "self",
          "reasoning_framework",
          "mock_llm_responses"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_reasoning_refinement_process",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 526,
        "args": [
          "self",
          "reasoning_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_max_reasoning_attempts",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 537,
        "args": [
          "self",
          "reasoning_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_function_calling_integration",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 546,
        "args": [
          "self",
          "reasoning_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_archive_discovery",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 439,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_file_analysis",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 454,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_pattern_extraction",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 479,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_intelligence_mining",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 504,
        "args": [
          "self",
          "archive_path"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_basic_async_sync_execution",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_running_loop_detection",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 91,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_error_propagation",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 104,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_sync_context",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 147,
        "args": [
          "self",
          "async_manager",
          "async_fixtures"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_platform_initialization",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 999,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_team_member_registration",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1006,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_collaboration_session",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1022,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_knowledge_sharing",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1045,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_code_review_system",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1062,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_notification_system",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1088,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_team_analytics",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1107,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_platform_dashboard",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1132,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_team_overview",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 1141,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_message_routing",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 55,
        "args": [
          "self",
          "agency",
          "message",
          "expected_recipient",
          "timeout"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_timeout_handling",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 81,
        "args": [
          "self",
          "agency",
          "timeout"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_error_detection",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 107,
        "args": [
          "self",
          "agency",
          "error_pattern"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_agents",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 256,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_send_message_routing",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 273,
        "args": [
          "self",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_double_recipient_error",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 285,
        "args": [
          "self",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_parallel_crews_context_isolation",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 196,
        "args": [
          "self",
          "num_crews"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_for_each_context_uniqueness",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 324,
        "args": [
          "self",
          "inputs"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_context_leakage_prevention",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 354,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_parallel_crews_thread_safety",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 532,
        "args": [
          "self",
          "mock_execute_task",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_concurrent_kickoff_for_each",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 566,
        "args": [
          "self",
          "mock_execute_task",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_no_context_leakage_between_crews",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 577,
        "args": [
          "self",
          "mock_execute_task",
          "crew_factory"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_coordinator_initialization",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 816,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_node_registration",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 823,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_job_submission",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 839,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_dependency_resolution",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 853,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_load_balancing",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 867,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_fault_tolerance",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 896,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_execution_plan_validation",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 917,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_framework_initialization",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 618,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_suite_registration",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 624,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_security_context_creation",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 645,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_resource_scaling",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 659,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_executive_report_generation",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 670,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_flow_execution",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 482,
        "args": [
          "self",
          "flow",
          "inputs"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_flow_restart",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 522,
        "args": [
          "self",
          "flow"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_simple_sequential_flow",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 672,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_flow_with_multiple_starts",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 680,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cyclic_flow",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 693,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_flow_restart",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 724,
        "args": [
          "self",
          "flow_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_formatter_framework_creation",
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "line": 496,
        "args": [
          "formatter_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_mock_block_creation",
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "line": 503,
        "args": [
          "formatter_framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_format_validation",
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "line": 514,
        "args": [
          "formatter_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_constraint_creation",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 231,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_constraint_duplication_prevention",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 253,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_constraint_deletion",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 267,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_constraint_validation",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 287,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multi_property_constraints",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 314,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_node_constraint_lifecycle",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 360,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_edge_constraint_lifecycle",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 380,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_index_framework_creation",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 1017,
        "args": [
          "index_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_index_creation",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 1024,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_database_basic_operations",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 1039,
        "args": [],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_index_validation_functions",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 1056,
        "args": [
          "index_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_index_structure_validation",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 1087,
        "args": [
          "index_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_graph_framework_creation",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 975,
        "args": [
          "graph_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_node_creation",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 982,
        "args": [],
        "decorators": [],
        "assertions": 6,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_mock_edge_creation",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 1001,
        "args": [],
        "decorators": [],
        "assertions": 4,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_node_structure_validation",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 1017,
        "args": [
          "graph_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_edge_structure_validation",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 1032,
        "args": [
          "graph_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_query_result_validation",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 1053,
        "args": [
          "graph_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_query_profiling",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 415,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cartesian_product_profiling",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 437,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_performance_regression_detection",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 457,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_load_testing",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 481,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_query_complexity_analysis",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 502,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_memory_usage_tracking",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 518,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_benchmark_comparison",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 531,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_slow_query_identification",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 555,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_execution_plan_analysis",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 615,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_performance_monitoring",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 623,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_load_test_execution",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 637,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_vector_index_creation",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_vector_index_operations",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 291,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_similarity_calculations",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 326,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_vecf32_parsing",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 351,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_vector_normalization",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 370,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_high_dimensional_vectors",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 389,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_multiple_similarity_functions",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 415,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_vector_lifecycle",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 485,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_similarity_metrics",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 506,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_vector_search_ranking",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 519,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_guardrail_initialization",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 76,
        "args": [
          "self",
          "context",
          "threshold",
          "tool_response"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_no_op_behavior",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 95,
        "args": [
          "self",
          "guardrail",
          "task_output_text"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_guardrail_description",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 121,
        "args": [
          "self",
          "guardrail"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_various_input_scenarios",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 131,
        "args": [
          "self",
          "guardrail"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_threshold_ignored",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 184,
        "args": [
          "self",
          "context",
          "threshold"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_tool_response_ignored",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 199,
        "args": [
          "self",
          "context",
          "tool_response"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_event_description_in_events",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 238,
        "args": [
          "self",
          "guardrail"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_task_integration",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 258,
        "args": [
          "self",
          "context"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_validation_error_handling",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 284,
        "args": [
          "self",
          "context"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_hallucination_guardrail_initialization",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 469,
        "args": [
          "self",
          "mock_llm"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hallucination_guardrail_no_op_behavior",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 481,
        "args": [
          "self",
          "mock_llm"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_hallucination_guardrail_description",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 501,
        "args": [
          "self",
          "mock_llm"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hallucination_guardrail_always_passes",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 533,
        "args": [
          "self",
          "mock_llm",
          "context",
          "task_output_text",
          "threshold",
          "tool_response"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_hook_framework_creation",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 897,
        "args": [
          "hook_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_pre_hook_creation",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 904,
        "args": [
          "hook_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_post_hook_creation",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 911,
        "args": [
          "hook_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hook_execution_order_validation",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 918,
        "args": [
          "hook_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_message_content_validation",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 928,
        "args": [
          "hook_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_complete_codebase_analysis_integration",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 8,
        "mocks": 6,
        "complexity": 1
      },
      {
        "name": "test_real_time_monitoring_integration",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 183,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_natural_language_exploration_integration",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 214,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_security_vulnerability_workflow_integration",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 242,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_test_generation_workflow_integration",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 270,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_cross_component_integration",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 301,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 4
      },
      {
        "name": "test_performance_under_load",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 326,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_intelligence_ingestion",
        "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
        "line": 741,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_knowledge_synthesis",
        "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
        "line": 767,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_correlation_analysis",
        "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
        "line": 798,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_code_analysis",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 956,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_template_library",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 995,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generation",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 1022,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_basic_supervisor_workflow",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 282,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 12,
        "complexity": 2
      },
      {
        "name": "test_supervisor_message_forwarding",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 345,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 9,
        "complexity": 2
      },
      {
        "name": "test_supervisor_output_modes",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 384,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 12,
        "complexity": 2
      },
      {
        "name": "test_supervisor_error_handling",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 434,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 5,
        "complexity": 4
      },
      {
        "name": "test_supervisor_metadata_passing",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 472,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 7,
        "complexity": 2
      },
      {
        "name": "test_concurrent_agent_execution",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 510,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 7,
        "complexity": 3
      },
      {
        "name": "test_supervisor_performance_metrics",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 550,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 7,
        "complexity": 3
      },
      {
        "name": "test_agents",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 624,
        "args": [
          "self",
          "framework"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 6,
        "complexity": 1
      },
      {
        "name": "test_supervisor_workflow_execution",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 641,
        "args": [
          "self",
          "framework",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_multi_agent_handoffs",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 664,
        "args": [
          "self",
          "framework",
          "test_agents"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 6,
        "complexity": 1
      },
      {
        "name": "test_multimodal_agent_initialization",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 238,
        "args": [
          "self",
          "api_key"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_image_processing_capability",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 259,
        "args": [
          "self",
          "image_url",
          "api_key"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_crew_multimodal_execution",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 290,
        "args": [
          "self",
          "image_url",
          "api_key"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_api_key_validation",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 319,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_model_compatibility",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 337,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 3,
        "complexity": 5
      },
      {
        "name": "test_error_handling",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 398,
        "args": [
          "self",
          "image_url"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 3
      },
      {
        "name": "test_image_url",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 579,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_multimodal_agent_with_image_url",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 589,
        "args": [
          "self",
          "mock_api_key",
          "test_image_url"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multimodal_agent_initialization",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 601,
        "args": [
          "self",
          "multimodal_framework",
          "mock_api_key"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_model_compatibility_detection",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 610,
        "args": [
          "self",
          "multimodal_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_image_content_detection",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 617,
        "args": [
          "self",
          "multimodal_framework",
          "test_image_url"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_crew_multimodal_integration",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 625,
        "args": [
          "self",
          "multimodal_framework",
          "test_image_url",
          "mock_api_key"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cross_language_generation",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 1038,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_porting",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 1069,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_language_config",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 1099,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_pattern_extraction",
        "file": "TestMaster\\core\\testing\\pattern_consolidation_engine.py",
        "line": 658,
        "args": [
          "self",
          "directory_path"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_consolidation_analysis",
        "file": "TestMaster\\core\\testing\\pattern_consolidation_engine.py",
        "line": 689,
        "args": [
          "self",
          "directory_path"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_plan_generation",
        "file": "TestMaster\\core\\testing\\pattern_consolidation_engine.py",
        "line": 712,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_arithmetic_agent_creation",
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "line": 595,
        "args": [
          "pipeline_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_sequential_pipeline_creation",
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "line": 603,
        "args": [
          "pipeline_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_message_structure_validation",
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "line": 625,
        "args": [
          "pipeline_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_react_framework_creation",
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "line": 805,
        "args": [
          "react_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_model_creation",
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "line": 812,
        "args": [
          "react_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_toolkit_creation",
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "line": 819,
        "args": [
          "react_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_hook_validation",
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "line": 845,
        "args": [
          "hook_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_repository_registration",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 860,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_repository_scanner",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 876,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cross_repository_analyzer",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 884,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_testing_intelligence_creation",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 903,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_cross_repo_insight_creation",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 922,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_successful_validation",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 166,
        "args": [
          "self",
          "agent",
          "message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_validation_retry",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 184,
        "args": [
          "self",
          "agent",
          "invalid_message",
          "valid_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_validation_exhaustion",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 213,
        "args": [
          "self",
          "agent",
          "invalid_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_json_validation_success",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 407,
        "args": [
          "self",
          "json_validator_agent"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_json_validation_failure",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 415,
        "args": [
          "self",
          "json_validator_agent"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_content_policy_validation",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 420,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_session_framework_creation",
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "line": 806,
        "args": [
          "session_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_agent_creation",
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "line": 813,
        "args": [
          "session_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_session_file_validation",
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "line": 840,
        "args": [
          "session_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_session_metadata_validation",
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "line": 848,
        "args": [
          "session_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_task_without_guardrail",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 236,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_successful_guardrail",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 261,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_failing_guardrail_with_retries",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 293,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_guardrail_retry_with_context",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 327,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 4
      },
      {
        "name": "test_llm_guardrail_processing",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 375,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_guardrail_events_emission",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 407,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_error_during_validation",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 471,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 2,
        "complexity": 2
      },
      {
        "name": "test_task_without_guardrail",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 663,
        "args": [
          "self",
          "guardrail_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_task_with_successful_guardrail_func",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 671,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_task_with_failing_guardrail",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 687,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_guardrail_respects_max_retries",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 710,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 2,
        "complexity": 1
      },
      {
        "name": "test_llm_guardrail_process_output",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 734,
        "args": [
          "self",
          "task_output"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_gateway_initialization",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 1144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_user_authentication",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 1151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_rate_limiting",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 1166,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_openapi_spec_generation",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 1224,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_api_statistics",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 1233,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_natural_language_queries",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 57,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_interactive_chat_interface",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_intelligent_code_suggestions",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 135,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_code_pattern_recognition",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_semantic_code_search",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 218,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_real_time_code_insights",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 252,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_cross_language_understanding",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 284,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_performance_vs_newton_graph",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 316,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_git_analysis",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 597,
        "args": [
          "self",
          "repo_path"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_file_analysis",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 614,
        "args": [
          "self",
          "repo_path"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_evolution_analysis",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 639,
        "args": [
          "self",
          "repo_path"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_hub_initialization",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 522,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_event_bus_subscription",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 528,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_configuration_management",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 544,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_module_manifest_creation",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 556,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_integration_status_tracking",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 570,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_graph_construction_speed",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 49,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_relationship_accuracy_validation",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_semantic_mapping_intelligence",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 99,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_real_time_graph_updates",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_multi_language_code_analysis",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_graph_visualization_data",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 174,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_ai_powered_code_exploration",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 202,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_performance_scaling",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 230,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_language_detection_accuracy",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_cross_language_relationship_detection",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_framework_specific_analysis",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 162,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_performance_across_languages",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 203,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_semantic_understanding_multi_language",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 247,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_competitor_feature_gaps",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 292,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_zero_setup_multi_language_processing",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 336,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_interface_accessibility",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 71,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_interactive_exploration_features",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 142,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_real_time_updates",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 196,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_natural_language_interface",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 233,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_visual_graph_superiority",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 302,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_responsive_design",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 361,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_accessibility_compliance",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 403,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_user_onboarding_experience",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 447,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_instant_graph_creation",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_no_external_dependencies",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 113,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_technical_expertise_requirements",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 140,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_setup_time_comparison",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 185,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_configuration_complexity",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 213,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_instant_scaling",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 271,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_scaling",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 282,
        "args": [
          "file_count"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_offline_capability",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 306,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_network_independence",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 312,
        "args": [
          "network_state"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_storage_requirements",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 331,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_rate_limit_retry",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 104,
        "args": [
          "self",
          "thread",
          "rate_limit_message"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_non_retryable_error",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 133,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_max_retries_exceeded",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 153,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_exponential_backoff",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 172,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_custom_delay_extraction",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 186,
        "args": [
          "self",
          "thread"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_rate_limit_retry_mechanism",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 390,
        "args": [
          "self",
          "mock_thread",
          "retry_framework",
          "monkeypatch"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_non_retryable_error_handling",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 409,
        "args": [
          "self",
          "mock_thread",
          "retry_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_exponential_backoff_calculation",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 419,
        "args": [
          "self",
          "retry_framework"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_langchain_tool_creation",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 184,
        "args": [
          "self",
          "tool_class"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_openai_schema_creation",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 211,
        "args": [
          "self",
          "schema"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_file_based_tool_creation",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 275,
        "args": [
          "self",
          "file_path"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_langchain_tool_creation",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 594,
        "args": [
          "self",
          "tool_factory_framework",
          "mock_langchain_tool"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_complex_schema_handling",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 602,
        "args": [
          "self",
          "tool_factory_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_file_tool_import",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 619,
        "args": [
          "self",
          "tool_factory_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_tool_framework_creation",
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "line": 873,
        "args": [
          "tool_framework"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_temp_file_creation",
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "line": 880,
        "args": [
          "tool_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_return_code_validation",
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "line": 897,
        "args": [
          "tool_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_output_format_validation",
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "line": 907,
        "args": [
          "tool_validator"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_tracing_framework_creation",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 1063,
        "args": [
          "tracing_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_trace_record_creation",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 1070,
        "args": [],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_tracing_manager",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 1089,
        "args": [],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_trace_validation",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 1129,
        "args": [
          "tracing_validator"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_trace_sequence_validation",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 1143,
        "args": [
          "tracing_validator"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_workload_submission",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 365,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_resource_allocation",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 379,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_dependency_handling",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 396,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_execution_result_tracking",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 424,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_report_generation",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 438,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_input_framework_creation",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 767,
        "args": [
          "input_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_input_simulator_creation",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 774,
        "args": [
          "input_framework"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_mock_choice_validation",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 784,
        "args": [],
        "decorators": [],
        "assertions": 2,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_message_structure_validation",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 803,
        "args": [
          "input_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 1,
        "complexity": 1
      },
      {
        "name": "test_structured_metadata_validation",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 813,
        "args": [
          "input_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_input_scenario_result_validation",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 842,
        "args": [
          "input_validator"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_api_endpoints",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 91,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_data_structures",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_realtime_features",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 228,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_performance",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 282,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_error_handling",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 347,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_websockets",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 385,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_comprehensive_integration",
        "file": "TestMaster\\dashboard\\comprehensive_frontend_test.py",
        "line": 17,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 17
      },
      {
        "name": "test_blueprint_imports",
        "file": "TestMaster\\dashboard\\debug_blueprints.py",
        "line": 10,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_server_blueprint_registration",
        "file": "TestMaster\\dashboard\\debug_blueprints.py",
        "line": 42,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_realtime_endpoint",
        "file": "TestMaster\\dashboard\\demo_automated_frontend_testing.py",
        "line": 191,
        "args": [
          "endpoint_url"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_concurrent_load",
        "file": "TestMaster\\dashboard\\demo_automated_frontend_testing.py",
        "line": 221,
        "args": [
          "base_url"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_error_handling",
        "file": "TestMaster\\dashboard\\demo_automated_frontend_testing.py",
        "line": 277,
        "args": [
          "base_url"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_frontend_integration",
        "file": "TestMaster\\dashboard\\quick_frontend_test.py",
        "line": 18,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 26
      },
      {
        "name": "test_endpoints",
        "file": "TestMaster\\dashboard\\quick_validation.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_health",
        "file": "TestMaster\\dashboard\\simple_robustness_test.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_analytics_with_fallbacks",
        "file": "TestMaster\\dashboard\\simple_robustness_test.py",
        "line": 30,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_component_fallbacks",
        "file": "TestMaster\\dashboard\\simple_robustness_test.py",
        "line": 72,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_feature",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 17,
        "args": [
          "name",
          "test_func"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_analytics_performance",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 34,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_event_queue",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 63,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_anomaly_detection",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 76,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_export_capabilities",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 90,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_health_monitoring",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 108,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_comprehensive_analytics",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 124,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_dashboard_summary",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 154,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_historical_data",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 175,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_insights",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 193,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_optimization_metrics",
        "file": "TestMaster\\dashboard\\test_all_features.py",
        "line": 213,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_analytics_import",
        "file": "TestMaster\\dashboard\\test_analytics_import.py",
        "line": 10,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_server_with_analytics",
        "file": "TestMaster\\dashboard\\test_analytics_import.py",
        "line": 35,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\dashboard\\test_api_endpoints.py",
        "line": 21,
        "args": [
          "self",
          "method",
          "path",
          "description",
          "data",
          "expected_status"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_integrity_guardian",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 168,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_quantum_retry",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 236,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_deduplication",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 295,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_emergency_backup",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 354,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_flow_optimizer",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 418,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_integrated_system",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 467,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_tab_switching_html_structure",
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "line": 33,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_performance_charts_structure",
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 11
      },
      {
        "name": "test_llm_toggle_functionality",
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "line": 143,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 8
      },
      {
        "name": "test_responsive_design",
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "line": 202,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_server_availability",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_api_endpoints",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_data_flow_integration",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 260,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 13
      },
      {
        "name": "test_ultra_reliability_features",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 390,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_performance_characteristics",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 486,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_error_handling",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 579,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_frontend_without_browser",
        "file": "TestMaster\\dashboard\\test_frontend_without_browser.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 27
      },
      {
        "name": "test_crew_endpoints",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 60,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_swarm_endpoints",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 109,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_crew_creation",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 158,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_crew_task_execution",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 213,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_swarm_creation",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 279,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_swarm_architectures",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 340,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_swarm_task_execution",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 403,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_adaptive_swarm_selection",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 481,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_agent_coordination",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 572,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_performance_monitoring",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 653,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_concurrent_execution",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 700,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_crew_performance_analytics",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 782,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\dashboard\\test_new_robustness_features.py",
        "line": 17,
        "args": [
          "url",
          "description"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_data_flow_robustness",
        "file": "TestMaster\\dashboard\\test_new_robustness_features.py",
        "line": 208,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_new_visualization_apis",
        "file": "TestMaster\\dashboard\\test_new_visualization_apis.py",
        "line": 15,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 8
      },
      {
        "name": "test_monitoring_api",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 23,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_delivery_verification",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 51,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_concurrent_load",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 80,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_failure_recovery",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 101,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_data_integrity",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_batch_processing",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 161,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_heartbeat_monitoring",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 190,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_flow_monitoring",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 215,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_robustness_score",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 241,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_endpoint",
        "file": "TestMaster\\dashboard\\test_robustness_verification.py",
        "line": 17,
        "args": [
          "url",
          "description"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_health_monitor",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 183,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_sla_tracker",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 253,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_circuit_breaker",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 324,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_function_success",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 352,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_function_failure",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 356,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_function_slow",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 360,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_receipt_tracker",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 413,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 11
      },
      {
        "name": "test_priority_queue",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 495,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 8
      },
      {
        "name": "test_integrated_system",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 598,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_all_visualizations",
        "file": "TestMaster\\dashboard\\ultimate_frontend_validator.py",
        "line": 253,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_performance_under_load",
        "file": "TestMaster\\dashboard\\ultimate_frontend_validator.py",
        "line": 481,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_data_consumption_patterns",
        "file": "TestMaster\\dashboard\\ultimate_frontend_validator.py",
        "line": 556,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_delivery",
        "file": "TestMaster\\dashboard\\api\\monitoring.py",
        "line": 266,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_all_modules",
        "file": "TestMaster\\scripts\\simple_100_percent.py",
        "line": 12,
        "args": [],
        "decorators": [],
        "assertions": 11,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_single_generation",
        "file": "TestMaster\\scripts\\test_single_api_call.py",
        "line": 29,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_with_correct_imports",
        "file": "TestMaster\\scripts\\test_updated_prompt.py",
        "line": 30,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 10
      },
      {
        "name": "test_complete_generation_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 12,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_concurrent_generation_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_pipeline_data_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 255,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_resource_cleanup_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 341,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_error_recovery_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 414,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 12
      },
      {
        "name": "test_high_throughput_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 505,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_export_data_flow",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 573,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 9
      },
      {
        "name": "test_connection",
        "file": "TestMaster\\testmaster\\generators\\intelligent.py",
        "line": 506,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 5
      },
      {
        "name": "test_gemini_connection",
        "file": "TestMaster\\testmaster\\generators\\intelligent.py",
        "line": 529,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_agent_coordination",
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\agent_coordination.py",
        "line": 440,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_consensus_engine",
        "file": "TestMaster\\testmaster\\intelligence\\consensus\\consensus_engine.py",
        "line": 368,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_llm_integration",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\llm_integration.py",
        "line": 487,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_adaptive_resource_management",
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\adaptive_resource_management_agent.py",
        "line": 1070,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 8
      },
      {
        "name": "test_bottleneck_detection_resolution",
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\bottleneck_detection_resolution_agent.py",
        "line": 1052,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 7
      },
      {
        "name": "test_workflow_performance_monitor",
        "file": "TestMaster\\testmaster\\intelligence\\monitoring\\workflow_performance_monitor_agent.py",
        "line": 832,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_multi_objective_optimization",
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\multi_objective_optimization_agent.py",
        "line": 1103,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 6
      },
      {
        "name": "test_security_intelligence",
        "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
        "line": 876,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_failure_rule",
        "file": "TestMaster\\testmaster\\orchestrator\\work_distributor.py",
        "line": 359,
        "args": [
          "item"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_ensemble_gradient_boosting",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 57,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_neural_architecture_search",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 70,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_adaptive_anomaly_detector",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 88,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_transfer_learning_adapter",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 106,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 3,
        "complexity": 1
      },
      {
        "name": "test_create_ml_pipeline",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 121,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_bayesian_inference",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 137,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_time_series_analyzer",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_multivariate_tester",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 179,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 9,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_run_statistical_analysis",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 209,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_streaming_pattern_detector",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 220,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_sequence_pattern_matcher",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 242,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_anomaly_pattern_learner",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 261,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_create_pattern_detector",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 288,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_adaptive_forecaster",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 305,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 6,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_real_time_predictor",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 327,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 4
      },
      {
        "name": "test_ml_to_statistics_pipeline",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 351,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_pattern_to_forecast_pipeline",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 367,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_claude_test_generator_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_gemini_test_generator_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 107,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_universal_ai_generator_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 135,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_statistical_coverage_analyzer_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_coverage_analysis_structure",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 151,
        "args": [
          "self",
          "temp_directory",
          "sample_python_file"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_ml_test_optimizer_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 173,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_ml_optimizer_test_analysis",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 181,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_analytics_engine_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 200,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_analytics_assessment",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 207,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_gate_automation_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 228,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_gate_evaluation",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 235,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_predictive_test_failure_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 255,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_failure_prediction_analysis",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 262,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_advanced_owasp_tester_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 281,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_api_security_tester_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 309,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_compliance_validator_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 317,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_maintenance_system_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 343,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_suite_analysis",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 351,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_continuous_testing_engine_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 372,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_enterprise_orchestrator_initialization",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 380,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_component_integration_compatibility",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 407,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_package_imports",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 434,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_data_structure_consistency",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 468,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_component_performance_benchmarks",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 485,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_memory_usage_validation",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 511,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 2,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_error_handling_robustness",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 539,
        "args": [
          "self",
          "temp_directory"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_configuration_validation",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 554,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_analytics_with_security_integration",
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "line": 226,
        "args": [
          "self",
          "mock_test_results"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_quality_gates_with_automation_integration",
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "line": 258,
        "args": [
          "self",
          "mock_test_results"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 1,
        "complexity": 2
      },
      {
        "name": "test_data_serialization_across_components",
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "line": 471,
        "args": [
          "self",
          "temp_project_structure"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_component_configuration_consistency",
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "line": 606,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 5,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_integration_monitoring_and_metrics",
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "line": 638,
        "args": [
          "self",
          "temp_project_structure"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_status_endpoint",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "line": 300,
        "args": [
          "self",
          "mock_app"
        ],
        "decorators": [],
        "assertions": 4,
        "mocks": 4,
        "complexity": 1
      },
      {
        "name": "test_chat_endpoint",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "line": 321,
        "args": [
          "self",
          "mock_app"
        ],
        "decorators": [],
        "assertions": 3,
        "mocks": 5,
        "complexity": 1
      },
      {
        "name": "test_competitive_analysis_endpoint",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "line": 346,
        "args": [
          "self",
          "mock_app"
        ],
        "decorators": [],
        "assertions": 7,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_multi_language_analyzer",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_simple.py",
        "line": 22,
        "args": [],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_instant_graph_engine",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_simple.py",
        "line": 43,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_predictive_intelligence",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_simple.py",
        "line": 64,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_enterprise_features",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_simple.py",
        "line": 89,
        "args": [],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_run_benchmarks_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_run_benchmarks_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_run_benchmarks_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_baseline_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_baseline_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_benchmark_history_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 55,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_benchmark_history_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 62,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_performance_trends_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 69,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_performance_trends_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_inspect_agent_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 94,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_inspect_agent_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 101,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_inspect_agent_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 108,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_inspection_history_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 115,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_inspection_history_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 122,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_quality_trends_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 129,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_quality_trends_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 136,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_is_valid_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_errors_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 161,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_error_handles_string",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 168,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_clear_errors_removes_all",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_send_message_returns_response",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_send_message_handles_empty_string",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_conversation_history_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_clear_conversation_clears_history",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_route_request_returns_response",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_register_agent_adds_agent",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 68,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_available_agents_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 75,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_remove_agent_removes_agent",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 82,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_enqueue_adds_message",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 102,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_dequeue_returns_message",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 109,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_is_empty_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 117,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_size_returns_integer",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 124,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_clear_empties_queue",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 131,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_is_allowed_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_remaining_requests_returns_integer",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 158,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_reset_key_clears_limits",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 3
      },
      {
        "name": "test_test_get_config_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_config_value_updates_config",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_load_from_file_loads_config",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 35,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_save_to_file_saves_config",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 43,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_context_adds_entry",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_context_returns_data",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 68,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_history_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_clear_history_empties_history",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 83,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_is_enabled_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_enable_feature_enables_flag",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 110,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_disable_feature_disables_flag",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 117,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_all_flags_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 125,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_state_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 143,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_state_sets_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_delete_state_removes_key",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 159,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_all_state_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 168,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_clear_state_empties_state",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 175,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_coverage_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_coverage_report_returns_string",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_calculate_line_coverage_returns_float",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 34,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_calculate_branch_coverage_returns_float",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_uncovered_lines_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 48,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_flow_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 66,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_flow_graph_returns_object",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_detect_bottlenecks_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 80,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_execution_flow_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 98,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_execution_metrics_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_optimize_execution_path_returns_object",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_config_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_generation_mode_sets_mode",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_tests_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_strategy_sets_strategy",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 53,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_generated_tests_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 71,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_test_adds_test",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 78,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_simple_tests_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 97,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_parameterized_tests_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 115,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_edge_case_tests_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 133,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_error_tests_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_create_assertion_returns_string",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 169,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_validate_assertion_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 176,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_execute_test_returns_result",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 194,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_test_metadata_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 201,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_run_test_case_returns_result",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 219,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_run_test_suite_returns_results",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 237,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_test_case_adds_case",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 244,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_pattern_returns_string",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 262,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_pattern_adds_pattern",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 269,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_resolve_dependencies_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_dependency_adds_dependency",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_route_execution_returns_result",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 45,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_register_executor_registers_executor",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_optimize_resources_returns_result",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 70,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_resource_usage_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 77,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_cached_value_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_clear_cache_clears_cache",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 103,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_map_tests_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_create_mapping_creates_mapping",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 130,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_schedule_tests_returns_schedule",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 148,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_test_to_queue_adds_test",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 156,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_tag_file_adds_tag",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 174,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_tags_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_enqueue_with_priority_adds_item",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 199,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_dequeue_returns_highest_priority",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 206,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_is_empty_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 215,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_distribute_work_returns_assignment",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 233,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_balance_load_balances_load",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 242,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_map_structure_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 260,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_dependencies_returns_graph",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 267,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_collect_data_returns_data",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 285,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_aggregate_data_returns_summary",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 292,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_enhance_incrementally_returns_result",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 311,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_enhancement_history_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 318,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_collect_feedback_stores_feedback",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 336,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_feedback_summary_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 343,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_collect_telemetry_collects_data",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 361,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_telemetry_report_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 368,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_render_widget_returns_html",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_update_coverage_data_updates_data",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_widget_config_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 35,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_render_quality_widget_returns_html",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 53,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_update_quality_metrics_updates_metrics",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 60,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_verify_and_heal_returns_result",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_detect_issues_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 87,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_heal_issues_returns_fixed_code",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_code_quality_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 115,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_quality_report_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_identify_quality_issues_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 130,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_test_quality_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 149,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_evaluate_test_coverage_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 157,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_check_test_completeness_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 165,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_verify_test_syntax_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 184,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_auto_fix_test_returns_fixed_code",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 192,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_validate_test_logic_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 200,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_enhance_test_assertions_returns_enhanced_code",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 208,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_node_adds_node",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 227,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_edge_adds_edge",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 234,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_execution_order_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 243,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_validate_graph_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 250,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_parse_code_returns_ast",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 268,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_extract_functions_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 276,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_abstract_ast_returns_abstraction",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 295,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_analyze_semantics_returns_analysis",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 314,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_extract_semantic_features_returns_features",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 322,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_thought_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 20,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_evaluate_thought_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_strategy_thought_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_coverage_thought_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 64,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_evaluate_thought_quality_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 82,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_rank_thoughts_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 90,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_criteria_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 112,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_weight_sets_criterion_weight",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_add_child_adds_child_node",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 138,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_depth_returns_integer",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 146,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_is_leaf_returns_boolean",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 153,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_build_tree_builds_structure",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 171,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_traverse_tree_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 179,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_find_best_path_returns_path",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_evaluate_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 204,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_reason_returns_solution",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 223,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_generate_thoughts_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 231,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_simple_evaluate_returns_score",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 250,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_tot_config_returns_dict",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 269,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_set_depth_limit_sets_limit",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 276,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_best_solution_returns_solution",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 295,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_get_all_solutions_returns_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 302,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 2
      },
      {
        "name": "test_test_main_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 17,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_module_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 22,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_module_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 27,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_broken_tests_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 32,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_broken_tests_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 37,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_by_priority_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 42,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_by_priority_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 47,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_by_priority_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 52,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_week_range_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 57,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_week_range_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 62,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_incremental_save_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 67,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_incremental_save_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 72,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_convert_incremental_save_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 77,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 90,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 95,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 100,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 105,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 117,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 122,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 127,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 132,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_snapshot_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_snapshot_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 149,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_recent_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_recent_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 159,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_initialize_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 171,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_initialize_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 176,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_is_enabled_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_is_enabled_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 186,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_config_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 191,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_config_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 196,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_enable_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 201,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_enable_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 206,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_run_benchmarks_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_run_benchmarks_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 21,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_run_benchmarks_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_baseline_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_baseline_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_benchmark_history_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_benchmark_history_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_performance_trends_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 51,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_performance_trends_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_inspect_agent_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 68,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_inspect_agent_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_inspect_agent_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 78,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_inspection_history_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 83,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_inspection_history_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 88,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_quality_trends_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 93,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_quality_trends_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 98,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_issue_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 110,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_issue_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 115,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_run_full_analysis_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 127,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_run_full_analysis_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 132,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_uncovered_functions_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 137,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_uncovered_functions_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 142,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_save_report_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 147,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_save_report_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 152,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_all_functions_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_all_functions_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 21,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_all_classes_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_all_classes_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_find_function_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_find_function_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_find_class_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_find_class_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 51,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_create_universal_ast_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 63,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_create_universal_ast_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 68,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_create_universal_ast_raises_valueerror",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 73,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_create_project_ast_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 79,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_create_project_ast_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 84,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_create_project_ast_raises_valueerror",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 89,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_analyze_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 102,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_analyze_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 107,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_to_dict_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 119,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_to_dict_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 124,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 136,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 141,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_raises_notimplementederror",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 146,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_to_dict_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 159,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_to_dict_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 164,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 176,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 181,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 193,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 198,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 215,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 227,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_generate_tests_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 232,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_verify_and_heal_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 244,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_verify_and_heal_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 249,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_analyze_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 261,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_analyze_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 266,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_analyze_test_quality_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 278,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_analyze_test_quality_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 283,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_verify_and_heal_test_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 295,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_verify_and_heal_test_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 300,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_start_monitoring_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_start_monitoring_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 21,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_stop_monitoring_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_stop_monitoring_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_status_update_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_status_update_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_status_update_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_breaking_test_alert_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 51,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_breaking_test_alert_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_breaking_test_alert_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_idle_module_alert_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 66,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_idle_module_alert_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 71,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_idle_module_alert_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_coverage_gap_report_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_coverage_gap_report_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_coverage_gap_report_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 91,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_system_alert_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_system_alert_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 101,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_sent_messages_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 106,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_sent_messages_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 111,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_received_directives_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 116,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_received_directives_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 121,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_pending_acknowledgments_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_pending_acknowledgments_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 131,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_mark_message_acknowledged_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 136,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_mark_message_acknowledged_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 141,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_communication_statistics_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 146,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_communication_statistics_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 151,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_route_message_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 163,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_route_message_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 168,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_agent_capability_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 173,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_agent_capability_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 178,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_start_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 190,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_start_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 195,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_stop_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 200,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_stop_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 205,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_message_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_message_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 215,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_send_message_raises_runtimeerror",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 220,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_acknowledge_message_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 226,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_acknowledge_message_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 231,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_message_status_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 236,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_message_status_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 241,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_conversation_history_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 246,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_conversation_history_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 251,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_queue_statistics_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 256,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_queue_statistics_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 261,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_set_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 21,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_increment_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_increment_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_append_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_append_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 51,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_update_dict_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_update_dict_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_delete_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 66,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_delete_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 71,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_exists_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_exists_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_keys_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_keys_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 91,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_clear_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_clear_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 101,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_stats_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 106,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_stats_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 111,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_node_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 123,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_node_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 128,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_node_empty_list",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 133,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_node_raises_valueerror",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 138,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 0,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_edge_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 144,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_edge_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 149,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_conditional_edge_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 154,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_conditional_edge_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 159,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_invoke_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 164,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_invoke_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 169,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_ainvoke_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 174,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_ainvoke_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 179,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_workflow_statistics_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 190,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_workflow_statistics_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 195,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_execution_status_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 200,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_execution_status_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 205,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_cancel_execution_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 210,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_cancel_execution_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 215,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_scan_all_files_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 16,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_scan_all_files_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 21,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_scan_file_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 26,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_scan_file_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 31,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_with_tag_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 36,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_with_tag_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 41,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_by_status_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 46,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_by_status_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 51,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_by_owner_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 56,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_by_owner_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 61,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_test_modules_covering_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 66,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_test_modules_covering_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 71,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_with_testmaster_tag_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 76,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_with_testmaster_tag_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 81,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_high_priority_modules_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 86,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_high_priority_modules_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 91,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_needing_coverage_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 96,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_modules_needing_coverage_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 101,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_update_module_tag_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 106,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_update_module_tag_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 111,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_tag_to_file_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 116,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_add_tag_to_file_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 121,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_tag_statistics_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 126,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_get_tag_statistics_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 131,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_export_tag_report_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 136,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_export_tag_report_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 141,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_wait_if_needed_returns_value",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 153,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      },
      {
        "name": "test_test_wait_if_needed_handles_none",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 158,
        "args": [
          "self"
        ],
        "decorators": [],
        "assertions": 1,
        "mocks": 0,
        "complexity": 1
      }
    ],
    "test_classes": [
      {
        "name": "PropertyBasedTestGenerator",
        "file": "TestMaster\\enhanced_context_aware_test_generator.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ContractBasedTestGenerator",
        "file": "TestMaster\\enhanced_context_aware_test_generator.py",
        "line": 202,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestGenerator",
        "file": "TestMaster\\enhanced_context_aware_test_generator.py",
        "line": 293,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestContext",
        "file": "TestMaster\\enhanced_intelligent_test_builder.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerationPlan",
        "file": "TestMaster\\enhanced_intelligent_test_builder.py",
        "line": 59,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "EnhancedIntelligentTestBuilder",
        "file": "TestMaster\\enhanced_intelligent_test_builder.py",
        "line": 72,
        "methods": [],
        "base_classes": [
          "IntelligentTestBuilder"
        ],
        "decorators": []
      },
      {
        "name": "TestEnhancer",
        "file": "TestMaster\\enhance_auto_generated_tests.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestImportFixer",
        "file": "TestMaster\\fix_enhanced_test_imports.py",
        "line": 17,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFixer",
        "file": "TestMaster\\fix_failing_tests.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealModuleTestFixer",
        "file": "TestMaster\\fix_tests_for_real_modules.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationTestBuilder",
        "file": "TestMaster\\integration_test_generator.py",
        "line": 186,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SmartIntegrationTestGenerator",
        "file": "TestMaster\\integration_test_generator.py",
        "line": 401,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilder",
        "file": "TestMaster\\intelligent_test_builder.py",
        "line": 31,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "OfflineIntelligentTestBuilder",
        "file": "TestMaster\\intelligent_test_builder_offline.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilderV2",
        "file": "TestMaster\\intelligent_test_builder_v2.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\restored_asyncio_4.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\restored_asyncio_5.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\restored_asyncio_5.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\restored_json_4.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnterpriseTestDeployment",
        "file": "TestMaster\\restored_json_5.py",
        "line": 93,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\restored_logging_4.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\restored_logging_5.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\restored_logging_5.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\restored_threading_4.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\restored_threading_4.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\restored_threading_5.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\restored_threading_5.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\restored_time_4.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\restored_time_5.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\restored_time_5.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\restored_uuid_4.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\restored_uuid_5.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\restored_uuid_5.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RegressionTestGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PerformanceTestGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 156,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DataValidationTestGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 263,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "LLMTestGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 363,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConfigurationTestGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 484,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ExperimentTestGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 582,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComprehensiveTestSuiteGenerator",
        "file": "TestMaster\\specialized_test_generators.py",
        "line": 693,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFileModularizer",
        "file": "TestMaster\\split_massive_test_file.py",
        "line": 12,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingFrameworkAnalyzer",
        "file": "TestMaster\\testing_framework_analyzer.py",
        "line": 17,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AgentQASystemTest",
        "file": "TestMaster\\test_agent_qa_system.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncProcessingTest",
        "file": "TestMaster\\test_async_processing.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "BackendHealthTester",
        "file": "TestMaster\\test_backend_health.py",
        "line": 22,
        "methods": [
          "test_component",
          "test_core_components",
          "test_state_managers",
          "test_integration_systems",
          "test_monitoring_systems",
          "test_api_endpoints",
          "test_intelligence_agents"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilder",
        "file": "TestMaster\\test_complexity_prioritizer.py",
        "line": 51,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\test_complexity_prioritizer.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\test_complexity_prioritizer.py",
        "line": 89,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestComplexityPrioritizer",
        "file": "TestMaster\\test_complexity_prioritizer.py",
        "line": 110,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\test_dependency_orderer.py",
        "line": 46,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestDependencyOrderer",
        "file": "TestMaster\\test_dependency_orderer.py",
        "line": 94,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerator",
        "file": "TestMaster\\test_enhancements.py",
        "line": 267,
        "methods": [],
        "base_classes": [
          "BaseGenerator"
        ],
        "decorators": []
      },
      {
        "name": "FlowOptimizerSystemTest",
        "file": "TestMaster\\test_flow_optimizer_system.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationSystemTester",
        "file": "TestMaster\\test_integration_systems.py",
        "line": 25,
        "methods": [
          "test_component",
          "test_automatic_scaling_system",
          "test_comprehensive_error_recovery",
          "test_cross_system_communication",
          "test_distributed_task_queue",
          "test_intelligent_caching_layer",
          "test_load_balancing_system",
          "test_multi_environment_support",
          "test_predictive_analytics_engine",
          "test_realtime_performance_monitoring",
          "test_resource_optimization_engine",
          "test_service_mesh_integration",
          "test_cross_system_integration",
          "test_system_performance_under_load",
          "test_fault_tolerance"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReportingSystemTest",
        "file": "TestMaster\\test_reporting_system.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "StreamingGenerationTest",
        "file": "TestMaster\\test_streaming_generation.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTrackingGenerator",
        "file": "TestMaster\\test_tracking_manager_integration.py",
        "line": 94,
        "methods": [],
        "base_classes": [
          "BaseGenerator"
        ],
        "decorators": []
      },
      {
        "name": "UniversalASTSystemTest",
        "file": "TestMaster\\test_universal_ast_system.py",
        "line": 14,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalLanguageDetectorTest",
        "file": "TestMaster\\test_universal_language_detector.py",
        "line": 15,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealTestWriter",
        "file": "TestMaster\\write_real_tests.py",
        "line": 16,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestActionType",
        "file": "TestMaster\\agents\\roles\\base_role.py",
        "line": 22,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestMessage",
        "file": "TestMaster\\agents\\roles\\base_role.py",
        "line": 43,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestAction",
        "file": "TestMaster\\agents\\roles\\base_role.py",
        "line": 58,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "BaseTestRole",
        "file": "TestMaster\\agents\\roles\\base_role.py",
        "line": 87,
        "methods": [],
        "base_classes": [
          "ABC"
        ],
        "decorators": []
      },
      {
        "name": "TestArchitect",
        "file": "TestMaster\\agents\\roles\\test_architect.py",
        "line": 22,
        "methods": [],
        "base_classes": [
          "BaseTestRole"
        ],
        "decorators": []
      },
      {
        "name": "TestCoordinator",
        "file": "TestMaster\\agents\\roles\\test_coordinator.py",
        "line": 14,
        "methods": [],
        "base_classes": [
          "BaseTestRole"
        ],
        "decorators": []
      },
      {
        "name": "TestEngineer",
        "file": "TestMaster\\agents\\roles\\test_engineer.py",
        "line": 22,
        "methods": [],
        "base_classes": [
          "BaseTestRole"
        ],
        "decorators": []
      },
      {
        "name": "TestExecutor",
        "file": "TestMaster\\agents\\roles\\test_executor.py",
        "line": 14,
        "methods": [],
        "base_classes": [
          "BaseTestRole"
        ],
        "decorators": []
      },
      {
        "name": "TestingSupervisor",
        "file": "TestMaster\\agents\\supervisor\\testing_supervisor.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingTeam",
        "file": "TestMaster\\agents\\team\\testing_team.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQuality",
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "line": 37,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestSmell",
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "line": 45,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestSmellReport",
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "line": 96,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingIntelligenceReport",
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "line": 117,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdvancedTestingIntelligence",
        "file": "TestMaster\\archive\\advanced_testing_intelligence.py",
        "line": 138,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DuplicateStatus",
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_deduplication.py",
        "line": 43,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "VerificationTest",
        "file": "TestMaster\\archive\\centralization_process_20250821_intelligence_consolidation\\analytics_components\\analytics_delivery_verifier.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "EnhancedTestImportFixer",
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_enhanced_test_imports.py",
        "line": 17,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFixer",
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_failing_tests.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealModuleTestFixer",
        "file": "TestMaster\\archive\\COMPLETE_REFACTOR_20250818_112844\\fix_tests_for_real_modules.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPlan",
        "file": "TestMaster\\archive\\legacy_scripts\\achieve_100_percent_coverage.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "Gemini25ProTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\achieve_100_percent_coverage.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AITestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\ai_test_generator.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\archive\\legacy_scripts\\automated_test_generation.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\archive\\legacy_scripts\\automated_test_generation.py",
        "line": 32,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AutomatedTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\automated_test_generation.py",
        "line": 41,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCaseInfo",
        "file": "TestMaster\\archive\\legacy_scripts\\comprehensive_test_framework.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ComprehensiveTestFramework",
        "file": "TestMaster\\archive\\legacy_scripts\\comprehensive_test_framework.py",
        "line": 50,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DataFlowTester",
        "file": "TestMaster\\archive\\legacy_scripts\\data_flow_tests.py",
        "line": 37,
        "methods": [
          "test_complete_generation_flow",
          "test_concurrent_generation_flow",
          "test_pipeline_data_flow",
          "test_resource_cleanup_flow",
          "test_error_recovery_flow",
          "test_high_throughput_flow",
          "test_export_data_flow"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PropertyBasedTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\enhanced_context_aware_test_generator.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ContractBasedTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\enhanced_context_aware_test_generator.py",
        "line": 202,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\enhanced_context_aware_test_generator.py",
        "line": 293,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEnhancer",
        "file": "TestMaster\\archive\\legacy_scripts\\enhance_auto_generated_tests.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestImportFixer",
        "file": "TestMaster\\archive\\legacy_scripts\\fix_enhanced_test_imports.py",
        "line": 17,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFixer",
        "file": "TestMaster\\archive\\legacy_scripts\\fix_failing_tests.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIssueFixer",
        "file": "TestMaster\\archive\\legacy_scripts\\fix_remaining_issues.py",
        "line": 14,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealModuleTestFixer",
        "file": "TestMaster\\archive\\legacy_scripts\\fix_tests_for_real_modules.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestInfrastructureFixer",
        "file": "TestMaster\\archive\\legacy_scripts\\fix_test_infrastructure.py",
        "line": 15,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\gemini_powered_test_generator.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\gemini_test_generator.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SequentialTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\generate_coverage_sequential.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationTestBuilder",
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_generator.py",
        "line": 186,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SmartIntegrationTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_generator.py",
        "line": 401,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_matrix.py",
        "line": 26,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestCase",
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_matrix.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_matrix.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "IntegrationTestMatrix",
        "file": "TestMaster\\archive\\legacy_scripts\\integration_test_matrix.py",
        "line": 62,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestConverter",
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_converter.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilder",
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder.py",
        "line": 31,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "OfflineIntelligentTestBuilder",
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder_offline.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilderV2",
        "file": "TestMaster\\archive\\legacy_scripts\\intelligent_test_builder_v2.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SmartTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\smart_test_generator.py",
        "line": 28,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RegressionTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PerformanceTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 156,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DataValidationTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 263,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "LLMTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 363,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConfigurationTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 484,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ExperimentTestGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 582,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComprehensiveTestSuiteGenerator",
        "file": "TestMaster\\archive\\legacy_scripts\\specialized_test_generators.py",
        "line": 693,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealTestWriter",
        "file": "TestMaster\\archive\\legacy_scripts\\write_real_tests.py",
        "line": 16,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTest",
        "file": "TestMaster\\archive\\modularization_20250820_222253\\testing_hub_original_1375_lines.py",
        "line": 70,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionResult",
        "file": "TestMaster\\archive\\modularization_20250820_222253\\testing_hub_original_1375_lines.py",
        "line": 78,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuiteAnalysis",
        "file": "TestMaster\\archive\\modularization_20250820_222253\\testing_hub_original_1375_lines.py",
        "line": 121,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ConsolidatedTestingHub",
        "file": "TestMaster\\archive\\modularization_20250820_222253\\testing_hub_original_1375_lines.py",
        "line": 171,
        "methods": [],
        "base_classes": [
          "IntelligenceInterface"
        ],
        "decorators": []
      },
      {
        "name": "PropertyBasedTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\enhanced_context_aware_test_generator.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ContractBasedTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\enhanced_context_aware_test_generator.py",
        "line": 202,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\enhanced_context_aware_test_generator.py",
        "line": 293,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEnhancer",
        "file": "TestMaster\\archive\\original_backup\\enhance_auto_generated_tests.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestImportFixer",
        "file": "TestMaster\\archive\\original_backup\\fix_enhanced_test_imports.py",
        "line": 17,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFixer",
        "file": "TestMaster\\archive\\original_backup\\fix_failing_tests.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealModuleTestFixer",
        "file": "TestMaster\\archive\\original_backup\\fix_tests_for_real_modules.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationTestBuilder",
        "file": "TestMaster\\archive\\original_backup\\integration_test_generator.py",
        "line": 186,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SmartIntegrationTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\integration_test_generator.py",
        "line": 401,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilder",
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder.py",
        "line": 31,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "OfflineIntelligentTestBuilder",
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder_offline.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestBuilderV2",
        "file": "TestMaster\\archive\\original_backup\\intelligent_test_builder_v2.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RegressionTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PerformanceTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 156,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DataValidationTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 263,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "LLMTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 363,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConfigurationTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 484,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ExperimentTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 582,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComprehensiveTestSuiteGenerator",
        "file": "TestMaster\\archive\\original_backup\\specialized_test_generators.py",
        "line": 693,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealTestWriter",
        "file": "TestMaster\\archive\\original_backup\\write_real_tests.py",
        "line": 16,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMetrics",
        "file": "TestMaster\\archive\\original_backup\\dashboard\\quality_dashboard.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\archive\\original_backup\\deduplication\\test_deduplicator.py",
        "line": 30,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestDeduplicator",
        "file": "TestMaster\\archive\\original_backup\\deduplication\\test_deduplicator.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IncrementalTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\incremental\\dependency_tracker.py",
        "line": 116,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\archive\\original_backup\\optimization\\execution_optimizer.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestScheduler",
        "file": "TestMaster\\archive\\original_backup\\optimization\\execution_optimizer.py",
        "line": 203,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPlan",
        "file": "TestMaster\\archive\\original_backup\\scripts\\achieve_100_percent_coverage.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "Gemini25ProTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\scripts\\achieve_100_percent_coverage.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AITestGenerator",
        "file": "TestMaster\\archive\\original_backup\\scripts\\ai_test_generator.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIssueFixer",
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_remaining_issues.py",
        "line": 14,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestInfrastructureFixer",
        "file": "TestMaster\\archive\\original_backup\\scripts\\fix_test_infrastructure.py",
        "line": 15,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\scripts\\gemini_powered_test_generator.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\scripts\\gemini_test_generator.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SequentialTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\scripts\\generate_coverage_sequential.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestConverter",
        "file": "TestMaster\\archive\\original_backup\\scripts\\intelligent_converter.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SmartTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\scripts\\smart_test_generator.py",
        "line": 28,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\archive\\original_backup\\src\\automated_test_generation.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\archive\\original_backup\\src\\automated_test_generation.py",
        "line": 32,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AutomatedTestGenerator",
        "file": "TestMaster\\archive\\original_backup\\src\\automated_test_generation.py",
        "line": 41,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCaseInfo",
        "file": "TestMaster\\archive\\original_backup\\src\\comprehensive_test_framework.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ComprehensiveTestFramework",
        "file": "TestMaster\\archive\\original_backup\\src\\comprehensive_test_framework.py",
        "line": 50,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DataFlowTester",
        "file": "TestMaster\\archive\\original_backup\\src\\data_flow_tests.py",
        "line": 37,
        "methods": [
          "test_complete_generation_flow",
          "test_concurrent_generation_flow",
          "test_pipeline_data_flow",
          "test_resource_cleanup_flow",
          "test_error_recovery_flow",
          "test_high_throughput_flow",
          "test_export_data_flow"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\archive\\original_backup\\src\\integration_test_matrix.py",
        "line": 26,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestCase",
        "file": "TestMaster\\archive\\original_backup\\src\\integration_test_matrix.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\archive\\original_backup\\src\\integration_test_matrix.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "IntegrationTestMatrix",
        "file": "TestMaster\\archive\\original_backup\\src\\integration_test_matrix.py",
        "line": 62,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 32,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 44,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 54,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 63,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 91,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 114,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecutionEngine",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 132,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationTestSuite",
        "file": "TestMaster\\archive\\oversized_modules_20250821_042018\\validation\\integration_test_suite.py",
        "line": 798,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\agent_ops.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\agent_ops.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\enhanced_monitor.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\unified_monitor.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestContract",
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\cross_module_tester.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CrossModuleTestGenerator",
        "file": "TestMaster\\archive\\phase1c_consolidation_20250820_150000\\integration\\cross_module_tester.py",
        "line": 237,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195114.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195114.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195132.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\agent_ops_20250819_195132.py",
        "line": 147,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\archive\\phase4_archive\\replaced_code\\enhanced_monitor_20250819_195132.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\agent_graph_20250819_195602.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\agent_graph_20250819_195602.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnterpriseTestDeployment",
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\enterprise_deployment_20250819_195602.py",
        "line": 93,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingTeam",
        "file": "TestMaster\\archive\\phase5_archive\\replaced_code\\testing_team_20250819_195602.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\archive\\phase6_archive\\replaced_code\\agent_graph_20250819_200928.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\archive\\phase6_archive\\replaced_code\\agent_graph_20250819_200928.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\archive\\phase7_archive\\replaced_code\\enhanced_monitor_20250819_202006.py",
        "line": 412,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingConfig",
        "file": "TestMaster\\config\\enhanced_unified_config.py",
        "line": 85,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterConfig",
        "file": "TestMaster\\config\\testmaster_config.py",
        "line": 195,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingConfig",
        "file": "TestMaster\\config\\unified_config.py",
        "line": 154,
        "methods": [],
        "base_classes": [
          "ConfigBase"
        ],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingConfig",
        "file": "TestMaster\\config\\modules\\testing_config.py",
        "line": 191,
        "methods": [],
        "base_classes": [
          "ConfigBase"
        ],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 17,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestContext",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 25,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestRunner",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMetadata",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 43,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "UniversalTestCase",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 98,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestSuite",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 123,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAssertion",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 148,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTest",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 167,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestAdapter",
        "file": "TestMaster\\core\\framework_abstraction.stub_backup.py",
        "line": 192,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AutonomousTestStrategist",
        "file": "TestMaster\\core\\domains\\intelligence\\ultimate_intelligence_nexus.py",
        "line": 897,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestDebtAnalyzer",
        "file": "TestMaster\\core\\domains\\intelligence\\analysis\\debt_test_analyzer.py",
        "line": 22,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DuplicateStatus",
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\analytics_deduplication.py",
        "line": 45,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "MultivariateTester",
        "file": "TestMaster\\core\\domains\\intelligence\\analytics\\statistical_engine.py",
        "line": 180,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSerializer",
        "file": "TestMaster\\core\\domains\\intelligence\\api\\serializers.py",
        "line": 113,
        "methods": [],
        "base_classes": [
          "IntelligenceSerializer"
        ],
        "decorators": []
      },
      {
        "name": "UnifiedTest",
        "file": "TestMaster\\core\\domains\\intelligence\\base\\__init__.py",
        "line": 371,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingCompatibilityBridge",
        "file": "TestMaster\\core\\domains\\intelligence\\compatibility\\__init__.py",
        "line": 559,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestType",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 21,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestIssue",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 42,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 55,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "DocsTestingFramework",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 65,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "APITest",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\interactive_docs.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ValidationTestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\documentation\\system_integration_validator.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PenetrationTester",
        "file": "TestMaster\\core\\domains\\intelligence\\security\\enterprise\\validation\\penetration_tester.py",
        "line": 16,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 39,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 48,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestEnvironment",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 57,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPlan",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 68,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 86,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestInsight",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 101,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdvancedTestingOrchestrator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 114,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationRequest",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation_engine.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation_engine.py",
        "line": 197,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestHealer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation_engine.py",
        "line": 307,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTestType",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\base.py",
        "line": 15,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestExecutionResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\base.py",
        "line": 29,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuiteAnalysis",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\base.py",
        "line": 73,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ContractTester",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\contract_tester.py",
        "line": 162,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestRun",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\flaky_test_detector.py",
        "line": 26,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "FlakyTestDetector",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\flaky_test_detector.py",
        "line": 187,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\load_generator.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "LoadTestReport",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\load_generator.py",
        "line": 77,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\property_tester.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PropertyTester",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\property_tester.py",
        "line": 143,
        "methods": [
          "test_property"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSummary",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\quality_dashboard.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\regression_detector.py",
        "line": 26,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_analytics.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestProfile",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_analytics.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestAnalytics",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_analytics.py",
        "line": 351,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFeatures",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_intelligence.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestPrioritizer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_intelligence.py",
        "line": 185,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntelligence",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_intelligence.py",
        "line": 277,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_orchestrator.py",
        "line": 27,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestConfiguration",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_orchestrator.py",
        "line": 45,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_orchestrator.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_orchestrator.py",
        "line": 71,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMetrics",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_quality_scorer.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestAnalyzer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_quality_scorer.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityScorer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_quality_scorer.py",
        "line": 207,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_selector.py",
        "line": 26,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestImpactAnalyzer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_selector.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSelector",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\test_selector.py",
        "line": 163,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConsolidatedTestingHub",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\__init__.py",
        "line": 38,
        "methods": [],
        "base_classes": [
          "IntelligenceInterface"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "line": 35,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestMetadata",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "MLTestOptimizer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "line": 88,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationStrategy",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "line": 16,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "GeneratedTest",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ClaudeTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "line": 48,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestComplexity",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 28,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestFocus",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 35,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestGenerationConfig",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 45,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 71,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 82,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestConfig",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\ai_generation\\universal_ai_generator.py",
        "line": 31,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecutionStrategy",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 20,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 28,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 47,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ContinuousTestingMetrics",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 65,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingSession",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 78,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ContinuousTestingEngine",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 119,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStage",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "EnterpriseTestOrchestrator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "line": 115,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "line": 38,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestIssue",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "line": 47,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMaintenanceSystem",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "line": 85,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\coverage_analyzer.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuiteAnalysis",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\coverage_analyzer.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSmellDetector",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\coverage_analyzer.py",
        "line": 133,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionEngine",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\execution_engine.py",
        "line": 25,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTest",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTestType",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ClaudeAITestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 65,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiAITestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 146,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 220,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationStrategy",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 288,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestComplexity",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 300,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "GeneratedTest",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 330,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "IntegrationTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 353,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ClaudeTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 863,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 894,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestGenerator",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\integration_generator.py",
        "line": 928,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MLTestOptimizer",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\components\\ml_optimizer.py",
        "line": 114,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFailureFeatures",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PredictiveTestFailureSystem",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "line": 103,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GateStatus",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\enterprise\\quality_gate_automation.py",
        "line": 30,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "AsyncTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 24,
        "methods": [
          "test_run_async_sync_basic"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CommunicationTestConfig",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CommunicationTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 66,
        "methods": [
          "test_message_routing_with_timeout",
          "test_conversation_continuity",
          "test_concurrent_routing_error_detection"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MCPTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 171,
        "methods": [
          "test_mcp_tool_execution"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PipelineTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReactAgentTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 204,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FormatterTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 354,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EmbeddingCacheTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 497,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 661,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ThreadSafetyTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 28,
        "methods": [
          "test_parallel_crews_thread_safety",
          "test_no_context_leakage"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailTestConfig",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 223,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "FlowTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 371,
        "methods": [
          "test_flow_execution",
          "test_flow_with_conditional_steps"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 28,
        "methods": [
          "test_graph_creation_sync"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EdgeNodeTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 402,
        "methods": [
          "test_edge_initialization",
          "test_edge_string_representation",
          "test_edge_stringify_full",
          "test_edge_comparison"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncConstraintTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 609,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IndexPerformanceTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 713,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ProfilingTestPatterns",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 865,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "line": 39,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "SecurityTestReport",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "line": 77,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdvancedOWASPTester",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "line": 90,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestType",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 39,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "SecurityTest",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 71,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SecurityTestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 85,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "APISecurityTester",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 115,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComplianceTestResult",
        "file": "TestMaster\\core\\domains\\intelligence\\testing\\security\\compliance_validator.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingInterface",
        "file": "TestMaster\\core\\domains\\intelligence\\visualization\\development_tools_ui.py",
        "line": 372,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "VoteStatus",
        "file": "TestMaster\\core\\domains\\security\\byzantine_consensus_security.py",
        "line": 30,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestOutcome",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 31,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 41,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestPattern",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 75,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdaptiveTestingFramework",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 586,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AdaptiveTestingFrameworkTests",
        "file": "TestMaster\\core\\domains\\testing\\adaptive_testing_framework.py",
        "line": 810,
        "methods": [
          "test_pattern_registration",
          "test_pattern_execution",
          "test_pattern_adaptation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReasoningTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 178,
        "methods": [
          "test_basic_reasoning",
          "test_reasoning_refinement",
          "test_max_attempts_exhaustion",
          "test_function_calling_reasoning",
          "test_function_calling_fallback",
          "test_reasoning_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestReasoningPatterns",
        "file": "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "line": 492,
        "methods": [
          "test_agent_with_basic_reasoning",
          "test_reasoning_refinement_process",
          "test_max_reasoning_attempts",
          "test_function_calling_integration"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ArchivedTestPattern",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestIntelligenceReport",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ArchiveTestingFramework",
        "file": "TestMaster\\core\\domains\\testing\\archive_intelligence_mining.py",
        "line": 433,
        "methods": [
          "test_archive_discovery",
          "test_file_analysis",
          "test_pattern_extraction",
          "test_intelligence_mining"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncSyncTestManager",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 11,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncTestFixtures",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncSyncTestValidator",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 73,
        "methods": [
          "test_basic_async_sync_execution",
          "test_running_loop_detection",
          "test_error_propagation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestAsyncSyncPatterns",
        "file": "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "line": 125,
        "methods": [
          "test_sync_context"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestReview",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 106,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CollaborativeTestingPlatform",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 759,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCollaborativeTestingPlatform",
        "file": "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "line": 982,
        "methods": [
          "test_platform_initialization",
          "test_team_member_registration",
          "test_collaboration_session",
          "test_knowledge_sharing",
          "test_code_review_system",
          "test_notification_system",
          "test_team_analytics",
          "test_platform_dashboard",
          "test_team_overview"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CommunicationTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 41,
        "methods": [
          "test_message_routing",
          "test_timeout_handling",
          "test_error_detection"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CommunicationTestValidator",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 209,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestCommunicationPatterns",
        "file": "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "line": 252,
        "methods": [
          "test_agents",
          "test_send_message_routing",
          "test_double_recipient_error"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CompetitiveTestingAnalyzer",
        "file": "TestMaster\\core\\domains\\testing\\competitive_analysis_framework.py",
        "line": 28,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ThreadSafetyTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 181,
        "methods": [
          "test_parallel_crews_context_isolation",
          "test_for_each_context_uniqueness",
          "test_context_leakage_prevention"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestThreadSafetyPatterns",
        "file": "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "line": 503,
        "methods": [
          "test_parallel_crews_thread_safety",
          "test_concurrent_kickoff_for_each",
          "test_no_context_leakage_between_crews"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestJobStatus",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 46,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestJob",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 77,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "DistributedTestCoordinator",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 524,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestDistributedTestCoordinator",
        "file": "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py",
        "line": 811,
        "methods": [
          "test_coordinator_initialization",
          "test_node_registration",
          "test_job_submission",
          "test_dependency_resolution",
          "test_load_balancing",
          "test_fault_tolerance",
          "test_execution_plan_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingPhase",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 42,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "EnterpriseTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 422,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEnterpriseTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "line": 607,
        "methods": [
          "test_framework_initialization",
          "test_test_suite_registration",
          "test_security_context_creation",
          "test_resource_scaling",
          "test_executive_report_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FlowTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 322,
        "methods": [
          "test_flow_execution",
          "test_flow_restart"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestFlowPatterns",
        "file": "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "line": 664,
        "methods": [
          "test_simple_sequential_flow",
          "test_flow_with_multiple_starts",
          "test_cyclic_flow",
          "test_flow_restart"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FormatterTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiProviderFormatterTest",
        "file": "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "line": 313,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "AsyncGraphTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\graph_async_testing.py",
        "line": 210,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAsyncGraphOperations",
        "file": "TestMaster\\core\\domains\\testing\\graph_async_testing.py",
        "line": 413,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphConstraintsTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 210,
        "methods": [
          "test_constraint_creation",
          "test_constraint_duplication_prevention",
          "test_constraint_deletion",
          "test_constraint_validation",
          "test_multi_property_constraints"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGraphConstraints",
        "file": "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "line": 353,
        "methods": [
          "test_node_constraint_lifecycle",
          "test_edge_constraint_lifecycle"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphIndexTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 403,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphIndexTest",
        "file": "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "line": 703,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "GraphOperationsTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 382,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphOperationsTest",
        "file": "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "line": 642,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "LoadTester",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 283,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphPerformanceTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 396,
        "methods": [
          "test_query_profiling",
          "test_cartesian_product_profiling",
          "test_performance_regression_detection",
          "test_load_testing",
          "test_query_complexity_analysis",
          "test_memory_usage_tracking",
          "test_benchmark_comparison",
          "test_slow_query_identification"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGraphPerformance",
        "file": "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "line": 608,
        "methods": [
          "test_execution_plan_analysis",
          "test_performance_monitoring",
          "test_load_test_execution"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphVectorTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 250,
        "methods": [
          "test_vector_index_creation",
          "test_vector_index_operations",
          "test_similarity_calculations",
          "test_vecf32_parsing",
          "test_vector_normalization",
          "test_high_dimensional_vectors",
          "test_multiple_similarity_functions"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGraphVectorOperations",
        "file": "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "line": 478,
        "methods": [
          "test_vector_lifecycle",
          "test_similarity_metrics",
          "test_vector_search_ranking"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 59,
        "methods": [
          "test_guardrail_initialization",
          "test_no_op_behavior",
          "test_guardrail_description",
          "test_various_input_scenarios",
          "test_threshold_ignored",
          "test_tool_response_ignored"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailEventTesting",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 214,
        "methods": [
          "test_event_description_in_events"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailIntegrationTesting",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 252,
        "methods": [
          "test_task_integration",
          "test_validation_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestGuardrailPatterns",
        "file": "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "line": 456,
        "methods": [
          "test_hallucination_guardrail_initialization",
          "test_hallucination_guardrail_no_op_behavior",
          "test_hallucination_guardrail_description",
          "test_hallucination_guardrail_always_passes"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestChildAgent",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 241,
        "methods": [],
        "base_classes": [
          "HookableAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestGrandChildAgent",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 246,
        "methods": [],
        "base_classes": [
          "TestChildAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestAgentA",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 251,
        "methods": [],
        "base_classes": [
          "HookableAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestAgentB",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 256,
        "methods": [],
        "base_classes": [
          "HookableAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestAgentC",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 261,
        "methods": [],
        "base_classes": [
          "TestAgentA",
          "TestAgentB"
        ],
        "decorators": []
      },
      {
        "name": "HookTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 266,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "HookTest",
        "file": "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "line": 517,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "line": 31,
        "methods": [
          "test_complete_codebase_analysis_integration",
          "test_real_time_monitoring_integration",
          "test_natural_language_exploration_integration",
          "test_security_vulnerability_workflow_integration",
          "test_test_generation_workflow_integration",
          "test_cross_component_integration",
          "test_performance_under_load"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligenceSynthesisTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\intelligence_synthesis_framework.py",
        "line": 738,
        "methods": [
          "test_intelligence_ingestion",
          "test_knowledge_synthesis",
          "test_correlation_analysis"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestComplexity",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 21,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 29,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestTemplate",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "GeneratedTest",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 99,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestTemplateLibrary",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 327,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestGenerator",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 509,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestGeneratorFramework",
        "file": "TestMaster\\core\\domains\\testing\\intelligent_test_generator.py",
        "line": 953,
        "methods": [
          "test_code_analysis",
          "test_template_library",
          "test_test_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "LangGraphSupervisorTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 251,
        "methods": [
          "test_basic_supervisor_workflow",
          "test_supervisor_message_forwarding",
          "test_supervisor_output_modes",
          "test_supervisor_error_handling",
          "test_supervisor_metadata_passing",
          "test_concurrent_agent_execution",
          "test_supervisor_performance_metrics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestLangGraphSupervisor",
        "file": "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "line": 616,
        "methods": [
          "test_agents",
          "test_supervisor_workflow_execution",
          "test_multi_agent_handoffs"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultimodalTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 193,
        "methods": [
          "test_multimodal_agent_initialization",
          "test_image_processing_capability",
          "test_crew_multimodal_execution",
          "test_api_key_validation",
          "test_model_compatibility",
          "test_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestMultimodalPatterns",
        "file": "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "line": 570,
        "methods": [
          "test_image_url",
          "test_multimodal_agent_with_image_url",
          "test_multimodal_agent_initialization",
          "test_model_compatibility_detection",
          "test_image_content_detection",
          "test_crew_multimodal_integration"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFramework",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 32,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "CrossLanguageTestCase",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 58,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CrossLanguageTestGenerator",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 542,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiLanguageTestExecutor",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 766,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiModalTestEngine",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 905,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiModalTestEngineFramework",
        "file": "TestMaster\\core\\domains\\testing\\multi_modal_test_engine.py",
        "line": 1035,
        "methods": [
          "test_cross_language_generation",
          "test_test_porting",
          "test_language_config"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTask",
        "file": "TestMaster\\core\\domains\\testing\\parallel_test_executor.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\domains\\testing\\parallel_test_executor.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ParallelTestExecutor",
        "file": "TestMaster\\core\\domains\\testing\\parallel_test_executor.py",
        "line": 48,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealTimeTestMonitor",
        "file": "TestMaster\\core\\domains\\testing\\parallel_test_executor.py",
        "line": 462,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConsolidationEngineTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\pattern_consolidation_engine.py",
        "line": 655,
        "methods": [
          "test_pattern_extraction",
          "test_consolidation_analysis",
          "test_plan_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PerformanceTestSuite",
        "file": "TestMaster\\core\\domains\\testing\\performance_test_suite.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ParallelPerformanceTester",
        "file": "TestMaster\\core\\domains\\testing\\performance_test_suite.py",
        "line": 424,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PipelineTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "line": 263,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PipelineTest",
        "file": "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "line": 417,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "ReActTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "line": 381,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReActAgentTest",
        "file": "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "line": 564,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TestingIntelligence",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestRepositoryIntelligenceAggregator",
        "file": "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "line": 855,
        "methods": [
          "test_repository_registration",
          "test_repository_scanner",
          "test_cross_repository_analyzer",
          "test_testing_intelligence_creation",
          "test_cross_repo_insight_creation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ValidationTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 153,
        "methods": [
          "test_successful_validation",
          "test_validation_retry",
          "test_validation_exhaustion"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ValidationTestScenarios",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 249,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ValidationTestValidator",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 342,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestValidationPatterns",
        "file": "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "line": 392,
        "methods": [
          "test_json_validation_success",
          "test_json_validation_failure",
          "test_content_policy_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionPipeline",
        "file": "TestMaster\\core\\domains\\testing\\run_all_tests.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SessionTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "line": 294,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SessionTest",
        "file": "TestMaster\\core\\domains\\testing\\session_testing.py",
        "line": 545,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "PropertyBasedTestGenerator",
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py",
        "line": 162,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ContractBasedTestGenerator",
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py",
        "line": 217,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestGenerator",
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py",
        "line": 308,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationConfig",
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "line": 22,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SuperchargedTestGenerator",
        "file": "TestMaster\\core\\domains\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 221,
        "methods": [
          "test_task_without_guardrail",
          "test_successful_guardrail",
          "test_failing_guardrail_with_retries",
          "test_guardrail_retry_with_context",
          "test_llm_guardrail_processing",
          "test_guardrail_events_emission",
          "test_error_during_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestGuardrailPatterns",
        "file": "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "line": 640,
        "methods": [
          "test_task_without_guardrail",
          "test_task_with_successful_guardrail_func",
          "test_task_with_failing_guardrail",
          "test_guardrail_respects_max_retries",
          "test_llm_guardrail_process_output"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterAPIGateway",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 382,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterAPIGateway",
        "file": "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "line": 1134,
        "methods": [
          "test_gateway_initialization",
          "test_user_authentication",
          "test_rate_limiting",
          "test_openapi_spec_generation",
          "test_api_statistics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAICodeExploration",
        "file": "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "line": 16,
        "methods": [
          "test_natural_language_queries",
          "test_interactive_chat_interface",
          "test_intelligent_code_suggestions",
          "test_code_pattern_recognition",
          "test_semantic_code_search",
          "test_real_time_code_insights",
          "test_cross_language_understanding",
          "test_performance_vs_newton_graph"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCoverageOptimizer",
        "file": "TestMaster\\core\\domains\\testing\\test_coverage_optimizer.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvolutionEvent",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestFile",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestFileAnalyzer",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 270,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvolutionAnalyzer",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 347,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvolutionFramework",
        "file": "TestMaster\\core\\domains\\testing\\test_evolution_analyzer.py",
        "line": 594,
        "methods": [
          "test_git_analysis",
          "test_file_analysis",
          "test_evolution_analysis"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntegrationHub",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 411,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntegrationHub",
        "file": "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "line": 517,
        "methods": [
          "test_hub_initialization",
          "test_event_bus_subscription",
          "test_configuration_management",
          "test_module_manifest_creation",
          "test_integration_status_tracking"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\domains\\testing\\test_intelligence_orchestrator.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\domains\\testing\\test_intelligence_orchestrator.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestIntelligenceOrchestrator",
        "file": "TestMaster\\core\\domains\\testing\\test_intelligence_orchestrator.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestKnowledgeGraphEngine",
        "file": "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "line": 17,
        "methods": [
          "test_graph_construction_speed",
          "test_relationship_accuracy_validation",
          "test_semantic_mapping_intelligence",
          "test_real_time_graph_updates",
          "test_multi_language_code_analysis",
          "test_graph_visualization_data",
          "test_ai_powered_code_exploration",
          "test_performance_scaling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMultiLanguageSuperiority",
        "file": "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "line": 15,
        "methods": [
          "test_language_detection_accuracy",
          "test_cross_language_relationship_detection",
          "test_framework_specific_analysis",
          "test_performance_across_languages",
          "test_semantic_understanding_multi_language",
          "test_competitor_feature_gaps",
          "test_zero_setup_multi_language_processing"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQuality",
        "file": "TestMaster\\core\\domains\\testing\\test_quality_analyzer.py",
        "line": 17,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestSmell",
        "file": "TestMaster\\core\\domains\\testing\\test_quality_analyzer.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestMetrics",
        "file": "TestMaster\\core\\domains\\testing\\test_quality_analyzer.py",
        "line": 35,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestQualityAnalyzer",
        "file": "TestMaster\\core\\domains\\testing\\test_quality_analyzer.py",
        "line": 45,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUIInterfaceSuperiority",
        "file": "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "line": 15,
        "methods": [
          "test_interface_accessibility",
          "test_interactive_exploration_features",
          "test_real_time_updates",
          "test_natural_language_interface",
          "test_visual_graph_superiority",
          "test_responsive_design",
          "test_accessibility_compliance",
          "test_user_onboarding_experience"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestZeroSetupDomination",
        "file": "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "line": 17,
        "methods": [
          "test_instant_graph_creation",
          "test_no_external_dependencies",
          "test_technical_expertise_requirements",
          "test_setup_time_comparison",
          "test_configuration_complexity",
          "test_instant_scaling",
          "test_offline_capability",
          "test_storage_requirements"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RetryTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 97,
        "methods": [
          "test_rate_limit_retry",
          "test_non_retryable_error",
          "test_max_retries_exceeded",
          "test_exponential_backoff",
          "test_custom_delay_extraction"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RetryTestValidator",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 232,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestRetryPatterns",
        "file": "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "line": 377,
        "methods": [
          "test_rate_limit_retry_mechanism",
          "test_non_retryable_error_handling",
          "test_exponential_backoff_calculation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolFactoryTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 177,
        "methods": [
          "test_langchain_tool_creation",
          "test_openai_schema_creation",
          "test_file_based_tool_creation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComplexSchemaTestScenarios",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 364,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolFactoryTestValidator",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 474,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestToolFactoryPatterns",
        "file": "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "line": 581,
        "methods": [
          "test_langchain_tool_creation",
          "test_complex_schema_handling",
          "test_file_tool_import"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolTest",
        "file": "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "line": 608,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TracingTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 434,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TracingTest",
        "file": "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "line": 641,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TestPhase",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 26,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 34,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestWorkload",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 48,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestScheduler",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 108,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestReporter",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 146,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTestOrchestrator",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 241,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUnifiedTestOrchestrator",
        "file": "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "line": 360,
        "methods": [
          "test_workload_submission",
          "test_resource_allocation",
          "test_dependency_handling",
          "test_execution_result_tracking",
          "test_report_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UserInputTestFramework",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 265,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UserInputTest",
        "file": "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "line": 467,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\foundation\\observability\\agent_ops_separate.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\core\\foundation\\observability\\agent_ops_separate.py",
        "line": 133,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor_enhanced.stub_backup.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor_enhanced.stub_backup.py",
        "line": 471,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\core\\foundation\\observability\\unified_monitor_enhanced.stub_backup.py",
        "line": 1276,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationTester",
        "file": "TestMaster\\core\\intelligence\\final_validation_suite.py",
        "line": 360,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 33,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 47,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 82,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 96,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecutor",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 694,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligenceTestingFramework",
        "file": "TestMaster\\core\\intelligence\\intelligence_testing_framework.py",
        "line": 851,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AutonomousTestStrategist",
        "file": "TestMaster\\core\\intelligence\\ultimate_intelligence_nexus.py",
        "line": 897,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestDebtAnalyzer",
        "file": "TestMaster\\core\\intelligence\\analysis\\debt_test_analyzer.py",
        "line": 22,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DuplicateStatus",
        "file": "TestMaster\\core\\intelligence\\analytics\\analytics_deduplication.py",
        "line": 45,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "MultivariateTester",
        "file": "TestMaster\\core\\intelligence\\analytics\\statistical_engine.py",
        "line": 180,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSerializer",
        "file": "TestMaster\\core\\intelligence\\api\\serializers.py",
        "line": 214,
        "methods": [],
        "base_classes": [
          "IntelligenceSerializer"
        ],
        "decorators": []
      },
      {
        "name": "UnifiedTest",
        "file": "TestMaster\\core\\intelligence\\base\\__init__.py",
        "line": 371,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingCompatibilityBridge",
        "file": "TestMaster\\core\\intelligence\\compatibility\\__init__.py",
        "line": 559,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestType",
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 21,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestIssue",
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 42,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 55,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "DocsTestingFramework",
        "file": "TestMaster\\core\\intelligence\\documentation\\docs_testing_framework.py",
        "line": 65,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "APITest",
        "file": "TestMaster\\core\\intelligence\\documentation\\interactive_docs.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ValidationTestResult",
        "file": "TestMaster\\core\\intelligence\\documentation\\system_integration_validator.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PenetrationTester",
        "file": "TestMaster\\core\\intelligence\\security\\enterprise\\validation\\penetration_tester.py",
        "line": 16,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 39,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 48,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestEnvironment",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 57,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPlan",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 68,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 86,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestInsight",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 101,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdvancedTestingOrchestrator",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced_testing_orchestrator.py",
        "line": 114,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationRequest",
        "file": "TestMaster\\core\\intelligence\\testing\\automation_engine.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\automation_engine.py",
        "line": 197,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestHealer",
        "file": "TestMaster\\core\\intelligence\\testing\\automation_engine.py",
        "line": 307,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTestType",
        "file": "TestMaster\\core\\intelligence\\testing\\base.py",
        "line": 15,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestExecutionResult",
        "file": "TestMaster\\core\\intelligence\\testing\\base.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuiteAnalysis",
        "file": "TestMaster\\core\\intelligence\\testing\\base.py",
        "line": 151,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ContractTester",
        "file": "TestMaster\\core\\intelligence\\testing\\contract_tester.py",
        "line": 162,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestRun",
        "file": "TestMaster\\core\\intelligence\\testing\\flaky_test_detector.py",
        "line": 26,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "FlakyTestDetector",
        "file": "TestMaster\\core\\intelligence\\testing\\flaky_test_detector.py",
        "line": 187,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\intelligence\\testing\\load_generator.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "LoadTestReport",
        "file": "TestMaster\\core\\intelligence\\testing\\load_generator.py",
        "line": 77,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\intelligence\\testing\\property_tester.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PropertyTester",
        "file": "TestMaster\\core\\intelligence\\testing\\property_tester.py",
        "line": 143,
        "methods": [
          "test_property"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSummary",
        "file": "TestMaster\\core\\intelligence\\testing\\quality_dashboard.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\intelligence\\testing\\regression_detector.py",
        "line": 26,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\core\\intelligence\\testing\\test_analytics.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestProfile",
        "file": "TestMaster\\core\\intelligence\\testing\\test_analytics.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestAnalytics",
        "file": "TestMaster\\core\\intelligence\\testing\\test_analytics.py",
        "line": 351,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFeatures",
        "file": "TestMaster\\core\\intelligence\\testing\\test_intelligence.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestPrioritizer",
        "file": "TestMaster\\core\\intelligence\\testing\\test_intelligence.py",
        "line": 185,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntelligence",
        "file": "TestMaster\\core\\intelligence\\testing\\test_intelligence.py",
        "line": 277,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\intelligence\\testing\\test_orchestrator.py",
        "line": 27,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestConfiguration",
        "file": "TestMaster\\core\\intelligence\\testing\\test_orchestrator.py",
        "line": 45,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\intelligence\\testing\\test_orchestrator.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrator",
        "file": "TestMaster\\core\\intelligence\\testing\\test_orchestrator.py",
        "line": 71,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMetrics",
        "file": "TestMaster\\core\\intelligence\\testing\\test_quality_scorer.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestAnalyzer",
        "file": "TestMaster\\core\\intelligence\\testing\\test_quality_scorer.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityScorer",
        "file": "TestMaster\\core\\intelligence\\testing\\test_quality_scorer.py",
        "line": 207,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\core\\intelligence\\testing\\test_selector.py",
        "line": 26,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestImpactAnalyzer",
        "file": "TestMaster\\core\\intelligence\\testing\\test_selector.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSelector",
        "file": "TestMaster\\core\\intelligence\\testing\\test_selector.py",
        "line": 163,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConsolidatedTestingHub",
        "file": "TestMaster\\core\\intelligence\\testing\\__init__.py",
        "line": 193,
        "methods": [],
        "base_classes": [
          "IntelligenceInterface"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "line": 35,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestMetadata",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "MLTestOptimizer",
        "file": "TestMaster\\core\\intelligence\\testing\\advanced\\ml_test_optimizer.py",
        "line": 88,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationStrategy",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "line": 16,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "GeneratedTest",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ClaudeTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\claude_test_generator.py",
        "line": 48,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestComplexity",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 28,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestFocus",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 35,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestGenerationConfig",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 45,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 71,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\gemini_test_generator.py",
        "line": 82,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestConfig",
        "file": "TestMaster\\core\\intelligence\\testing\\ai_generation\\universal_ai_generator.py",
        "line": 31,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestExecutionStrategy",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 20,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 28,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 47,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ContinuousTestingMetrics",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 65,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingSession",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 78,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ContinuousTestingEngine",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\continuous_testing_engine.py",
        "line": 119,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStage",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "EnterpriseTestOrchestrator",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\enterprise_test_orchestrator.py",
        "line": 115,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "line": 38,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestIssue",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "line": 47,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMaintenanceSystem",
        "file": "TestMaster\\core\\intelligence\\testing\\automation\\test_maintenance_system.py",
        "line": 85,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionResult",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\coverage_analyzer.py",
        "line": 60,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuiteAnalysis",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\coverage_analyzer.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSmellDetector",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\coverage_analyzer.py",
        "line": 133,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionEngine",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\execution_engine.py",
        "line": 25,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTest",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTestType",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ClaudeAITestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 65,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiAITestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 146,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 220,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationStrategy",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 288,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestComplexity",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 300,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "GeneratedTest",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 330,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "IntegrationTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 353,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ClaudeTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 863,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 894,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalTestGenerator",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\integration_generator.py",
        "line": 928,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MLTestOptimizer",
        "file": "TestMaster\\core\\intelligence\\testing\\components\\ml_optimizer.py",
        "line": 114,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFailureFeatures",
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PredictiveTestFailureSystem",
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\predictive_test_failure.py",
        "line": 103,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GateStatus",
        "file": "TestMaster\\core\\intelligence\\testing\\enterprise\\quality_gate_automation.py",
        "line": 30,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "AsyncTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 24,
        "methods": [
          "test_run_async_sync_basic"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CommunicationTestConfig",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CommunicationTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 66,
        "methods": [
          "test_message_routing_with_timeout",
          "test_conversation_continuity",
          "test_concurrent_routing_error_detection"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MCPTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "line": 171,
        "methods": [
          "test_mcp_tool_execution"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PipelineTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReactAgentTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 204,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FormatterTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 354,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EmbeddingCacheTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 497,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "line": 661,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ThreadSafetyTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 28,
        "methods": [
          "test_parallel_crews_thread_safety",
          "test_no_context_leakage"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailTestConfig",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 223,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "FlowTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "line": 371,
        "methods": [
          "test_flow_execution",
          "test_flow_with_conditional_steps"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 28,
        "methods": [
          "test_graph_creation_sync"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EdgeNodeTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 402,
        "methods": [
          "test_edge_initialization",
          "test_edge_string_representation",
          "test_edge_stringify_full",
          "test_edge_comparison"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncConstraintTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 609,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IndexPerformanceTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 713,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ProfilingTestPatterns",
        "file": "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "line": 865,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "line": 39,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "SecurityTestReport",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "line": 77,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdvancedOWASPTester",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\advanced_owasp_tester.py",
        "line": 90,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestType",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 39,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "SecurityTest",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 71,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SecurityTestResult",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 85,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "APISecurityTester",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\api_security_tester.py",
        "line": 115,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComplianceTestResult",
        "file": "TestMaster\\core\\intelligence\\testing\\security\\compliance_validator.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestingInterface",
        "file": "TestMaster\\core\\intelligence\\visualization\\development_tools_ui.py",
        "line": 372,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\observability\\agent_ops_separate.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\core\\observability\\agent_ops_separate.py",
        "line": 133,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\observability\\unified_monitor.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\observability\\unified_monitor_enhanced.stub_backup.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\core\\observability\\unified_monitor_enhanced.stub_backup.py",
        "line": 471,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\core\\observability\\unified_monitor_enhanced.stub_backup.py",
        "line": 1276,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\core\\observability\\__init__.py",
        "line": 22,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\observability\\__init__.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgent",
        "file": "TestMaster\\core\\orchestration\\agent_graph.py",
        "line": 39,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOrchestrationEngine",
        "file": "TestMaster\\core\\orchestration\\agent_graph.py",
        "line": 80,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "VoteStatus",
        "file": "TestMaster\\core\\security\\byzantine_consensus_security.py",
        "line": 30,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestOutcome",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 31,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 41,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestPattern",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 75,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AdaptiveTestingFramework",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 586,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AdaptiveTestingFrameworkTests",
        "file": "TestMaster\\core\\testing\\adaptive_testing_framework.py",
        "line": 810,
        "methods": [
          "test_pattern_registration",
          "test_pattern_execution",
          "test_pattern_adaptation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReasoningTestFramework",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 178,
        "methods": [
          "test_basic_reasoning",
          "test_reasoning_refinement",
          "test_max_attempts_exhaustion",
          "test_function_calling_reasoning",
          "test_function_calling_fallback",
          "test_reasoning_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestReasoningPatterns",
        "file": "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "line": 492,
        "methods": [
          "test_agent_with_basic_reasoning",
          "test_reasoning_refinement_process",
          "test_max_reasoning_attempts",
          "test_function_calling_integration"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ArchivedTestPattern",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestIntelligenceReport",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ArchiveTestingFramework",
        "file": "TestMaster\\core\\testing\\archive_intelligence_mining.py",
        "line": 433,
        "methods": [
          "test_archive_discovery",
          "test_file_analysis",
          "test_pattern_extraction",
          "test_intelligence_mining"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncSyncTestManager",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 11,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncTestFixtures",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AsyncSyncTestValidator",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 73,
        "methods": [
          "test_basic_async_sync_execution",
          "test_running_loop_detection",
          "test_error_propagation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestAsyncSyncPatterns",
        "file": "TestMaster\\core\\testing\\async_sync_testing.py",
        "line": 125,
        "methods": [
          "test_sync_context"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestReview",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 106,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CollaborativeTestingPlatform",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 759,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCollaborativeTestingPlatform",
        "file": "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "line": 982,
        "methods": [
          "test_platform_initialization",
          "test_team_member_registration",
          "test_collaboration_session",
          "test_knowledge_sharing",
          "test_code_review_system",
          "test_notification_system",
          "test_team_analytics",
          "test_platform_dashboard",
          "test_team_overview"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CommunicationTestFramework",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 41,
        "methods": [
          "test_message_routing",
          "test_timeout_handling",
          "test_error_detection"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CommunicationTestValidator",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 209,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestCommunicationPatterns",
        "file": "TestMaster\\core\\testing\\communication_testing.py",
        "line": 252,
        "methods": [
          "test_agents",
          "test_send_message_routing",
          "test_double_recipient_error"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "CompetitiveTestingAnalyzer",
        "file": "TestMaster\\core\\testing\\competitive_analysis_framework.py",
        "line": 28,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ThreadSafetyTestFramework",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 181,
        "methods": [
          "test_parallel_crews_context_isolation",
          "test_for_each_context_uniqueness",
          "test_context_leakage_prevention"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestThreadSafetyPatterns",
        "file": "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "line": 503,
        "methods": [
          "test_parallel_crews_thread_safety",
          "test_concurrent_kickoff_for_each",
          "test_no_context_leakage_between_crews"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestJobStatus",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 46,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestJob",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 77,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "DistributedTestCoordinator",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 524,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestDistributedTestCoordinator",
        "file": "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "line": 811,
        "methods": [
          "test_coordinator_initialization",
          "test_node_registration",
          "test_job_submission",
          "test_dependency_resolution",
          "test_load_balancing",
          "test_fault_tolerance",
          "test_execution_plan_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingPhase",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 42,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "EnterpriseTestFramework",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 422,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEnterpriseTestFramework",
        "file": "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "line": 607,
        "methods": [
          "test_framework_initialization",
          "test_test_suite_registration",
          "test_security_context_creation",
          "test_resource_scaling",
          "test_executive_report_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FlowTestFramework",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 322,
        "methods": [
          "test_flow_execution",
          "test_flow_restart"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestFlowPatterns",
        "file": "TestMaster\\core\\testing\\flow_testing.py",
        "line": 664,
        "methods": [
          "test_simple_sequential_flow",
          "test_flow_with_multiple_starts",
          "test_cyclic_flow",
          "test_flow_restart"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FormatterTestFramework",
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiProviderFormatterTest",
        "file": "TestMaster\\core\\testing\\formatter_testing.py",
        "line": 313,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "AsyncGraphTestFramework",
        "file": "TestMaster\\core\\testing\\graph_async_testing.py",
        "line": 210,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAsyncGraphOperations",
        "file": "TestMaster\\core\\testing\\graph_async_testing.py",
        "line": 413,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphConstraintsTestFramework",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 210,
        "methods": [
          "test_constraint_creation",
          "test_constraint_duplication_prevention",
          "test_constraint_deletion",
          "test_constraint_validation",
          "test_multi_property_constraints"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGraphConstraints",
        "file": "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "line": 353,
        "methods": [
          "test_node_constraint_lifecycle",
          "test_edge_constraint_lifecycle"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphIndexTestFramework",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 403,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphIndexTest",
        "file": "TestMaster\\core\\testing\\graph_index_testing.py",
        "line": 703,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "GraphOperationsTestFramework",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 382,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphOperationsTest",
        "file": "TestMaster\\core\\testing\\graph_operations_testing.py",
        "line": 642,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "LoadTester",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 283,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphPerformanceTestFramework",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 396,
        "methods": [
          "test_query_profiling",
          "test_cartesian_product_profiling",
          "test_performance_regression_detection",
          "test_load_testing",
          "test_query_complexity_analysis",
          "test_memory_usage_tracking",
          "test_benchmark_comparison",
          "test_slow_query_identification"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGraphPerformance",
        "file": "TestMaster\\core\\testing\\graph_performance_testing.py",
        "line": 608,
        "methods": [
          "test_execution_plan_analysis",
          "test_performance_monitoring",
          "test_load_test_execution"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GraphVectorTestFramework",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 250,
        "methods": [
          "test_vector_index_creation",
          "test_vector_index_operations",
          "test_similarity_calculations",
          "test_vecf32_parsing",
          "test_vector_normalization",
          "test_high_dimensional_vectors",
          "test_multiple_similarity_functions"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGraphVectorOperations",
        "file": "TestMaster\\core\\testing\\graph_vector_testing.py",
        "line": 478,
        "methods": [
          "test_vector_lifecycle",
          "test_similarity_metrics",
          "test_vector_search_ranking"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailTestFramework",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 59,
        "methods": [
          "test_guardrail_initialization",
          "test_no_op_behavior",
          "test_guardrail_description",
          "test_various_input_scenarios",
          "test_threshold_ignored",
          "test_tool_response_ignored"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailEventTesting",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 214,
        "methods": [
          "test_event_description_in_events"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailIntegrationTesting",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 252,
        "methods": [
          "test_task_integration",
          "test_validation_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestGuardrailPatterns",
        "file": "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "line": 456,
        "methods": [
          "test_hallucination_guardrail_initialization",
          "test_hallucination_guardrail_no_op_behavior",
          "test_hallucination_guardrail_description",
          "test_hallucination_guardrail_always_passes"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestChildAgent",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 241,
        "methods": [],
        "base_classes": [
          "HookableAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestGrandChildAgent",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 246,
        "methods": [],
        "base_classes": [
          "TestChildAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestAgentA",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 251,
        "methods": [],
        "base_classes": [
          "HookableAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestAgentB",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 256,
        "methods": [],
        "base_classes": [
          "HookableAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestAgentC",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 261,
        "methods": [],
        "base_classes": [
          "TestAgentA",
          "TestAgentB"
        ],
        "decorators": []
      },
      {
        "name": "HookTestFramework",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 266,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "HookTest",
        "file": "TestMaster\\core\\testing\\hook_testing.py",
        "line": 517,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestFramework",
        "file": "TestMaster\\core\\testing\\integration_test_framework.py",
        "line": 31,
        "methods": [
          "test_complete_codebase_analysis_integration",
          "test_real_time_monitoring_integration",
          "test_natural_language_exploration_integration",
          "test_security_vulnerability_workflow_integration",
          "test_test_generation_workflow_integration",
          "test_cross_component_integration",
          "test_performance_under_load"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligenceSynthesisTestFramework",
        "file": "TestMaster\\core\\testing\\intelligence_synthesis_framework.py",
        "line": 738,
        "methods": [
          "test_intelligence_ingestion",
          "test_knowledge_synthesis",
          "test_correlation_analysis"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestComplexity",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 21,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 29,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestTemplate",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "GeneratedTest",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 99,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestTemplateLibrary",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 327,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestGenerator",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 509,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestGeneratorFramework",
        "file": "TestMaster\\core\\testing\\intelligent_test_generator.py",
        "line": 953,
        "methods": [
          "test_code_analysis",
          "test_template_library",
          "test_test_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "LangGraphSupervisorTestFramework",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 251,
        "methods": [
          "test_basic_supervisor_workflow",
          "test_supervisor_message_forwarding",
          "test_supervisor_output_modes",
          "test_supervisor_error_handling",
          "test_supervisor_metadata_passing",
          "test_concurrent_agent_execution",
          "test_supervisor_performance_metrics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestLangGraphSupervisor",
        "file": "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "line": 616,
        "methods": [
          "test_agents",
          "test_supervisor_workflow_execution",
          "test_multi_agent_handoffs"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultimodalTestFramework",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 193,
        "methods": [
          "test_multimodal_agent_initialization",
          "test_image_processing_capability",
          "test_crew_multimodal_execution",
          "test_api_key_validation",
          "test_model_compatibility",
          "test_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestMultimodalPatterns",
        "file": "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "line": 570,
        "methods": [
          "test_image_url",
          "test_multimodal_agent_with_image_url",
          "test_multimodal_agent_initialization",
          "test_model_compatibility_detection",
          "test_image_content_detection",
          "test_crew_multimodal_integration"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFramework",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 32,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "CrossLanguageTestCase",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 58,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "CrossLanguageTestGenerator",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 542,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiLanguageTestExecutor",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 766,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiModalTestEngine",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 905,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiModalTestEngineFramework",
        "file": "TestMaster\\core\\testing\\multi_modal_test_engine.py",
        "line": 1035,
        "methods": [
          "test_cross_language_generation",
          "test_test_porting",
          "test_language_config"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTask",
        "file": "TestMaster\\core\\testing\\parallel_test_executor.py",
        "line": 27,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\core\\testing\\parallel_test_executor.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ParallelTestExecutor",
        "file": "TestMaster\\core\\testing\\parallel_test_executor.py",
        "line": 48,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RealTimeTestMonitor",
        "file": "TestMaster\\core\\testing\\parallel_test_executor.py",
        "line": 462,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ConsolidationEngineTestFramework",
        "file": "TestMaster\\core\\testing\\pattern_consolidation_engine.py",
        "line": 655,
        "methods": [
          "test_pattern_extraction",
          "test_consolidation_analysis",
          "test_plan_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PerformanceTestSuite",
        "file": "TestMaster\\core\\testing\\performance_test_suite.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ParallelPerformanceTester",
        "file": "TestMaster\\core\\testing\\performance_test_suite.py",
        "line": 424,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PipelineTestFramework",
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "line": 263,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PipelineTest",
        "file": "TestMaster\\core\\testing\\pipeline_testing.py",
        "line": 417,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "ReActTestFramework",
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "line": 381,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ReActAgentTest",
        "file": "TestMaster\\core\\testing\\react_agent_testing.py",
        "line": 564,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TestingIntelligence",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestRepositoryIntelligenceAggregator",
        "file": "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "line": 855,
        "methods": [
          "test_repository_registration",
          "test_repository_scanner",
          "test_cross_repository_analyzer",
          "test_testing_intelligence_creation",
          "test_cross_repo_insight_creation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ValidationTestFramework",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 153,
        "methods": [
          "test_successful_validation",
          "test_validation_retry",
          "test_validation_exhaustion"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ValidationTestScenarios",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 249,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ValidationTestValidator",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 342,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestValidationPatterns",
        "file": "TestMaster\\core\\testing\\response_validation_testing.py",
        "line": 392,
        "methods": [
          "test_json_validation_success",
          "test_json_validation_failure",
          "test_content_policy_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionPipeline",
        "file": "TestMaster\\core\\testing\\run_all_tests.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SessionTestFramework",
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "line": 294,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SessionTest",
        "file": "TestMaster\\core\\testing\\session_testing.py",
        "line": 545,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "PropertyBasedTestGenerator",
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py",
        "line": 162,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ContractBasedTestGenerator",
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py",
        "line": 217,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestGenerator",
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py",
        "line": 308,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationConfig",
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "line": 22,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SuperchargedTestGenerator",
        "file": "TestMaster\\core\\testing\\supercharged_test_generator.py_stub_backup_20250821_042438.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GuardrailTestFramework",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 221,
        "methods": [
          "test_task_without_guardrail",
          "test_successful_guardrail",
          "test_failing_guardrail_with_retries",
          "test_guardrail_retry_with_context",
          "test_llm_guardrail_processing",
          "test_guardrail_events_emission",
          "test_error_during_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestGuardrailPatterns",
        "file": "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "line": 640,
        "methods": [
          "test_task_without_guardrail",
          "test_task_with_successful_guardrail_func",
          "test_task_with_failing_guardrail",
          "test_guardrail_respects_max_retries",
          "test_llm_guardrail_process_output"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterAPIGateway",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 382,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterAPIGateway",
        "file": "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "line": 1134,
        "methods": [
          "test_gateway_initialization",
          "test_user_authentication",
          "test_rate_limiting",
          "test_openapi_spec_generation",
          "test_api_statistics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAICodeExploration",
        "file": "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "line": 16,
        "methods": [
          "test_natural_language_queries",
          "test_interactive_chat_interface",
          "test_intelligent_code_suggestions",
          "test_code_pattern_recognition",
          "test_semantic_code_search",
          "test_real_time_code_insights",
          "test_cross_language_understanding",
          "test_performance_vs_newton_graph"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCoverageOptimizer",
        "file": "TestMaster\\core\\testing\\test_coverage_optimizer.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvolutionEvent",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestFile",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestFileAnalyzer",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 270,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvolutionAnalyzer",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 347,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvolutionFramework",
        "file": "TestMaster\\core\\testing\\test_evolution_analyzer.py",
        "line": 594,
        "methods": [
          "test_git_analysis",
          "test_file_analysis",
          "test_evolution_analysis"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntegrationHub",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 411,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntegrationHub",
        "file": "TestMaster\\core\\testing\\test_integration_hub.py",
        "line": 517,
        "methods": [
          "test_hub_initialization",
          "test_event_bus_subscription",
          "test_configuration_management",
          "test_module_manifest_creation",
          "test_integration_status_tracking"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategy",
        "file": "TestMaster\\core\\testing\\test_intelligence_orchestrator.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\core\\testing\\test_intelligence_orchestrator.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestIntelligenceOrchestrator",
        "file": "TestMaster\\core\\testing\\test_intelligence_orchestrator.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestKnowledgeGraphEngine",
        "file": "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "line": 17,
        "methods": [
          "test_graph_construction_speed",
          "test_relationship_accuracy_validation",
          "test_semantic_mapping_intelligence",
          "test_real_time_graph_updates",
          "test_multi_language_code_analysis",
          "test_graph_visualization_data",
          "test_ai_powered_code_exploration",
          "test_performance_scaling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMultiLanguageSuperiority",
        "file": "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "line": 15,
        "methods": [
          "test_language_detection_accuracy",
          "test_cross_language_relationship_detection",
          "test_framework_specific_analysis",
          "test_performance_across_languages",
          "test_semantic_understanding_multi_language",
          "test_competitor_feature_gaps",
          "test_zero_setup_multi_language_processing"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQuality",
        "file": "TestMaster\\core\\testing\\test_quality_analyzer.py",
        "line": 17,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestSmell",
        "file": "TestMaster\\core\\testing\\test_quality_analyzer.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestMetrics",
        "file": "TestMaster\\core\\testing\\test_quality_analyzer.py",
        "line": 35,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestQualityAnalyzer",
        "file": "TestMaster\\core\\testing\\test_quality_analyzer.py",
        "line": 45,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUIInterfaceSuperiority",
        "file": "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "line": 15,
        "methods": [
          "test_interface_accessibility",
          "test_interactive_exploration_features",
          "test_real_time_updates",
          "test_natural_language_interface",
          "test_visual_graph_superiority",
          "test_responsive_design",
          "test_accessibility_compliance",
          "test_user_onboarding_experience"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestZeroSetupDomination",
        "file": "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "line": 17,
        "methods": [
          "test_instant_graph_creation",
          "test_no_external_dependencies",
          "test_technical_expertise_requirements",
          "test_setup_time_comparison",
          "test_configuration_complexity",
          "test_instant_scaling",
          "test_offline_capability",
          "test_storage_requirements"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RetryTestFramework",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 97,
        "methods": [
          "test_rate_limit_retry",
          "test_non_retryable_error",
          "test_max_retries_exceeded",
          "test_exponential_backoff",
          "test_custom_delay_extraction"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RetryTestValidator",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 232,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestRetryPatterns",
        "file": "TestMaster\\core\\testing\\thread_retry_testing.py",
        "line": 377,
        "methods": [
          "test_rate_limit_retry_mechanism",
          "test_non_retryable_error_handling",
          "test_exponential_backoff_calculation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolFactoryTestFramework",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 177,
        "methods": [
          "test_langchain_tool_creation",
          "test_openai_schema_creation",
          "test_file_based_tool_creation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ComplexSchemaTestScenarios",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 364,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolFactoryTestValidator",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 474,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PyTestToolFactoryPatterns",
        "file": "TestMaster\\core\\testing\\tool_factory_testing.py",
        "line": 581,
        "methods": [
          "test_langchain_tool_creation",
          "test_complex_schema_handling",
          "test_file_tool_import"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "ToolTest",
        "file": "TestMaster\\core\\testing\\tool_testing.py",
        "line": 608,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TracingTestFramework",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 434,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TracingTest",
        "file": "TestMaster\\core\\testing\\tracing_testing.py",
        "line": 641,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TestPhase",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 26,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 34,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestWorkload",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 48,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestScheduler",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 108,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestReporter",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 146,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UnifiedTestOrchestrator",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 241,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUnifiedTestOrchestrator",
        "file": "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "line": 360,
        "methods": [
          "test_workload_submission",
          "test_resource_allocation",
          "test_dependency_handling",
          "test_execution_result_tracking",
          "test_report_generation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UserInputTestFramework",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 265,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UserInputTest",
        "file": "TestMaster\\core\\testing\\user_input_testing.py",
        "line": 467,
        "methods": [],
        "base_classes": [
          "IsolatedAsyncioTestCase"
        ],
        "decorators": []
      },
      {
        "name": "TestExecutionInput",
        "file": "TestMaster\\core\\tools\\type_safe_tools.py",
        "line": 404,
        "methods": [],
        "base_classes": [
          "ToolInput"
        ],
        "decorators": []
      },
      {
        "name": "TestExecutionOutput",
        "file": "TestMaster\\core\\tools\\type_safe_tools.py",
        "line": 417,
        "methods": [],
        "base_classes": [
          "ToolOutput"
        ],
        "decorators": []
      },
      {
        "name": "AutomatedFrontendTester",
        "file": "TestMaster\\dashboard\\automated_frontend_tester.py",
        "line": 32,
        "methods": [
          "test_api_endpoints",
          "test_data_structures",
          "test_realtime_features",
          "test_performance",
          "test_error_handling",
          "test_websockets"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMetrics",
        "file": "TestMaster\\dashboard\\quality_dashboard.py",
        "line": 33,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "APITester",
        "file": "TestMaster\\dashboard\\test_api_endpoints.py",
        "line": 16,
        "methods": [
          "test_endpoint"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FinalEnhancementsStressTester",
        "file": "TestMaster\\dashboard\\test_final_enhancements.py",
        "line": 51,
        "methods": [
          "test_integrity_guardian",
          "test_quantum_retry",
          "test_deduplication",
          "test_emergency_backup",
          "test_flow_optimizer",
          "test_integrated_system"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FrontendTester",
        "file": "TestMaster\\dashboard\\test_frontend_automated.py",
        "line": 14,
        "methods": [
          "test_tab_switching_html_structure",
          "test_performance_charts_structure",
          "test_llm_toggle_functionality",
          "test_responsive_design"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "FrontendBackendIntegrationTester",
        "file": "TestMaster\\dashboard\\test_frontend_integration.py",
        "line": 39,
        "methods": [
          "test_server_availability",
          "test_api_endpoints",
          "test_data_flow_integration",
          "test_ultra_reliability_features",
          "test_performance_characteristics",
          "test_error_handling"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "MultiAgentIntegrationTester",
        "file": "TestMaster\\dashboard\\test_multi_agent_integration.py",
        "line": 18,
        "methods": [
          "test_crew_endpoints",
          "test_swarm_endpoints",
          "test_crew_creation",
          "test_crew_task_execution",
          "test_swarm_creation",
          "test_swarm_architectures",
          "test_swarm_task_execution",
          "test_adaptive_swarm_selection",
          "test_agent_coordination",
          "test_performance_monitoring",
          "test_concurrent_execution",
          "test_crew_performance_analytics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "RobustnessTests",
        "file": "TestMaster\\dashboard\\test_robustness_suite.py",
        "line": 18,
        "methods": [
          "test_monitoring_api",
          "test_delivery_verification",
          "test_concurrent_load",
          "test_failure_recovery",
          "test_data_integrity",
          "test_batch_processing",
          "test_heartbeat_monitoring",
          "test_flow_monitoring",
          "test_robustness_score"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UltraReliabilityStressTester",
        "file": "TestMaster\\dashboard\\test_ultra_reliability.py",
        "line": 53,
        "methods": [
          "test_health_monitor",
          "test_sla_tracker",
          "test_circuit_breaker",
          "test_receipt_tracker",
          "test_priority_queue",
          "test_integrated_system"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterCrew",
        "file": "TestMaster\\dashboard\\api\\crew_orchestration.py",
        "line": 105,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterObservability",
        "file": "TestMaster\\dashboard\\api\\observability.py",
        "line": 50,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingTeam",
        "file": "TestMaster\\dashboard\\api\\phase2_api.py",
        "line": 81,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\dashboard\\api\\phase2_api.py",
        "line": 82,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterProductionAPI",
        "file": "TestMaster\\dashboard\\api\\production_deployment.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationAPI",
        "file": "TestMaster\\dashboard\\api\\test_generation.py",
        "line": 18,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DuplicateStatus",
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_deduplication.py",
        "line": 43,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "VerificationTest",
        "file": "TestMaster\\dashboard\\dashboard_core\\analytics_delivery_verifier.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResultsCollector",
        "file": "TestMaster\\dashboard\\dashboard_core\\test_collector.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\deduplication\\test_deduplicator.py",
        "line": 30,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestDeduplicator",
        "file": "TestMaster\\deduplication\\test_deduplicator.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnterpriseTestDeployment",
        "file": "TestMaster\\deployment\\enterprise_deployment.py",
        "line": 93,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IncrementalTestGenerator",
        "file": "TestMaster\\incremental\\dependency_tracker.py",
        "line": 116,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "EnhancedTestMonitor",
        "file": "TestMaster\\monitoring\\enhanced_monitor_separate.py",
        "line": 400,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSession",
        "file": "TestMaster\\observability\\core\\session_tracking.py",
        "line": 19,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "IntegrationTestResult",
        "file": "TestMaster\\operational\\agent_integration_validator.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "StateStore",
        "file": "TestMaster\\operational\\perfected_state_manager.py",
        "line": 108,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "PersistentStateStore",
        "file": "TestMaster\\operational\\perfected_state_manager.py",
        "line": 205,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecution",
        "file": "TestMaster\\optimization\\execution_optimizer.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestScheduler",
        "file": "TestMaster\\optimization\\execution_optimizer.py",
        "line": 203,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCategory",
        "file": "TestMaster\\prioritization\\test_prioritizer.py",
        "line": 33,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestMetadata",
        "file": "TestMaster\\prioritization\\test_prioritizer.py",
        "line": 57,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestCategorizer",
        "file": "TestMaster\\prioritization\\test_prioritizer.py",
        "line": 105,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPrioritizer",
        "file": "TestMaster\\prioritization\\test_prioritizer.py",
        "line": 231,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPlan",
        "file": "TestMaster\\scripts\\achieve_100_percent_coverage.py",
        "line": 54,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "Gemini25ProTestGenerator",
        "file": "TestMaster\\scripts\\achieve_100_percent_coverage.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "AITestGenerator",
        "file": "TestMaster\\scripts\\ai_test_generator.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIssueFixer",
        "file": "TestMaster\\scripts\\fix_remaining_issues.py",
        "line": 14,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestInfrastructureFixer",
        "file": "TestMaster\\scripts\\fix_test_infrastructure.py",
        "line": 15,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\scripts\\gemini_powered_test_generator.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "GeminiTestGenerator",
        "file": "TestMaster\\scripts\\gemini_test_generator.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SequentialTestGenerator",
        "file": "TestMaster\\scripts\\generate_coverage_sequential.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestConverter",
        "file": "TestMaster\\scripts\\intelligent_converter.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SmartTestGenerator",
        "file": "TestMaster\\scripts\\smart_test_generator.py",
        "line": 28,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCase",
        "file": "TestMaster\\src\\automated_test_generation.py",
        "line": 20,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSuite",
        "file": "TestMaster\\src\\automated_test_generation.py",
        "line": 32,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "AutomatedTestGenerator",
        "file": "TestMaster\\src\\automated_test_generation.py",
        "line": 41,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCaseInfo",
        "file": "TestMaster\\src\\comprehensive_test_framework.py",
        "line": 24,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "ComprehensiveTestFramework",
        "file": "TestMaster\\src\\comprehensive_test_framework.py",
        "line": 50,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "DataFlowTester",
        "file": "TestMaster\\src\\data_flow_tests.py",
        "line": 37,
        "methods": [
          "test_complete_generation_flow",
          "test_concurrent_generation_flow",
          "test_pipeline_data_flow",
          "test_resource_cleanup_flow",
          "test_error_recovery_flow",
          "test_high_throughput_flow",
          "test_export_data_flow"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\src\\integration_test_matrix.py",
        "line": 26,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestCase",
        "file": "TestMaster\\src\\integration_test_matrix.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestResult",
        "file": "TestMaster\\src\\integration_test_matrix.py",
        "line": 52,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "IntegrationTestMatrix",
        "file": "TestMaster\\src\\integration_test_matrix.py",
        "line": 62,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterLayer2",
        "file": "TestMaster\\testmaster\\layer2_integration.py",
        "line": 41,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestingAnalyzer",
        "file": "TestMaster\\testmaster\\analysis\\comprehensive_analysis\\testing_analysis.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "BaseAnalyzer"
        ],
        "decorators": []
      },
      {
        "name": "TestFailureInfo",
        "file": "TestMaster\\testmaster\\communication\\claude_messenger.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "BatchTestConverter",
        "file": "TestMaster\\testmaster\\converters\\batch.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "BatchConverter"
        ],
        "decorators": []
      },
      {
        "name": "ParallelTestConverter",
        "file": "TestMaster\\testmaster\\converters\\parallel.py",
        "line": 28,
        "methods": [],
        "base_classes": [
          "ParallelConverter"
        ],
        "decorators": []
      },
      {
        "name": "TestMasterConfig",
        "file": "TestMaster\\testmaster\\core\\config.py",
        "line": 561,
        "methods": [],
        "base_classes": [
          "ConfigurationIntelligenceAgent"
        ],
        "decorators": []
      },
      {
        "name": "TestMasterException",
        "file": "TestMaster\\testmaster\\core\\exceptions.py",
        "line": 8,
        "methods": [],
        "base_classes": [
          "Exception"
        ],
        "decorators": []
      },
      {
        "name": "PytestAdapter",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "line": 66,
        "methods": [],
        "base_classes": [
          "BaseFrameworkAdapter"
        ],
        "decorators": []
      },
      {
        "name": "UnittestAdapter",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "line": 474,
        "methods": [],
        "base_classes": [
          "BaseFrameworkAdapter"
        ],
        "decorators": []
      },
      {
        "name": "GoTestAdapter",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "line": 756,
        "methods": [],
        "base_classes": [
          "BaseFrameworkAdapter"
        ],
        "decorators": []
      },
      {
        "name": "RustTestAdapter",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "line": 768,
        "methods": [],
        "base_classes": [
          "BaseFrameworkAdapter"
        ],
        "decorators": []
      },
      {
        "name": "MinitestAdapter",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\framework_adapters.py",
        "line": 792,
        "methods": [],
        "base_classes": [
          "BaseFrameworkAdapter"
        ],
        "decorators": []
      },
      {
        "name": "TestGenerationConfig",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerationStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerationResult",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 73,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "UniversalTestGenerator",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 112,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SimpleTestStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 401,
        "methods": [],
        "base_classes": [
          "TestGenerationStrategy"
        ],
        "decorators": []
      },
      {
        "name": "ParameterizedTestStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 420,
        "methods": [],
        "base_classes": [
          "TestGenerationStrategy"
        ],
        "decorators": []
      },
      {
        "name": "EdgeCaseTestStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 454,
        "methods": [],
        "base_classes": [
          "TestGenerationStrategy"
        ],
        "decorators": []
      },
      {
        "name": "ErrorHandlingTestStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 504,
        "methods": [],
        "base_classes": [
          "TestGenerationStrategy"
        ],
        "decorators": []
      },
      {
        "name": "AsyncTestStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 533,
        "methods": [],
        "base_classes": [
          "TestGenerationStrategy"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestStrategy",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\test_generator.py",
        "line": 555,
        "methods": [],
        "base_classes": [
          "TestGenerationStrategy"
        ],
        "decorators": []
      },
      {
        "name": "TestParameter",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 40,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestAssertion",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestSetup",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 73,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestTeardown",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 83,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestFixture",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 93,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMetadata",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 106,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "UniversalTest",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 123,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "UniversalTestCase",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 181,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "UniversalTestSuite",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 224,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestPatternLibrary",
        "file": "TestMaster\\testmaster\\core\\framework_abstraction\\universal_test.py",
        "line": 355,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntelligentTestGenerator",
        "file": "TestMaster\\testmaster\\generators\\intelligent.py",
        "line": 35,
        "methods": [
          "test_connection"
        ],
        "base_classes": [
          "AnalysisBasedGenerator"
        ],
        "decorators": []
      },
      {
        "name": "IntegrationTestResult",
        "file": "TestMaster\\testmaster\\integration\\final_integration_test.py",
        "line": 61,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "FinalIntegrationTest",
        "file": "TestMaster\\testmaster\\integration\\final_integration_test.py",
        "line": 95,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "IntegrationTestSuite",
        "file": "TestMaster\\testmaster\\integration\\final_integration_test.py",
        "line": 1853,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterEvent",
        "file": "TestMaster\\testmaster\\intelligence\\bridges\\event_monitoring_bridge.py",
        "line": 76,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "HierarchicalTestPlanner",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\htp_reasoning.py",
        "line": 194,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPlanLevel",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "line": 23,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerationPlan",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "line": 34,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestPlanGenerator",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "line": 44,
        "methods": [],
        "base_classes": [
          "PlanGenerator"
        ],
        "decorators": []
      },
      {
        "name": "TestPlanEvaluator",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "line": 344,
        "methods": [],
        "base_classes": [
          "PlanEvaluator"
        ],
        "decorators": []
      },
      {
        "name": "HierarchicalTestGenerator",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\test_plan_generator.py",
        "line": 489,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "UniversalHierarchicalTestGenerator",
        "file": "TestMaster\\testmaster\\intelligence\\hierarchical_planning\\unified_integration.py",
        "line": 310,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "BalancedTestObjective",
        "file": "TestMaster\\testmaster\\intelligence\\optimization\\test_optimization_objectives.py",
        "line": 406,
        "methods": [],
        "base_classes": [
          "CompoundObjective"
        ],
        "decorators": []
      },
      {
        "name": "SecurityTestStrategy",
        "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
        "line": 33,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "SecurityTestPlan",
        "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
        "line": 43,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "VulnerabilityTestGenerator",
        "file": "TestMaster\\testmaster\\intelligence\\security\\security_intelligence_agent.py",
        "line": 482,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStrategyType",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "line": 22,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestGenerationThought",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "line": 37,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestStrategyThought",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "line": 63,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestCoverageThought",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "line": 81,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestThoughtGenerator",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "line": 102,
        "methods": [],
        "base_classes": [
          "ThoughtGenerator"
        ],
        "decorators": []
      },
      {
        "name": "TestThoughtEvaluator",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\test_thought_generator.py",
        "line": 577,
        "methods": [],
        "base_classes": [
          "ThoughtEvaluator"
        ],
        "decorators": []
      },
      {
        "name": "UniversalToTTestGenerator",
        "file": "TestMaster\\testmaster\\intelligence\\tree_of_thought\\universal_tot_integration.py",
        "line": 111,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestRelationship",
        "file": "TestMaster\\testmaster\\mapping\\test_mapper.py",
        "line": 38,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestModuleMapping",
        "file": "TestMaster\\testmaster\\mapping\\test_mapper.py",
        "line": 50,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestMapper",
        "file": "TestMaster\\testmaster\\mapping\\test_mapper.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterFileHandler",
        "file": "TestMaster\\testmaster\\monitoring\\file_watcher.py",
        "line": 70,
        "methods": [],
        "base_classes": [
          "FileSystemEventHandler"
        ],
        "decorators": []
      },
      {
        "name": "TestMonitor",
        "file": "TestMaster\\testmaster\\monitoring\\test_monitor.py",
        "line": 58,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPriority",
        "file": "TestMaster\\testmaster\\monitoring\\test_scheduler.py",
        "line": 29,
        "methods": [],
        "base_classes": [
          "IntEnum"
        ],
        "decorators": []
      },
      {
        "name": "TestStatus",
        "file": "TestMaster\\testmaster\\monitoring\\test_scheduler.py",
        "line": 38,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "ScheduledTest",
        "file": "TestMaster\\testmaster\\monitoring\\test_scheduler.py",
        "line": 49,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestScheduler",
        "file": "TestMaster\\testmaster\\monitoring\\test_scheduler.py",
        "line": 88,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFrameworkMapping",
        "file": "TestMaster\\testmaster\\orchestration\\framework_adapter.py",
        "line": 69,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestOutputBundle",
        "file": "TestMaster\\testmaster\\orchestration\\output_system.py",
        "line": 56,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "UniversalTestOrchestrator",
        "file": "TestMaster\\testmaster\\orchestration\\universal_orchestrator.py",
        "line": 272,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "SecurityTestConfig",
        "file": "TestMaster\\testmaster\\security\\security_test_generator.py",
        "line": 82,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SecurityTestSuite",
        "file": "TestMaster\\testmaster\\security\\security_test_generator.py",
        "line": 131,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SecurityTestGenerator",
        "file": "TestMaster\\testmaster\\security\\security_test_generator.py",
        "line": 158,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMasterDashboard",
        "file": "TestMaster\\testmaster\\ui\\dashboard.py",
        "line": 644,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityAnalyzer",
        "file": "TestMaster\\testmaster\\verification\\quality.py",
        "line": 25,
        "methods": [],
        "base_classes": [
          "QualityAnalyzer"
        ],
        "decorators": []
      },
      {
        "name": "SelfHealingTestVerifier",
        "file": "TestMaster\\testmaster\\verification\\self_healing.py",
        "line": 32,
        "methods": [],
        "base_classes": [
          "SelfHealingVerifier"
        ],
        "decorators": []
      },
      {
        "name": "TestAdvancedModels",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 47,
        "methods": [
          "test_ensemble_gradient_boosting",
          "test_neural_architecture_search",
          "test_adaptive_anomaly_detector",
          "test_transfer_learning_adapter",
          "test_create_ml_pipeline"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStatisticalEngine",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 128,
        "methods": [
          "test_bayesian_inference",
          "test_time_series_analyzer",
          "test_multivariate_tester",
          "test_run_statistical_analysis"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPatternDetector",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 217,
        "methods": [
          "test_streaming_pattern_detector",
          "test_sequence_pattern_matcher",
          "test_anomaly_pattern_learner",
          "test_create_pattern_detector"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestForecaster",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 295,
        "methods": [
          "test_adaptive_forecaster",
          "test_real_time_predictor"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIntegration",
        "file": "TestMaster\\tests\\test_intelligence_ml.py",
        "line": 348,
        "methods": [
          "test_ml_to_statistics_pipeline",
          "test_pattern_to_forecast_pipeline"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPhase2CoreValidation",
        "file": "TestMaster\\tests\\test_phase2_core_validation.py",
        "line": 35,
        "methods": [
          "test_claude_test_generator_initialization",
          "test_gemini_test_generator_initialization",
          "test_universal_ai_generator_initialization",
          "test_statistical_coverage_analyzer_initialization",
          "test_coverage_analysis_structure",
          "test_ml_test_optimizer_initialization",
          "test_ml_optimizer_test_analysis",
          "test_quality_analytics_engine_initialization",
          "test_quality_analytics_assessment",
          "test_quality_gate_automation_initialization",
          "test_quality_gate_evaluation",
          "test_predictive_test_failure_initialization",
          "test_failure_prediction_analysis",
          "test_advanced_owasp_tester_initialization",
          "test_api_security_tester_initialization",
          "test_compliance_validator_initialization",
          "test_test_maintenance_system_initialization",
          "test_test_suite_analysis",
          "test_continuous_testing_engine_initialization",
          "test_enterprise_orchestrator_initialization",
          "test_component_integration_compatibility",
          "test_package_imports",
          "test_data_structure_consistency",
          "test_component_performance_benchmarks",
          "test_memory_usage_validation",
          "test_error_handling_robustness",
          "test_configuration_validation"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPhase2EndToEndValidation",
        "file": "TestMaster\\tests\\test_phase2_e2e_validation.py",
        "line": 36,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPhase2IntegrationValidation",
        "file": "TestMaster\\tests\\test_phase2_integration_validation.py",
        "line": 30,
        "methods": [
          "test_quality_analytics_with_security_integration",
          "test_quality_gates_with_automation_integration",
          "test_data_serialization_across_components",
          "test_component_configuration_consistency",
          "test_integration_monitoring_and_metrics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestKnowledgeGraphIntegration",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "line": 44,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAPIIntegration",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "line": 285,
        "methods": [
          "test_status_endpoint",
          "test_chat_endpoint",
          "test_competitive_analysis_endpoint"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEnterpriseIntegration",
        "file": "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "line": 364,
        "methods": [],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestBenchmarkingSuite_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 10,
        "methods": [
          "test_test_run_benchmarks_returns_value",
          "test_test_run_benchmarks_handles_none",
          "test_test_run_benchmarks_empty_list",
          "test_test_set_baseline_returns_value",
          "test_test_set_baseline_handles_none",
          "test_test_get_benchmark_history_returns_value",
          "test_test_get_benchmark_history_handles_none",
          "test_test_get_performance_trends_returns_value",
          "test_test_get_performance_trends_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityInspector_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 84,
        "methods": [
          "test_test_inspect_agent_returns_value",
          "test_test_inspect_agent_handles_none",
          "test_test_inspect_agent_empty_list",
          "test_test_get_inspection_history_returns_value",
          "test_test_get_inspection_history_handles_none",
          "test_test_get_quality_trends_returns_value",
          "test_test_get_quality_trends_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestValidationResult_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "line": 144,
        "methods": [
          "test_test_is_valid_returns_boolean",
          "test_test_get_errors_returns_list",
          "test_test_add_error_handles_string",
          "test_test_clear_errors_removes_all"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestClaudeMessenger_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 10,
        "methods": [
          "test_test_send_message_returns_response",
          "test_test_send_message_handles_empty_string",
          "test_test_get_conversation_history_returns_list",
          "test_test_clear_conversation_clears_history"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgentRouter_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 51,
        "methods": [
          "test_test_route_request_returns_response",
          "test_test_register_agent_adds_agent",
          "test_test_get_available_agents_returns_list",
          "test_test_remove_agent_removes_agent"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMessageQueue_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 92,
        "methods": [
          "test_test_enqueue_adds_message",
          "test_test_dequeue_returns_message",
          "test_test_is_empty_returns_boolean",
          "test_test_size_returns_integer",
          "test_test_clear_empties_queue"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestRateLimiter_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "line": 141,
        "methods": [
          "test_test_is_allowed_returns_boolean",
          "test_test_get_remaining_requests_returns_integer",
          "test_test_reset_key_clears_limits"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestMasterConfig_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 10,
        "methods": [
          "test_test_get_config_returns_dict",
          "test_test_set_config_value_updates_config",
          "test_test_load_from_file_loads_config",
          "test_test_save_to_file_saves_config"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestContextHistory_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 51,
        "methods": [
          "test_test_add_context_adds_entry",
          "test_test_get_context_returns_data",
          "test_test_get_history_returns_list",
          "test_test_clear_history_empties_history"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFeatureFlags_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 93,
        "methods": [
          "test_test_is_enabled_returns_boolean",
          "test_test_enable_feature_enables_flag",
          "test_test_disable_feature_disables_flag",
          "test_test_get_all_flags_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSharedState_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "line": 133,
        "methods": [
          "test_test_get_state_returns_value",
          "test_test_set_state_sets_value",
          "test_test_delete_state_removes_key",
          "test_test_get_all_state_returns_dict",
          "test_test_clear_state_empties_state"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCoverageAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 10,
        "methods": [
          "test_test_analyze_coverage_returns_dict",
          "test_test_get_coverage_report_returns_string",
          "test_test_calculate_line_coverage_returns_float",
          "test_test_calculate_branch_coverage_returns_float",
          "test_test_get_uncovered_lines_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFlowAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 56,
        "methods": [
          "test_test_analyze_flow_returns_dict",
          "test_test_get_flow_graph_returns_object",
          "test_test_detect_bottlenecks_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionFlowAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "line": 88,
        "methods": [
          "test_test_analyze_execution_flow_returns_dict",
          "test_test_get_execution_metrics_returns_dict",
          "test_test_optimize_execution_path_returns_object"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationConfig_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 10,
        "methods": [
          "test_test_get_config_returns_dict",
          "test_test_set_generation_mode_sets_mode"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 36,
        "methods": [
          "test_test_generate_tests_returns_list",
          "test_test_set_strategy_sets_strategy"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationResult_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 61,
        "methods": [
          "test_test_get_generated_tests_returns_list",
          "test_test_add_test_adds_test"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSimpleTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 87,
        "methods": [
          "test_test_generate_simple_tests_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestParameterizedTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 105,
        "methods": [
          "test_test_generate_parameterized_tests_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEdgeCaseTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 123,
        "methods": [
          "test_test_generate_edge_case_tests_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestErrorHandlingTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 141,
        "methods": [
          "test_test_generate_error_tests_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestAssertion_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 159,
        "methods": [
          "test_test_create_assertion_returns_string",
          "test_test_validate_assertion_returns_boolean"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalTest_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 184,
        "methods": [
          "test_test_execute_test_returns_result",
          "test_test_get_test_metadata_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalTestCase_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 209,
        "methods": [
          "test_test_run_test_case_returns_result"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalTestSuite_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 227,
        "methods": [
          "test_test_run_test_suite_returns_results",
          "test_test_add_test_case_adds_case"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestPatternLibrary_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "line": 252,
        "methods": [
          "test_test_get_pattern_returns_string",
          "test_test_add_pattern_adds_pattern"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestDependencyResolver_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 10,
        "methods": [
          "test_test_resolve_dependencies_returns_list",
          "test_test_add_dependency_adds_dependency"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestExecutionRouter_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 35,
        "methods": [
          "test_test_route_execution_returns_result",
          "test_test_register_executor_registers_executor"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestResourceOptimizer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 60,
        "methods": [
          "test_test_optimize_resources_returns_result",
          "test_test_get_resource_usage_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMappingCache_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 85,
        "methods": [
          "test_test_get_cached_value_returns_value",
          "test_test_clear_cache_clears_cache"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestMapper_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 113,
        "methods": [
          "test_test_map_tests_returns_dict",
          "test_test_create_mapping_creates_mapping"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestScheduler_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 138,
        "methods": [
          "test_test_schedule_tests_returns_schedule",
          "test_test_add_test_to_queue_adds_test"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFileTagger_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 164,
        "methods": [
          "test_test_tag_file_adds_tag",
          "test_test_get_tags_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestPriorityQueue_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 189,
        "methods": [
          "test_test_enqueue_with_priority_adds_item",
          "test_test_dequeue_returns_highest_priority",
          "test_test_is_empty_returns_boolean"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestWorkDistributor_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 223,
        "methods": [
          "test_test_distribute_work_returns_assignment",
          "test_test_balance_load_balances_load"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestStructureMapper_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 250,
        "methods": [
          "test_test_map_structure_returns_dict",
          "test_test_analyze_dependencies_returns_graph"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestDataCollector_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 275,
        "methods": [
          "test_test_collect_data_returns_data",
          "test_test_aggregate_data_returns_summary"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestIncrementalEnhancer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 301,
        "methods": [
          "test_test_enhance_incrementally_returns_result",
          "test_test_get_enhancement_history_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFeedbackCollector_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 326,
        "methods": [
          "test_test_collect_feedback_stores_feedback",
          "test_test_get_feedback_summary_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTelemetryCollector_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "line": 351,
        "methods": [
          "test_test_collect_telemetry_collects_data",
          "test_test_get_telemetry_report_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCoverageWidget_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 10,
        "methods": [
          "test_test_render_widget_returns_html",
          "test_test_update_coverage_data_updates_data",
          "test_test_get_widget_config_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityWidget_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 43,
        "methods": [
          "test_test_render_quality_widget_returns_html",
          "test_test_update_quality_metrics_updates_metrics"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSelfHealingVerifier_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 69,
        "methods": [
          "test_test_verify_and_heal_returns_result",
          "test_test_detect_issues_returns_list",
          "test_test_heal_issues_returns_fixed_code"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 105,
        "methods": [
          "test_test_analyze_code_quality_returns_score",
          "test_test_get_quality_report_returns_dict",
          "test_test_identify_quality_issues_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestQualityAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 139,
        "methods": [
          "test_test_analyze_test_quality_returns_score",
          "test_test_evaluate_test_coverage_returns_score",
          "test_test_check_test_completeness_returns_boolean"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSelfHealingTestVerifier_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 174,
        "methods": [
          "test_test_verify_test_syntax_returns_boolean",
          "test_test_auto_fix_test_returns_fixed_code",
          "test_test_validate_test_logic_returns_boolean",
          "test_test_enhance_test_assertions_returns_enhanced_code"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestWorkflowGraph_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 217,
        "methods": [
          "test_test_add_node_adds_node",
          "test_test_add_edge_adds_edge",
          "test_test_get_execution_order_returns_list",
          "test_test_validate_graph_returns_boolean"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalAST_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 258,
        "methods": [
          "test_test_parse_code_returns_ast",
          "test_test_extract_functions_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalASTAbstractor_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 285,
        "methods": [
          "test_test_abstract_ast_returns_abstraction"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSemanticAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "line": 304,
        "methods": [
          "test_test_analyze_semantics_returns_analysis",
          "test_test_extract_semantic_features_returns_features"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationThought_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 10,
        "methods": [
          "test_test_generate_thought_returns_dict",
          "test_test_evaluate_thought_returns_score"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestStrategyThought_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 36,
        "methods": [
          "test_test_strategy_thought_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestCoverageThought_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 54,
        "methods": [
          "test_test_coverage_thought_returns_dict"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestThoughtEvaluator_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 72,
        "methods": [
          "test_test_evaluate_thought_quality_returns_score",
          "test_test_rank_thoughts_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEvaluationCriteria_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 102,
        "methods": [
          "test_test_get_criteria_returns_dict",
          "test_test_set_weight_sets_criterion_weight"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestThoughtNode_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 128,
        "methods": [
          "test_test_add_child_adds_child_node",
          "test_test_get_depth_returns_integer",
          "test_test_is_leaf_returns_boolean"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestThoughtTree_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 161,
        "methods": [
          "test_test_build_tree_builds_structure",
          "test_test_traverse_tree_returns_list",
          "test_test_find_best_path_returns_path"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestThoughtEvaluator_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 194,
        "methods": [
          "test_test_evaluate_returns_score"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTreeOfThoughtReasoner_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 213,
        "methods": [
          "test_test_reason_returns_solution",
          "test_test_generate_thoughts_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSimpleThoughtEvaluator_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 240,
        "methods": [
          "test_test_simple_evaluate_returns_score"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestToTGenerationConfig_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 259,
        "methods": [
          "test_test_get_tot_config_returns_dict",
          "test_test_set_depth_limit_sets_limit"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestToTGenerationResult_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "line": 285,
        "methods": [
          "test_test_get_best_solution_returns_solution",
          "test_test_get_all_solutions_returns_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "Testbatch_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 10,
        "methods": [
          "test_test_main_returns_value",
          "test_test_convert_module_returns_value",
          "test_test_convert_module_handles_none",
          "test_test_convert_broken_tests_returns_value",
          "test_test_convert_broken_tests_handles_none",
          "test_test_convert_by_priority_returns_value",
          "test_test_convert_by_priority_handles_none",
          "test_test_convert_by_priority_empty_list",
          "test_test_convert_week_range_returns_value",
          "test_test_convert_week_range_handles_none",
          "test_test_convert_incremental_save_returns_value",
          "test_test_convert_incremental_save_handles_none",
          "test_test_convert_incremental_save_empty_list"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "Testconfig_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 83,
        "methods": [
          "test_test_get_returns_value",
          "test_test_get_handles_none",
          "test_test_set_returns_value",
          "test_test_set_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestMasterConfig_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 111,
        "methods": [
          "test_test_get_returns_value",
          "test_test_get_handles_none",
          "test_test_set_returns_value",
          "test_test_set_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestContextHistory_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 138,
        "methods": [
          "test_test_add_snapshot_returns_value",
          "test_test_add_snapshot_handles_none",
          "test_test_get_recent_returns_value",
          "test_test_get_recent_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestFeatureFlags_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "line": 165,
        "methods": [
          "test_test_initialize_returns_value",
          "test_test_initialize_handles_none",
          "test_test_is_enabled_returns_value",
          "test_test_is_enabled_handles_none",
          "test_test_get_config_returns_value",
          "test_test_get_config_handles_none",
          "test_test_enable_returns_value",
          "test_test_enable_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestBenchmarkingSuite_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 10,
        "methods": [
          "test_test_run_benchmarks_returns_value",
          "test_test_run_benchmarks_handles_none",
          "test_test_run_benchmarks_empty_list",
          "test_test_set_baseline_returns_value",
          "test_test_set_baseline_handles_none",
          "test_test_get_benchmark_history_returns_value",
          "test_test_get_benchmark_history_handles_none",
          "test_test_get_performance_trends_returns_value",
          "test_test_get_performance_trends_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityInspector_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 62,
        "methods": [
          "test_test_inspect_agent_returns_value",
          "test_test_inspect_agent_handles_none",
          "test_test_inspect_agent_empty_list",
          "test_test_get_inspection_history_returns_value",
          "test_test_get_inspection_history_handles_none",
          "test_test_get_quality_trends_returns_value",
          "test_test_get_quality_trends_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestValidationResult_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 104,
        "methods": [
          "test_test_add_issue_returns_value",
          "test_test_add_issue_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestCoverageAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "line": 121,
        "methods": [
          "test_test_run_full_analysis_returns_value",
          "test_test_run_full_analysis_handles_none",
          "test_test_get_uncovered_functions_returns_value",
          "test_test_get_uncovered_functions_handles_none",
          "test_test_save_report_returns_value",
          "test_test_save_report_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalAST_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 10,
        "methods": [
          "test_test_get_all_functions_returns_value",
          "test_test_get_all_functions_handles_none",
          "test_test_get_all_classes_returns_value",
          "test_test_get_all_classes_handles_none",
          "test_test_find_function_returns_value",
          "test_test_find_function_handles_none",
          "test_test_find_class_returns_value",
          "test_test_find_class_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestUniversalASTAbstractor_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 57,
        "methods": [
          "test_test_create_universal_ast_returns_value",
          "test_test_create_universal_ast_handles_none",
          "test_test_create_universal_ast_raises_valueerror",
          "test_test_create_project_ast_returns_value",
          "test_test_create_project_ast_handles_none",
          "test_test_create_project_ast_raises_valueerror"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSemanticAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 96,
        "methods": [
          "test_test_analyze_returns_value",
          "test_test_analyze_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationConfig_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 113,
        "methods": [
          "test_test_to_dict_returns_value",
          "test_test_to_dict_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 130,
        "methods": [
          "test_test_generate_tests_returns_value",
          "test_test_generate_tests_handles_none",
          "test_test_generate_tests_raises_notimplementederror"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestGenerationResult_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 153,
        "methods": [
          "test_test_to_dict_returns_value",
          "test_test_to_dict_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSimpleTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 170,
        "methods": [
          "test_test_generate_tests_returns_value",
          "test_test_generate_tests_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestParameterizedTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 187,
        "methods": [
          "test_test_generate_tests_returns_value",
          "test_test_generate_tests_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestEdgeCaseTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 204,
        "methods": [
          "test_test_generate_tests_returns_value",
          "test_test_generate_tests_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestErrorHandlingTestStrategy_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 221,
        "methods": [
          "test_test_generate_tests_returns_value",
          "test_test_generate_tests_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSelfHealingVerifier_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 238,
        "methods": [
          "test_test_verify_and_heal_returns_value",
          "test_test_verify_and_heal_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestQualityAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 255,
        "methods": [
          "test_test_analyze_returns_value",
          "test_test_analyze_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTestQualityAnalyzer_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 272,
        "methods": [
          "test_test_analyze_test_quality_returns_value",
          "test_test_analyze_test_quality_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSelfHealingTestVerifier_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "line": 289,
        "methods": [
          "test_test_verify_and_heal_test_returns_value",
          "test_test_verify_and_heal_test_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestClaudeMessenger_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 10,
        "methods": [
          "test_test_start_monitoring_returns_value",
          "test_test_start_monitoring_handles_none",
          "test_test_stop_monitoring_returns_value",
          "test_test_stop_monitoring_handles_none",
          "test_test_send_status_update_returns_value",
          "test_test_send_status_update_handles_none",
          "test_test_send_status_update_empty_list",
          "test_test_send_breaking_test_alert_returns_value",
          "test_test_send_breaking_test_alert_handles_none",
          "test_test_send_breaking_test_alert_empty_list",
          "test_test_send_idle_module_alert_returns_value",
          "test_test_send_idle_module_alert_handles_none",
          "test_test_send_idle_module_alert_empty_list",
          "test_test_send_coverage_gap_report_returns_value",
          "test_test_send_coverage_gap_report_handles_none",
          "test_test_send_coverage_gap_report_empty_list",
          "test_test_send_system_alert_returns_value",
          "test_test_send_system_alert_handles_none",
          "test_test_get_sent_messages_returns_value",
          "test_test_get_sent_messages_handles_none",
          "test_test_get_received_directives_returns_value",
          "test_test_get_received_directives_handles_none",
          "test_test_get_pending_acknowledgments_returns_value",
          "test_test_get_pending_acknowledgments_handles_none",
          "test_test_mark_message_acknowledged_returns_value",
          "test_test_mark_message_acknowledged_handles_none",
          "test_test_get_communication_statistics_returns_value",
          "test_test_get_communication_statistics_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestAgentRouter_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 157,
        "methods": [
          "test_test_route_message_returns_value",
          "test_test_route_message_handles_none",
          "test_test_get_agent_capability_returns_value",
          "test_test_get_agent_capability_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestMessageQueue_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "line": 184,
        "methods": [
          "test_test_start_returns_value",
          "test_test_start_handles_none",
          "test_test_stop_returns_value",
          "test_test_stop_handles_none",
          "test_test_send_message_returns_value",
          "test_test_send_message_handles_none",
          "test_test_send_message_raises_runtimeerror",
          "test_test_acknowledge_message_returns_value",
          "test_test_acknowledge_message_handles_none",
          "test_test_get_message_status_returns_value",
          "test_test_get_message_status_handles_none",
          "test_test_get_conversation_history_returns_value",
          "test_test_get_conversation_history_handles_none",
          "test_test_get_queue_statistics_returns_value",
          "test_test_get_queue_statistics_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestSharedState_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 10,
        "methods": [
          "test_test_set_returns_value",
          "test_test_set_handles_none",
          "test_test_get_returns_value",
          "test_test_get_handles_none",
          "test_test_increment_returns_value",
          "test_test_increment_handles_none",
          "test_test_append_returns_value",
          "test_test_append_handles_none",
          "test_test_update_dict_returns_value",
          "test_test_update_dict_handles_none",
          "test_test_delete_returns_value",
          "test_test_delete_handles_none",
          "test_test_exists_returns_value",
          "test_test_exists_handles_none",
          "test_test_keys_returns_value",
          "test_test_keys_handles_none",
          "test_test_clear_returns_value",
          "test_test_clear_handles_none",
          "test_test_get_stats_returns_value",
          "test_test_get_stats_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestWorkflowGraph_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "line": 117,
        "methods": [
          "test_test_add_node_returns_value",
          "test_test_add_node_handles_none",
          "test_test_add_node_empty_list",
          "test_test_add_node_raises_valueerror",
          "test_test_add_edge_returns_value",
          "test_test_add_edge_handles_none",
          "test_test_add_conditional_edge_returns_value",
          "test_test_add_conditional_edge_handles_none",
          "test_test_invoke_returns_value",
          "test_test_invoke_handles_none",
          "test_test_ainvoke_returns_value",
          "test_test_ainvoke_handles_none",
          "test_test_get_workflow_statistics_returns_value",
          "test_test_get_workflow_statistics_handles_none",
          "test_test_get_execution_status_returns_value",
          "test_test_get_execution_status_handles_none",
          "test_test_cancel_execution_returns_value",
          "test_test_cancel_execution_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestTagReader_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 10,
        "methods": [
          "test_test_scan_all_files_returns_value",
          "test_test_scan_all_files_handles_none",
          "test_test_scan_file_returns_value",
          "test_test_scan_file_handles_none",
          "test_test_get_modules_with_tag_returns_value",
          "test_test_get_modules_with_tag_handles_none",
          "test_test_get_modules_by_status_returns_value",
          "test_test_get_modules_by_status_handles_none",
          "test_test_get_modules_by_owner_returns_value",
          "test_test_get_modules_by_owner_handles_none",
          "test_test_get_test_modules_covering_returns_value",
          "test_test_get_test_modules_covering_handles_none",
          "test_test_get_modules_with_testmaster_tag_returns_value",
          "test_test_get_modules_with_testmaster_tag_handles_none",
          "test_test_get_high_priority_modules_returns_value",
          "test_test_get_high_priority_modules_handles_none",
          "test_test_get_modules_needing_coverage_returns_value",
          "test_test_get_modules_needing_coverage_handles_none",
          "test_test_update_module_tag_returns_value",
          "test_test_update_module_tag_handles_none",
          "test_test_add_tag_to_file_returns_value",
          "test_test_add_tag_to_file_handles_none",
          "test_test_get_tag_statistics_returns_value",
          "test_test_get_tag_statistics_handles_none",
          "test_test_export_tag_report_returns_value",
          "test_test_export_tag_report_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestRateLimiter_Tests",
        "file": "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "line": 147,
        "methods": [
          "test_test_wait_if_needed_returns_value",
          "test_test_wait_if_needed_handles_none"
        ],
        "base_classes": [],
        "decorators": []
      },
      {
        "name": "TestGenerationMode",
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "line": 47,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestFramework",
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "line": 58,
        "methods": [],
        "base_classes": [
          "Enum"
        ],
        "decorators": []
      },
      {
        "name": "TestGenerationConfig",
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "line": 67,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerationResult",
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "line": 83,
        "methods": [],
        "base_classes": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "TestGenerationMaster",
        "file": "TestMaster\\unified_tools\\test_generation_master.py",
        "line": 96,
        "methods": [],
        "base_classes": [],
        "decorators": []
      }
    ],
    "testing_frameworks": {
      "unittest": 221,
      "pytest": 242,
      "mock": 180,
      "nose": 2,
      "doctest": 1,
      "hypothesis": 1,
      "faker": 1,
      "factory_boy": 1,
      "responses": 1
    },
    "assertion_patterns": {
      "assertIsNotNone": 62,
      "assertTrue": 57,
      "assertIn": 146,
      "assertNotIn": 4,
      "assertGreater": 128,
      "assertEqual": 113,
      "assertFalse": 22,
      "assertLess": 35,
      "assertLessEqual": 3,
      "assertGreaterEqual": 7,
      "assertIsInstance": 13,
      "assert_called_once": 5
    },
    "mock_usage": {
      "improve_mock_behavior": 4,
      "add_mock_helpers": 4,
      "Patch": 1,
      "_count_mocks": 1,
      "_generate_mock_test": 3,
      "_generate_mock_tests": 3,
      "fix_mock_issues": 3,
      "_dispatch_step_execution": 1,
      "_mock_api_call": 4,
      "_mock_workflow_execution": 1,
      "_mock_dependency_validation": 1,
      "_mock_task_execution": 1,
      "_mock_error_handling": 1,
      "_mock_protocol_adapter_test": 1,
      "_mock_data_transformation": 1,
      "_mock_message_routing": 1,
      "_mock_enterprise_pattern": 1,
      "_mock_service_discovery": 1,
      "_mock_distributed_locking": 1,
      "_mock_resource_coordination": 1,
      "_mock_load_balancer_request": 1,
      "_get_mock_metrics": 2,
      "_initialize_mock_components": 2,
      "_create_mock_module_set": 14,
      "_uses_mocking": 2,
      "MockAgent": 4,
      "MockMessage": 6,
      "MockSequentialPipeline": 2,
      "MockModel": 4,
      "MockReActAgent": 4,
      "MockFormatter": 2,
      "MockEmbeddingCache": 6,
      "MockTool": 6,
      "MockToolkit": 2,
      "create_mock_guardrail": 4,
      "MockGraph": 2,
      "MockDatabase": 12,
      "MockNode": 34,
      "MockEdge": 36,
      "MockPath": 2,
      "MockConstraint": 6,
      "MockIndex": 10,
      "MockProfiler": 4,
      "_generate_mock_chart": 12,
      "_create_mock_result": 6,
      "create_mock_media_file": 4,
      "create_mock_database": 6,
      "create_mock_graph": 8,
      "create_mock_event": 4,
      "_create_mock_codebase": 2,
      "_mock_ingest_codebase": 2,
      "_mock_parse_languages": 2,
      "_mock_build_graph": 2,
      "_mock_ai_analysis": 2,
      "_mock_generate_visualization": 2,
      "_mock_start_monitoring": 2,
      "_mock_detect_change": 2,
      "_mock_update_graph": 2,
      "_mock_analyze_impact": 2,
      "_mock_process_nl_query": 2,
      "_mock_semantic_search": 2,
      "_mock_rank_results": 2,
      "_mock_generate_response": 2,
      "_mock_present_results": 2,
      "_mock_security_scan": 2,
      "_mock_ai_vulnerability_analysis": 2,
      "_mock_predict_zero_days": 2,
      "_mock_generate_fixes": 2,
      "_mock_create_security_report": 2,
      "_mock_analyze_for_testing": 2,
      "_mock_generate_tests": 2,
      "_mock_self_heal_tests": 2,
      "_mock_execute_tests": 2,
      "_mock_calculate_coverage": 2,
      "_mock_test_integration": 2,
      "create_mock_structured_models": 4,
      "_analyze_mock_dependencies": 2,
      "_count_mocks_in_test": 1,
      "_detect_mock_smells": 1,
      "_dispatch_event": 1,
      "_create_mock_archive_system": 1
    },
    "framework_imports": {
      "pytest": [
        "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_state_workflow.py",
        "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "TestMaster\\core\\testing\\user_input_testing.py",
        "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "TestMaster\\core\\testing\\tracing_testing.py",
        "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_infrastructure.py",
        "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "TestMaster\\core\\testing\\hook_testing.py",
        "TestMaster\\core\\testing\\graph_operations_testing.py",
        "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "TestMaster\\core\\testing\\communication_testing.py",
        "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "TestMaster\\tests\\test_phase2_integration_validation.py",
        "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "TestMaster\\archive\\original_backup\\src\\comprehensive_test_framework.py",
        "TestMaster\\core\\domains\\testing\\run_all_tests.py",
        "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_benchmarking_quality.py",
        "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "TestMaster\\core\\testing\\session_testing.py",
        "TestMaster\\archive\\legacy_scripts\\comprehensive_test_framework.py",
        "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_comprehensive_remaining.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_communication.py",
        "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "TestMaster\\core\\testing\\thread_retry_testing.py",
        "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_generation.py",
        "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "TestMaster\\core\\testing\\formatter_testing.py",
        "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "TestMaster\\core\\domains\\testing\\flow_testing.py",
        "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "TestMaster\\core\\intelligence\\testing\\patterns\\agency_swarm_patterns.py",
        "TestMaster\\core\\testing\\response_validation_testing.py",
        "TestMaster\\core\\testing\\graph_vector_testing.py",
        "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_batch_config.py",
        "TestMaster\\core\\testing\\graph_index_testing.py",
        "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "TestMaster\\core\\testing\\run_all_tests.py",
        "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_thought_processing.py",
        "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "TestMaster\\core\\domains\\testing\\async_sync_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_messaging_communication.py",
        "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\uncategorized\\test_tagging_ratelimiting.py",
        "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "TestMaster\\core\\testing\\tool_factory_testing.py",
        "TestMaster\\core\\testing\\pipeline_testing.py",
        "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "TestMaster\\core\\domains\\testing\\session_testing.py",
        "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "TestMaster\\core\\testing\\react_agent_testing.py",
        "TestMaster\\core\\testing\\test_integration_hub.py",
        "TestMaster\\core\\testing\\flow_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_quality_verification.py",
        "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_coverage_analysis.py",
        "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_benchmarking_quality.py",
        "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "TestMaster\\tests\\modularized\\misc_split\\modules\\test_configuration.py",
        "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "TestMaster\\tests\\test_phase2_core_validation.py",
        "TestMaster\\core\\domains\\testing\\graph_async_testing.py",
        "TestMaster\\core\\testing\\async_sync_testing.py",
        "TestMaster\\src\\comprehensive_test_framework.py",
        "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "TestMaster\\tests\\test_phase2_e2e_validation.py",
        "TestMaster\\core\\testing\\graph_async_testing.py",
        "TestMaster\\core\\testing\\tool_testing.py",
        "TestMaster\\core\\testing\\graph_performance_testing.py",
        "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py"
      ],
      "unittest": [
        "TestMaster\\core\\testing\\multimodal_validation_testing.py",
        "TestMaster\\core\\domains\\testing\\crew_thread_safety_testing.py",
        "TestMaster\\core\\domains\\testing\\test_ai_code_exploration.py",
        "TestMaster\\core\\testing\\user_input_testing.py",
        "TestMaster\\core\\domains\\testing\\agent_reasoning_testing.py",
        "TestMaster\\core\\testing\\tracing_testing.py",
        "TestMaster\\core\\testing\\test_knowledge_graph_engine.py",
        "TestMaster\\core\\testing\\enterprise_test_framework.py",
        "TestMaster\\core\\domains\\testing\\graph_vector_testing.py",
        "TestMaster\\core\\domains\\testing\\pipeline_testing.py",
        "TestMaster\\core\\testing\\hook_testing.py",
        "TestMaster\\core\\testing\\graph_operations_testing.py",
        "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "TestMaster\\core\\domains\\testing\\graph_performance_testing.py",
        "TestMaster\\core\\domains\\testing\\user_input_testing.py",
        "TestMaster\\core\\testing\\communication_testing.py",
        "TestMaster\\core\\domains\\testing\\graph_operations_testing.py",
        "TestMaster\\tests\\test_phase2_integration_validation.py",
        "TestMaster\\core\\domains\\testing\\tracing_testing.py",
        "TestMaster\\archive\\original_backup\\src\\comprehensive_test_framework.py",
        "TestMaster\\core\\domains\\testing\\run_all_tests.py",
        "TestMaster\\core\\domains\\testing\\formatter_testing.py",
        "TestMaster\\core\\testing\\session_testing.py",
        "TestMaster\\archive\\legacy_scripts\\comprehensive_test_framework.py",
        "TestMaster\\core\\testing\\crew_thread_safety_testing.py",
        "TestMaster\\core\\domains\\testing\\communication_testing.py",
        "TestMaster\\core\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "TestMaster\\core\\testing\\thread_retry_testing.py",
        "TestMaster\\core\\domains\\testing\\graph_constraints_testing.py",
        "TestMaster\\core\\domains\\testing\\react_agent_testing.py",
        "TestMaster\\core\\domains\\testing\\testmaster_api_gateway.py",
        "TestMaster\\core\\testing\\test_multi_language_superiority.py",
        "TestMaster\\core\\testing\\graph_constraints_testing.py",
        "TestMaster\\core\\testing\\task_guardrails_testing.py",
        "TestMaster\\core\\testing\\formatter_testing.py",
        "TestMaster\\core\\testing\\langgraph_supervisor_testing.py",
        "TestMaster\\core\\domains\\testing\\enterprise_test_framework.py",
        "TestMaster\\core\\domains\\testing\\langgraph_supervisor_testing.py",
        "TestMaster\\core\\testing\\hallucination_guardrail_testing.py",
        "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\agentscope_patterns.py",
        "TestMaster\\core\\testing\\response_validation_testing.py",
        "TestMaster\\core\\testing\\graph_vector_testing.py",
        "TestMaster\\tests\\integration\\test_knowledge_graph_integration.py",
        "TestMaster\\core\\testing\\test_ai_code_exploration.py",
        "TestMaster\\core\\testing\\graph_index_testing.py",
        "TestMaster\\core\\domains\\testing\\thread_retry_testing.py",
        "TestMaster\\core\\testing\\run_all_tests.py",
        "TestMaster\\core\\testing\\repository_intelligence_aggregator.py",
        "TestMaster\\core\\testing\\distributed_test_coordinator.py",
        "TestMaster\\core\\domains\\testing\\graph_index_testing.py",
        "TestMaster\\core\\domains\\testing\\test_zero_setup_domination.py",
        "TestMaster\\core\\domains\\testing\\collaborative_testing_platform.py",
        "TestMaster\\core\\testing\\test_zero_setup_domination.py",
        "TestMaster\\core\\domains\\testing\\test_integration_hub.py",
        "TestMaster\\core\\testing\\tool_factory_testing.py",
        "TestMaster\\core\\testing\\pipeline_testing.py",
        "TestMaster\\core\\domains\\testing\\repository_intelligence_aggregator.py",
        "TestMaster\\core\\domains\\testing\\session_testing.py",
        "TestMaster\\core\\domains\\testing\\test_multi_language_superiority.py",
        "TestMaster\\core\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "TestMaster\\core\\testing\\test_ui_interface_superiority.py",
        "TestMaster\\core\\testing\\testmaster_api_gateway.py",
        "TestMaster\\core\\testing\\react_agent_testing.py",
        "TestMaster\\core\\testing\\test_integration_hub.py",
        "TestMaster\\core\\testing\\integration_test_framework.py",
        "TestMaster\\core\\domains\\testing\\tool_testing.py",
        "TestMaster\\core\\testing\\agent_reasoning_testing.py",
        "TestMaster\\core\\domains\\testing\\test_ui_interface_superiority.py",
        "TestMaster\\core\\domains\\testing\\hook_testing.py",
        "TestMaster\\core\\domains\\testing\\response_validation_testing.py",
        "TestMaster\\core\\testing\\unified_test_orchestrator.py",
        "TestMaster\\core\\domains\\testing\\test_knowledge_graph_engine.py",
        "TestMaster\\core\\domains\\testing\\tool_factory_testing.py",
        "TestMaster\\core\\domains\\testing\\multimodal_validation_testing.py",
        "TestMaster\\core\\domains\\testing\\hallucination_guardrail_testing.py",
        "TestMaster\\core\\domains\\intelligence\\testing\\patterns\\falkordb_patterns.py",
        "TestMaster\\core\\domains\\testing\\task_guardrails_testing.py",
        "TestMaster\\tests\\test_phase2_core_validation.py",
        "TestMaster\\core\\domains\\testing\\integration_test_framework.py",
        "TestMaster\\tests\\test_intelligence_ml.py",
        "TestMaster\\core\\domains\\testing\\graph_async_testing.py",
        "TestMaster\\core\\intelligence\\testing\\patterns\\crewai_patterns.py",
        "TestMaster\\src\\comprehensive_test_framework.py",
        "TestMaster\\core\\testing\\collaborative_testing_platform.py",
        "TestMaster\\core\\domains\\testing\\unified_test_orchestrator.py",
        "TestMaster\\tests\\test_phase2_e2e_validation.py",
        "TestMaster\\core\\testing\\graph_async_testing.py",
        "TestMaster\\core\\testing\\tool_testing.py",
        "TestMaster\\core\\testing\\graph_performance_testing.py",
        "TestMaster\\core\\domains\\testing\\distributed_test_coordinator.py"
      ]
    }
  }
}